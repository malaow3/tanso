import { createRequire } from "node:module";
var __create = Object.create;
var __getProtoOf = Object.getPrototypeOf;
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __moduleCache = /* @__PURE__ */ new WeakMap;
var __toCommonJS = (from) => {
  var entry = __moduleCache.get(from), desc;
  if (entry)
    return entry;
  entry = __defProp({}, "__esModule", { value: true });
  if (from && typeof from === "object" || typeof from === "function")
    __getOwnPropNames(from).map((key) => !__hasOwnProp.call(entry, key) && __defProp(entry, key, {
      get: () => from[key],
      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
    }));
  __moduleCache.set(from, entry);
  return entry;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};
var __esm = (fn, res) => () => (fn && (res = fn(fn = 0)), res);
var __require = /* @__PURE__ */ createRequire(import.meta.url);

// ../pokemon-showdown/dist/lib/dashycode.js
var require_dashycode = __commonJS((exports, module) => {
  function streamWrite(stream2, writeBufLength, writeBuf) {
    stream2.buf += writeBuf << stream2.bufLength;
    stream2.bufLength += writeBufLength;
    while (stream2.bufLength >= 5) {
      stream2.codeBuf += CODE_MAP.charAt(stream2.buf & 31);
      stream2.buf >>= 5;
      stream2.bufLength -= 5;
    }
  }
  function streamGetCode(stream2) {
    const buf = stream2.codeBuf + CODE_MAP.charAt(stream2.buf);
    let end2Len = 0;
    while (buf.charAt(buf.length - 1 - end2Len) === "2")
      end2Len++;
    return end2Len ? buf.slice(0, -end2Len) : buf;
  }
  function streamPeek(stream2, readLength, readMask = 65535 >> 16 - readLength) {
    while (stream2.bufLength < readLength && stream2.codeBuf.length) {
      const next5Bits = CODE_MAP.indexOf(stream2.codeBuf.charAt(0));
      if (next5Bits < 0)
        throw new Error("Invalid character in coded buffer");
      stream2.codeBuf = stream2.codeBuf.slice(1);
      stream2.buf += next5Bits << stream2.bufLength;
      stream2.bufLength += 5;
    }
    return stream2.buf & readMask;
  }
  function streamRead(stream2, readLength, readMask = 65535 >> 16 - readLength) {
    const output = streamPeek(stream2, readLength, readMask);
    stream2.buf >>= readLength;
    stream2.bufLength -= readLength;
    return output;
  }
  function encode(str, allowCaps = false) {
    if (!str)
      return "0--0";
    let safePart = "";
    const unsafeStream = {
      codeBuf: "",
      buf: 0,
      bufLength: 0
    };
    let isSafe = true;
    let alphaIndex = 0;
    let capBuffer = 0;
    for (let i = 0;i < str.length + 1; i++) {
      let curCharCode = i !== str.length ? str.charCodeAt(i) : -1;
      const isLowercase = 97 <= curCharCode && curCharCode <= 122;
      const isUppercase = 65 <= curCharCode && curCharCode <= 90;
      const isNumeric = 48 <= curCharCode && curCharCode <= 57;
      if (capBuffer && (!(isLowercase || isUppercase || isNumeric) || alphaIndex >= 8 || i === str.length)) {
        if (capBuffer === 13) {
          streamWrite(unsafeStream, 3, 1);
        } else {
          streamWrite(unsafeStream, 11, capBuffer);
        }
        alphaIndex -= 8;
        capBuffer = 0;
      }
      if (i === str.length)
        break;
      if (isLowercase || isUppercase || isNumeric) {
        if (alphaIndex < 0)
          throw new Error("alphaIndex should be non-negative here");
        if (!isSafe) {
          if (capBuffer)
            throw new Error("capBuffer shouldn't exist here");
          streamWrite(unsafeStream, 2, 0);
          isSafe = true;
        }
        if (isUppercase && !allowCaps) {
          safePart += String.fromCharCode(curCharCode + 32);
          while (alphaIndex >= 8) {
            if (capBuffer)
              throw new Error("capBuffer shouldn't exist here");
            alphaIndex -= 8;
            streamWrite(unsafeStream, 11, 5);
          }
          if (!capBuffer)
            capBuffer = 5;
          capBuffer += 1 << alphaIndex + 3;
        } else {
          safePart += str.charAt(i);
        }
        if (isUppercase || isLowercase)
          alphaIndex++;
        continue;
      }
      if (capBuffer)
        throw new Error("capBuffer shouldn't exist here");
      alphaIndex = 0;
      if (isSafe && curCharCode === 32) {
        const nextCharCode = str.charCodeAt(i + 1);
        if (97 <= nextCharCode && nextCharCode <= 122 || 65 <= nextCharCode && nextCharCode <= 90 || 48 <= nextCharCode && nextCharCode <= 57) {
          safePart += "-";
          streamWrite(unsafeStream, 2, 0);
          continue;
        }
      }
      if (isSafe) {
        safePart += "-";
        isSafe = false;
      }
      let unsafeMapIndex = -1;
      if (curCharCode === -1) {
        streamWrite(unsafeStream, 2, 0);
      } else if (curCharCode === 32) {
        streamWrite(unsafeStream, 3, 3);
      } else if ((unsafeMapIndex = UNSAFE_MAP.indexOf(str.charAt(i))) >= 0) {
        curCharCode = (unsafeMapIndex << 2) + 2;
        streamWrite(unsafeStream, 7, curCharCode);
      } else {
        curCharCode = (curCharCode << 3) + 7;
        streamWrite(unsafeStream, 19, curCharCode);
      }
    }
    let unsafePart = streamGetCode(unsafeStream);
    if (safePart.startsWith("-")) {
      safePart = safePart.slice(1);
      unsafePart = unsafePart + "2";
    }
    if (safePart.endsWith("-")) {
      safePart = safePart.slice(0, -1);
    }
    if (!safePart) {
      safePart = "0";
      unsafePart = "0" + unsafePart;
      if (unsafePart.endsWith("2"))
        unsafePart = unsafePart.slice(0, -1);
    }
    if (!unsafePart)
      return safePart;
    return safePart + "--" + unsafePart;
  }
  function decode(codedStr) {
    let str = "";
    let lastDashIndex = codedStr.lastIndexOf("--");
    if (lastDashIndex < 0) {
      return codedStr.replace(/-/g, " ");
    }
    if (codedStr.charAt(lastDashIndex + 2) === "0") {
      if (!codedStr.startsWith("0") || lastDashIndex !== 1) {
        throw new Error("Invalid Dashycode");
      }
      lastDashIndex -= 1;
      codedStr = "--" + codedStr.slice(4);
    }
    if (codedStr.endsWith("2")) {
      codedStr = "-" + codedStr.slice(0, -1);
      lastDashIndex += 1;
    }
    const unsafeStream = {
      codeBuf: codedStr.slice(lastDashIndex + 2),
      buf: 0,
      bufLength: 0
    };
    let capBuffer = 1;
    for (let i = 0;i < lastDashIndex + 1; i++) {
      let curChar = codedStr.charAt(i);
      if (curChar !== "-") {
        const curCharCode = codedStr.charCodeAt(i);
        const isLowercase = 97 <= curCharCode && curCharCode <= 122;
        if (isLowercase) {
          if (capBuffer === 1) {
            capBuffer = 0;
            if (streamPeek(unsafeStream, 2, 3) === 1) {
              switch (streamRead(unsafeStream, 3, 7)) {
                case 5:
                  capBuffer = streamRead(unsafeStream, 8, 255) + 256;
                  break;
                case 1:
                  capBuffer = 257;
                  break;
              }
            }
          }
          const toCapitalize = capBuffer & 1;
          capBuffer >>= 1;
          if (toCapitalize) {
            curChar = String.fromCharCode(curCharCode - 32);
          }
        }
        str += curChar;
      } else {
        capBuffer = 1;
        let isEmpty = true;
        do {
          switch (streamRead(unsafeStream, 2, 3)) {
            case 0:
              curChar = "";
              break;
            case 1:
              throw new Error("Invalid capitalization token");
            case 2:
              curChar = UNSAFE_MAP.charAt(streamRead(unsafeStream, 5, 31));
              isEmpty = false;
              break;
            case 3:
              if (streamRead(unsafeStream, 1, 1)) {
                curChar = String.fromCharCode(streamRead(unsafeStream, 16, 65535));
              } else {
                curChar = " ";
              }
              isEmpty = false;
              break;
          }
          str += curChar;
        } while (curChar);
        if (isEmpty && i !== lastDashIndex)
          str += " ";
      }
    }
    return str;
  }
  function vizStream(codeBuf, translate = true) {
    let spacedStream = "";
    if (codeBuf.startsWith("0")) {
      codeBuf = codeBuf.slice(1);
      spacedStream = " [no safe chars]" + spacedStream;
    }
    if (codeBuf.endsWith("2")) {
      codeBuf = codeBuf.slice(0, -1);
      spacedStream = " [start unsafe]" + spacedStream;
    }
    const stream2 = {
      codeBuf,
      buf: 0,
      bufLength: 0
    };
    function vizBlock(s, bufLen) {
      const buf = streamRead(s, bufLen);
      return buf.toString(2).padStart(bufLen, "0");
    }
    while (stream2.bufLength > 0 || stream2.codeBuf) {
      switch (streamRead(stream2, 2)) {
        case 0:
          spacedStream = (translate ? " |" : " 00") + spacedStream;
          break;
        case 1:
          if (streamRead(stream2, 1)) {
            spacedStream = " " + vizBlock(stream2, 8) + (translate ? "-cap" : "_1_01") + spacedStream;
          } else {
            spacedStream = (translate ? " capfirst" : " 0_01") + spacedStream;
          }
          break;
        case 2:
          spacedStream = " " + vizBlock(stream2, 5) + (translate ? "-ascii" : "_10") + spacedStream;
          break;
        case 3:
          if (streamRead(stream2, 1)) {
            spacedStream = " " + vizBlock(stream2, 16) + (translate ? "-utf" : "_1_11") + spacedStream;
          } else {
            spacedStream = (translate ? " space" : " 0_11") + spacedStream;
          }
          break;
      }
    }
    return spacedStream;
  }
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var dashycode_exports = {};
  __export2(dashycode_exports, {
    decode: () => decode,
    encode: () => encode,
    vizStream: () => vizStream
  });
  module.exports = __toCommonJS2(dashycode_exports);
  var CODE_MAP = "23456789abcdefghijkmnpqrstuvwxyz";
  var UNSAFE_MAP = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/fetch/cookies.js
var require_cookies = __commonJS((exports, module) => {
  var urllib = __require("url");
  var SESSION_TIMEOUT = 1800;

  class Cookies {
    constructor(options) {
      this.options = options || {};
      this.cookies = [];
    }
    set(cookieStr, url) {
      let urlparts = urllib.parse(url || "");
      let cookie = this.parse(cookieStr);
      let domain;
      if (cookie.domain) {
        domain = cookie.domain.replace(/^\./, "");
        if (urlparts.hostname.length < domain.length || ("." + urlparts.hostname).substr(-domain.length + 1) !== "." + domain) {
          cookie.domain = urlparts.hostname;
        }
      } else {
        cookie.domain = urlparts.hostname;
      }
      if (!cookie.path) {
        cookie.path = this.getPath(urlparts.pathname);
      }
      if (!cookie.expires) {
        cookie.expires = new Date(Date.now() + (Number(this.options.sessionTimeout || SESSION_TIMEOUT) || SESSION_TIMEOUT) * 1000);
      }
      return this.add(cookie);
    }
    get(url) {
      return this.list(url).map((cookie) => cookie.name + "=" + cookie.value).join("; ");
    }
    list(url) {
      let result = [];
      let i;
      let cookie;
      for (i = this.cookies.length - 1;i >= 0; i--) {
        cookie = this.cookies[i];
        if (this.isExpired(cookie)) {
          this.cookies.splice(i, i);
          continue;
        }
        if (this.match(cookie, url)) {
          result.unshift(cookie);
        }
      }
      return result;
    }
    parse(cookieStr) {
      let cookie = {};
      (cookieStr || "").toString().split(";").forEach((cookiePart) => {
        let valueParts = cookiePart.split("=");
        let key = valueParts.shift().trim().toLowerCase();
        let value = valueParts.join("=").trim();
        let domain;
        if (!key) {
          return;
        }
        switch (key) {
          case "expires":
            value = new Date(value);
            if (value.toString() !== "Invalid Date") {
              cookie.expires = value;
            }
            break;
          case "path":
            cookie.path = value;
            break;
          case "domain":
            domain = value.toLowerCase();
            if (domain.length && domain.charAt(0) !== ".") {
              domain = "." + domain;
            }
            cookie.domain = domain;
            break;
          case "max-age":
            cookie.expires = new Date(Date.now() + (Number(value) || 0) * 1000);
            break;
          case "secure":
            cookie.secure = true;
            break;
          case "httponly":
            cookie.httponly = true;
            break;
          default:
            if (!cookie.name) {
              cookie.name = key;
              cookie.value = value;
            }
        }
      });
      return cookie;
    }
    match(cookie, url) {
      let urlparts = urllib.parse(url || "");
      if (urlparts.hostname !== cookie.domain && (cookie.domain.charAt(0) !== "." || ("." + urlparts.hostname).substr(-cookie.domain.length) !== cookie.domain)) {
        return false;
      }
      let path = this.getPath(urlparts.pathname);
      if (path.substr(0, cookie.path.length) !== cookie.path) {
        return false;
      }
      if (cookie.secure && urlparts.protocol !== "https:") {
        return false;
      }
      return true;
    }
    add(cookie) {
      let i;
      let len;
      if (!cookie || !cookie.name) {
        return false;
      }
      for (i = 0, len = this.cookies.length;i < len; i++) {
        if (this.compare(this.cookies[i], cookie)) {
          if (this.isExpired(cookie)) {
            this.cookies.splice(i, 1);
            return false;
          }
          this.cookies[i] = cookie;
          return true;
        }
      }
      if (!this.isExpired(cookie)) {
        this.cookies.push(cookie);
      }
      return true;
    }
    compare(a, b) {
      return a.name === b.name && a.path === b.path && a.domain === b.domain && a.secure === b.secure && a.httponly === a.httponly;
    }
    isExpired(cookie) {
      return cookie.expires && cookie.expires < new Date || !cookie.value;
    }
    getPath(pathname) {
      let path = (pathname || "/").split("/");
      path.pop();
      path = path.join("/").trim();
      if (path.charAt(0) !== "/") {
        path = "/" + path;
      }
      if (path.substr(-1) !== "/") {
        path += "/";
      }
      return path;
    }
  }
  module.exports = Cookies;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/package.json
var require_package = __commonJS((exports, module) => {
  module.exports = {
    name: "nodemailer",
    version: "6.9.15",
    description: "Easy as cake e-mail sending from your Node.js applications",
    main: "lib/nodemailer.js",
    scripts: {
      test: "node --test --test-concurrency=1 test/**/*.test.js test/**/*-test.js",
      "test:coverage": "c8 node --test --test-concurrency=1 test/**/*.test.js test/**/*-test.js",
      lint: "eslint .",
      update: "rm -rf node_modules/ package-lock.json && ncu -u && npm install"
    },
    repository: {
      type: "git",
      url: "https://github.com/nodemailer/nodemailer.git"
    },
    keywords: [
      "Nodemailer"
    ],
    author: "Andris Reinman",
    license: "MIT-0",
    bugs: {
      url: "https://github.com/nodemailer/nodemailer/issues"
    },
    homepage: "https://nodemailer.com/",
    devDependencies: {
      "@aws-sdk/client-ses": "3.600.0",
      bunyan: "1.8.15",
      c8: "10.1.2",
      eslint: "8.57.0",
      "eslint-config-nodemailer": "1.2.0",
      "eslint-config-prettier": "9.1.0",
      libbase64: "1.3.0",
      libmime: "5.3.5",
      libqp: "2.1.0",
      "nodemailer-ntlm-auth": "1.0.4",
      proxy: "1.0.2",
      "proxy-test-server": "1.0.0",
      "smtp-server": "3.13.4"
    },
    engines: {
      node: ">=6.0.0"
    }
  };
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/fetch/index.js
var require_fetch = __commonJS((exports, module) => {
  function nmfetch(url, options) {
    options = options || {};
    options.fetchRes = options.fetchRes || new PassThrough;
    options.cookies = options.cookies || new Cookies;
    options.redirects = options.redirects || 0;
    options.maxRedirects = isNaN(options.maxRedirects) ? MAX_REDIRECTS : options.maxRedirects;
    if (options.cookie) {
      [].concat(options.cookie || []).forEach((cookie) => {
        options.cookies.set(cookie, url);
      });
      options.cookie = false;
    }
    let fetchRes = options.fetchRes;
    let parsed = urllib.parse(url);
    let method = (options.method || "").toString().trim().toUpperCase() || "GET";
    let finished = false;
    let cookies;
    let body;
    let handler = parsed.protocol === "https:" ? https : http;
    let headers = {
      "accept-encoding": "gzip,deflate",
      "user-agent": "nodemailer/" + packageData.version
    };
    Object.keys(options.headers || {}).forEach((key) => {
      headers[key.toLowerCase().trim()] = options.headers[key];
    });
    if (options.userAgent) {
      headers["user-agent"] = options.userAgent;
    }
    if (parsed.auth) {
      headers.Authorization = "Basic " + Buffer.from(parsed.auth).toString("base64");
    }
    if (cookies = options.cookies.get(url)) {
      headers.cookie = cookies;
    }
    if (options.body) {
      if (options.contentType !== false) {
        headers["Content-Type"] = options.contentType || "application/x-www-form-urlencoded";
      }
      if (typeof options.body.pipe === "function") {
        headers["Transfer-Encoding"] = "chunked";
        body = options.body;
        body.on("error", (err) => {
          if (finished) {
            return;
          }
          finished = true;
          err.type = "FETCH";
          err.sourceUrl = url;
          fetchRes.emit("error", err);
        });
      } else {
        if (options.body instanceof Buffer) {
          body = options.body;
        } else if (typeof options.body === "object") {
          try {
            body = Buffer.from(Object.keys(options.body).map((key) => {
              let value = options.body[key].toString().trim();
              return encodeURIComponent(key) + "=" + encodeURIComponent(value);
            }).join("&"));
          } catch (E) {
            if (finished) {
              return;
            }
            finished = true;
            E.type = "FETCH";
            E.sourceUrl = url;
            fetchRes.emit("error", E);
            return;
          }
        } else {
          body = Buffer.from(options.body.toString().trim());
        }
        headers["Content-Type"] = options.contentType || "application/x-www-form-urlencoded";
        headers["Content-Length"] = body.length;
      }
      method = (options.method || "").toString().trim().toUpperCase() || "POST";
    }
    let req;
    let reqOptions = {
      method,
      host: parsed.hostname,
      path: parsed.path,
      port: parsed.port ? parsed.port : parsed.protocol === "https:" ? 443 : 80,
      headers,
      rejectUnauthorized: false,
      agent: false
    };
    if (options.tls) {
      Object.keys(options.tls).forEach((key) => {
        reqOptions[key] = options.tls[key];
      });
    }
    if (parsed.protocol === "https:" && parsed.hostname && parsed.hostname !== reqOptions.host && !net.isIP(parsed.hostname) && !reqOptions.servername) {
      reqOptions.servername = parsed.hostname;
    }
    try {
      req = handler.request(reqOptions);
    } catch (E) {
      finished = true;
      setImmediate(() => {
        E.type = "FETCH";
        E.sourceUrl = url;
        fetchRes.emit("error", E);
      });
      return fetchRes;
    }
    if (options.timeout) {
      req.setTimeout(options.timeout, () => {
        if (finished) {
          return;
        }
        finished = true;
        req.abort();
        let err = new Error("Request Timeout");
        err.type = "FETCH";
        err.sourceUrl = url;
        fetchRes.emit("error", err);
      });
    }
    req.on("error", (err) => {
      if (finished) {
        return;
      }
      finished = true;
      err.type = "FETCH";
      err.sourceUrl = url;
      fetchRes.emit("error", err);
    });
    req.on("response", (res) => {
      let inflate;
      if (finished) {
        return;
      }
      switch (res.headers["content-encoding"]) {
        case "gzip":
        case "deflate":
          inflate = zlib.createUnzip();
          break;
      }
      if (res.headers["set-cookie"]) {
        [].concat(res.headers["set-cookie"] || []).forEach((cookie) => {
          options.cookies.set(cookie, url);
        });
      }
      if ([301, 302, 303, 307, 308].includes(res.statusCode) && res.headers.location) {
        options.redirects++;
        if (options.redirects > options.maxRedirects) {
          finished = true;
          let err = new Error("Maximum redirect count exceeded");
          err.type = "FETCH";
          err.sourceUrl = url;
          fetchRes.emit("error", err);
          req.abort();
          return;
        }
        options.method = "GET";
        options.body = false;
        return nmfetch(urllib.resolve(url, res.headers.location), options);
      }
      fetchRes.statusCode = res.statusCode;
      fetchRes.headers = res.headers;
      if (res.statusCode >= 300 && !options.allowErrorResponse) {
        finished = true;
        let err = new Error("Invalid status code " + res.statusCode);
        err.type = "FETCH";
        err.sourceUrl = url;
        fetchRes.emit("error", err);
        req.abort();
        return;
      }
      res.on("error", (err) => {
        if (finished) {
          return;
        }
        finished = true;
        err.type = "FETCH";
        err.sourceUrl = url;
        fetchRes.emit("error", err);
        req.abort();
      });
      if (inflate) {
        res.pipe(inflate).pipe(fetchRes);
        inflate.on("error", (err) => {
          if (finished) {
            return;
          }
          finished = true;
          err.type = "FETCH";
          err.sourceUrl = url;
          fetchRes.emit("error", err);
          req.abort();
        });
      } else {
        res.pipe(fetchRes);
      }
    });
    setImmediate(() => {
      if (body) {
        try {
          if (typeof body.pipe === "function") {
            return body.pipe(req);
          } else {
            req.write(body);
          }
        } catch (err) {
          finished = true;
          err.type = "FETCH";
          err.sourceUrl = url;
          fetchRes.emit("error", err);
          return;
        }
      }
      req.end();
    });
    return fetchRes;
  }
  var http = __require("http");
  var https = __require("https");
  var urllib = __require("url");
  var zlib = __require("zlib");
  var PassThrough = __require("stream").PassThrough;
  var Cookies = require_cookies();
  var packageData = require_package();
  var net = __require("net");
  var MAX_REDIRECTS = 5;
  module.exports = function(url, options) {
    return nmfetch(url, options);
  };
  module.exports.Cookies = Cookies;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/shared/index.js
var require_shared = __commonJS((exports, module) => {
  function resolveStream(stream2, callback) {
    let responded = false;
    let chunks = [];
    let chunklen = 0;
    stream2.on("error", (err) => {
      if (responded) {
        return;
      }
      responded = true;
      callback(err);
    });
    stream2.on("readable", () => {
      let chunk;
      while ((chunk = stream2.read()) !== null) {
        chunks.push(chunk);
        chunklen += chunk.length;
      }
    });
    stream2.on("end", () => {
      if (responded) {
        return;
      }
      responded = true;
      let value;
      try {
        value = Buffer.concat(chunks, chunklen);
      } catch (E) {
        return callback(E);
      }
      callback(null, value);
    });
  }
  function createDefaultLogger(levels) {
    let levelMaxLen = 0;
    let levelNames = new Map;
    levels.forEach((level) => {
      if (level.length > levelMaxLen) {
        levelMaxLen = level.length;
      }
    });
    levels.forEach((level) => {
      let levelName = level.toUpperCase();
      if (levelName.length < levelMaxLen) {
        levelName += " ".repeat(levelMaxLen - levelName.length);
      }
      levelNames.set(level, levelName);
    });
    let print = (level, entry, message2, ...args) => {
      let prefix = "";
      if (entry) {
        if (entry.tnx === "server") {
          prefix = "S: ";
        } else if (entry.tnx === "client") {
          prefix = "C: ";
        }
        if (entry.sid) {
          prefix = "[" + entry.sid + "] " + prefix;
        }
        if (entry.cid) {
          prefix = "[#" + entry.cid + "] " + prefix;
        }
      }
      message2 = util.format(message2, ...args);
      message2.split(/\r?\n/).forEach((line) => {
        console.log("[%s] %s %s", new Date().toISOString().substr(0, 19).replace(/T/, " "), levelNames.get(level), prefix + line);
      });
    };
    let logger = {};
    levels.forEach((level) => {
      logger[level] = print.bind(null, level);
    });
    return logger;
  }
  var urllib = __require("url");
  var util = __require("util");
  var fs = __require("fs");
  var nmfetch = require_fetch();
  var dns = __require("dns");
  var net = __require("net");
  var os = __require("os");
  var DNS_TTL = 5 * 60 * 1000;
  var networkInterfaces;
  try {
    networkInterfaces = os.networkInterfaces();
  } catch (err) {
  }
  exports.networkInterfaces = networkInterfaces;
  var isFamilySupported = (family, allowInternal) => {
    let networkInterfaces2 = exports.networkInterfaces;
    if (!networkInterfaces2) {
      return true;
    }
    const familySupported = Object.keys(networkInterfaces2).map((key) => networkInterfaces2[key]).reduce((acc, val) => acc.concat(val), []).filter((i) => !i.internal || allowInternal).filter((i) => i.family === "IPv" + family || i.family === family).length > 0;
    return familySupported;
  };
  var resolver = (family, hostname, options, callback) => {
    options = options || {};
    const familySupported = isFamilySupported(family, options.allowInternalNetworkInterfaces);
    if (!familySupported) {
      return callback(null, []);
    }
    const resolver2 = dns.Resolver ? new dns.Resolver(options) : dns;
    resolver2["resolve" + family](hostname, (err, addresses) => {
      if (err) {
        switch (err.code) {
          case dns.NODATA:
          case dns.NOTFOUND:
          case dns.NOTIMP:
          case dns.SERVFAIL:
          case dns.CONNREFUSED:
          case dns.REFUSED:
          case "EAI_AGAIN":
            return callback(null, []);
        }
        return callback(err);
      }
      return callback(null, Array.isArray(addresses) ? addresses : [].concat(addresses || []));
    });
  };
  var dnsCache = exports.dnsCache = new Map;
  var formatDNSValue = (value, extra) => {
    if (!value) {
      return Object.assign({}, extra || {});
    }
    return Object.assign({
      servername: value.servername,
      host: !value.addresses || !value.addresses.length ? null : value.addresses.length === 1 ? value.addresses[0] : value.addresses[Math.floor(Math.random() * value.addresses.length)]
    }, extra || {});
  };
  exports.resolveHostname = (options, callback) => {
    options = options || {};
    if (!options.host && options.servername) {
      options.host = options.servername;
    }
    if (!options.host || net.isIP(options.host)) {
      let value = {
        addresses: [options.host],
        servername: options.servername || false
      };
      return callback(null, formatDNSValue(value, {
        cached: false
      }));
    }
    let cached;
    if (dnsCache.has(options.host)) {
      cached = dnsCache.get(options.host);
      if (!cached.expires || cached.expires >= Date.now()) {
        return callback(null, formatDNSValue(cached.value, {
          cached: true
        }));
      }
    }
    resolver(4, options.host, options, (err, addresses) => {
      if (err) {
        if (cached) {
          return callback(null, formatDNSValue(cached.value, {
            cached: true,
            error: err
          }));
        }
        return callback(err);
      }
      if (addresses && addresses.length) {
        let value = {
          addresses,
          servername: options.servername || options.host
        };
        dnsCache.set(options.host, {
          value,
          expires: Date.now() + (options.dnsTtl || DNS_TTL)
        });
        return callback(null, formatDNSValue(value, {
          cached: false
        }));
      }
      resolver(6, options.host, options, (err2, addresses2) => {
        if (err2) {
          if (cached) {
            return callback(null, formatDNSValue(cached.value, {
              cached: true,
              error: err2
            }));
          }
          return callback(err2);
        }
        if (addresses2 && addresses2.length) {
          let value = {
            addresses: addresses2,
            servername: options.servername || options.host
          };
          dnsCache.set(options.host, {
            value,
            expires: Date.now() + (options.dnsTtl || DNS_TTL)
          });
          return callback(null, formatDNSValue(value, {
            cached: false
          }));
        }
        try {
          dns.lookup(options.host, { all: true }, (err3, addresses3) => {
            if (err3) {
              if (cached) {
                return callback(null, formatDNSValue(cached.value, {
                  cached: true,
                  error: err3
                }));
              }
              return callback(err3);
            }
            let address = addresses3 ? addresses3.filter((addr) => isFamilySupported(addr.family)).map((addr) => addr.address).shift() : false;
            if (addresses3 && addresses3.length && !address) {
              console.warn(`Failed to resolve IPv${addresses3[0].family} addresses with current network`);
            }
            if (!address && cached) {
              return callback(null, formatDNSValue(cached.value, {
                cached: true
              }));
            }
            let value = {
              addresses: address ? [address] : [options.host],
              servername: options.servername || options.host
            };
            dnsCache.set(options.host, {
              value,
              expires: Date.now() + (options.dnsTtl || DNS_TTL)
            });
            return callback(null, formatDNSValue(value, {
              cached: false
            }));
          });
        } catch (err3) {
          if (cached) {
            return callback(null, formatDNSValue(cached.value, {
              cached: true,
              error: err3
            }));
          }
          return callback(err3);
        }
      });
    });
  };
  exports.parseConnectionUrl = (str) => {
    str = str || "";
    let options = {};
    [urllib.parse(str, true)].forEach((url) => {
      let auth;
      switch (url.protocol) {
        case "smtp:":
          options.secure = false;
          break;
        case "smtps:":
          options.secure = true;
          break;
        case "direct:":
          options.direct = true;
          break;
      }
      if (!isNaN(url.port) && Number(url.port)) {
        options.port = Number(url.port);
      }
      if (url.hostname) {
        options.host = url.hostname;
      }
      if (url.auth) {
        auth = url.auth.split(":");
        if (!options.auth) {
          options.auth = {};
        }
        options.auth.user = auth.shift();
        options.auth.pass = auth.join(":");
      }
      Object.keys(url.query || {}).forEach((key) => {
        let obj = options;
        let lKey = key;
        let value = url.query[key];
        if (!isNaN(value)) {
          value = Number(value);
        }
        switch (value) {
          case "true":
            value = true;
            break;
          case "false":
            value = false;
            break;
        }
        if (key.indexOf("tls.") === 0) {
          lKey = key.substr(4);
          if (!options.tls) {
            options.tls = {};
          }
          obj = options.tls;
        } else if (key.indexOf(".") >= 0) {
          return;
        }
        if (!(lKey in obj)) {
          obj[lKey] = value;
        }
      });
    });
    return options;
  };
  exports._logFunc = (logger, level, defaults, data, message2, ...args) => {
    let entry = {};
    Object.keys(defaults || {}).forEach((key) => {
      if (key !== "level") {
        entry[key] = defaults[key];
      }
    });
    Object.keys(data || {}).forEach((key) => {
      if (key !== "level") {
        entry[key] = data[key];
      }
    });
    logger[level](entry, message2, ...args);
  };
  exports.getLogger = (options, defaults) => {
    options = options || {};
    let response = {};
    let levels = ["trace", "debug", "info", "warn", "error", "fatal"];
    if (!options.logger) {
      levels.forEach((level) => {
        response[level] = () => false;
      });
      return response;
    }
    let logger = options.logger;
    if (options.logger === true) {
      logger = createDefaultLogger(levels);
    }
    levels.forEach((level) => {
      response[level] = (data, message2, ...args) => {
        exports._logFunc(logger, level, defaults, data, message2, ...args);
      };
    });
    return response;
  };
  exports.callbackPromise = (resolve, reject) => function() {
    let args = Array.from(arguments);
    let err = args.shift();
    if (err) {
      reject(err);
    } else {
      resolve(...args);
    }
  };
  exports.parseDataURI = (uri) => {
    let input = uri;
    let commaPos = input.indexOf(",");
    if (!commaPos) {
      return uri;
    }
    let data = input.substring(commaPos + 1);
    let metaStr = input.substring("data:".length, commaPos);
    let encoding;
    let metaEntries = metaStr.split(";");
    let lastMetaEntry = metaEntries.length > 1 ? metaEntries[metaEntries.length - 1] : false;
    if (lastMetaEntry && lastMetaEntry.indexOf("=") < 0) {
      encoding = lastMetaEntry.toLowerCase();
      metaEntries.pop();
    }
    let contentType = metaEntries.shift() || "application/octet-stream";
    let params = {};
    for (let entry of metaEntries) {
      let sep = entry.indexOf("=");
      if (sep >= 0) {
        let key = entry.substring(0, sep);
        let value = entry.substring(sep + 1);
        params[key] = value;
      }
    }
    switch (encoding) {
      case "base64":
        data = Buffer.from(data, "base64");
        break;
      case "utf8":
        data = Buffer.from(data);
        break;
      default:
        try {
          data = Buffer.from(decodeURIComponent(data));
        } catch (err) {
          data = Buffer.from(data);
        }
        data = Buffer.from(data);
    }
    return { data, encoding, contentType, params };
  };
  exports.resolveContent = (data, key, callback) => {
    let promise;
    if (!callback) {
      promise = new Promise((resolve, reject) => {
        callback = exports.callbackPromise(resolve, reject);
      });
    }
    let content = data && data[key] && data[key].content || data[key];
    let contentStream;
    let encoding = (typeof data[key] === "object" && data[key].encoding || "utf8").toString().toLowerCase().replace(/[-_\s]/g, "");
    if (!content) {
      return callback(null, content);
    }
    if (typeof content === "object") {
      if (typeof content.pipe === "function") {
        return resolveStream(content, (err, value) => {
          if (err) {
            return callback(err);
          }
          if (data[key].content) {
            data[key].content = value;
          } else {
            data[key] = value;
          }
          callback(null, value);
        });
      } else if (/^https?:\/\//i.test(content.path || content.href)) {
        contentStream = nmfetch(content.path || content.href);
        return resolveStream(contentStream, callback);
      } else if (/^data:/i.test(content.path || content.href)) {
        let parsedDataUri = exports.parseDataURI(content.path || content.href);
        if (!parsedDataUri || !parsedDataUri.data) {
          return callback(null, Buffer.from(0));
        }
        return callback(null, parsedDataUri.data);
      } else if (content.path) {
        return resolveStream(fs.createReadStream(content.path), callback);
      }
    }
    if (typeof data[key].content === "string" && !["utf8", "usascii", "ascii"].includes(encoding)) {
      content = Buffer.from(data[key].content, encoding);
    }
    setImmediate(() => callback(null, content));
    return promise;
  };
  exports.assign = function() {
    let args = Array.from(arguments);
    let target = args.shift() || {};
    args.forEach((source) => {
      Object.keys(source || {}).forEach((key) => {
        if (["tls", "auth"].includes(key) && source[key] && typeof source[key] === "object") {
          if (!target[key]) {
            target[key] = {};
          }
          Object.keys(source[key]).forEach((subKey) => {
            target[key][subKey] = source[key][subKey];
          });
        } else {
          target[key] = source[key];
        }
      });
    });
    return target;
  };
  exports.encodeXText = (str) => {
    if (!/[^\x21-\x2A\x2C-\x3C\x3E-\x7E]/.test(str)) {
      return str;
    }
    let buf = Buffer.from(str);
    let result = "";
    for (let i = 0, len = buf.length;i < len; i++) {
      let c = buf[i];
      if (c < 33 || c > 126 || c === 43 || c === 61) {
        result += "+" + (c < 16 ? "0" : "") + c.toString(16).toUpperCase();
      } else {
        result += String.fromCharCode(c);
      }
    }
    return result;
  };
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/mime-funcs/mime-types.js
var require_mime_types = __commonJS((exports, module) => {
  var path = __require("path");
  var defaultMimeType = "application/octet-stream";
  var defaultExtension = "bin";
  var mimeTypes = new Map([
    ["application/acad", "dwg"],
    ["application/applixware", "aw"],
    ["application/arj", "arj"],
    ["application/atom+xml", "xml"],
    ["application/atomcat+xml", "atomcat"],
    ["application/atomsvc+xml", "atomsvc"],
    ["application/base64", ["mm", "mme"]],
    ["application/binhex", "hqx"],
    ["application/binhex4", "hqx"],
    ["application/book", ["book", "boo"]],
    ["application/ccxml+xml,", "ccxml"],
    ["application/cdf", "cdf"],
    ["application/cdmi-capability", "cdmia"],
    ["application/cdmi-container", "cdmic"],
    ["application/cdmi-domain", "cdmid"],
    ["application/cdmi-object", "cdmio"],
    ["application/cdmi-queue", "cdmiq"],
    ["application/clariscad", "ccad"],
    ["application/commonground", "dp"],
    ["application/cu-seeme", "cu"],
    ["application/davmount+xml", "davmount"],
    ["application/drafting", "drw"],
    ["application/dsptype", "tsp"],
    ["application/dssc+der", "dssc"],
    ["application/dssc+xml", "xdssc"],
    ["application/dxf", "dxf"],
    ["application/ecmascript", ["js", "es"]],
    ["application/emma+xml", "emma"],
    ["application/envoy", "evy"],
    ["application/epub+zip", "epub"],
    ["application/excel", ["xls", "xl", "xla", "xlb", "xlc", "xld", "xlk", "xll", "xlm", "xlt", "xlv", "xlw"]],
    ["application/exi", "exi"],
    ["application/font-tdpfr", "pfr"],
    ["application/fractals", "fif"],
    ["application/freeloader", "frl"],
    ["application/futuresplash", "spl"],
    ["application/geo+json", "geojson"],
    ["application/gnutar", "tgz"],
    ["application/groupwise", "vew"],
    ["application/hlp", "hlp"],
    ["application/hta", "hta"],
    ["application/hyperstudio", "stk"],
    ["application/i-deas", "unv"],
    ["application/iges", ["iges", "igs"]],
    ["application/inf", "inf"],
    ["application/internet-property-stream", "acx"],
    ["application/ipfix", "ipfix"],
    ["application/java", "class"],
    ["application/java-archive", "jar"],
    ["application/java-byte-code", "class"],
    ["application/java-serialized-object", "ser"],
    ["application/java-vm", "class"],
    ["application/javascript", "js"],
    ["application/json", "json"],
    ["application/lha", "lha"],
    ["application/lzx", "lzx"],
    ["application/mac-binary", "bin"],
    ["application/mac-binhex", "hqx"],
    ["application/mac-binhex40", "hqx"],
    ["application/mac-compactpro", "cpt"],
    ["application/macbinary", "bin"],
    ["application/mads+xml", "mads"],
    ["application/marc", "mrc"],
    ["application/marcxml+xml", "mrcx"],
    ["application/mathematica", "ma"],
    ["application/mathml+xml", "mathml"],
    ["application/mbedlet", "mbd"],
    ["application/mbox", "mbox"],
    ["application/mcad", "mcd"],
    ["application/mediaservercontrol+xml", "mscml"],
    ["application/metalink4+xml", "meta4"],
    ["application/mets+xml", "mets"],
    ["application/mime", "aps"],
    ["application/mods+xml", "mods"],
    ["application/mp21", "m21"],
    ["application/mp4", "mp4"],
    ["application/mspowerpoint", ["ppt", "pot", "pps", "ppz"]],
    ["application/msword", ["doc", "dot", "w6w", "wiz", "word"]],
    ["application/mswrite", "wri"],
    ["application/mxf", "mxf"],
    ["application/netmc", "mcp"],
    ["application/octet-stream", ["*"]],
    ["application/oda", "oda"],
    ["application/oebps-package+xml", "opf"],
    ["application/ogg", "ogx"],
    ["application/olescript", "axs"],
    ["application/onenote", "onetoc"],
    ["application/patch-ops-error+xml", "xer"],
    ["application/pdf", "pdf"],
    ["application/pgp-encrypted", "asc"],
    ["application/pgp-signature", "pgp"],
    ["application/pics-rules", "prf"],
    ["application/pkcs-12", "p12"],
    ["application/pkcs-crl", "crl"],
    ["application/pkcs10", "p10"],
    ["application/pkcs7-mime", ["p7c", "p7m"]],
    ["application/pkcs7-signature", "p7s"],
    ["application/pkcs8", "p8"],
    ["application/pkix-attr-cert", "ac"],
    ["application/pkix-cert", ["cer", "crt"]],
    ["application/pkix-crl", "crl"],
    ["application/pkix-pkipath", "pkipath"],
    ["application/pkixcmp", "pki"],
    ["application/plain", "text"],
    ["application/pls+xml", "pls"],
    ["application/postscript", ["ps", "ai", "eps"]],
    ["application/powerpoint", "ppt"],
    ["application/pro_eng", ["part", "prt"]],
    ["application/prs.cww", "cww"],
    ["application/pskc+xml", "pskcxml"],
    ["application/rdf+xml", "rdf"],
    ["application/reginfo+xml", "rif"],
    ["application/relax-ng-compact-syntax", "rnc"],
    ["application/resource-lists+xml", "rl"],
    ["application/resource-lists-diff+xml", "rld"],
    ["application/ringing-tones", "rng"],
    ["application/rls-services+xml", "rs"],
    ["application/rsd+xml", "rsd"],
    ["application/rss+xml", "xml"],
    ["application/rtf", ["rtf", "rtx"]],
    ["application/sbml+xml", "sbml"],
    ["application/scvp-cv-request", "scq"],
    ["application/scvp-cv-response", "scs"],
    ["application/scvp-vp-request", "spq"],
    ["application/scvp-vp-response", "spp"],
    ["application/sdp", "sdp"],
    ["application/sea", "sea"],
    ["application/set", "set"],
    ["application/set-payment-initiation", "setpay"],
    ["application/set-registration-initiation", "setreg"],
    ["application/shf+xml", "shf"],
    ["application/sla", "stl"],
    ["application/smil", ["smi", "smil"]],
    ["application/smil+xml", "smi"],
    ["application/solids", "sol"],
    ["application/sounder", "sdr"],
    ["application/sparql-query", "rq"],
    ["application/sparql-results+xml", "srx"],
    ["application/srgs", "gram"],
    ["application/srgs+xml", "grxml"],
    ["application/sru+xml", "sru"],
    ["application/ssml+xml", "ssml"],
    ["application/step", ["step", "stp"]],
    ["application/streamingmedia", "ssm"],
    ["application/tei+xml", "tei"],
    ["application/thraud+xml", "tfi"],
    ["application/timestamped-data", "tsd"],
    ["application/toolbook", "tbk"],
    ["application/vda", "vda"],
    ["application/vnd.3gpp.pic-bw-large", "plb"],
    ["application/vnd.3gpp.pic-bw-small", "psb"],
    ["application/vnd.3gpp.pic-bw-var", "pvb"],
    ["application/vnd.3gpp2.tcap", "tcap"],
    ["application/vnd.3m.post-it-notes", "pwn"],
    ["application/vnd.accpac.simply.aso", "aso"],
    ["application/vnd.accpac.simply.imp", "imp"],
    ["application/vnd.acucobol", "acu"],
    ["application/vnd.acucorp", "atc"],
    ["application/vnd.adobe.air-application-installer-package+zip", "air"],
    ["application/vnd.adobe.fxp", "fxp"],
    ["application/vnd.adobe.xdp+xml", "xdp"],
    ["application/vnd.adobe.xfdf", "xfdf"],
    ["application/vnd.ahead.space", "ahead"],
    ["application/vnd.airzip.filesecure.azf", "azf"],
    ["application/vnd.airzip.filesecure.azs", "azs"],
    ["application/vnd.amazon.ebook", "azw"],
    ["application/vnd.americandynamics.acc", "acc"],
    ["application/vnd.amiga.ami", "ami"],
    ["application/vnd.android.package-archive", "apk"],
    ["application/vnd.anser-web-certificate-issue-initiation", "cii"],
    ["application/vnd.anser-web-funds-transfer-initiation", "fti"],
    ["application/vnd.antix.game-component", "atx"],
    ["application/vnd.apple.installer+xml", "mpkg"],
    ["application/vnd.apple.mpegurl", "m3u8"],
    ["application/vnd.aristanetworks.swi", "swi"],
    ["application/vnd.audiograph", "aep"],
    ["application/vnd.blueice.multipass", "mpm"],
    ["application/vnd.bmi", "bmi"],
    ["application/vnd.businessobjects", "rep"],
    ["application/vnd.chemdraw+xml", "cdxml"],
    ["application/vnd.chipnuts.karaoke-mmd", "mmd"],
    ["application/vnd.cinderella", "cdy"],
    ["application/vnd.claymore", "cla"],
    ["application/vnd.cloanto.rp9", "rp9"],
    ["application/vnd.clonk.c4group", "c4g"],
    ["application/vnd.cluetrust.cartomobile-config", "c11amc"],
    ["application/vnd.cluetrust.cartomobile-config-pkg", "c11amz"],
    ["application/vnd.commonspace", "csp"],
    ["application/vnd.contact.cmsg", "cdbcmsg"],
    ["application/vnd.cosmocaller", "cmc"],
    ["application/vnd.crick.clicker", "clkx"],
    ["application/vnd.crick.clicker.keyboard", "clkk"],
    ["application/vnd.crick.clicker.palette", "clkp"],
    ["application/vnd.crick.clicker.template", "clkt"],
    ["application/vnd.crick.clicker.wordbank", "clkw"],
    ["application/vnd.criticaltools.wbs+xml", "wbs"],
    ["application/vnd.ctc-posml", "pml"],
    ["application/vnd.cups-ppd", "ppd"],
    ["application/vnd.curl.car", "car"],
    ["application/vnd.curl.pcurl", "pcurl"],
    ["application/vnd.data-vision.rdz", "rdz"],
    ["application/vnd.denovo.fcselayout-link", "fe_launch"],
    ["application/vnd.dna", "dna"],
    ["application/vnd.dolby.mlp", "mlp"],
    ["application/vnd.dpgraph", "dpg"],
    ["application/vnd.dreamfactory", "dfac"],
    ["application/vnd.dvb.ait", "ait"],
    ["application/vnd.dvb.service", "svc"],
    ["application/vnd.dynageo", "geo"],
    ["application/vnd.ecowin.chart", "mag"],
    ["application/vnd.enliven", "nml"],
    ["application/vnd.epson.esf", "esf"],
    ["application/vnd.epson.msf", "msf"],
    ["application/vnd.epson.quickanime", "qam"],
    ["application/vnd.epson.salt", "slt"],
    ["application/vnd.epson.ssf", "ssf"],
    ["application/vnd.eszigno3+xml", "es3"],
    ["application/vnd.ezpix-album", "ez2"],
    ["application/vnd.ezpix-package", "ez3"],
    ["application/vnd.fdf", "fdf"],
    ["application/vnd.fdsn.seed", "seed"],
    ["application/vnd.flographit", "gph"],
    ["application/vnd.fluxtime.clip", "ftc"],
    ["application/vnd.framemaker", "fm"],
    ["application/vnd.frogans.fnc", "fnc"],
    ["application/vnd.frogans.ltf", "ltf"],
    ["application/vnd.fsc.weblaunch", "fsc"],
    ["application/vnd.fujitsu.oasys", "oas"],
    ["application/vnd.fujitsu.oasys2", "oa2"],
    ["application/vnd.fujitsu.oasys3", "oa3"],
    ["application/vnd.fujitsu.oasysgp", "fg5"],
    ["application/vnd.fujitsu.oasysprs", "bh2"],
    ["application/vnd.fujixerox.ddd", "ddd"],
    ["application/vnd.fujixerox.docuworks", "xdw"],
    ["application/vnd.fujixerox.docuworks.binder", "xbd"],
    ["application/vnd.fuzzysheet", "fzs"],
    ["application/vnd.genomatix.tuxedo", "txd"],
    ["application/vnd.geogebra.file", "ggb"],
    ["application/vnd.geogebra.tool", "ggt"],
    ["application/vnd.geometry-explorer", "gex"],
    ["application/vnd.geonext", "gxt"],
    ["application/vnd.geoplan", "g2w"],
    ["application/vnd.geospace", "g3w"],
    ["application/vnd.gmx", "gmx"],
    ["application/vnd.google-earth.kml+xml", "kml"],
    ["application/vnd.google-earth.kmz", "kmz"],
    ["application/vnd.grafeq", "gqf"],
    ["application/vnd.groove-account", "gac"],
    ["application/vnd.groove-help", "ghf"],
    ["application/vnd.groove-identity-message", "gim"],
    ["application/vnd.groove-injector", "grv"],
    ["application/vnd.groove-tool-message", "gtm"],
    ["application/vnd.groove-tool-template", "tpl"],
    ["application/vnd.groove-vcard", "vcg"],
    ["application/vnd.hal+xml", "hal"],
    ["application/vnd.handheld-entertainment+xml", "zmm"],
    ["application/vnd.hbci", "hbci"],
    ["application/vnd.hhe.lesson-player", "les"],
    ["application/vnd.hp-hpgl", ["hgl", "hpg", "hpgl"]],
    ["application/vnd.hp-hpid", "hpid"],
    ["application/vnd.hp-hps", "hps"],
    ["application/vnd.hp-jlyt", "jlt"],
    ["application/vnd.hp-pcl", "pcl"],
    ["application/vnd.hp-pclxl", "pclxl"],
    ["application/vnd.hydrostatix.sof-data", "sfd-hdstx"],
    ["application/vnd.hzn-3d-crossword", "x3d"],
    ["application/vnd.ibm.minipay", "mpy"],
    ["application/vnd.ibm.modcap", "afp"],
    ["application/vnd.ibm.rights-management", "irm"],
    ["application/vnd.ibm.secure-container", "sc"],
    ["application/vnd.iccprofile", "icc"],
    ["application/vnd.igloader", "igl"],
    ["application/vnd.immervision-ivp", "ivp"],
    ["application/vnd.immervision-ivu", "ivu"],
    ["application/vnd.insors.igm", "igm"],
    ["application/vnd.intercon.formnet", "xpw"],
    ["application/vnd.intergeo", "i2g"],
    ["application/vnd.intu.qbo", "qbo"],
    ["application/vnd.intu.qfx", "qfx"],
    ["application/vnd.ipunplugged.rcprofile", "rcprofile"],
    ["application/vnd.irepository.package+xml", "irp"],
    ["application/vnd.is-xpr", "xpr"],
    ["application/vnd.isac.fcs", "fcs"],
    ["application/vnd.jam", "jam"],
    ["application/vnd.jcp.javame.midlet-rms", "rms"],
    ["application/vnd.jisp", "jisp"],
    ["application/vnd.joost.joda-archive", "joda"],
    ["application/vnd.kahootz", "ktz"],
    ["application/vnd.kde.karbon", "karbon"],
    ["application/vnd.kde.kchart", "chrt"],
    ["application/vnd.kde.kformula", "kfo"],
    ["application/vnd.kde.kivio", "flw"],
    ["application/vnd.kde.kontour", "kon"],
    ["application/vnd.kde.kpresenter", "kpr"],
    ["application/vnd.kde.kspread", "ksp"],
    ["application/vnd.kde.kword", "kwd"],
    ["application/vnd.kenameaapp", "htke"],
    ["application/vnd.kidspiration", "kia"],
    ["application/vnd.kinar", "kne"],
    ["application/vnd.koan", "skp"],
    ["application/vnd.kodak-descriptor", "sse"],
    ["application/vnd.las.las+xml", "lasxml"],
    ["application/vnd.llamagraphics.life-balance.desktop", "lbd"],
    ["application/vnd.llamagraphics.life-balance.exchange+xml", "lbe"],
    ["application/vnd.lotus-1-2-3", "123"],
    ["application/vnd.lotus-approach", "apr"],
    ["application/vnd.lotus-freelance", "pre"],
    ["application/vnd.lotus-notes", "nsf"],
    ["application/vnd.lotus-organizer", "org"],
    ["application/vnd.lotus-screencam", "scm"],
    ["application/vnd.lotus-wordpro", "lwp"],
    ["application/vnd.macports.portpkg", "portpkg"],
    ["application/vnd.mcd", "mcd"],
    ["application/vnd.medcalcdata", "mc1"],
    ["application/vnd.mediastation.cdkey", "cdkey"],
    ["application/vnd.mfer", "mwf"],
    ["application/vnd.mfmp", "mfm"],
    ["application/vnd.micrografx.flo", "flo"],
    ["application/vnd.micrografx.igx", "igx"],
    ["application/vnd.mif", "mif"],
    ["application/vnd.mobius.daf", "daf"],
    ["application/vnd.mobius.dis", "dis"],
    ["application/vnd.mobius.mbk", "mbk"],
    ["application/vnd.mobius.mqy", "mqy"],
    ["application/vnd.mobius.msl", "msl"],
    ["application/vnd.mobius.plc", "plc"],
    ["application/vnd.mobius.txf", "txf"],
    ["application/vnd.mophun.application", "mpn"],
    ["application/vnd.mophun.certificate", "mpc"],
    ["application/vnd.mozilla.xul+xml", "xul"],
    ["application/vnd.ms-artgalry", "cil"],
    ["application/vnd.ms-cab-compressed", "cab"],
    ["application/vnd.ms-excel", ["xls", "xla", "xlc", "xlm", "xlt", "xlw", "xlb", "xll"]],
    ["application/vnd.ms-excel.addin.macroenabled.12", "xlam"],
    ["application/vnd.ms-excel.sheet.binary.macroenabled.12", "xlsb"],
    ["application/vnd.ms-excel.sheet.macroenabled.12", "xlsm"],
    ["application/vnd.ms-excel.template.macroenabled.12", "xltm"],
    ["application/vnd.ms-fontobject", "eot"],
    ["application/vnd.ms-htmlhelp", "chm"],
    ["application/vnd.ms-ims", "ims"],
    ["application/vnd.ms-lrm", "lrm"],
    ["application/vnd.ms-officetheme", "thmx"],
    ["application/vnd.ms-outlook", "msg"],
    ["application/vnd.ms-pki.certstore", "sst"],
    ["application/vnd.ms-pki.pko", "pko"],
    ["application/vnd.ms-pki.seccat", "cat"],
    ["application/vnd.ms-pki.stl", "stl"],
    ["application/vnd.ms-pkicertstore", "sst"],
    ["application/vnd.ms-pkiseccat", "cat"],
    ["application/vnd.ms-pkistl", "stl"],
    ["application/vnd.ms-powerpoint", ["ppt", "pot", "pps", "ppa", "pwz"]],
    ["application/vnd.ms-powerpoint.addin.macroenabled.12", "ppam"],
    ["application/vnd.ms-powerpoint.presentation.macroenabled.12", "pptm"],
    ["application/vnd.ms-powerpoint.slide.macroenabled.12", "sldm"],
    ["application/vnd.ms-powerpoint.slideshow.macroenabled.12", "ppsm"],
    ["application/vnd.ms-powerpoint.template.macroenabled.12", "potm"],
    ["application/vnd.ms-project", "mpp"],
    ["application/vnd.ms-word.document.macroenabled.12", "docm"],
    ["application/vnd.ms-word.template.macroenabled.12", "dotm"],
    ["application/vnd.ms-works", ["wks", "wcm", "wdb", "wps"]],
    ["application/vnd.ms-wpl", "wpl"],
    ["application/vnd.ms-xpsdocument", "xps"],
    ["application/vnd.mseq", "mseq"],
    ["application/vnd.musician", "mus"],
    ["application/vnd.muvee.style", "msty"],
    ["application/vnd.neurolanguage.nlu", "nlu"],
    ["application/vnd.noblenet-directory", "nnd"],
    ["application/vnd.noblenet-sealer", "nns"],
    ["application/vnd.noblenet-web", "nnw"],
    ["application/vnd.nokia.configuration-message", "ncm"],
    ["application/vnd.nokia.n-gage.data", "ngdat"],
    ["application/vnd.nokia.n-gage.symbian.install", "n-gage"],
    ["application/vnd.nokia.radio-preset", "rpst"],
    ["application/vnd.nokia.radio-presets", "rpss"],
    ["application/vnd.nokia.ringing-tone", "rng"],
    ["application/vnd.novadigm.edm", "edm"],
    ["application/vnd.novadigm.edx", "edx"],
    ["application/vnd.novadigm.ext", "ext"],
    ["application/vnd.oasis.opendocument.chart", "odc"],
    ["application/vnd.oasis.opendocument.chart-template", "otc"],
    ["application/vnd.oasis.opendocument.database", "odb"],
    ["application/vnd.oasis.opendocument.formula", "odf"],
    ["application/vnd.oasis.opendocument.formula-template", "odft"],
    ["application/vnd.oasis.opendocument.graphics", "odg"],
    ["application/vnd.oasis.opendocument.graphics-template", "otg"],
    ["application/vnd.oasis.opendocument.image", "odi"],
    ["application/vnd.oasis.opendocument.image-template", "oti"],
    ["application/vnd.oasis.opendocument.presentation", "odp"],
    ["application/vnd.oasis.opendocument.presentation-template", "otp"],
    ["application/vnd.oasis.opendocument.spreadsheet", "ods"],
    ["application/vnd.oasis.opendocument.spreadsheet-template", "ots"],
    ["application/vnd.oasis.opendocument.text", "odt"],
    ["application/vnd.oasis.opendocument.text-master", "odm"],
    ["application/vnd.oasis.opendocument.text-template", "ott"],
    ["application/vnd.oasis.opendocument.text-web", "oth"],
    ["application/vnd.olpc-sugar", "xo"],
    ["application/vnd.oma.dd2+xml", "dd2"],
    ["application/vnd.openofficeorg.extension", "oxt"],
    ["application/vnd.openxmlformats-officedocument.presentationml.presentation", "pptx"],
    ["application/vnd.openxmlformats-officedocument.presentationml.slide", "sldx"],
    ["application/vnd.openxmlformats-officedocument.presentationml.slideshow", "ppsx"],
    ["application/vnd.openxmlformats-officedocument.presentationml.template", "potx"],
    ["application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "xlsx"],
    ["application/vnd.openxmlformats-officedocument.spreadsheetml.template", "xltx"],
    ["application/vnd.openxmlformats-officedocument.wordprocessingml.document", "docx"],
    ["application/vnd.openxmlformats-officedocument.wordprocessingml.template", "dotx"],
    ["application/vnd.osgeo.mapguide.package", "mgp"],
    ["application/vnd.osgi.dp", "dp"],
    ["application/vnd.palm", "pdb"],
    ["application/vnd.pawaafile", "paw"],
    ["application/vnd.pg.format", "str"],
    ["application/vnd.pg.osasli", "ei6"],
    ["application/vnd.picsel", "efif"],
    ["application/vnd.pmi.widget", "wg"],
    ["application/vnd.pocketlearn", "plf"],
    ["application/vnd.powerbuilder6", "pbd"],
    ["application/vnd.previewsystems.box", "box"],
    ["application/vnd.proteus.magazine", "mgz"],
    ["application/vnd.publishare-delta-tree", "qps"],
    ["application/vnd.pvi.ptid1", "ptid"],
    ["application/vnd.quark.quarkxpress", "qxd"],
    ["application/vnd.realvnc.bed", "bed"],
    ["application/vnd.recordare.musicxml", "mxl"],
    ["application/vnd.recordare.musicxml+xml", "musicxml"],
    ["application/vnd.rig.cryptonote", "cryptonote"],
    ["application/vnd.rim.cod", "cod"],
    ["application/vnd.rn-realmedia", "rm"],
    ["application/vnd.rn-realplayer", "rnx"],
    ["application/vnd.route66.link66+xml", "link66"],
    ["application/vnd.sailingtracker.track", "st"],
    ["application/vnd.seemail", "see"],
    ["application/vnd.sema", "sema"],
    ["application/vnd.semd", "semd"],
    ["application/vnd.semf", "semf"],
    ["application/vnd.shana.informed.formdata", "ifm"],
    ["application/vnd.shana.informed.formtemplate", "itp"],
    ["application/vnd.shana.informed.interchange", "iif"],
    ["application/vnd.shana.informed.package", "ipk"],
    ["application/vnd.simtech-mindmapper", "twd"],
    ["application/vnd.smaf", "mmf"],
    ["application/vnd.smart.teacher", "teacher"],
    ["application/vnd.solent.sdkm+xml", "sdkm"],
    ["application/vnd.spotfire.dxp", "dxp"],
    ["application/vnd.spotfire.sfs", "sfs"],
    ["application/vnd.stardivision.calc", "sdc"],
    ["application/vnd.stardivision.draw", "sda"],
    ["application/vnd.stardivision.impress", "sdd"],
    ["application/vnd.stardivision.math", "smf"],
    ["application/vnd.stardivision.writer", "sdw"],
    ["application/vnd.stardivision.writer-global", "sgl"],
    ["application/vnd.stepmania.stepchart", "sm"],
    ["application/vnd.sun.xml.calc", "sxc"],
    ["application/vnd.sun.xml.calc.template", "stc"],
    ["application/vnd.sun.xml.draw", "sxd"],
    ["application/vnd.sun.xml.draw.template", "std"],
    ["application/vnd.sun.xml.impress", "sxi"],
    ["application/vnd.sun.xml.impress.template", "sti"],
    ["application/vnd.sun.xml.math", "sxm"],
    ["application/vnd.sun.xml.writer", "sxw"],
    ["application/vnd.sun.xml.writer.global", "sxg"],
    ["application/vnd.sun.xml.writer.template", "stw"],
    ["application/vnd.sus-calendar", "sus"],
    ["application/vnd.svd", "svd"],
    ["application/vnd.symbian.install", "sis"],
    ["application/vnd.syncml+xml", "xsm"],
    ["application/vnd.syncml.dm+wbxml", "bdm"],
    ["application/vnd.syncml.dm+xml", "xdm"],
    ["application/vnd.tao.intent-module-archive", "tao"],
    ["application/vnd.tmobile-livetv", "tmo"],
    ["application/vnd.trid.tpt", "tpt"],
    ["application/vnd.triscape.mxs", "mxs"],
    ["application/vnd.trueapp", "tra"],
    ["application/vnd.ufdl", "ufd"],
    ["application/vnd.uiq.theme", "utz"],
    ["application/vnd.umajin", "umj"],
    ["application/vnd.unity", "unityweb"],
    ["application/vnd.uoml+xml", "uoml"],
    ["application/vnd.vcx", "vcx"],
    ["application/vnd.visio", "vsd"],
    ["application/vnd.visionary", "vis"],
    ["application/vnd.vsf", "vsf"],
    ["application/vnd.wap.wbxml", "wbxml"],
    ["application/vnd.wap.wmlc", "wmlc"],
    ["application/vnd.wap.wmlscriptc", "wmlsc"],
    ["application/vnd.webturbo", "wtb"],
    ["application/vnd.wolfram.player", "nbp"],
    ["application/vnd.wordperfect", "wpd"],
    ["application/vnd.wqd", "wqd"],
    ["application/vnd.wt.stf", "stf"],
    ["application/vnd.xara", ["web", "xar"]],
    ["application/vnd.xfdl", "xfdl"],
    ["application/vnd.yamaha.hv-dic", "hvd"],
    ["application/vnd.yamaha.hv-script", "hvs"],
    ["application/vnd.yamaha.hv-voice", "hvp"],
    ["application/vnd.yamaha.openscoreformat", "osf"],
    ["application/vnd.yamaha.openscoreformat.osfpvg+xml", "osfpvg"],
    ["application/vnd.yamaha.smaf-audio", "saf"],
    ["application/vnd.yamaha.smaf-phrase", "spf"],
    ["application/vnd.yellowriver-custom-menu", "cmp"],
    ["application/vnd.zul", "zir"],
    ["application/vnd.zzazz.deck+xml", "zaz"],
    ["application/vocaltec-media-desc", "vmd"],
    ["application/vocaltec-media-file", "vmf"],
    ["application/voicexml+xml", "vxml"],
    ["application/widget", "wgt"],
    ["application/winhlp", "hlp"],
    ["application/wordperfect", ["wp", "wp5", "wp6", "wpd"]],
    ["application/wordperfect6.0", ["w60", "wp5"]],
    ["application/wordperfect6.1", "w61"],
    ["application/wsdl+xml", "wsdl"],
    ["application/wspolicy+xml", "wspolicy"],
    ["application/x-123", "wk1"],
    ["application/x-7z-compressed", "7z"],
    ["application/x-abiword", "abw"],
    ["application/x-ace-compressed", "ace"],
    ["application/x-aim", "aim"],
    ["application/x-authorware-bin", "aab"],
    ["application/x-authorware-map", "aam"],
    ["application/x-authorware-seg", "aas"],
    ["application/x-bcpio", "bcpio"],
    ["application/x-binary", "bin"],
    ["application/x-binhex40", "hqx"],
    ["application/x-bittorrent", "torrent"],
    ["application/x-bsh", ["bsh", "sh", "shar"]],
    ["application/x-bytecode.elisp", "elc"],
    ["application/x-bytecode.python", "pyc"],
    ["application/x-bzip", "bz"],
    ["application/x-bzip2", ["boz", "bz2"]],
    ["application/x-cdf", "cdf"],
    ["application/x-cdlink", "vcd"],
    ["application/x-chat", ["cha", "chat"]],
    ["application/x-chess-pgn", "pgn"],
    ["application/x-cmu-raster", "ras"],
    ["application/x-cocoa", "cco"],
    ["application/x-compactpro", "cpt"],
    ["application/x-compress", "z"],
    ["application/x-compressed", ["tgz", "gz", "z", "zip"]],
    ["application/x-conference", "nsc"],
    ["application/x-cpio", "cpio"],
    ["application/x-cpt", "cpt"],
    ["application/x-csh", "csh"],
    ["application/x-debian-package", "deb"],
    ["application/x-deepv", "deepv"],
    ["application/x-director", ["dir", "dcr", "dxr"]],
    ["application/x-doom", "wad"],
    ["application/x-dtbncx+xml", "ncx"],
    ["application/x-dtbook+xml", "dtb"],
    ["application/x-dtbresource+xml", "res"],
    ["application/x-dvi", "dvi"],
    ["application/x-elc", "elc"],
    ["application/x-envoy", ["env", "evy"]],
    ["application/x-esrehber", "es"],
    ["application/x-excel", ["xls", "xla", "xlb", "xlc", "xld", "xlk", "xll", "xlm", "xlt", "xlv", "xlw"]],
    ["application/x-font-bdf", "bdf"],
    ["application/x-font-ghostscript", "gsf"],
    ["application/x-font-linux-psf", "psf"],
    ["application/x-font-otf", "otf"],
    ["application/x-font-pcf", "pcf"],
    ["application/x-font-snf", "snf"],
    ["application/x-font-ttf", "ttf"],
    ["application/x-font-type1", "pfa"],
    ["application/x-font-woff", "woff"],
    ["application/x-frame", "mif"],
    ["application/x-freelance", "pre"],
    ["application/x-futuresplash", "spl"],
    ["application/x-gnumeric", "gnumeric"],
    ["application/x-gsp", "gsp"],
    ["application/x-gss", "gss"],
    ["application/x-gtar", "gtar"],
    ["application/x-gzip", ["gz", "gzip"]],
    ["application/x-hdf", "hdf"],
    ["application/x-helpfile", ["help", "hlp"]],
    ["application/x-httpd-imap", "imap"],
    ["application/x-ima", "ima"],
    ["application/x-internet-signup", ["ins", "isp"]],
    ["application/x-internett-signup", "ins"],
    ["application/x-inventor", "iv"],
    ["application/x-ip2", "ip"],
    ["application/x-iphone", "iii"],
    ["application/x-java-class", "class"],
    ["application/x-java-commerce", "jcm"],
    ["application/x-java-jnlp-file", "jnlp"],
    ["application/x-javascript", "js"],
    ["application/x-koan", ["skd", "skm", "skp", "skt"]],
    ["application/x-ksh", "ksh"],
    ["application/x-latex", ["latex", "ltx"]],
    ["application/x-lha", "lha"],
    ["application/x-lisp", "lsp"],
    ["application/x-livescreen", "ivy"],
    ["application/x-lotus", "wq1"],
    ["application/x-lotusscreencam", "scm"],
    ["application/x-lzh", "lzh"],
    ["application/x-lzx", "lzx"],
    ["application/x-mac-binhex40", "hqx"],
    ["application/x-macbinary", "bin"],
    ["application/x-magic-cap-package-1.0", "mc$"],
    ["application/x-mathcad", "mcd"],
    ["application/x-meme", "mm"],
    ["application/x-midi", ["mid", "midi"]],
    ["application/x-mif", "mif"],
    ["application/x-mix-transfer", "nix"],
    ["application/x-mobipocket-ebook", "prc"],
    ["application/x-mplayer2", "asx"],
    ["application/x-ms-application", "application"],
    ["application/x-ms-wmd", "wmd"],
    ["application/x-ms-wmz", "wmz"],
    ["application/x-ms-xbap", "xbap"],
    ["application/x-msaccess", "mdb"],
    ["application/x-msbinder", "obd"],
    ["application/x-mscardfile", "crd"],
    ["application/x-msclip", "clp"],
    ["application/x-msdownload", ["exe", "dll"]],
    ["application/x-msexcel", ["xls", "xla", "xlw"]],
    ["application/x-msmediaview", ["mvb", "m13", "m14"]],
    ["application/x-msmetafile", "wmf"],
    ["application/x-msmoney", "mny"],
    ["application/x-mspowerpoint", "ppt"],
    ["application/x-mspublisher", "pub"],
    ["application/x-msschedule", "scd"],
    ["application/x-msterminal", "trm"],
    ["application/x-mswrite", "wri"],
    ["application/x-navi-animation", "ani"],
    ["application/x-navidoc", "nvd"],
    ["application/x-navimap", "map"],
    ["application/x-navistyle", "stl"],
    ["application/x-netcdf", ["cdf", "nc"]],
    ["application/x-newton-compatible-pkg", "pkg"],
    ["application/x-nokia-9000-communicator-add-on-software", "aos"],
    ["application/x-omc", "omc"],
    ["application/x-omcdatamaker", "omcd"],
    ["application/x-omcregerator", "omcr"],
    ["application/x-pagemaker", ["pm4", "pm5"]],
    ["application/x-pcl", "pcl"],
    ["application/x-perfmon", ["pma", "pmc", "pml", "pmr", "pmw"]],
    ["application/x-pixclscript", "plx"],
    ["application/x-pkcs10", "p10"],
    ["application/x-pkcs12", ["p12", "pfx"]],
    ["application/x-pkcs7-certificates", ["p7b", "spc"]],
    ["application/x-pkcs7-certreqresp", "p7r"],
    ["application/x-pkcs7-mime", ["p7m", "p7c"]],
    ["application/x-pkcs7-signature", ["p7s", "p7a"]],
    ["application/x-pointplus", "css"],
    ["application/x-portable-anymap", "pnm"],
    ["application/x-project", ["mpc", "mpt", "mpv", "mpx"]],
    ["application/x-qpro", "wb1"],
    ["application/x-rar-compressed", "rar"],
    ["application/x-rtf", "rtf"],
    ["application/x-sdp", "sdp"],
    ["application/x-sea", "sea"],
    ["application/x-seelogo", "sl"],
    ["application/x-sh", "sh"],
    ["application/x-shar", ["shar", "sh"]],
    ["application/x-shockwave-flash", "swf"],
    ["application/x-silverlight-app", "xap"],
    ["application/x-sit", "sit"],
    ["application/x-sprite", ["spr", "sprite"]],
    ["application/x-stuffit", "sit"],
    ["application/x-stuffitx", "sitx"],
    ["application/x-sv4cpio", "sv4cpio"],
    ["application/x-sv4crc", "sv4crc"],
    ["application/x-tar", "tar"],
    ["application/x-tbook", ["sbk", "tbk"]],
    ["application/x-tcl", "tcl"],
    ["application/x-tex", "tex"],
    ["application/x-tex-tfm", "tfm"],
    ["application/x-texinfo", ["texi", "texinfo"]],
    ["application/x-troff", ["roff", "t", "tr"]],
    ["application/x-troff-man", "man"],
    ["application/x-troff-me", "me"],
    ["application/x-troff-ms", "ms"],
    ["application/x-troff-msvideo", "avi"],
    ["application/x-ustar", "ustar"],
    ["application/x-visio", ["vsd", "vst", "vsw"]],
    ["application/x-vnd.audioexplosion.mzz", "mzz"],
    ["application/x-vnd.ls-xpix", "xpix"],
    ["application/x-vrml", "vrml"],
    ["application/x-wais-source", ["src", "wsrc"]],
    ["application/x-winhelp", "hlp"],
    ["application/x-wintalk", "wtk"],
    ["application/x-world", ["wrl", "svr"]],
    ["application/x-wpwin", "wpd"],
    ["application/x-wri", "wri"],
    ["application/x-x509-ca-cert", ["cer", "crt", "der"]],
    ["application/x-x509-user-cert", "crt"],
    ["application/x-xfig", "fig"],
    ["application/x-xpinstall", "xpi"],
    ["application/x-zip-compressed", "zip"],
    ["application/xcap-diff+xml", "xdf"],
    ["application/xenc+xml", "xenc"],
    ["application/xhtml+xml", "xhtml"],
    ["application/xml", "xml"],
    ["application/xml-dtd", "dtd"],
    ["application/xop+xml", "xop"],
    ["application/xslt+xml", "xslt"],
    ["application/xspf+xml", "xspf"],
    ["application/xv+xml", "mxml"],
    ["application/yang", "yang"],
    ["application/yin+xml", "yin"],
    ["application/ynd.ms-pkipko", "pko"],
    ["application/zip", "zip"],
    ["audio/adpcm", "adp"],
    ["audio/aiff", ["aiff", "aif", "aifc"]],
    ["audio/basic", ["snd", "au"]],
    ["audio/it", "it"],
    ["audio/make", ["funk", "my", "pfunk"]],
    ["audio/make.my.funk", "pfunk"],
    ["audio/mid", ["mid", "rmi"]],
    ["audio/midi", ["midi", "kar", "mid"]],
    ["audio/mod", "mod"],
    ["audio/mp4", "mp4a"],
    ["audio/mpeg", ["mpga", "mp3", "m2a", "mp2", "mpa", "mpg"]],
    ["audio/mpeg3", "mp3"],
    ["audio/nspaudio", ["la", "lma"]],
    ["audio/ogg", "oga"],
    ["audio/s3m", "s3m"],
    ["audio/tsp-audio", "tsi"],
    ["audio/tsplayer", "tsp"],
    ["audio/vnd.dece.audio", "uva"],
    ["audio/vnd.digital-winds", "eol"],
    ["audio/vnd.dra", "dra"],
    ["audio/vnd.dts", "dts"],
    ["audio/vnd.dts.hd", "dtshd"],
    ["audio/vnd.lucent.voice", "lvp"],
    ["audio/vnd.ms-playready.media.pya", "pya"],
    ["audio/vnd.nuera.ecelp4800", "ecelp4800"],
    ["audio/vnd.nuera.ecelp7470", "ecelp7470"],
    ["audio/vnd.nuera.ecelp9600", "ecelp9600"],
    ["audio/vnd.qcelp", "qcp"],
    ["audio/vnd.rip", "rip"],
    ["audio/voc", "voc"],
    ["audio/voxware", "vox"],
    ["audio/wav", "wav"],
    ["audio/webm", "weba"],
    ["audio/x-aac", "aac"],
    ["audio/x-adpcm", "snd"],
    ["audio/x-aiff", ["aiff", "aif", "aifc"]],
    ["audio/x-au", "au"],
    ["audio/x-gsm", ["gsd", "gsm"]],
    ["audio/x-jam", "jam"],
    ["audio/x-liveaudio", "lam"],
    ["audio/x-mid", ["mid", "midi"]],
    ["audio/x-midi", ["midi", "mid"]],
    ["audio/x-mod", "mod"],
    ["audio/x-mpeg", "mp2"],
    ["audio/x-mpeg-3", "mp3"],
    ["audio/x-mpegurl", "m3u"],
    ["audio/x-mpequrl", "m3u"],
    ["audio/x-ms-wax", "wax"],
    ["audio/x-ms-wma", "wma"],
    ["audio/x-nspaudio", ["la", "lma"]],
    ["audio/x-pn-realaudio", ["ra", "ram", "rm", "rmm", "rmp"]],
    ["audio/x-pn-realaudio-plugin", ["ra", "rmp", "rpm"]],
    ["audio/x-psid", "sid"],
    ["audio/x-realaudio", "ra"],
    ["audio/x-twinvq", "vqf"],
    ["audio/x-twinvq-plugin", ["vqe", "vql"]],
    ["audio/x-vnd.audioexplosion.mjuicemediafile", "mjf"],
    ["audio/x-voc", "voc"],
    ["audio/x-wav", "wav"],
    ["audio/xm", "xm"],
    ["chemical/x-cdx", "cdx"],
    ["chemical/x-cif", "cif"],
    ["chemical/x-cmdf", "cmdf"],
    ["chemical/x-cml", "cml"],
    ["chemical/x-csml", "csml"],
    ["chemical/x-pdb", ["pdb", "xyz"]],
    ["chemical/x-xyz", "xyz"],
    ["drawing/x-dwf", "dwf"],
    ["i-world/i-vrml", "ivr"],
    ["image/bmp", ["bmp", "bm"]],
    ["image/cgm", "cgm"],
    ["image/cis-cod", "cod"],
    ["image/cmu-raster", ["ras", "rast"]],
    ["image/fif", "fif"],
    ["image/florian", ["flo", "turbot"]],
    ["image/g3fax", "g3"],
    ["image/gif", "gif"],
    ["image/ief", ["ief", "iefs"]],
    ["image/jpeg", ["jpeg", "jpe", "jpg", "jfif", "jfif-tbnl"]],
    ["image/jutvision", "jut"],
    ["image/ktx", "ktx"],
    ["image/naplps", ["nap", "naplps"]],
    ["image/pict", ["pic", "pict"]],
    ["image/pipeg", "jfif"],
    ["image/pjpeg", ["jfif", "jpe", "jpeg", "jpg"]],
    ["image/png", ["png", "x-png"]],
    ["image/prs.btif", "btif"],
    ["image/svg+xml", "svg"],
    ["image/tiff", ["tif", "tiff"]],
    ["image/vasa", "mcf"],
    ["image/vnd.adobe.photoshop", "psd"],
    ["image/vnd.dece.graphic", "uvi"],
    ["image/vnd.djvu", "djvu"],
    ["image/vnd.dvb.subtitle", "sub"],
    ["image/vnd.dwg", ["dwg", "dxf", "svf"]],
    ["image/vnd.dxf", "dxf"],
    ["image/vnd.fastbidsheet", "fbs"],
    ["image/vnd.fpx", "fpx"],
    ["image/vnd.fst", "fst"],
    ["image/vnd.fujixerox.edmics-mmr", "mmr"],
    ["image/vnd.fujixerox.edmics-rlc", "rlc"],
    ["image/vnd.ms-modi", "mdi"],
    ["image/vnd.net-fpx", ["fpx", "npx"]],
    ["image/vnd.rn-realflash", "rf"],
    ["image/vnd.rn-realpix", "rp"],
    ["image/vnd.wap.wbmp", "wbmp"],
    ["image/vnd.xiff", "xif"],
    ["image/webp", "webp"],
    ["image/x-cmu-raster", "ras"],
    ["image/x-cmx", "cmx"],
    ["image/x-dwg", ["dwg", "dxf", "svf"]],
    ["image/x-freehand", "fh"],
    ["image/x-icon", "ico"],
    ["image/x-jg", "art"],
    ["image/x-jps", "jps"],
    ["image/x-niff", ["niff", "nif"]],
    ["image/x-pcx", "pcx"],
    ["image/x-pict", ["pct", "pic"]],
    ["image/x-portable-anymap", "pnm"],
    ["image/x-portable-bitmap", "pbm"],
    ["image/x-portable-graymap", "pgm"],
    ["image/x-portable-greymap", "pgm"],
    ["image/x-portable-pixmap", "ppm"],
    ["image/x-quicktime", ["qif", "qti", "qtif"]],
    ["image/x-rgb", "rgb"],
    ["image/x-tiff", ["tif", "tiff"]],
    ["image/x-windows-bmp", "bmp"],
    ["image/x-xbitmap", "xbm"],
    ["image/x-xbm", "xbm"],
    ["image/x-xpixmap", ["xpm", "pm"]],
    ["image/x-xwd", "xwd"],
    ["image/x-xwindowdump", "xwd"],
    ["image/xbm", "xbm"],
    ["image/xpm", "xpm"],
    ["message/rfc822", ["eml", "mht", "mhtml", "nws", "mime"]],
    ["model/iges", ["iges", "igs"]],
    ["model/mesh", "msh"],
    ["model/vnd.collada+xml", "dae"],
    ["model/vnd.dwf", "dwf"],
    ["model/vnd.gdl", "gdl"],
    ["model/vnd.gtw", "gtw"],
    ["model/vnd.mts", "mts"],
    ["model/vnd.vtu", "vtu"],
    ["model/vrml", ["vrml", "wrl", "wrz"]],
    ["model/x-pov", "pov"],
    ["multipart/x-gzip", "gzip"],
    ["multipart/x-ustar", "ustar"],
    ["multipart/x-zip", "zip"],
    ["music/crescendo", ["mid", "midi"]],
    ["music/x-karaoke", "kar"],
    ["paleovu/x-pv", "pvu"],
    ["text/asp", "asp"],
    ["text/calendar", "ics"],
    ["text/css", "css"],
    ["text/csv", "csv"],
    ["text/ecmascript", "js"],
    ["text/h323", "323"],
    ["text/html", ["html", "htm", "stm", "acgi", "htmls", "htx", "shtml"]],
    ["text/iuls", "uls"],
    ["text/javascript", "js"],
    ["text/mcf", "mcf"],
    ["text/n3", "n3"],
    ["text/pascal", "pas"],
    [
      "text/plain",
      [
        "txt",
        "bas",
        "c",
        "h",
        "c++",
        "cc",
        "com",
        "conf",
        "cxx",
        "def",
        "f",
        "f90",
        "for",
        "g",
        "hh",
        "idc",
        "jav",
        "java",
        "list",
        "log",
        "lst",
        "m",
        "mar",
        "pl",
        "sdml",
        "text"
      ]
    ],
    ["text/plain-bas", "par"],
    ["text/prs.lines.tag", "dsc"],
    ["text/richtext", ["rtx", "rt", "rtf"]],
    ["text/scriplet", "wsc"],
    ["text/scriptlet", "sct"],
    ["text/sgml", ["sgm", "sgml"]],
    ["text/tab-separated-values", "tsv"],
    ["text/troff", "t"],
    ["text/turtle", "ttl"],
    ["text/uri-list", ["uni", "unis", "uri", "uris"]],
    ["text/vnd.abc", "abc"],
    ["text/vnd.curl", "curl"],
    ["text/vnd.curl.dcurl", "dcurl"],
    ["text/vnd.curl.mcurl", "mcurl"],
    ["text/vnd.curl.scurl", "scurl"],
    ["text/vnd.fly", "fly"],
    ["text/vnd.fmi.flexstor", "flx"],
    ["text/vnd.graphviz", "gv"],
    ["text/vnd.in3d.3dml", "3dml"],
    ["text/vnd.in3d.spot", "spot"],
    ["text/vnd.rn-realtext", "rt"],
    ["text/vnd.sun.j2me.app-descriptor", "jad"],
    ["text/vnd.wap.wml", "wml"],
    ["text/vnd.wap.wmlscript", "wmls"],
    ["text/webviewhtml", "htt"],
    ["text/x-asm", ["asm", "s"]],
    ["text/x-audiosoft-intra", "aip"],
    ["text/x-c", ["c", "cc", "cpp"]],
    ["text/x-component", "htc"],
    ["text/x-fortran", ["for", "f", "f77", "f90"]],
    ["text/x-h", ["h", "hh"]],
    ["text/x-java-source", ["java", "jav"]],
    ["text/x-java-source,java", "java"],
    ["text/x-la-asf", "lsx"],
    ["text/x-m", "m"],
    ["text/x-pascal", "p"],
    ["text/x-script", "hlb"],
    ["text/x-script.csh", "csh"],
    ["text/x-script.elisp", "el"],
    ["text/x-script.guile", "scm"],
    ["text/x-script.ksh", "ksh"],
    ["text/x-script.lisp", "lsp"],
    ["text/x-script.perl", "pl"],
    ["text/x-script.perl-module", "pm"],
    ["text/x-script.phyton", "py"],
    ["text/x-script.rexx", "rexx"],
    ["text/x-script.scheme", "scm"],
    ["text/x-script.sh", "sh"],
    ["text/x-script.tcl", "tcl"],
    ["text/x-script.tcsh", "tcsh"],
    ["text/x-script.zsh", "zsh"],
    ["text/x-server-parsed-html", ["shtml", "ssi"]],
    ["text/x-setext", "etx"],
    ["text/x-sgml", ["sgm", "sgml"]],
    ["text/x-speech", ["spc", "talk"]],
    ["text/x-uil", "uil"],
    ["text/x-uuencode", ["uu", "uue"]],
    ["text/x-vcalendar", "vcs"],
    ["text/x-vcard", "vcf"],
    ["text/xml", "xml"],
    ["video/3gpp", "3gp"],
    ["video/3gpp2", "3g2"],
    ["video/animaflex", "afl"],
    ["video/avi", "avi"],
    ["video/avs-video", "avs"],
    ["video/dl", "dl"],
    ["video/fli", "fli"],
    ["video/gl", "gl"],
    ["video/h261", "h261"],
    ["video/h263", "h263"],
    ["video/h264", "h264"],
    ["video/jpeg", "jpgv"],
    ["video/jpm", "jpm"],
    ["video/mj2", "mj2"],
    ["video/mp4", "mp4"],
    ["video/mpeg", ["mpeg", "mp2", "mpa", "mpe", "mpg", "mpv2", "m1v", "m2v", "mp3"]],
    ["video/msvideo", "avi"],
    ["video/ogg", "ogv"],
    ["video/quicktime", ["mov", "qt", "moov"]],
    ["video/vdo", "vdo"],
    ["video/vivo", ["viv", "vivo"]],
    ["video/vnd.dece.hd", "uvh"],
    ["video/vnd.dece.mobile", "uvm"],
    ["video/vnd.dece.pd", "uvp"],
    ["video/vnd.dece.sd", "uvs"],
    ["video/vnd.dece.video", "uvv"],
    ["video/vnd.fvt", "fvt"],
    ["video/vnd.mpegurl", "mxu"],
    ["video/vnd.ms-playready.media.pyv", "pyv"],
    ["video/vnd.rn-realvideo", "rv"],
    ["video/vnd.uvvu.mp4", "uvu"],
    ["video/vnd.vivo", ["viv", "vivo"]],
    ["video/vosaic", "vos"],
    ["video/webm", "webm"],
    ["video/x-amt-demorun", "xdr"],
    ["video/x-amt-showrun", "xsr"],
    ["video/x-atomic3d-feature", "fmf"],
    ["video/x-dl", "dl"],
    ["video/x-dv", ["dif", "dv"]],
    ["video/x-f4v", "f4v"],
    ["video/x-fli", "fli"],
    ["video/x-flv", "flv"],
    ["video/x-gl", "gl"],
    ["video/x-isvideo", "isu"],
    ["video/x-la-asf", ["lsf", "lsx"]],
    ["video/x-m4v", "m4v"],
    ["video/x-motion-jpeg", "mjpg"],
    ["video/x-mpeg", ["mp3", "mp2"]],
    ["video/x-mpeq2a", "mp2"],
    ["video/x-ms-asf", ["asf", "asr", "asx"]],
    ["video/x-ms-asf-plugin", "asx"],
    ["video/x-ms-wm", "wm"],
    ["video/x-ms-wmv", "wmv"],
    ["video/x-ms-wmx", "wmx"],
    ["video/x-ms-wvx", "wvx"],
    ["video/x-msvideo", "avi"],
    ["video/x-qtc", "qtc"],
    ["video/x-scm", "scm"],
    ["video/x-sgi-movie", ["movie", "mv"]],
    ["windows/metafile", "wmf"],
    ["www/mime", "mime"],
    ["x-conference/x-cooltalk", "ice"],
    ["x-music/x-midi", ["mid", "midi"]],
    ["x-world/x-3dmf", ["3dm", "3dmf", "qd3", "qd3d"]],
    ["x-world/x-svr", "svr"],
    ["x-world/x-vrml", ["flr", "vrml", "wrl", "wrz", "xaf", "xof"]],
    ["x-world/x-vrt", "vrt"],
    ["xgl/drawing", "xgz"],
    ["xgl/movie", "xmz"]
  ]);
  var extensions = new Map([
    ["123", "application/vnd.lotus-1-2-3"],
    ["323", "text/h323"],
    ["*", "application/octet-stream"],
    ["3dm", "x-world/x-3dmf"],
    ["3dmf", "x-world/x-3dmf"],
    ["3dml", "text/vnd.in3d.3dml"],
    ["3g2", "video/3gpp2"],
    ["3gp", "video/3gpp"],
    ["7z", "application/x-7z-compressed"],
    ["a", "application/octet-stream"],
    ["aab", "application/x-authorware-bin"],
    ["aac", "audio/x-aac"],
    ["aam", "application/x-authorware-map"],
    ["aas", "application/x-authorware-seg"],
    ["abc", "text/vnd.abc"],
    ["abw", "application/x-abiword"],
    ["ac", "application/pkix-attr-cert"],
    ["acc", "application/vnd.americandynamics.acc"],
    ["ace", "application/x-ace-compressed"],
    ["acgi", "text/html"],
    ["acu", "application/vnd.acucobol"],
    ["acx", "application/internet-property-stream"],
    ["adp", "audio/adpcm"],
    ["aep", "application/vnd.audiograph"],
    ["afl", "video/animaflex"],
    ["afp", "application/vnd.ibm.modcap"],
    ["ahead", "application/vnd.ahead.space"],
    ["ai", "application/postscript"],
    ["aif", ["audio/aiff", "audio/x-aiff"]],
    ["aifc", ["audio/aiff", "audio/x-aiff"]],
    ["aiff", ["audio/aiff", "audio/x-aiff"]],
    ["aim", "application/x-aim"],
    ["aip", "text/x-audiosoft-intra"],
    ["air", "application/vnd.adobe.air-application-installer-package+zip"],
    ["ait", "application/vnd.dvb.ait"],
    ["ami", "application/vnd.amiga.ami"],
    ["ani", "application/x-navi-animation"],
    ["aos", "application/x-nokia-9000-communicator-add-on-software"],
    ["apk", "application/vnd.android.package-archive"],
    ["application", "application/x-ms-application"],
    ["apr", "application/vnd.lotus-approach"],
    ["aps", "application/mime"],
    ["arc", "application/octet-stream"],
    ["arj", ["application/arj", "application/octet-stream"]],
    ["art", "image/x-jg"],
    ["asf", "video/x-ms-asf"],
    ["asm", "text/x-asm"],
    ["aso", "application/vnd.accpac.simply.aso"],
    ["asp", "text/asp"],
    ["asr", "video/x-ms-asf"],
    ["asx", ["video/x-ms-asf", "application/x-mplayer2", "video/x-ms-asf-plugin"]],
    ["atc", "application/vnd.acucorp"],
    ["atomcat", "application/atomcat+xml"],
    ["atomsvc", "application/atomsvc+xml"],
    ["atx", "application/vnd.antix.game-component"],
    ["au", ["audio/basic", "audio/x-au"]],
    ["avi", ["video/avi", "video/msvideo", "application/x-troff-msvideo", "video/x-msvideo"]],
    ["avs", "video/avs-video"],
    ["aw", "application/applixware"],
    ["axs", "application/olescript"],
    ["azf", "application/vnd.airzip.filesecure.azf"],
    ["azs", "application/vnd.airzip.filesecure.azs"],
    ["azw", "application/vnd.amazon.ebook"],
    ["bas", "text/plain"],
    ["bcpio", "application/x-bcpio"],
    ["bdf", "application/x-font-bdf"],
    ["bdm", "application/vnd.syncml.dm+wbxml"],
    ["bed", "application/vnd.realvnc.bed"],
    ["bh2", "application/vnd.fujitsu.oasysprs"],
    ["bin", ["application/octet-stream", "application/mac-binary", "application/macbinary", "application/x-macbinary", "application/x-binary"]],
    ["bm", "image/bmp"],
    ["bmi", "application/vnd.bmi"],
    ["bmp", ["image/bmp", "image/x-windows-bmp"]],
    ["boo", "application/book"],
    ["book", "application/book"],
    ["box", "application/vnd.previewsystems.box"],
    ["boz", "application/x-bzip2"],
    ["bsh", "application/x-bsh"],
    ["btif", "image/prs.btif"],
    ["bz", "application/x-bzip"],
    ["bz2", "application/x-bzip2"],
    ["c", ["text/plain", "text/x-c"]],
    ["c++", "text/plain"],
    ["c11amc", "application/vnd.cluetrust.cartomobile-config"],
    ["c11amz", "application/vnd.cluetrust.cartomobile-config-pkg"],
    ["c4g", "application/vnd.clonk.c4group"],
    ["cab", "application/vnd.ms-cab-compressed"],
    ["car", "application/vnd.curl.car"],
    ["cat", ["application/vnd.ms-pkiseccat", "application/vnd.ms-pki.seccat"]],
    ["cc", ["text/plain", "text/x-c"]],
    ["ccad", "application/clariscad"],
    ["cco", "application/x-cocoa"],
    ["ccxml", "application/ccxml+xml,"],
    ["cdbcmsg", "application/vnd.contact.cmsg"],
    ["cdf", ["application/cdf", "application/x-cdf", "application/x-netcdf"]],
    ["cdkey", "application/vnd.mediastation.cdkey"],
    ["cdmia", "application/cdmi-capability"],
    ["cdmic", "application/cdmi-container"],
    ["cdmid", "application/cdmi-domain"],
    ["cdmio", "application/cdmi-object"],
    ["cdmiq", "application/cdmi-queue"],
    ["cdx", "chemical/x-cdx"],
    ["cdxml", "application/vnd.chemdraw+xml"],
    ["cdy", "application/vnd.cinderella"],
    ["cer", ["application/pkix-cert", "application/x-x509-ca-cert"]],
    ["cgm", "image/cgm"],
    ["cha", "application/x-chat"],
    ["chat", "application/x-chat"],
    ["chm", "application/vnd.ms-htmlhelp"],
    ["chrt", "application/vnd.kde.kchart"],
    ["cif", "chemical/x-cif"],
    ["cii", "application/vnd.anser-web-certificate-issue-initiation"],
    ["cil", "application/vnd.ms-artgalry"],
    ["cla", "application/vnd.claymore"],
    ["class", ["application/octet-stream", "application/java", "application/java-byte-code", "application/java-vm", "application/x-java-class"]],
    ["clkk", "application/vnd.crick.clicker.keyboard"],
    ["clkp", "application/vnd.crick.clicker.palette"],
    ["clkt", "application/vnd.crick.clicker.template"],
    ["clkw", "application/vnd.crick.clicker.wordbank"],
    ["clkx", "application/vnd.crick.clicker"],
    ["clp", "application/x-msclip"],
    ["cmc", "application/vnd.cosmocaller"],
    ["cmdf", "chemical/x-cmdf"],
    ["cml", "chemical/x-cml"],
    ["cmp", "application/vnd.yellowriver-custom-menu"],
    ["cmx", "image/x-cmx"],
    ["cod", ["image/cis-cod", "application/vnd.rim.cod"]],
    ["com", ["application/octet-stream", "text/plain"]],
    ["conf", "text/plain"],
    ["cpio", "application/x-cpio"],
    ["cpp", "text/x-c"],
    ["cpt", ["application/mac-compactpro", "application/x-compactpro", "application/x-cpt"]],
    ["crd", "application/x-mscardfile"],
    ["crl", ["application/pkix-crl", "application/pkcs-crl"]],
    ["crt", ["application/pkix-cert", "application/x-x509-user-cert", "application/x-x509-ca-cert"]],
    ["cryptonote", "application/vnd.rig.cryptonote"],
    ["csh", ["text/x-script.csh", "application/x-csh"]],
    ["csml", "chemical/x-csml"],
    ["csp", "application/vnd.commonspace"],
    ["css", ["text/css", "application/x-pointplus"]],
    ["csv", "text/csv"],
    ["cu", "application/cu-seeme"],
    ["curl", "text/vnd.curl"],
    ["cww", "application/prs.cww"],
    ["cxx", "text/plain"],
    ["dae", "model/vnd.collada+xml"],
    ["daf", "application/vnd.mobius.daf"],
    ["davmount", "application/davmount+xml"],
    ["dcr", "application/x-director"],
    ["dcurl", "text/vnd.curl.dcurl"],
    ["dd2", "application/vnd.oma.dd2+xml"],
    ["ddd", "application/vnd.fujixerox.ddd"],
    ["deb", "application/x-debian-package"],
    ["deepv", "application/x-deepv"],
    ["def", "text/plain"],
    ["der", "application/x-x509-ca-cert"],
    ["dfac", "application/vnd.dreamfactory"],
    ["dif", "video/x-dv"],
    ["dir", "application/x-director"],
    ["dis", "application/vnd.mobius.dis"],
    ["djvu", "image/vnd.djvu"],
    ["dl", ["video/dl", "video/x-dl"]],
    ["dll", "application/x-msdownload"],
    ["dms", "application/octet-stream"],
    ["dna", "application/vnd.dna"],
    ["doc", "application/msword"],
    ["docm", "application/vnd.ms-word.document.macroenabled.12"],
    ["docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"],
    ["dot", "application/msword"],
    ["dotm", "application/vnd.ms-word.template.macroenabled.12"],
    ["dotx", "application/vnd.openxmlformats-officedocument.wordprocessingml.template"],
    ["dp", ["application/commonground", "application/vnd.osgi.dp"]],
    ["dpg", "application/vnd.dpgraph"],
    ["dra", "audio/vnd.dra"],
    ["drw", "application/drafting"],
    ["dsc", "text/prs.lines.tag"],
    ["dssc", "application/dssc+der"],
    ["dtb", "application/x-dtbook+xml"],
    ["dtd", "application/xml-dtd"],
    ["dts", "audio/vnd.dts"],
    ["dtshd", "audio/vnd.dts.hd"],
    ["dump", "application/octet-stream"],
    ["dv", "video/x-dv"],
    ["dvi", "application/x-dvi"],
    ["dwf", ["model/vnd.dwf", "drawing/x-dwf"]],
    ["dwg", ["application/acad", "image/vnd.dwg", "image/x-dwg"]],
    ["dxf", ["application/dxf", "image/vnd.dwg", "image/vnd.dxf", "image/x-dwg"]],
    ["dxp", "application/vnd.spotfire.dxp"],
    ["dxr", "application/x-director"],
    ["ecelp4800", "audio/vnd.nuera.ecelp4800"],
    ["ecelp7470", "audio/vnd.nuera.ecelp7470"],
    ["ecelp9600", "audio/vnd.nuera.ecelp9600"],
    ["edm", "application/vnd.novadigm.edm"],
    ["edx", "application/vnd.novadigm.edx"],
    ["efif", "application/vnd.picsel"],
    ["ei6", "application/vnd.pg.osasli"],
    ["el", "text/x-script.elisp"],
    ["elc", ["application/x-elc", "application/x-bytecode.elisp"]],
    ["eml", "message/rfc822"],
    ["emma", "application/emma+xml"],
    ["env", "application/x-envoy"],
    ["eol", "audio/vnd.digital-winds"],
    ["eot", "application/vnd.ms-fontobject"],
    ["eps", "application/postscript"],
    ["epub", "application/epub+zip"],
    ["es", ["application/ecmascript", "application/x-esrehber"]],
    ["es3", "application/vnd.eszigno3+xml"],
    ["esf", "application/vnd.epson.esf"],
    ["etx", "text/x-setext"],
    ["evy", ["application/envoy", "application/x-envoy"]],
    ["exe", ["application/octet-stream", "application/x-msdownload"]],
    ["exi", "application/exi"],
    ["ext", "application/vnd.novadigm.ext"],
    ["ez2", "application/vnd.ezpix-album"],
    ["ez3", "application/vnd.ezpix-package"],
    ["f", ["text/plain", "text/x-fortran"]],
    ["f4v", "video/x-f4v"],
    ["f77", "text/x-fortran"],
    ["f90", ["text/plain", "text/x-fortran"]],
    ["fbs", "image/vnd.fastbidsheet"],
    ["fcs", "application/vnd.isac.fcs"],
    ["fdf", "application/vnd.fdf"],
    ["fe_launch", "application/vnd.denovo.fcselayout-link"],
    ["fg5", "application/vnd.fujitsu.oasysgp"],
    ["fh", "image/x-freehand"],
    ["fif", ["application/fractals", "image/fif"]],
    ["fig", "application/x-xfig"],
    ["fli", ["video/fli", "video/x-fli"]],
    ["flo", ["image/florian", "application/vnd.micrografx.flo"]],
    ["flr", "x-world/x-vrml"],
    ["flv", "video/x-flv"],
    ["flw", "application/vnd.kde.kivio"],
    ["flx", "text/vnd.fmi.flexstor"],
    ["fly", "text/vnd.fly"],
    ["fm", "application/vnd.framemaker"],
    ["fmf", "video/x-atomic3d-feature"],
    ["fnc", "application/vnd.frogans.fnc"],
    ["for", ["text/plain", "text/x-fortran"]],
    ["fpx", ["image/vnd.fpx", "image/vnd.net-fpx"]],
    ["frl", "application/freeloader"],
    ["fsc", "application/vnd.fsc.weblaunch"],
    ["fst", "image/vnd.fst"],
    ["ftc", "application/vnd.fluxtime.clip"],
    ["fti", "application/vnd.anser-web-funds-transfer-initiation"],
    ["funk", "audio/make"],
    ["fvt", "video/vnd.fvt"],
    ["fxp", "application/vnd.adobe.fxp"],
    ["fzs", "application/vnd.fuzzysheet"],
    ["g", "text/plain"],
    ["g2w", "application/vnd.geoplan"],
    ["g3", "image/g3fax"],
    ["g3w", "application/vnd.geospace"],
    ["gac", "application/vnd.groove-account"],
    ["gdl", "model/vnd.gdl"],
    ["geo", "application/vnd.dynageo"],
    ["geojson", "application/geo+json"],
    ["gex", "application/vnd.geometry-explorer"],
    ["ggb", "application/vnd.geogebra.file"],
    ["ggt", "application/vnd.geogebra.tool"],
    ["ghf", "application/vnd.groove-help"],
    ["gif", "image/gif"],
    ["gim", "application/vnd.groove-identity-message"],
    ["gl", ["video/gl", "video/x-gl"]],
    ["gmx", "application/vnd.gmx"],
    ["gnumeric", "application/x-gnumeric"],
    ["gph", "application/vnd.flographit"],
    ["gqf", "application/vnd.grafeq"],
    ["gram", "application/srgs"],
    ["grv", "application/vnd.groove-injector"],
    ["grxml", "application/srgs+xml"],
    ["gsd", "audio/x-gsm"],
    ["gsf", "application/x-font-ghostscript"],
    ["gsm", "audio/x-gsm"],
    ["gsp", "application/x-gsp"],
    ["gss", "application/x-gss"],
    ["gtar", "application/x-gtar"],
    ["gtm", "application/vnd.groove-tool-message"],
    ["gtw", "model/vnd.gtw"],
    ["gv", "text/vnd.graphviz"],
    ["gxt", "application/vnd.geonext"],
    ["gz", ["application/x-gzip", "application/x-compressed"]],
    ["gzip", ["multipart/x-gzip", "application/x-gzip"]],
    ["h", ["text/plain", "text/x-h"]],
    ["h261", "video/h261"],
    ["h263", "video/h263"],
    ["h264", "video/h264"],
    ["hal", "application/vnd.hal+xml"],
    ["hbci", "application/vnd.hbci"],
    ["hdf", "application/x-hdf"],
    ["help", "application/x-helpfile"],
    ["hgl", "application/vnd.hp-hpgl"],
    ["hh", ["text/plain", "text/x-h"]],
    ["hlb", "text/x-script"],
    ["hlp", ["application/winhlp", "application/hlp", "application/x-helpfile", "application/x-winhelp"]],
    ["hpg", "application/vnd.hp-hpgl"],
    ["hpgl", "application/vnd.hp-hpgl"],
    ["hpid", "application/vnd.hp-hpid"],
    ["hps", "application/vnd.hp-hps"],
    [
      "hqx",
      [
        "application/mac-binhex40",
        "application/binhex",
        "application/binhex4",
        "application/mac-binhex",
        "application/x-binhex40",
        "application/x-mac-binhex40"
      ]
    ],
    ["hta", "application/hta"],
    ["htc", "text/x-component"],
    ["htke", "application/vnd.kenameaapp"],
    ["htm", "text/html"],
    ["html", "text/html"],
    ["htmls", "text/html"],
    ["htt", "text/webviewhtml"],
    ["htx", "text/html"],
    ["hvd", "application/vnd.yamaha.hv-dic"],
    ["hvp", "application/vnd.yamaha.hv-voice"],
    ["hvs", "application/vnd.yamaha.hv-script"],
    ["i2g", "application/vnd.intergeo"],
    ["icc", "application/vnd.iccprofile"],
    ["ice", "x-conference/x-cooltalk"],
    ["ico", "image/x-icon"],
    ["ics", "text/calendar"],
    ["idc", "text/plain"],
    ["ief", "image/ief"],
    ["iefs", "image/ief"],
    ["ifm", "application/vnd.shana.informed.formdata"],
    ["iges", ["application/iges", "model/iges"]],
    ["igl", "application/vnd.igloader"],
    ["igm", "application/vnd.insors.igm"],
    ["igs", ["application/iges", "model/iges"]],
    ["igx", "application/vnd.micrografx.igx"],
    ["iif", "application/vnd.shana.informed.interchange"],
    ["iii", "application/x-iphone"],
    ["ima", "application/x-ima"],
    ["imap", "application/x-httpd-imap"],
    ["imp", "application/vnd.accpac.simply.imp"],
    ["ims", "application/vnd.ms-ims"],
    ["inf", "application/inf"],
    ["ins", ["application/x-internet-signup", "application/x-internett-signup"]],
    ["ip", "application/x-ip2"],
    ["ipfix", "application/ipfix"],
    ["ipk", "application/vnd.shana.informed.package"],
    ["irm", "application/vnd.ibm.rights-management"],
    ["irp", "application/vnd.irepository.package+xml"],
    ["isp", "application/x-internet-signup"],
    ["isu", "video/x-isvideo"],
    ["it", "audio/it"],
    ["itp", "application/vnd.shana.informed.formtemplate"],
    ["iv", "application/x-inventor"],
    ["ivp", "application/vnd.immervision-ivp"],
    ["ivr", "i-world/i-vrml"],
    ["ivu", "application/vnd.immervision-ivu"],
    ["ivy", "application/x-livescreen"],
    ["jad", "text/vnd.sun.j2me.app-descriptor"],
    ["jam", ["application/vnd.jam", "audio/x-jam"]],
    ["jar", "application/java-archive"],
    ["jav", ["text/plain", "text/x-java-source"]],
    ["java", ["text/plain", "text/x-java-source,java", "text/x-java-source"]],
    ["jcm", "application/x-java-commerce"],
    ["jfif", ["image/pipeg", "image/jpeg", "image/pjpeg"]],
    ["jfif-tbnl", "image/jpeg"],
    ["jisp", "application/vnd.jisp"],
    ["jlt", "application/vnd.hp-jlyt"],
    ["jnlp", "application/x-java-jnlp-file"],
    ["joda", "application/vnd.joost.joda-archive"],
    ["jpe", ["image/jpeg", "image/pjpeg"]],
    ["jpeg", ["image/jpeg", "image/pjpeg"]],
    ["jpg", ["image/jpeg", "image/pjpeg"]],
    ["jpgv", "video/jpeg"],
    ["jpm", "video/jpm"],
    ["jps", "image/x-jps"],
    ["js", ["application/javascript", "application/ecmascript", "text/javascript", "text/ecmascript", "application/x-javascript"]],
    ["json", "application/json"],
    ["jut", "image/jutvision"],
    ["kar", ["audio/midi", "music/x-karaoke"]],
    ["karbon", "application/vnd.kde.karbon"],
    ["kfo", "application/vnd.kde.kformula"],
    ["kia", "application/vnd.kidspiration"],
    ["kml", "application/vnd.google-earth.kml+xml"],
    ["kmz", "application/vnd.google-earth.kmz"],
    ["kne", "application/vnd.kinar"],
    ["kon", "application/vnd.kde.kontour"],
    ["kpr", "application/vnd.kde.kpresenter"],
    ["ksh", ["application/x-ksh", "text/x-script.ksh"]],
    ["ksp", "application/vnd.kde.kspread"],
    ["ktx", "image/ktx"],
    ["ktz", "application/vnd.kahootz"],
    ["kwd", "application/vnd.kde.kword"],
    ["la", ["audio/nspaudio", "audio/x-nspaudio"]],
    ["lam", "audio/x-liveaudio"],
    ["lasxml", "application/vnd.las.las+xml"],
    ["latex", "application/x-latex"],
    ["lbd", "application/vnd.llamagraphics.life-balance.desktop"],
    ["lbe", "application/vnd.llamagraphics.life-balance.exchange+xml"],
    ["les", "application/vnd.hhe.lesson-player"],
    ["lha", ["application/octet-stream", "application/lha", "application/x-lha"]],
    ["lhx", "application/octet-stream"],
    ["link66", "application/vnd.route66.link66+xml"],
    ["list", "text/plain"],
    ["lma", ["audio/nspaudio", "audio/x-nspaudio"]],
    ["log", "text/plain"],
    ["lrm", "application/vnd.ms-lrm"],
    ["lsf", "video/x-la-asf"],
    ["lsp", ["application/x-lisp", "text/x-script.lisp"]],
    ["lst", "text/plain"],
    ["lsx", ["video/x-la-asf", "text/x-la-asf"]],
    ["ltf", "application/vnd.frogans.ltf"],
    ["ltx", "application/x-latex"],
    ["lvp", "audio/vnd.lucent.voice"],
    ["lwp", "application/vnd.lotus-wordpro"],
    ["lzh", ["application/octet-stream", "application/x-lzh"]],
    ["lzx", ["application/lzx", "application/octet-stream", "application/x-lzx"]],
    ["m", ["text/plain", "text/x-m"]],
    ["m13", "application/x-msmediaview"],
    ["m14", "application/x-msmediaview"],
    ["m1v", "video/mpeg"],
    ["m21", "application/mp21"],
    ["m2a", "audio/mpeg"],
    ["m2v", "video/mpeg"],
    ["m3u", ["audio/x-mpegurl", "audio/x-mpequrl"]],
    ["m3u8", "application/vnd.apple.mpegurl"],
    ["m4v", "video/x-m4v"],
    ["ma", "application/mathematica"],
    ["mads", "application/mads+xml"],
    ["mag", "application/vnd.ecowin.chart"],
    ["man", "application/x-troff-man"],
    ["map", "application/x-navimap"],
    ["mar", "text/plain"],
    ["mathml", "application/mathml+xml"],
    ["mbd", "application/mbedlet"],
    ["mbk", "application/vnd.mobius.mbk"],
    ["mbox", "application/mbox"],
    ["mc$", "application/x-magic-cap-package-1.0"],
    ["mc1", "application/vnd.medcalcdata"],
    ["mcd", ["application/mcad", "application/vnd.mcd", "application/x-mathcad"]],
    ["mcf", ["image/vasa", "text/mcf"]],
    ["mcp", "application/netmc"],
    ["mcurl", "text/vnd.curl.mcurl"],
    ["mdb", "application/x-msaccess"],
    ["mdi", "image/vnd.ms-modi"],
    ["me", "application/x-troff-me"],
    ["meta4", "application/metalink4+xml"],
    ["mets", "application/mets+xml"],
    ["mfm", "application/vnd.mfmp"],
    ["mgp", "application/vnd.osgeo.mapguide.package"],
    ["mgz", "application/vnd.proteus.magazine"],
    ["mht", "message/rfc822"],
    ["mhtml", "message/rfc822"],
    ["mid", ["audio/mid", "audio/midi", "music/crescendo", "x-music/x-midi", "audio/x-midi", "application/x-midi", "audio/x-mid"]],
    ["midi", ["audio/midi", "music/crescendo", "x-music/x-midi", "audio/x-midi", "application/x-midi", "audio/x-mid"]],
    ["mif", ["application/vnd.mif", "application/x-mif", "application/x-frame"]],
    ["mime", ["message/rfc822", "www/mime"]],
    ["mj2", "video/mj2"],
    ["mjf", "audio/x-vnd.audioexplosion.mjuicemediafile"],
    ["mjpg", "video/x-motion-jpeg"],
    ["mlp", "application/vnd.dolby.mlp"],
    ["mm", ["application/base64", "application/x-meme"]],
    ["mmd", "application/vnd.chipnuts.karaoke-mmd"],
    ["mme", "application/base64"],
    ["mmf", "application/vnd.smaf"],
    ["mmr", "image/vnd.fujixerox.edmics-mmr"],
    ["mny", "application/x-msmoney"],
    ["mod", ["audio/mod", "audio/x-mod"]],
    ["mods", "application/mods+xml"],
    ["moov", "video/quicktime"],
    ["mov", "video/quicktime"],
    ["movie", "video/x-sgi-movie"],
    ["mp2", ["video/mpeg", "audio/mpeg", "video/x-mpeg", "audio/x-mpeg", "video/x-mpeq2a"]],
    ["mp3", ["audio/mpeg", "audio/mpeg3", "video/mpeg", "audio/x-mpeg-3", "video/x-mpeg"]],
    ["mp4", ["video/mp4", "application/mp4"]],
    ["mp4a", "audio/mp4"],
    ["mpa", ["video/mpeg", "audio/mpeg"]],
    ["mpc", ["application/vnd.mophun.certificate", "application/x-project"]],
    ["mpe", "video/mpeg"],
    ["mpeg", "video/mpeg"],
    ["mpg", ["video/mpeg", "audio/mpeg"]],
    ["mpga", "audio/mpeg"],
    ["mpkg", "application/vnd.apple.installer+xml"],
    ["mpm", "application/vnd.blueice.multipass"],
    ["mpn", "application/vnd.mophun.application"],
    ["mpp", "application/vnd.ms-project"],
    ["mpt", "application/x-project"],
    ["mpv", "application/x-project"],
    ["mpv2", "video/mpeg"],
    ["mpx", "application/x-project"],
    ["mpy", "application/vnd.ibm.minipay"],
    ["mqy", "application/vnd.mobius.mqy"],
    ["mrc", "application/marc"],
    ["mrcx", "application/marcxml+xml"],
    ["ms", "application/x-troff-ms"],
    ["mscml", "application/mediaservercontrol+xml"],
    ["mseq", "application/vnd.mseq"],
    ["msf", "application/vnd.epson.msf"],
    ["msg", "application/vnd.ms-outlook"],
    ["msh", "model/mesh"],
    ["msl", "application/vnd.mobius.msl"],
    ["msty", "application/vnd.muvee.style"],
    ["mts", "model/vnd.mts"],
    ["mus", "application/vnd.musician"],
    ["musicxml", "application/vnd.recordare.musicxml+xml"],
    ["mv", "video/x-sgi-movie"],
    ["mvb", "application/x-msmediaview"],
    ["mwf", "application/vnd.mfer"],
    ["mxf", "application/mxf"],
    ["mxl", "application/vnd.recordare.musicxml"],
    ["mxml", "application/xv+xml"],
    ["mxs", "application/vnd.triscape.mxs"],
    ["mxu", "video/vnd.mpegurl"],
    ["my", "audio/make"],
    ["mzz", "application/x-vnd.audioexplosion.mzz"],
    ["n-gage", "application/vnd.nokia.n-gage.symbian.install"],
    ["n3", "text/n3"],
    ["nap", "image/naplps"],
    ["naplps", "image/naplps"],
    ["nbp", "application/vnd.wolfram.player"],
    ["nc", "application/x-netcdf"],
    ["ncm", "application/vnd.nokia.configuration-message"],
    ["ncx", "application/x-dtbncx+xml"],
    ["ngdat", "application/vnd.nokia.n-gage.data"],
    ["nif", "image/x-niff"],
    ["niff", "image/x-niff"],
    ["nix", "application/x-mix-transfer"],
    ["nlu", "application/vnd.neurolanguage.nlu"],
    ["nml", "application/vnd.enliven"],
    ["nnd", "application/vnd.noblenet-directory"],
    ["nns", "application/vnd.noblenet-sealer"],
    ["nnw", "application/vnd.noblenet-web"],
    ["npx", "image/vnd.net-fpx"],
    ["nsc", "application/x-conference"],
    ["nsf", "application/vnd.lotus-notes"],
    ["nvd", "application/x-navidoc"],
    ["nws", "message/rfc822"],
    ["o", "application/octet-stream"],
    ["oa2", "application/vnd.fujitsu.oasys2"],
    ["oa3", "application/vnd.fujitsu.oasys3"],
    ["oas", "application/vnd.fujitsu.oasys"],
    ["obd", "application/x-msbinder"],
    ["oda", "application/oda"],
    ["odb", "application/vnd.oasis.opendocument.database"],
    ["odc", "application/vnd.oasis.opendocument.chart"],
    ["odf", "application/vnd.oasis.opendocument.formula"],
    ["odft", "application/vnd.oasis.opendocument.formula-template"],
    ["odg", "application/vnd.oasis.opendocument.graphics"],
    ["odi", "application/vnd.oasis.opendocument.image"],
    ["odm", "application/vnd.oasis.opendocument.text-master"],
    ["odp", "application/vnd.oasis.opendocument.presentation"],
    ["ods", "application/vnd.oasis.opendocument.spreadsheet"],
    ["odt", "application/vnd.oasis.opendocument.text"],
    ["oga", "audio/ogg"],
    ["ogv", "video/ogg"],
    ["ogx", "application/ogg"],
    ["omc", "application/x-omc"],
    ["omcd", "application/x-omcdatamaker"],
    ["omcr", "application/x-omcregerator"],
    ["onetoc", "application/onenote"],
    ["opf", "application/oebps-package+xml"],
    ["org", "application/vnd.lotus-organizer"],
    ["osf", "application/vnd.yamaha.openscoreformat"],
    ["osfpvg", "application/vnd.yamaha.openscoreformat.osfpvg+xml"],
    ["otc", "application/vnd.oasis.opendocument.chart-template"],
    ["otf", "application/x-font-otf"],
    ["otg", "application/vnd.oasis.opendocument.graphics-template"],
    ["oth", "application/vnd.oasis.opendocument.text-web"],
    ["oti", "application/vnd.oasis.opendocument.image-template"],
    ["otp", "application/vnd.oasis.opendocument.presentation-template"],
    ["ots", "application/vnd.oasis.opendocument.spreadsheet-template"],
    ["ott", "application/vnd.oasis.opendocument.text-template"],
    ["oxt", "application/vnd.openofficeorg.extension"],
    ["p", "text/x-pascal"],
    ["p10", ["application/pkcs10", "application/x-pkcs10"]],
    ["p12", ["application/pkcs-12", "application/x-pkcs12"]],
    ["p7a", "application/x-pkcs7-signature"],
    ["p7b", "application/x-pkcs7-certificates"],
    ["p7c", ["application/pkcs7-mime", "application/x-pkcs7-mime"]],
    ["p7m", ["application/pkcs7-mime", "application/x-pkcs7-mime"]],
    ["p7r", "application/x-pkcs7-certreqresp"],
    ["p7s", ["application/pkcs7-signature", "application/x-pkcs7-signature"]],
    ["p8", "application/pkcs8"],
    ["par", "text/plain-bas"],
    ["part", "application/pro_eng"],
    ["pas", "text/pascal"],
    ["paw", "application/vnd.pawaafile"],
    ["pbd", "application/vnd.powerbuilder6"],
    ["pbm", "image/x-portable-bitmap"],
    ["pcf", "application/x-font-pcf"],
    ["pcl", ["application/vnd.hp-pcl", "application/x-pcl"]],
    ["pclxl", "application/vnd.hp-pclxl"],
    ["pct", "image/x-pict"],
    ["pcurl", "application/vnd.curl.pcurl"],
    ["pcx", "image/x-pcx"],
    ["pdb", ["application/vnd.palm", "chemical/x-pdb"]],
    ["pdf", "application/pdf"],
    ["pfa", "application/x-font-type1"],
    ["pfr", "application/font-tdpfr"],
    ["pfunk", ["audio/make", "audio/make.my.funk"]],
    ["pfx", "application/x-pkcs12"],
    ["pgm", ["image/x-portable-graymap", "image/x-portable-greymap"]],
    ["pgn", "application/x-chess-pgn"],
    ["pgp", "application/pgp-signature"],
    ["pic", ["image/pict", "image/x-pict"]],
    ["pict", "image/pict"],
    ["pkg", "application/x-newton-compatible-pkg"],
    ["pki", "application/pkixcmp"],
    ["pkipath", "application/pkix-pkipath"],
    ["pko", ["application/ynd.ms-pkipko", "application/vnd.ms-pki.pko"]],
    ["pl", ["text/plain", "text/x-script.perl"]],
    ["plb", "application/vnd.3gpp.pic-bw-large"],
    ["plc", "application/vnd.mobius.plc"],
    ["plf", "application/vnd.pocketlearn"],
    ["pls", "application/pls+xml"],
    ["plx", "application/x-pixclscript"],
    ["pm", ["text/x-script.perl-module", "image/x-xpixmap"]],
    ["pm4", "application/x-pagemaker"],
    ["pm5", "application/x-pagemaker"],
    ["pma", "application/x-perfmon"],
    ["pmc", "application/x-perfmon"],
    ["pml", ["application/vnd.ctc-posml", "application/x-perfmon"]],
    ["pmr", "application/x-perfmon"],
    ["pmw", "application/x-perfmon"],
    ["png", "image/png"],
    ["pnm", ["application/x-portable-anymap", "image/x-portable-anymap"]],
    ["portpkg", "application/vnd.macports.portpkg"],
    ["pot", ["application/vnd.ms-powerpoint", "application/mspowerpoint"]],
    ["potm", "application/vnd.ms-powerpoint.template.macroenabled.12"],
    ["potx", "application/vnd.openxmlformats-officedocument.presentationml.template"],
    ["pov", "model/x-pov"],
    ["ppa", "application/vnd.ms-powerpoint"],
    ["ppam", "application/vnd.ms-powerpoint.addin.macroenabled.12"],
    ["ppd", "application/vnd.cups-ppd"],
    ["ppm", "image/x-portable-pixmap"],
    ["pps", ["application/vnd.ms-powerpoint", "application/mspowerpoint"]],
    ["ppsm", "application/vnd.ms-powerpoint.slideshow.macroenabled.12"],
    ["ppsx", "application/vnd.openxmlformats-officedocument.presentationml.slideshow"],
    ["ppt", ["application/vnd.ms-powerpoint", "application/mspowerpoint", "application/powerpoint", "application/x-mspowerpoint"]],
    ["pptm", "application/vnd.ms-powerpoint.presentation.macroenabled.12"],
    ["pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation"],
    ["ppz", "application/mspowerpoint"],
    ["prc", "application/x-mobipocket-ebook"],
    ["pre", ["application/vnd.lotus-freelance", "application/x-freelance"]],
    ["prf", "application/pics-rules"],
    ["prt", "application/pro_eng"],
    ["ps", "application/postscript"],
    ["psb", "application/vnd.3gpp.pic-bw-small"],
    ["psd", ["application/octet-stream", "image/vnd.adobe.photoshop"]],
    ["psf", "application/x-font-linux-psf"],
    ["pskcxml", "application/pskc+xml"],
    ["ptid", "application/vnd.pvi.ptid1"],
    ["pub", "application/x-mspublisher"],
    ["pvb", "application/vnd.3gpp.pic-bw-var"],
    ["pvu", "paleovu/x-pv"],
    ["pwn", "application/vnd.3m.post-it-notes"],
    ["pwz", "application/vnd.ms-powerpoint"],
    ["py", "text/x-script.phyton"],
    ["pya", "audio/vnd.ms-playready.media.pya"],
    ["pyc", "application/x-bytecode.python"],
    ["pyv", "video/vnd.ms-playready.media.pyv"],
    ["qam", "application/vnd.epson.quickanime"],
    ["qbo", "application/vnd.intu.qbo"],
    ["qcp", "audio/vnd.qcelp"],
    ["qd3", "x-world/x-3dmf"],
    ["qd3d", "x-world/x-3dmf"],
    ["qfx", "application/vnd.intu.qfx"],
    ["qif", "image/x-quicktime"],
    ["qps", "application/vnd.publishare-delta-tree"],
    ["qt", "video/quicktime"],
    ["qtc", "video/x-qtc"],
    ["qti", "image/x-quicktime"],
    ["qtif", "image/x-quicktime"],
    ["qxd", "application/vnd.quark.quarkxpress"],
    ["ra", ["audio/x-realaudio", "audio/x-pn-realaudio", "audio/x-pn-realaudio-plugin"]],
    ["ram", "audio/x-pn-realaudio"],
    ["rar", "application/x-rar-compressed"],
    ["ras", ["image/cmu-raster", "application/x-cmu-raster", "image/x-cmu-raster"]],
    ["rast", "image/cmu-raster"],
    ["rcprofile", "application/vnd.ipunplugged.rcprofile"],
    ["rdf", "application/rdf+xml"],
    ["rdz", "application/vnd.data-vision.rdz"],
    ["rep", "application/vnd.businessobjects"],
    ["res", "application/x-dtbresource+xml"],
    ["rexx", "text/x-script.rexx"],
    ["rf", "image/vnd.rn-realflash"],
    ["rgb", "image/x-rgb"],
    ["rif", "application/reginfo+xml"],
    ["rip", "audio/vnd.rip"],
    ["rl", "application/resource-lists+xml"],
    ["rlc", "image/vnd.fujixerox.edmics-rlc"],
    ["rld", "application/resource-lists-diff+xml"],
    ["rm", ["application/vnd.rn-realmedia", "audio/x-pn-realaudio"]],
    ["rmi", "audio/mid"],
    ["rmm", "audio/x-pn-realaudio"],
    ["rmp", ["audio/x-pn-realaudio-plugin", "audio/x-pn-realaudio"]],
    ["rms", "application/vnd.jcp.javame.midlet-rms"],
    ["rnc", "application/relax-ng-compact-syntax"],
    ["rng", ["application/ringing-tones", "application/vnd.nokia.ringing-tone"]],
    ["rnx", "application/vnd.rn-realplayer"],
    ["roff", "application/x-troff"],
    ["rp", "image/vnd.rn-realpix"],
    ["rp9", "application/vnd.cloanto.rp9"],
    ["rpm", "audio/x-pn-realaudio-plugin"],
    ["rpss", "application/vnd.nokia.radio-presets"],
    ["rpst", "application/vnd.nokia.radio-preset"],
    ["rq", "application/sparql-query"],
    ["rs", "application/rls-services+xml"],
    ["rsd", "application/rsd+xml"],
    ["rt", ["text/richtext", "text/vnd.rn-realtext"]],
    ["rtf", ["application/rtf", "text/richtext", "application/x-rtf"]],
    ["rtx", ["text/richtext", "application/rtf"]],
    ["rv", "video/vnd.rn-realvideo"],
    ["s", "text/x-asm"],
    ["s3m", "audio/s3m"],
    ["saf", "application/vnd.yamaha.smaf-audio"],
    ["saveme", "application/octet-stream"],
    ["sbk", "application/x-tbook"],
    ["sbml", "application/sbml+xml"],
    ["sc", "application/vnd.ibm.secure-container"],
    ["scd", "application/x-msschedule"],
    ["scm", ["application/vnd.lotus-screencam", "video/x-scm", "text/x-script.guile", "application/x-lotusscreencam", "text/x-script.scheme"]],
    ["scq", "application/scvp-cv-request"],
    ["scs", "application/scvp-cv-response"],
    ["sct", "text/scriptlet"],
    ["scurl", "text/vnd.curl.scurl"],
    ["sda", "application/vnd.stardivision.draw"],
    ["sdc", "application/vnd.stardivision.calc"],
    ["sdd", "application/vnd.stardivision.impress"],
    ["sdkm", "application/vnd.solent.sdkm+xml"],
    ["sdml", "text/plain"],
    ["sdp", ["application/sdp", "application/x-sdp"]],
    ["sdr", "application/sounder"],
    ["sdw", "application/vnd.stardivision.writer"],
    ["sea", ["application/sea", "application/x-sea"]],
    ["see", "application/vnd.seemail"],
    ["seed", "application/vnd.fdsn.seed"],
    ["sema", "application/vnd.sema"],
    ["semd", "application/vnd.semd"],
    ["semf", "application/vnd.semf"],
    ["ser", "application/java-serialized-object"],
    ["set", "application/set"],
    ["setpay", "application/set-payment-initiation"],
    ["setreg", "application/set-registration-initiation"],
    ["sfd-hdstx", "application/vnd.hydrostatix.sof-data"],
    ["sfs", "application/vnd.spotfire.sfs"],
    ["sgl", "application/vnd.stardivision.writer-global"],
    ["sgm", ["text/sgml", "text/x-sgml"]],
    ["sgml", ["text/sgml", "text/x-sgml"]],
    ["sh", ["application/x-shar", "application/x-bsh", "application/x-sh", "text/x-script.sh"]],
    ["shar", ["application/x-bsh", "application/x-shar"]],
    ["shf", "application/shf+xml"],
    ["shtml", ["text/html", "text/x-server-parsed-html"]],
    ["sid", "audio/x-psid"],
    ["sis", "application/vnd.symbian.install"],
    ["sit", ["application/x-stuffit", "application/x-sit"]],
    ["sitx", "application/x-stuffitx"],
    ["skd", "application/x-koan"],
    ["skm", "application/x-koan"],
    ["skp", ["application/vnd.koan", "application/x-koan"]],
    ["skt", "application/x-koan"],
    ["sl", "application/x-seelogo"],
    ["sldm", "application/vnd.ms-powerpoint.slide.macroenabled.12"],
    ["sldx", "application/vnd.openxmlformats-officedocument.presentationml.slide"],
    ["slt", "application/vnd.epson.salt"],
    ["sm", "application/vnd.stepmania.stepchart"],
    ["smf", "application/vnd.stardivision.math"],
    ["smi", ["application/smil", "application/smil+xml"]],
    ["smil", "application/smil"],
    ["snd", ["audio/basic", "audio/x-adpcm"]],
    ["snf", "application/x-font-snf"],
    ["sol", "application/solids"],
    ["spc", ["text/x-speech", "application/x-pkcs7-certificates"]],
    ["spf", "application/vnd.yamaha.smaf-phrase"],
    ["spl", ["application/futuresplash", "application/x-futuresplash"]],
    ["spot", "text/vnd.in3d.spot"],
    ["spp", "application/scvp-vp-response"],
    ["spq", "application/scvp-vp-request"],
    ["spr", "application/x-sprite"],
    ["sprite", "application/x-sprite"],
    ["src", "application/x-wais-source"],
    ["sru", "application/sru+xml"],
    ["srx", "application/sparql-results+xml"],
    ["sse", "application/vnd.kodak-descriptor"],
    ["ssf", "application/vnd.epson.ssf"],
    ["ssi", "text/x-server-parsed-html"],
    ["ssm", "application/streamingmedia"],
    ["ssml", "application/ssml+xml"],
    ["sst", ["application/vnd.ms-pkicertstore", "application/vnd.ms-pki.certstore"]],
    ["st", "application/vnd.sailingtracker.track"],
    ["stc", "application/vnd.sun.xml.calc.template"],
    ["std", "application/vnd.sun.xml.draw.template"],
    ["step", "application/step"],
    ["stf", "application/vnd.wt.stf"],
    ["sti", "application/vnd.sun.xml.impress.template"],
    ["stk", "application/hyperstudio"],
    ["stl", ["application/vnd.ms-pkistl", "application/sla", "application/vnd.ms-pki.stl", "application/x-navistyle"]],
    ["stm", "text/html"],
    ["stp", "application/step"],
    ["str", "application/vnd.pg.format"],
    ["stw", "application/vnd.sun.xml.writer.template"],
    ["sub", "image/vnd.dvb.subtitle"],
    ["sus", "application/vnd.sus-calendar"],
    ["sv4cpio", "application/x-sv4cpio"],
    ["sv4crc", "application/x-sv4crc"],
    ["svc", "application/vnd.dvb.service"],
    ["svd", "application/vnd.svd"],
    ["svf", ["image/vnd.dwg", "image/x-dwg"]],
    ["svg", "image/svg+xml"],
    ["svr", ["x-world/x-svr", "application/x-world"]],
    ["swf", "application/x-shockwave-flash"],
    ["swi", "application/vnd.aristanetworks.swi"],
    ["sxc", "application/vnd.sun.xml.calc"],
    ["sxd", "application/vnd.sun.xml.draw"],
    ["sxg", "application/vnd.sun.xml.writer.global"],
    ["sxi", "application/vnd.sun.xml.impress"],
    ["sxm", "application/vnd.sun.xml.math"],
    ["sxw", "application/vnd.sun.xml.writer"],
    ["t", ["text/troff", "application/x-troff"]],
    ["talk", "text/x-speech"],
    ["tao", "application/vnd.tao.intent-module-archive"],
    ["tar", "application/x-tar"],
    ["tbk", ["application/toolbook", "application/x-tbook"]],
    ["tcap", "application/vnd.3gpp2.tcap"],
    ["tcl", ["text/x-script.tcl", "application/x-tcl"]],
    ["tcsh", "text/x-script.tcsh"],
    ["teacher", "application/vnd.smart.teacher"],
    ["tei", "application/tei+xml"],
    ["tex", "application/x-tex"],
    ["texi", "application/x-texinfo"],
    ["texinfo", "application/x-texinfo"],
    ["text", ["application/plain", "text/plain"]],
    ["tfi", "application/thraud+xml"],
    ["tfm", "application/x-tex-tfm"],
    ["tgz", ["application/gnutar", "application/x-compressed"]],
    ["thmx", "application/vnd.ms-officetheme"],
    ["tif", ["image/tiff", "image/x-tiff"]],
    ["tiff", ["image/tiff", "image/x-tiff"]],
    ["tmo", "application/vnd.tmobile-livetv"],
    ["torrent", "application/x-bittorrent"],
    ["tpl", "application/vnd.groove-tool-template"],
    ["tpt", "application/vnd.trid.tpt"],
    ["tr", "application/x-troff"],
    ["tra", "application/vnd.trueapp"],
    ["trm", "application/x-msterminal"],
    ["tsd", "application/timestamped-data"],
    ["tsi", "audio/tsp-audio"],
    ["tsp", ["application/dsptype", "audio/tsplayer"]],
    ["tsv", "text/tab-separated-values"],
    ["ttf", "application/x-font-ttf"],
    ["ttl", "text/turtle"],
    ["turbot", "image/florian"],
    ["twd", "application/vnd.simtech-mindmapper"],
    ["txd", "application/vnd.genomatix.tuxedo"],
    ["txf", "application/vnd.mobius.txf"],
    ["txt", "text/plain"],
    ["ufd", "application/vnd.ufdl"],
    ["uil", "text/x-uil"],
    ["uls", "text/iuls"],
    ["umj", "application/vnd.umajin"],
    ["uni", "text/uri-list"],
    ["unis", "text/uri-list"],
    ["unityweb", "application/vnd.unity"],
    ["unv", "application/i-deas"],
    ["uoml", "application/vnd.uoml+xml"],
    ["uri", "text/uri-list"],
    ["uris", "text/uri-list"],
    ["ustar", ["application/x-ustar", "multipart/x-ustar"]],
    ["utz", "application/vnd.uiq.theme"],
    ["uu", ["application/octet-stream", "text/x-uuencode"]],
    ["uue", "text/x-uuencode"],
    ["uva", "audio/vnd.dece.audio"],
    ["uvh", "video/vnd.dece.hd"],
    ["uvi", "image/vnd.dece.graphic"],
    ["uvm", "video/vnd.dece.mobile"],
    ["uvp", "video/vnd.dece.pd"],
    ["uvs", "video/vnd.dece.sd"],
    ["uvu", "video/vnd.uvvu.mp4"],
    ["uvv", "video/vnd.dece.video"],
    ["vcd", "application/x-cdlink"],
    ["vcf", "text/x-vcard"],
    ["vcg", "application/vnd.groove-vcard"],
    ["vcs", "text/x-vcalendar"],
    ["vcx", "application/vnd.vcx"],
    ["vda", "application/vda"],
    ["vdo", "video/vdo"],
    ["vew", "application/groupwise"],
    ["vis", "application/vnd.visionary"],
    ["viv", ["video/vivo", "video/vnd.vivo"]],
    ["vivo", ["video/vivo", "video/vnd.vivo"]],
    ["vmd", "application/vocaltec-media-desc"],
    ["vmf", "application/vocaltec-media-file"],
    ["voc", ["audio/voc", "audio/x-voc"]],
    ["vos", "video/vosaic"],
    ["vox", "audio/voxware"],
    ["vqe", "audio/x-twinvq-plugin"],
    ["vqf", "audio/x-twinvq"],
    ["vql", "audio/x-twinvq-plugin"],
    ["vrml", ["model/vrml", "x-world/x-vrml", "application/x-vrml"]],
    ["vrt", "x-world/x-vrt"],
    ["vsd", ["application/vnd.visio", "application/x-visio"]],
    ["vsf", "application/vnd.vsf"],
    ["vst", "application/x-visio"],
    ["vsw", "application/x-visio"],
    ["vtu", "model/vnd.vtu"],
    ["vxml", "application/voicexml+xml"],
    ["w60", "application/wordperfect6.0"],
    ["w61", "application/wordperfect6.1"],
    ["w6w", "application/msword"],
    ["wad", "application/x-doom"],
    ["wav", ["audio/wav", "audio/x-wav"]],
    ["wax", "audio/x-ms-wax"],
    ["wb1", "application/x-qpro"],
    ["wbmp", "image/vnd.wap.wbmp"],
    ["wbs", "application/vnd.criticaltools.wbs+xml"],
    ["wbxml", "application/vnd.wap.wbxml"],
    ["wcm", "application/vnd.ms-works"],
    ["wdb", "application/vnd.ms-works"],
    ["web", "application/vnd.xara"],
    ["weba", "audio/webm"],
    ["webm", "video/webm"],
    ["webp", "image/webp"],
    ["wg", "application/vnd.pmi.widget"],
    ["wgt", "application/widget"],
    ["wiz", "application/msword"],
    ["wk1", "application/x-123"],
    ["wks", "application/vnd.ms-works"],
    ["wm", "video/x-ms-wm"],
    ["wma", "audio/x-ms-wma"],
    ["wmd", "application/x-ms-wmd"],
    ["wmf", ["windows/metafile", "application/x-msmetafile"]],
    ["wml", "text/vnd.wap.wml"],
    ["wmlc", "application/vnd.wap.wmlc"],
    ["wmls", "text/vnd.wap.wmlscript"],
    ["wmlsc", "application/vnd.wap.wmlscriptc"],
    ["wmv", "video/x-ms-wmv"],
    ["wmx", "video/x-ms-wmx"],
    ["wmz", "application/x-ms-wmz"],
    ["woff", "application/x-font-woff"],
    ["word", "application/msword"],
    ["wp", "application/wordperfect"],
    ["wp5", ["application/wordperfect", "application/wordperfect6.0"]],
    ["wp6", "application/wordperfect"],
    ["wpd", ["application/wordperfect", "application/vnd.wordperfect", "application/x-wpwin"]],
    ["wpl", "application/vnd.ms-wpl"],
    ["wps", "application/vnd.ms-works"],
    ["wq1", "application/x-lotus"],
    ["wqd", "application/vnd.wqd"],
    ["wri", ["application/mswrite", "application/x-wri", "application/x-mswrite"]],
    ["wrl", ["model/vrml", "x-world/x-vrml", "application/x-world"]],
    ["wrz", ["model/vrml", "x-world/x-vrml"]],
    ["wsc", "text/scriplet"],
    ["wsdl", "application/wsdl+xml"],
    ["wspolicy", "application/wspolicy+xml"],
    ["wsrc", "application/x-wais-source"],
    ["wtb", "application/vnd.webturbo"],
    ["wtk", "application/x-wintalk"],
    ["wvx", "video/x-ms-wvx"],
    ["x-png", "image/png"],
    ["x3d", "application/vnd.hzn-3d-crossword"],
    ["xaf", "x-world/x-vrml"],
    ["xap", "application/x-silverlight-app"],
    ["xar", "application/vnd.xara"],
    ["xbap", "application/x-ms-xbap"],
    ["xbd", "application/vnd.fujixerox.docuworks.binder"],
    ["xbm", ["image/xbm", "image/x-xbm", "image/x-xbitmap"]],
    ["xdf", "application/xcap-diff+xml"],
    ["xdm", "application/vnd.syncml.dm+xml"],
    ["xdp", "application/vnd.adobe.xdp+xml"],
    ["xdr", "video/x-amt-demorun"],
    ["xdssc", "application/dssc+xml"],
    ["xdw", "application/vnd.fujixerox.docuworks"],
    ["xenc", "application/xenc+xml"],
    ["xer", "application/patch-ops-error+xml"],
    ["xfdf", "application/vnd.adobe.xfdf"],
    ["xfdl", "application/vnd.xfdl"],
    ["xgz", "xgl/drawing"],
    ["xhtml", "application/xhtml+xml"],
    ["xif", "image/vnd.xiff"],
    ["xl", "application/excel"],
    ["xla", ["application/vnd.ms-excel", "application/excel", "application/x-msexcel", "application/x-excel"]],
    ["xlam", "application/vnd.ms-excel.addin.macroenabled.12"],
    ["xlb", ["application/excel", "application/vnd.ms-excel", "application/x-excel"]],
    ["xlc", ["application/vnd.ms-excel", "application/excel", "application/x-excel"]],
    ["xld", ["application/excel", "application/x-excel"]],
    ["xlk", ["application/excel", "application/x-excel"]],
    ["xll", ["application/excel", "application/vnd.ms-excel", "application/x-excel"]],
    ["xlm", ["application/vnd.ms-excel", "application/excel", "application/x-excel"]],
    ["xls", ["application/vnd.ms-excel", "application/excel", "application/x-msexcel", "application/x-excel"]],
    ["xlsb", "application/vnd.ms-excel.sheet.binary.macroenabled.12"],
    ["xlsm", "application/vnd.ms-excel.sheet.macroenabled.12"],
    ["xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"],
    ["xlt", ["application/vnd.ms-excel", "application/excel", "application/x-excel"]],
    ["xltm", "application/vnd.ms-excel.template.macroenabled.12"],
    ["xltx", "application/vnd.openxmlformats-officedocument.spreadsheetml.template"],
    ["xlv", ["application/excel", "application/x-excel"]],
    ["xlw", ["application/vnd.ms-excel", "application/excel", "application/x-msexcel", "application/x-excel"]],
    ["xm", "audio/xm"],
    ["xml", ["application/xml", "text/xml", "application/atom+xml", "application/rss+xml"]],
    ["xmz", "xgl/movie"],
    ["xo", "application/vnd.olpc-sugar"],
    ["xof", "x-world/x-vrml"],
    ["xop", "application/xop+xml"],
    ["xpi", "application/x-xpinstall"],
    ["xpix", "application/x-vnd.ls-xpix"],
    ["xpm", ["image/xpm", "image/x-xpixmap"]],
    ["xpr", "application/vnd.is-xpr"],
    ["xps", "application/vnd.ms-xpsdocument"],
    ["xpw", "application/vnd.intercon.formnet"],
    ["xslt", "application/xslt+xml"],
    ["xsm", "application/vnd.syncml+xml"],
    ["xspf", "application/xspf+xml"],
    ["xsr", "video/x-amt-showrun"],
    ["xul", "application/vnd.mozilla.xul+xml"],
    ["xwd", ["image/x-xwd", "image/x-xwindowdump"]],
    ["xyz", ["chemical/x-xyz", "chemical/x-pdb"]],
    ["yang", "application/yang"],
    ["yin", "application/yin+xml"],
    ["z", ["application/x-compressed", "application/x-compress"]],
    ["zaz", "application/vnd.zzazz.deck+xml"],
    ["zip", ["application/zip", "multipart/x-zip", "application/x-zip-compressed", "application/x-compressed"]],
    ["zir", "application/vnd.zul"],
    ["zmm", "application/vnd.handheld-entertainment+xml"],
    ["zoo", "application/octet-stream"],
    ["zsh", "text/x-script.zsh"]
  ]);
  module.exports = {
    detectMimeType(filename) {
      if (!filename) {
        return defaultMimeType;
      }
      let parsed = path.parse(filename);
      let extension = (parsed.ext.substr(1) || parsed.name || "").split("?").shift().trim().toLowerCase();
      let value = defaultMimeType;
      if (extensions.has(extension)) {
        value = extensions.get(extension);
      }
      if (Array.isArray(value)) {
        return value[0];
      }
      return value;
    },
    detectExtension(mimeType) {
      if (!mimeType) {
        return defaultExtension;
      }
      let parts = (mimeType || "").toLowerCase().trim().split("/");
      let rootType = parts.shift().trim();
      let subType = parts.join("/").trim();
      if (mimeTypes.has(rootType + "/" + subType)) {
        let value = mimeTypes.get(rootType + "/" + subType);
        if (Array.isArray(value)) {
          return value[0];
        }
        return value;
      }
      switch (rootType) {
        case "text":
          return "txt";
        default:
          return "bin";
      }
    }
  };
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/punycode/index.js
var require_punycode = __commonJS((exports, module) => {
  function error(type) {
    throw new RangeError(errors[type]);
  }
  function map(array, callback) {
    const result = [];
    let length = array.length;
    while (length--) {
      result[length] = callback(array[length]);
    }
    return result;
  }
  function mapDomain(domain, callback) {
    const parts = domain.split("@");
    let result = "";
    if (parts.length > 1) {
      result = parts[0] + "@";
      domain = parts[1];
    }
    domain = domain.replace(regexSeparators, ".");
    const labels = domain.split(".");
    const encoded = map(labels, callback).join(".");
    return result + encoded;
  }
  function ucs2decode(string) {
    const output = [];
    let counter = 0;
    const length = string.length;
    while (counter < length) {
      const value = string.charCodeAt(counter++);
      if (value >= 55296 && value <= 56319 && counter < length) {
        const extra = string.charCodeAt(counter++);
        if ((extra & 64512) == 56320) {
          output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
        } else {
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }
    return output;
  }
  var maxInt = 2147483647;
  var base = 36;
  var tMin = 1;
  var tMax = 26;
  var skew = 38;
  var damp = 700;
  var initialBias = 72;
  var initialN = 128;
  var delimiter = "-";
  var regexPunycode = /^xn--/;
  var regexNonASCII = /[^\0-\x7F]/;
  var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
  var errors = {
    overflow: "Overflow: input needs wider integers to process",
    "not-basic": "Illegal input >= 0x80 (not a basic code point)",
    "invalid-input": "Invalid input"
  };
  var baseMinusTMin = base - tMin;
  var floor = Math.floor;
  var stringFromCharCode = String.fromCharCode;
  var ucs2encode = (codePoints) => String.fromCodePoint(...codePoints);
  var basicToDigit = function(codePoint) {
    if (codePoint >= 48 && codePoint < 58) {
      return 26 + (codePoint - 48);
    }
    if (codePoint >= 65 && codePoint < 91) {
      return codePoint - 65;
    }
    if (codePoint >= 97 && codePoint < 123) {
      return codePoint - 97;
    }
    return base;
  };
  var digitToBasic = function(digit, flag) {
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  };
  var adapt = function(delta, numPoints, firstTime) {
    let k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);
    for (;delta > baseMinusTMin * tMax >> 1; k += base) {
      delta = floor(delta / baseMinusTMin);
    }
    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  };
  var decode = function(input) {
    const output = [];
    const inputLength = input.length;
    let i = 0;
    let n = initialN;
    let bias = initialBias;
    let basic = input.lastIndexOf(delimiter);
    if (basic < 0) {
      basic = 0;
    }
    for (let j = 0;j < basic; ++j) {
      if (input.charCodeAt(j) >= 128) {
        error("not-basic");
      }
      output.push(input.charCodeAt(j));
    }
    for (let index = basic > 0 ? basic + 1 : 0;index < inputLength; ) {
      const oldi = i;
      for (let w = 1, k = base;; k += base) {
        if (index >= inputLength) {
          error("invalid-input");
        }
        const digit = basicToDigit(input.charCodeAt(index++));
        if (digit >= base) {
          error("invalid-input");
        }
        if (digit > floor((maxInt - i) / w)) {
          error("overflow");
        }
        i += digit * w;
        const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
        if (digit < t) {
          break;
        }
        const baseMinusT = base - t;
        if (w > floor(maxInt / baseMinusT)) {
          error("overflow");
        }
        w *= baseMinusT;
      }
      const out = output.length + 1;
      bias = adapt(i - oldi, out, oldi == 0);
      if (floor(i / out) > maxInt - n) {
        error("overflow");
      }
      n += floor(i / out);
      i %= out;
      output.splice(i++, 0, n);
    }
    return String.fromCodePoint(...output);
  };
  var encode = function(input) {
    const output = [];
    input = ucs2decode(input);
    const inputLength = input.length;
    let n = initialN;
    let delta = 0;
    let bias = initialBias;
    for (const currentValue of input) {
      if (currentValue < 128) {
        output.push(stringFromCharCode(currentValue));
      }
    }
    const basicLength = output.length;
    let handledCPCount = basicLength;
    if (basicLength) {
      output.push(delimiter);
    }
    while (handledCPCount < inputLength) {
      let m = maxInt;
      for (const currentValue of input) {
        if (currentValue >= n && currentValue < m) {
          m = currentValue;
        }
      }
      const handledCPCountPlusOne = handledCPCount + 1;
      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
        error("overflow");
      }
      delta += (m - n) * handledCPCountPlusOne;
      n = m;
      for (const currentValue of input) {
        if (currentValue < n && ++delta > maxInt) {
          error("overflow");
        }
        if (currentValue === n) {
          let q = delta;
          for (let k = base;; k += base) {
            const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (q < t) {
              break;
            }
            const qMinusT = q - t;
            const baseMinusT = base - t;
            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
            q = floor(qMinusT / baseMinusT);
          }
          output.push(stringFromCharCode(digitToBasic(q, 0)));
          bias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);
          delta = 0;
          ++handledCPCount;
        }
      }
      ++delta;
      ++n;
    }
    return output.join("");
  };
  var toUnicode = function(input) {
    return mapDomain(input, function(string) {
      return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
    });
  };
  var toASCII = function(input) {
    return mapDomain(input, function(string) {
      return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
    });
  };
  var punycode = {
    version: "2.3.1",
    ucs2: {
      decode: ucs2decode,
      encode: ucs2encode
    },
    decode,
    encode,
    toASCII,
    toUnicode
  };
  module.exports = punycode;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/base64/index.js
var require_base64 = __commonJS((exports, module) => {
  function encode(buffer) {
    if (typeof buffer === "string") {
      buffer = Buffer.from(buffer, "utf-8");
    }
    return buffer.toString("base64");
  }
  function wrap(str, lineLength) {
    str = (str || "").toString();
    lineLength = lineLength || 76;
    if (str.length <= lineLength) {
      return str;
    }
    let result = [];
    let pos = 0;
    let chunkLength = lineLength * 1024;
    while (pos < str.length) {
      let wrappedLines = str.substr(pos, chunkLength).replace(new RegExp(".{" + lineLength + "}", "g"), "$&\r\n").trim();
      result.push(wrappedLines);
      pos += chunkLength;
    }
    return result.join("\r\n").trim();
  }
  var Transform = __require("stream").Transform;

  class Encoder extends Transform {
    constructor(options) {
      super();
      this.options = options || {};
      if (this.options.lineLength !== false) {
        this.options.lineLength = this.options.lineLength || 76;
      }
      this._curLine = "";
      this._remainingBytes = false;
      this.inputBytes = 0;
      this.outputBytes = 0;
    }
    _transform(chunk, encoding, done) {
      if (encoding !== "buffer") {
        chunk = Buffer.from(chunk, encoding);
      }
      if (!chunk || !chunk.length) {
        return setImmediate(done);
      }
      this.inputBytes += chunk.length;
      if (this._remainingBytes && this._remainingBytes.length) {
        chunk = Buffer.concat([this._remainingBytes, chunk], this._remainingBytes.length + chunk.length);
        this._remainingBytes = false;
      }
      if (chunk.length % 3) {
        this._remainingBytes = chunk.slice(chunk.length - chunk.length % 3);
        chunk = chunk.slice(0, chunk.length - chunk.length % 3);
      } else {
        this._remainingBytes = false;
      }
      let b64 = this._curLine + encode(chunk);
      if (this.options.lineLength) {
        b64 = wrap(b64, this.options.lineLength);
        let lastLF = b64.lastIndexOf("\n");
        if (lastLF < 0) {
          this._curLine = b64;
          b64 = "";
        } else if (lastLF === b64.length - 1) {
          this._curLine = "";
        } else {
          this._curLine = b64.substr(lastLF + 1);
          b64 = b64.substr(0, lastLF + 1);
        }
      }
      if (b64) {
        this.outputBytes += b64.length;
        this.push(Buffer.from(b64, "ascii"));
      }
      setImmediate(done);
    }
    _flush(done) {
      if (this._remainingBytes && this._remainingBytes.length) {
        this._curLine += encode(this._remainingBytes);
      }
      if (this._curLine) {
        this._curLine = wrap(this._curLine, this.options.lineLength);
        this.outputBytes += this._curLine.length;
        this.push(this._curLine, "ascii");
        this._curLine = "";
      }
      done();
    }
  }
  module.exports = {
    encode,
    wrap,
    Encoder
  };
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/qp/index.js
var require_qp = __commonJS((exports, module) => {
  function encode(buffer) {
    if (typeof buffer === "string") {
      buffer = Buffer.from(buffer, "utf-8");
    }
    let ranges = [
      [9],
      [10],
      [13],
      [32, 60],
      [62, 126]
    ];
    let result = "";
    let ord;
    for (let i = 0, len = buffer.length;i < len; i++) {
      ord = buffer[i];
      if (checkRanges(ord, ranges) && !((ord === 32 || ord === 9) && (i === len - 1 || buffer[i + 1] === 10 || buffer[i + 1] === 13))) {
        result += String.fromCharCode(ord);
        continue;
      }
      result += "=" + (ord < 16 ? "0" : "") + ord.toString(16).toUpperCase();
    }
    return result;
  }
  function wrap(str, lineLength) {
    str = (str || "").toString();
    lineLength = lineLength || 76;
    if (str.length <= lineLength) {
      return str;
    }
    let pos = 0;
    let len = str.length;
    let match, code, line;
    let lineMargin = Math.floor(lineLength / 3);
    let result = "";
    while (pos < len) {
      line = str.substr(pos, lineLength);
      if (match = line.match(/\r\n/)) {
        line = line.substr(0, match.index + match[0].length);
        result += line;
        pos += line.length;
        continue;
      }
      if (line.substr(-1) === "\n") {
        result += line;
        pos += line.length;
        continue;
      } else if (match = line.substr(-lineMargin).match(/\n.*?$/)) {
        line = line.substr(0, line.length - (match[0].length - 1));
        result += line;
        pos += line.length;
        continue;
      } else if (line.length > lineLength - lineMargin && (match = line.substr(-lineMargin).match(/[ \t.,!?][^ \t.,!?]*$/))) {
        line = line.substr(0, line.length - (match[0].length - 1));
      } else if (line.match(/[=][\da-f]{0,2}$/i)) {
        if (match = line.match(/[=][\da-f]{0,1}$/i)) {
          line = line.substr(0, line.length - match[0].length);
        }
        while (line.length > 3 && line.length < len - pos && !line.match(/^(?:=[\da-f]{2}){1,4}$/i) && (match = line.match(/[=][\da-f]{2}$/gi))) {
          code = parseInt(match[0].substr(1, 2), 16);
          if (code < 128) {
            break;
          }
          line = line.substr(0, line.length - 3);
          if (code >= 192) {
            break;
          }
        }
      }
      if (pos + line.length < len && line.substr(-1) !== "\n") {
        if (line.length === lineLength && line.match(/[=][\da-f]{2}$/i)) {
          line = line.substr(0, line.length - 3);
        } else if (line.length === lineLength) {
          line = line.substr(0, line.length - 1);
        }
        pos += line.length;
        line += "=\r\n";
      } else {
        pos += line.length;
      }
      result += line;
    }
    return result;
  }
  function checkRanges(nr, ranges) {
    for (let i = ranges.length - 1;i >= 0; i--) {
      if (!ranges[i].length) {
        continue;
      }
      if (ranges[i].length === 1 && nr === ranges[i][0]) {
        return true;
      }
      if (ranges[i].length === 2 && nr >= ranges[i][0] && nr <= ranges[i][1]) {
        return true;
      }
    }
    return false;
  }
  var Transform = __require("stream").Transform;

  class Encoder extends Transform {
    constructor(options) {
      super();
      this.options = options || {};
      if (this.options.lineLength !== false) {
        this.options.lineLength = this.options.lineLength || 76;
      }
      this._curLine = "";
      this.inputBytes = 0;
      this.outputBytes = 0;
    }
    _transform(chunk, encoding, done) {
      let qp;
      if (encoding !== "buffer") {
        chunk = Buffer.from(chunk, encoding);
      }
      if (!chunk || !chunk.length) {
        return done();
      }
      this.inputBytes += chunk.length;
      if (this.options.lineLength) {
        qp = this._curLine + encode(chunk);
        qp = wrap(qp, this.options.lineLength);
        qp = qp.replace(/(^|\n)([^\n]*)$/, (match, lineBreak, lastLine) => {
          this._curLine = lastLine;
          return lineBreak;
        });
        if (qp) {
          this.outputBytes += qp.length;
          this.push(qp);
        }
      } else {
        qp = encode(chunk);
        this.outputBytes += qp.length;
        this.push(qp, "ascii");
      }
      done();
    }
    _flush(done) {
      if (this._curLine) {
        this.outputBytes += this._curLine.length;
        this.push(this._curLine, "ascii");
      }
      done();
    }
  }
  module.exports = {
    encode,
    wrap,
    Encoder
  };
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/mime-funcs/index.js
var require_mime_funcs = __commonJS((exports, module) => {
  var base64 = require_base64();
  var qp = require_qp();
  var mimeTypes = require_mime_types();
  module.exports = {
    isPlainText(value, isParam) {
      const re = isParam ? /[\x00-\x08\x0b\x0c\x0e-\x1f"\u0080-\uFFFF]/ : /[\x00-\x08\x0b\x0c\x0e-\x1f\u0080-\uFFFF]/;
      if (typeof value !== "string" || re.test(value)) {
        return false;
      } else {
        return true;
      }
    },
    hasLongerLines(str, lineLength) {
      if (str.length > 128 * 1024) {
        return true;
      }
      return new RegExp("^.{" + (lineLength + 1) + ",}", "m").test(str);
    },
    encodeWord(data, mimeWordEncoding, maxLength) {
      mimeWordEncoding = (mimeWordEncoding || "Q").toString().toUpperCase().trim().charAt(0);
      maxLength = maxLength || 0;
      let encodedStr;
      let toCharset = "UTF-8";
      if (maxLength && maxLength > 7 + toCharset.length) {
        maxLength -= 7 + toCharset.length;
      }
      if (mimeWordEncoding === "Q") {
        encodedStr = qp.encode(data).replace(/[^a-z0-9!*+\-/=]/gi, (chr) => {
          let ord = chr.charCodeAt(0).toString(16).toUpperCase();
          if (chr === " ") {
            return "_";
          } else {
            return "=" + (ord.length === 1 ? "0" + ord : ord);
          }
        });
      } else if (mimeWordEncoding === "B") {
        encodedStr = typeof data === "string" ? data : base64.encode(data);
        maxLength = maxLength ? Math.max(3, (maxLength - maxLength % 4) / 4 * 3) : 0;
      }
      if (maxLength && (mimeWordEncoding !== "B" ? encodedStr : base64.encode(data)).length > maxLength) {
        if (mimeWordEncoding === "Q") {
          encodedStr = this.splitMimeEncodedString(encodedStr, maxLength).join("?= =?" + toCharset + "?" + mimeWordEncoding + "?");
        } else {
          let parts = [];
          let lpart = "";
          for (let i = 0, len = encodedStr.length;i < len; i++) {
            let chr = encodedStr.charAt(i);
            if (/[\ud83c\ud83d\ud83e]/.test(chr) && i < len - 1) {
              chr += encodedStr.charAt(++i);
            }
            if (Buffer.byteLength(lpart + chr) <= maxLength || i === 0) {
              lpart += chr;
            } else {
              parts.push(base64.encode(lpart));
              lpart = chr;
            }
          }
          if (lpart) {
            parts.push(base64.encode(lpart));
          }
          if (parts.length > 1) {
            encodedStr = parts.join("?= =?" + toCharset + "?" + mimeWordEncoding + "?");
          } else {
            encodedStr = parts.join("");
          }
        }
      } else if (mimeWordEncoding === "B") {
        encodedStr = base64.encode(data);
      }
      return "=?" + toCharset + "?" + mimeWordEncoding + "?" + encodedStr + (encodedStr.substr(-2) === "?=" ? "" : "?=");
    },
    encodeWords(value, mimeWordEncoding, maxLength, encodeAll) {
      maxLength = maxLength || 0;
      let encodedValue;
      let firstMatch = value.match(/(?:^|\s)([^\s]*["\u0080-\uFFFF])/);
      if (!firstMatch) {
        return value;
      }
      if (encodeAll) {
        return this.encodeWord(value, mimeWordEncoding, maxLength);
      }
      let lastMatch = value.match(/(["\u0080-\uFFFF][^\s]*)[^"\u0080-\uFFFF]*$/);
      if (!lastMatch) {
        return value;
      }
      let startIndex = firstMatch.index + (firstMatch[0].match(/[^\s]/) || {
        index: 0
      }).index;
      let endIndex = lastMatch.index + (lastMatch[1] || "").length;
      encodedValue = (startIndex ? value.substr(0, startIndex) : "") + this.encodeWord(value.substring(startIndex, endIndex), mimeWordEncoding || "Q", maxLength) + (endIndex < value.length ? value.substr(endIndex) : "");
      return encodedValue;
    },
    buildHeaderValue(structured) {
      let paramsArray = [];
      Object.keys(structured.params || {}).forEach((param) => {
        let value = structured.params[param];
        if (!this.isPlainText(value, true) || value.length >= 75) {
          this.buildHeaderParam(param, value, 50).forEach((encodedParam) => {
            if (!/[\s"\\;:/=(),<>@[\]?]|^[-']|'$/.test(encodedParam.value) || encodedParam.key.substr(-1) === "*") {
              paramsArray.push(encodedParam.key + "=" + encodedParam.value);
            } else {
              paramsArray.push(encodedParam.key + "=" + JSON.stringify(encodedParam.value));
            }
          });
        } else if (/[\s'"\\;:/=(),<>@[\]?]|^-/.test(value)) {
          paramsArray.push(param + "=" + JSON.stringify(value));
        } else {
          paramsArray.push(param + "=" + value);
        }
      });
      return structured.value + (paramsArray.length ? "; " + paramsArray.join("; ") : "");
    },
    buildHeaderParam(key, data, maxLength) {
      let list = [];
      let encodedStr = typeof data === "string" ? data : (data || "").toString();
      let encodedStrArr;
      let chr, ord;
      let line;
      let startPos = 0;
      let i, len;
      maxLength = maxLength || 50;
      if (this.isPlainText(data, true)) {
        if (encodedStr.length <= maxLength) {
          return [
            {
              key,
              value: encodedStr
            }
          ];
        }
        encodedStr = encodedStr.replace(new RegExp(".{" + maxLength + "}", "g"), (str) => {
          list.push({
            line: str
          });
          return "";
        });
        if (encodedStr) {
          list.push({
            line: encodedStr
          });
        }
      } else {
        if (/[\uD800-\uDBFF]/.test(encodedStr)) {
          encodedStrArr = [];
          for (i = 0, len = encodedStr.length;i < len; i++) {
            chr = encodedStr.charAt(i);
            ord = chr.charCodeAt(0);
            if (ord >= 55296 && ord <= 56319 && i < len - 1) {
              chr += encodedStr.charAt(i + 1);
              encodedStrArr.push(chr);
              i++;
            } else {
              encodedStrArr.push(chr);
            }
          }
          encodedStr = encodedStrArr;
        }
        line = "utf-8''";
        let encoded = true;
        startPos = 0;
        for (i = 0, len = encodedStr.length;i < len; i++) {
          chr = encodedStr[i];
          if (encoded) {
            chr = this.safeEncodeURIComponent(chr);
          } else {
            chr = chr === " " ? chr : this.safeEncodeURIComponent(chr);
            if (chr !== encodedStr[i]) {
              if ((this.safeEncodeURIComponent(line) + chr).length >= maxLength) {
                list.push({
                  line,
                  encoded
                });
                line = "";
                startPos = i - 1;
              } else {
                encoded = true;
                i = startPos;
                line = "";
                continue;
              }
            }
          }
          if ((line + chr).length >= maxLength) {
            list.push({
              line,
              encoded
            });
            line = chr = encodedStr[i] === " " ? " " : this.safeEncodeURIComponent(encodedStr[i]);
            if (chr === encodedStr[i]) {
              encoded = false;
              startPos = i - 1;
            } else {
              encoded = true;
            }
          } else {
            line += chr;
          }
        }
        if (line) {
          list.push({
            line,
            encoded
          });
        }
      }
      return list.map((item, i2) => ({
        key: key + "*" + i2 + (item.encoded ? "*" : ""),
        value: item.line
      }));
    },
    parseHeaderValue(str) {
      let response = {
        value: false,
        params: {}
      };
      let key = false;
      let value = "";
      let type = "value";
      let quote = false;
      let escaped = false;
      let chr;
      for (let i = 0, len = str.length;i < len; i++) {
        chr = str.charAt(i);
        if (type === "key") {
          if (chr === "=") {
            key = value.trim().toLowerCase();
            type = "value";
            value = "";
            continue;
          }
          value += chr;
        } else {
          if (escaped) {
            value += chr;
          } else if (chr === "\\") {
            escaped = true;
            continue;
          } else if (quote && chr === quote) {
            quote = false;
          } else if (!quote && chr === '"') {
            quote = chr;
          } else if (!quote && chr === ";") {
            if (key === false) {
              response.value = value.trim();
            } else {
              response.params[key] = value.trim();
            }
            type = "key";
            value = "";
          } else {
            value += chr;
          }
          escaped = false;
        }
      }
      if (type === "value") {
        if (key === false) {
          response.value = value.trim();
        } else {
          response.params[key] = value.trim();
        }
      } else if (value.trim()) {
        response.params[value.trim().toLowerCase()] = "";
      }
      Object.keys(response.params).forEach((key2) => {
        let actualKey, nr, match, value2;
        if (match = key2.match(/(\*(\d+)|\*(\d+)\*|\*)$/)) {
          actualKey = key2.substr(0, match.index);
          nr = Number(match[2] || match[3]) || 0;
          if (!response.params[actualKey] || typeof response.params[actualKey] !== "object") {
            response.params[actualKey] = {
              charset: false,
              values: []
            };
          }
          value2 = response.params[key2];
          if (nr === 0 && match[0].substr(-1) === "*" && (match = value2.match(/^([^']*)'[^']*'(.*)$/))) {
            response.params[actualKey].charset = match[1] || "iso-8859-1";
            value2 = match[2];
          }
          response.params[actualKey].values[nr] = value2;
          delete response.params[key2];
        }
      });
      Object.keys(response.params).forEach((key2) => {
        let value2;
        if (response.params[key2] && Array.isArray(response.params[key2].values)) {
          value2 = response.params[key2].values.map((val) => val || "").join("");
          if (response.params[key2].charset) {
            response.params[key2] = "=?" + response.params[key2].charset + "?Q?" + value2.replace(/[=?_\s]/g, (s) => {
              let c = s.charCodeAt(0).toString(16);
              if (s === " ") {
                return "_";
              } else {
                return "%" + (c.length < 2 ? "0" : "") + c;
              }
            }).replace(/%/g, "=") + "?=";
          } else {
            response.params[key2] = value2;
          }
        }
      });
      return response;
    },
    detectExtension: (mimeType) => mimeTypes.detectExtension(mimeType),
    detectMimeType: (extension) => mimeTypes.detectMimeType(extension),
    foldLines(str, lineLength, afterSpace) {
      str = (str || "").toString();
      lineLength = lineLength || 76;
      let pos = 0, len = str.length, result = "", line, match;
      while (pos < len) {
        line = str.substr(pos, lineLength);
        if (line.length < lineLength) {
          result += line;
          break;
        }
        if (match = line.match(/^[^\n\r]*(\r?\n|\r)/)) {
          line = match[0];
          result += line;
          pos += line.length;
          continue;
        } else if ((match = line.match(/(\s+)[^\s]*$/)) && match[0].length - (afterSpace ? (match[1] || "").length : 0) < line.length) {
          line = line.substr(0, line.length - (match[0].length - (afterSpace ? (match[1] || "").length : 0)));
        } else if (match = str.substr(pos + line.length).match(/^[^\s]+(\s*)/)) {
          line = line + match[0].substr(0, match[0].length - (!afterSpace ? (match[1] || "").length : 0));
        }
        result += line;
        pos += line.length;
        if (pos < len) {
          result += "\r\n";
        }
      }
      return result;
    },
    splitMimeEncodedString: (str, maxlen) => {
      let curLine, match, chr, done, lines = [];
      maxlen = Math.max(maxlen || 0, 12);
      while (str.length) {
        curLine = str.substr(0, maxlen);
        if (match = curLine.match(/[=][0-9A-F]?$/i)) {
          curLine = curLine.substr(0, match.index);
        }
        done = false;
        while (!done) {
          done = true;
          if (match = str.substr(curLine.length).match(/^[=]([0-9A-F]{2})/i)) {
            chr = parseInt(match[1], 16);
            if (chr < 194 && chr > 127) {
              curLine = curLine.substr(0, curLine.length - 3);
              done = false;
            }
          }
        }
        if (curLine.length) {
          lines.push(curLine);
        }
        str = str.substr(curLine.length);
      }
      return lines;
    },
    encodeURICharComponent: (chr) => {
      let res = "";
      let ord = chr.charCodeAt(0).toString(16).toUpperCase();
      if (ord.length % 2) {
        ord = "0" + ord;
      }
      if (ord.length > 2) {
        for (let i = 0, len = ord.length / 2;i < len; i++) {
          res += "%" + ord.substr(i, 2);
        }
      } else {
        res += "%" + ord;
      }
      return res;
    },
    safeEncodeURIComponent(str) {
      str = (str || "").toString();
      try {
        str = encodeURIComponent(str);
      } catch (E) {
        return str.replace(/[^\x00-\x1F *'()<>@,;:\\"[\]?=\u007F-\uFFFF]+/g, "");
      }
      return str.replace(/[\x00-\x1F *'()<>@,;:\\"[\]?=\u007F-\uFFFF]/g, (chr) => this.encodeURICharComponent(chr));
    }
  };
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/addressparser/index.js
var require_addressparser = __commonJS((exports, module) => {
  function _handleAddress(tokens) {
    let token;
    let isGroup = false;
    let state = "text";
    let address;
    let addresses = [];
    let data = {
      address: [],
      comment: [],
      group: [],
      text: []
    };
    let i;
    let len;
    for (i = 0, len = tokens.length;i < len; i++) {
      token = tokens[i];
      if (token.type === "operator") {
        switch (token.value) {
          case "<":
            state = "address";
            break;
          case "(":
            state = "comment";
            break;
          case ":":
            state = "group";
            isGroup = true;
            break;
          default:
            state = "text";
        }
      } else if (token.value) {
        if (state === "address") {
          token.value = token.value.replace(/^[^<]*<\s*/, "");
        }
        data[state].push(token.value);
      }
    }
    if (!data.text.length && data.comment.length) {
      data.text = data.comment;
      data.comment = [];
    }
    if (isGroup) {
      data.text = data.text.join(" ");
      addresses.push({
        name: data.text || address && address.name,
        group: data.group.length ? addressparser(data.group.join(",")) : []
      });
    } else {
      if (!data.address.length && data.text.length) {
        for (i = data.text.length - 1;i >= 0; i--) {
          if (data.text[i].match(/^[^@\s]+@[^@\s]+$/)) {
            data.address = data.text.splice(i, 1);
            break;
          }
        }
        let _regexHandler = function(address2) {
          if (!data.address.length) {
            data.address = [address2.trim()];
            return " ";
          } else {
            return address2;
          }
        };
        if (!data.address.length) {
          for (i = data.text.length - 1;i >= 0; i--) {
            data.text[i] = data.text[i].replace(/\s*\b[^@\s]+@[^\s]+\b\s*/, _regexHandler).trim();
            if (data.address.length) {
              break;
            }
          }
        }
      }
      if (!data.text.length && data.comment.length) {
        data.text = data.comment;
        data.comment = [];
      }
      if (data.address.length > 1) {
        data.text = data.text.concat(data.address.splice(1));
      }
      data.text = data.text.join(" ");
      data.address = data.address.join(" ");
      if (!data.address && isGroup) {
        return [];
      } else {
        address = {
          address: data.address || data.text || "",
          name: data.text || data.address || ""
        };
        if (address.address === address.name) {
          if ((address.address || "").match(/@/)) {
            address.name = "";
          } else {
            address.address = "";
          }
        }
        addresses.push(address);
      }
    }
    return addresses;
  }
  function addressparser(str, options) {
    options = options || {};
    let tokenizer = new Tokenizer(str);
    let tokens = tokenizer.tokenize();
    let addresses = [];
    let address = [];
    let parsedAddresses = [];
    tokens.forEach((token) => {
      if (token.type === "operator" && (token.value === "," || token.value === ";")) {
        if (address.length) {
          addresses.push(address);
        }
        address = [];
      } else {
        address.push(token);
      }
    });
    if (address.length) {
      addresses.push(address);
    }
    addresses.forEach((address2) => {
      address2 = _handleAddress(address2);
      if (address2.length) {
        parsedAddresses = parsedAddresses.concat(address2);
      }
    });
    if (options.flatten) {
      let addresses2 = [];
      let walkAddressList = (list) => {
        list.forEach((address2) => {
          if (address2.group) {
            return walkAddressList(address2.group);
          } else {
            addresses2.push(address2);
          }
        });
      };
      walkAddressList(parsedAddresses);
      return addresses2;
    }
    return parsedAddresses;
  }

  class Tokenizer {
    constructor(str) {
      this.str = (str || "").toString();
      this.operatorCurrent = "";
      this.operatorExpecting = "";
      this.node = null;
      this.escaped = false;
      this.list = [];
      this.operators = {
        '"': '"',
        "(": ")",
        "<": ">",
        ",": "",
        ":": ";",
        ";": ""
      };
    }
    tokenize() {
      let chr, list = [];
      for (let i = 0, len = this.str.length;i < len; i++) {
        chr = this.str.charAt(i);
        this.checkChar(chr);
      }
      this.list.forEach((node) => {
        node.value = (node.value || "").toString().trim();
        if (node.value) {
          list.push(node);
        }
      });
      return list;
    }
    checkChar(chr) {
      if (this.escaped) {
      } else if (chr === this.operatorExpecting) {
        this.node = {
          type: "operator",
          value: chr
        };
        this.list.push(this.node);
        this.node = null;
        this.operatorExpecting = "";
        this.escaped = false;
        return;
      } else if (!this.operatorExpecting && chr in this.operators) {
        this.node = {
          type: "operator",
          value: chr
        };
        this.list.push(this.node);
        this.node = null;
        this.operatorExpecting = this.operators[chr];
        this.escaped = false;
        return;
      } else if (['"', "'"].includes(this.operatorExpecting) && chr === "\\") {
        this.escaped = true;
        return;
      }
      if (!this.node) {
        this.node = {
          type: "text",
          value: ""
        };
        this.list.push(this.node);
      }
      if (chr === "\n") {
        chr = " ";
      }
      if (chr.charCodeAt(0) >= 33 || [" ", "\t"].includes(chr)) {
        this.node.value += chr;
      }
      this.escaped = false;
    }
  }
  module.exports = addressparser;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/mime-node/last-newline.js
var require_last_newline = __commonJS((exports, module) => {
  var Transform = __require("stream").Transform;

  class LastNewline extends Transform {
    constructor() {
      super();
      this.lastByte = false;
    }
    _transform(chunk, encoding, done) {
      if (chunk.length) {
        this.lastByte = chunk[chunk.length - 1];
      }
      this.push(chunk);
      done();
    }
    _flush(done) {
      if (this.lastByte === 10) {
        return done();
      }
      if (this.lastByte === 13) {
        this.push(Buffer.from("\n"));
        return done();
      }
      this.push(Buffer.from("\r\n"));
      return done();
    }
  }
  module.exports = LastNewline;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/mime-node/le-windows.js
var require_le_windows = __commonJS((exports, module) => {
  var stream2 = __require("stream");
  var Transform = stream2.Transform;

  class LeWindows extends Transform {
    constructor(options) {
      super(options);
      this.options = options || {};
      this.lastByte = false;
    }
    _transform(chunk, encoding, done) {
      let buf;
      let lastPos = 0;
      for (let i = 0, len = chunk.length;i < len; i++) {
        if (chunk[i] === 10) {
          if (i && chunk[i - 1] !== 13 || !i && this.lastByte !== 13) {
            if (i > lastPos) {
              buf = chunk.slice(lastPos, i);
              this.push(buf);
            }
            this.push(Buffer.from("\r\n"));
            lastPos = i + 1;
          }
        }
      }
      if (lastPos && lastPos < chunk.length) {
        buf = chunk.slice(lastPos);
        this.push(buf);
      } else if (!lastPos) {
        this.push(chunk);
      }
      this.lastByte = chunk[chunk.length - 1];
      done();
    }
  }
  module.exports = LeWindows;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/mime-node/le-unix.js
var require_le_unix = __commonJS((exports, module) => {
  var stream2 = __require("stream");
  var Transform = stream2.Transform;

  class LeWindows extends Transform {
    constructor(options) {
      super(options);
      this.options = options || {};
    }
    _transform(chunk, encoding, done) {
      let buf;
      let lastPos = 0;
      for (let i = 0, len = chunk.length;i < len; i++) {
        if (chunk[i] === 13) {
          buf = chunk.slice(lastPos, i);
          lastPos = i + 1;
          this.push(buf);
        }
      }
      if (lastPos && lastPos < chunk.length) {
        buf = chunk.slice(lastPos);
        this.push(buf);
      } else if (!lastPos) {
        this.push(chunk);
      }
      done();
    }
  }
  module.exports = LeWindows;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/mime-node/index.js
var require_mime_node = __commonJS((exports, module) => {
  var crypto = __require("crypto");
  var fs = __require("fs");
  var punycode = require_punycode();
  var PassThrough = __require("stream").PassThrough;
  var shared = require_shared();
  var mimeFuncs = require_mime_funcs();
  var qp = require_qp();
  var base64 = require_base64();
  var addressparser = require_addressparser();
  var nmfetch = require_fetch();
  var LastNewline = require_last_newline();
  var LeWindows = require_le_windows();
  var LeUnix = require_le_unix();

  class MimeNode {
    constructor(contentType, options) {
      this.nodeCounter = 0;
      options = options || {};
      this.baseBoundary = options.baseBoundary || crypto.randomBytes(8).toString("hex");
      this.boundaryPrefix = options.boundaryPrefix || "--_NmP";
      this.disableFileAccess = !!options.disableFileAccess;
      this.disableUrlAccess = !!options.disableUrlAccess;
      this.normalizeHeaderKey = options.normalizeHeaderKey;
      this.date = new Date;
      this.rootNode = options.rootNode || this;
      this.keepBcc = !!options.keepBcc;
      if (options.filename) {
        this.filename = options.filename;
        if (!contentType) {
          contentType = mimeFuncs.detectMimeType(this.filename.split(".").pop());
        }
      }
      this.textEncoding = (options.textEncoding || "").toString().trim().charAt(0).toUpperCase();
      this.parentNode = options.parentNode;
      this.hostname = options.hostname;
      this.newline = options.newline;
      this.childNodes = [];
      this._nodeId = ++this.rootNode.nodeCounter;
      this._headers = [];
      this._isPlainText = false;
      this._hasLongLines = false;
      this._envelope = false;
      this._raw = false;
      this._transforms = [];
      this._processFuncs = [];
      if (contentType) {
        this.setHeader("Content-Type", contentType);
      }
    }
    createChild(contentType, options) {
      if (!options && typeof contentType === "object") {
        options = contentType;
        contentType = undefined;
      }
      let node = new MimeNode(contentType, options);
      this.appendChild(node);
      return node;
    }
    appendChild(childNode) {
      if (childNode.rootNode !== this.rootNode) {
        childNode.rootNode = this.rootNode;
        childNode._nodeId = ++this.rootNode.nodeCounter;
      }
      childNode.parentNode = this;
      this.childNodes.push(childNode);
      return childNode;
    }
    replace(node) {
      if (node === this) {
        return this;
      }
      this.parentNode.childNodes.forEach((childNode, i) => {
        if (childNode === this) {
          node.rootNode = this.rootNode;
          node.parentNode = this.parentNode;
          node._nodeId = this._nodeId;
          this.rootNode = this;
          this.parentNode = undefined;
          node.parentNode.childNodes[i] = node;
        }
      });
      return node;
    }
    remove() {
      if (!this.parentNode) {
        return this;
      }
      for (let i = this.parentNode.childNodes.length - 1;i >= 0; i--) {
        if (this.parentNode.childNodes[i] === this) {
          this.parentNode.childNodes.splice(i, 1);
          this.parentNode = undefined;
          this.rootNode = this;
          return this;
        }
      }
    }
    setHeader(key, value) {
      let added = false, headerValue;
      if (!value && key && typeof key === "object") {
        if (key.key && "value" in key) {
          this.setHeader(key.key, key.value);
        } else if (Array.isArray(key)) {
          key.forEach((i) => {
            this.setHeader(i.key, i.value);
          });
        } else {
          Object.keys(key).forEach((i) => {
            this.setHeader(i, key[i]);
          });
        }
        return this;
      }
      key = this._normalizeHeaderKey(key);
      headerValue = {
        key,
        value
      };
      for (let i = 0, len = this._headers.length;i < len; i++) {
        if (this._headers[i].key === key) {
          if (!added) {
            this._headers[i] = headerValue;
            added = true;
          } else {
            this._headers.splice(i, 1);
            i--;
            len--;
          }
        }
      }
      if (!added) {
        this._headers.push(headerValue);
      }
      return this;
    }
    addHeader(key, value) {
      if (!value && key && typeof key === "object") {
        if (key.key && key.value) {
          this.addHeader(key.key, key.value);
        } else if (Array.isArray(key)) {
          key.forEach((i) => {
            this.addHeader(i.key, i.value);
          });
        } else {
          Object.keys(key).forEach((i) => {
            this.addHeader(i, key[i]);
          });
        }
        return this;
      } else if (Array.isArray(value)) {
        value.forEach((val) => {
          this.addHeader(key, val);
        });
        return this;
      }
      this._headers.push({
        key: this._normalizeHeaderKey(key),
        value
      });
      return this;
    }
    getHeader(key) {
      key = this._normalizeHeaderKey(key);
      for (let i = 0, len = this._headers.length;i < len; i++) {
        if (this._headers[i].key === key) {
          return this._headers[i].value;
        }
      }
    }
    setContent(content) {
      this.content = content;
      if (typeof this.content.pipe === "function") {
        this._contentErrorHandler = (err) => {
          this.content.removeListener("error", this._contentErrorHandler);
          this.content = err;
        };
        this.content.once("error", this._contentErrorHandler);
      } else if (typeof this.content === "string") {
        this._isPlainText = mimeFuncs.isPlainText(this.content);
        if (this._isPlainText && mimeFuncs.hasLongerLines(this.content, 76)) {
          this._hasLongLines = true;
        }
      }
      return this;
    }
    build(callback) {
      let promise;
      if (!callback) {
        promise = new Promise((resolve, reject) => {
          callback = shared.callbackPromise(resolve, reject);
        });
      }
      let stream2 = this.createReadStream();
      let buf = [];
      let buflen = 0;
      let returned = false;
      stream2.on("readable", () => {
        let chunk;
        while ((chunk = stream2.read()) !== null) {
          buf.push(chunk);
          buflen += chunk.length;
        }
      });
      stream2.once("error", (err) => {
        if (returned) {
          return;
        }
        returned = true;
        return callback(err);
      });
      stream2.once("end", (chunk) => {
        if (returned) {
          return;
        }
        returned = true;
        if (chunk && chunk.length) {
          buf.push(chunk);
          buflen += chunk.length;
        }
        return callback(null, Buffer.concat(buf, buflen));
      });
      return promise;
    }
    getTransferEncoding() {
      let transferEncoding = false;
      let contentType = (this.getHeader("Content-Type") || "").toString().toLowerCase().trim();
      if (this.content) {
        transferEncoding = (this.getHeader("Content-Transfer-Encoding") || "").toString().toLowerCase().trim();
        if (!transferEncoding || !["base64", "quoted-printable"].includes(transferEncoding)) {
          if (/^text\//i.test(contentType)) {
            if (this._isPlainText && !this._hasLongLines) {
              transferEncoding = "7bit";
            } else if (typeof this.content === "string" || this.content instanceof Buffer) {
              transferEncoding = this._getTextEncoding(this.content) === "Q" ? "quoted-printable" : "base64";
            } else {
              transferEncoding = this.textEncoding === "B" ? "base64" : "quoted-printable";
            }
          } else if (!/^(multipart|message)\//i.test(contentType)) {
            transferEncoding = transferEncoding || "base64";
          }
        }
      }
      return transferEncoding;
    }
    buildHeaders() {
      let transferEncoding = this.getTransferEncoding();
      let headers = [];
      if (transferEncoding) {
        this.setHeader("Content-Transfer-Encoding", transferEncoding);
      }
      if (this.filename && !this.getHeader("Content-Disposition")) {
        this.setHeader("Content-Disposition", "attachment");
      }
      if (this.rootNode === this) {
        if (!this.getHeader("Date")) {
          this.setHeader("Date", this.date.toUTCString().replace(/GMT/, "+0000"));
        }
        this.messageId();
        if (!this.getHeader("MIME-Version")) {
          this.setHeader("MIME-Version", "1.0");
        }
        for (let i = this._headers.length - 2;i >= 0; i--) {
          let header = this._headers[i];
          if (header.key === "Content-Type") {
            this._headers.splice(i, 1);
            this._headers.push(header);
          }
        }
      }
      this._headers.forEach((header) => {
        let key = header.key;
        let value = header.value;
        let structured;
        let param;
        let options = {};
        let formattedHeaders = ["From", "Sender", "To", "Cc", "Bcc", "Reply-To", "Date", "References"];
        if (value && typeof value === "object" && !formattedHeaders.includes(key)) {
          Object.keys(value).forEach((key2) => {
            if (key2 !== "value") {
              options[key2] = value[key2];
            }
          });
          value = (value.value || "").toString();
          if (!value.trim()) {
            return;
          }
        }
        if (options.prepared) {
          if (options.foldLines) {
            headers.push(mimeFuncs.foldLines(key + ": " + value));
          } else {
            headers.push(key + ": " + value);
          }
          return;
        }
        switch (header.key) {
          case "Content-Disposition":
            structured = mimeFuncs.parseHeaderValue(value);
            if (this.filename) {
              structured.params.filename = this.filename;
            }
            value = mimeFuncs.buildHeaderValue(structured);
            break;
          case "Content-Type":
            structured = mimeFuncs.parseHeaderValue(value);
            this._handleContentType(structured);
            if (structured.value.match(/^text\/plain\b/) && typeof this.content === "string" && /[\u0080-\uFFFF]/.test(this.content)) {
              structured.params.charset = "utf-8";
            }
            value = mimeFuncs.buildHeaderValue(structured);
            if (this.filename) {
              param = this._encodeWords(this.filename);
              if (param !== this.filename || /[\s'"\\;:/=(),<>@[\]?]|^-/.test(param)) {
                param = '"' + param + '"';
              }
              value += "; name=" + param;
            }
            break;
          case "Bcc":
            if (!this.keepBcc) {
              return;
            }
            break;
        }
        value = this._encodeHeaderValue(key, value);
        if (!(value || "").toString().trim()) {
          return;
        }
        if (typeof this.normalizeHeaderKey === "function") {
          let normalized = this.normalizeHeaderKey(key, value);
          if (normalized && typeof normalized === "string" && normalized.length) {
            key = normalized;
          }
        }
        headers.push(mimeFuncs.foldLines(key + ": " + value, 76));
      });
      return headers.join("\r\n");
    }
    createReadStream(options) {
      options = options || {};
      let stream2 = new PassThrough(options);
      let outputStream = stream2;
      let transform;
      this.stream(stream2, options, (err) => {
        if (err) {
          outputStream.emit("error", err);
          return;
        }
        stream2.end();
      });
      for (let i = 0, len = this._transforms.length;i < len; i++) {
        transform = typeof this._transforms[i] === "function" ? this._transforms[i]() : this._transforms[i];
        outputStream.once("error", (err) => {
          transform.emit("error", err);
        });
        outputStream = outputStream.pipe(transform);
      }
      transform = new LastNewline;
      outputStream.once("error", (err) => {
        transform.emit("error", err);
      });
      outputStream = outputStream.pipe(transform);
      for (let i = 0, len = this._processFuncs.length;i < len; i++) {
        transform = this._processFuncs[i];
        outputStream = transform(outputStream);
      }
      if (this.newline) {
        const winbreak = ["win", "windows", "dos", "\r\n"].includes(this.newline.toString().toLowerCase());
        const newlineTransform = winbreak ? new LeWindows : new LeUnix;
        const stream3 = outputStream.pipe(newlineTransform);
        outputStream.on("error", (err) => stream3.emit("error", err));
        return stream3;
      }
      return outputStream;
    }
    transform(transform) {
      this._transforms.push(transform);
    }
    processFunc(processFunc) {
      this._processFuncs.push(processFunc);
    }
    stream(outputStream, options, done) {
      let transferEncoding = this.getTransferEncoding();
      let contentStream;
      let localStream;
      let returned = false;
      let callback = (err) => {
        if (returned) {
          return;
        }
        returned = true;
        done(err);
      };
      let finalize = () => {
        let childId = 0;
        let processChildNode = () => {
          if (childId >= this.childNodes.length) {
            outputStream.write("\r\n--" + this.boundary + "--\r\n");
            return callback();
          }
          let child = this.childNodes[childId++];
          outputStream.write((childId > 1 ? "\r\n" : "") + "--" + this.boundary + "\r\n");
          child.stream(outputStream, options, (err) => {
            if (err) {
              return callback(err);
            }
            setImmediate(processChildNode);
          });
        };
        if (this.multipart) {
          setImmediate(processChildNode);
        } else {
          return callback();
        }
      };
      let sendContent = () => {
        if (this.content) {
          if (Object.prototype.toString.call(this.content) === "[object Error]") {
            return callback(this.content);
          }
          if (typeof this.content.pipe === "function") {
            this.content.removeListener("error", this._contentErrorHandler);
            this._contentErrorHandler = (err) => callback(err);
            this.content.once("error", this._contentErrorHandler);
          }
          let createStream = () => {
            if (["quoted-printable", "base64"].includes(transferEncoding)) {
              contentStream = new (transferEncoding === "base64" ? base64 : qp).Encoder(options);
              contentStream.pipe(outputStream, {
                end: false
              });
              contentStream.once("end", finalize);
              contentStream.once("error", (err) => callback(err));
              localStream = this._getStream(this.content);
              localStream.pipe(contentStream);
            } else {
              localStream = this._getStream(this.content);
              localStream.pipe(outputStream, {
                end: false
              });
              localStream.once("end", finalize);
            }
            localStream.once("error", (err) => callback(err));
          };
          if (this.content._resolve) {
            let chunks = [];
            let chunklen = 0;
            let returned2 = false;
            let sourceStream = this._getStream(this.content);
            sourceStream.on("error", (err) => {
              if (returned2) {
                return;
              }
              returned2 = true;
              callback(err);
            });
            sourceStream.on("readable", () => {
              let chunk;
              while ((chunk = sourceStream.read()) !== null) {
                chunks.push(chunk);
                chunklen += chunk.length;
              }
            });
            sourceStream.on("end", () => {
              if (returned2) {
                return;
              }
              returned2 = true;
              this.content._resolve = false;
              this.content._resolvedValue = Buffer.concat(chunks, chunklen);
              setImmediate(createStream);
            });
          } else {
            setImmediate(createStream);
          }
          return;
        } else {
          return setImmediate(finalize);
        }
      };
      if (this._raw) {
        setImmediate(() => {
          if (Object.prototype.toString.call(this._raw) === "[object Error]") {
            return callback(this._raw);
          }
          if (typeof this._raw.pipe === "function") {
            this._raw.removeListener("error", this._contentErrorHandler);
          }
          let raw = this._getStream(this._raw);
          raw.pipe(outputStream, {
            end: false
          });
          raw.on("error", (err) => outputStream.emit("error", err));
          raw.on("end", finalize);
        });
      } else {
        outputStream.write(this.buildHeaders() + "\r\n\r\n");
        setImmediate(sendContent);
      }
    }
    setEnvelope(envelope) {
      let list;
      this._envelope = {
        from: false,
        to: []
      };
      if (envelope.from) {
        list = [];
        this._convertAddresses(this._parseAddresses(envelope.from), list);
        list = list.filter((address) => address && address.address);
        if (list.length && list[0]) {
          this._envelope.from = list[0].address;
        }
      }
      ["to", "cc", "bcc"].forEach((key) => {
        if (envelope[key]) {
          this._convertAddresses(this._parseAddresses(envelope[key]), this._envelope.to);
        }
      });
      this._envelope.to = this._envelope.to.map((to) => to.address).filter((address) => address);
      let standardFields = ["to", "cc", "bcc", "from"];
      Object.keys(envelope).forEach((key) => {
        if (!standardFields.includes(key)) {
          this._envelope[key] = envelope[key];
        }
      });
      return this;
    }
    getAddresses() {
      let addresses = {};
      this._headers.forEach((header) => {
        let key = header.key.toLowerCase();
        if (["from", "sender", "reply-to", "to", "cc", "bcc"].includes(key)) {
          if (!Array.isArray(addresses[key])) {
            addresses[key] = [];
          }
          this._convertAddresses(this._parseAddresses(header.value), addresses[key]);
        }
      });
      return addresses;
    }
    getEnvelope() {
      if (this._envelope) {
        return this._envelope;
      }
      let envelope = {
        from: false,
        to: []
      };
      this._headers.forEach((header) => {
        let list = [];
        if (header.key === "From" || !envelope.from && ["Reply-To", "Sender"].includes(header.key)) {
          this._convertAddresses(this._parseAddresses(header.value), list);
          if (list.length && list[0]) {
            envelope.from = list[0].address;
          }
        } else if (["To", "Cc", "Bcc"].includes(header.key)) {
          this._convertAddresses(this._parseAddresses(header.value), envelope.to);
        }
      });
      envelope.to = envelope.to.map((to) => to.address);
      return envelope;
    }
    messageId() {
      let messageId = this.getHeader("Message-ID");
      if (!messageId) {
        messageId = this._generateMessageId();
        this.setHeader("Message-ID", messageId);
      }
      return messageId;
    }
    setRaw(raw) {
      this._raw = raw;
      if (this._raw && typeof this._raw.pipe === "function") {
        this._contentErrorHandler = (err) => {
          this._raw.removeListener("error", this._contentErrorHandler);
          this._raw = err;
        };
        this._raw.once("error", this._contentErrorHandler);
      }
      return this;
    }
    _getStream(content) {
      let contentStream;
      if (content._resolvedValue) {
        contentStream = new PassThrough;
        setImmediate(() => {
          try {
            contentStream.end(content._resolvedValue);
          } catch (err) {
            contentStream.emit("error", err);
          }
        });
        return contentStream;
      } else if (typeof content.pipe === "function") {
        return content;
      } else if (content && typeof content.path === "string" && !content.href) {
        if (this.disableFileAccess) {
          contentStream = new PassThrough;
          setImmediate(() => contentStream.emit("error", new Error("File access rejected for " + content.path)));
          return contentStream;
        }
        return fs.createReadStream(content.path);
      } else if (content && typeof content.href === "string") {
        if (this.disableUrlAccess) {
          contentStream = new PassThrough;
          setImmediate(() => contentStream.emit("error", new Error("Url access rejected for " + content.href)));
          return contentStream;
        }
        return nmfetch(content.href, { headers: content.httpHeaders });
      } else {
        contentStream = new PassThrough;
        setImmediate(() => {
          try {
            contentStream.end(content || "");
          } catch (err) {
            contentStream.emit("error", err);
          }
        });
        return contentStream;
      }
    }
    _parseAddresses(addresses) {
      return [].concat.apply([], [].concat(addresses).map((address) => {
        if (address && address.address) {
          address.address = this._normalizeAddress(address.address);
          address.name = address.name || "";
          return [address];
        }
        return addressparser(address);
      }));
    }
    _normalizeHeaderKey(key) {
      key = (key || "").toString().replace(/\r?\n|\r/g, " ").trim().toLowerCase().replace(/^X-SMTPAPI$|^(MIME|DKIM|ARC|BIMI)\b|^[a-z]|-(SPF|FBL|ID|MD5)$|-[a-z]/gi, (c) => c.toUpperCase()).replace(/^Content-Features$/i, "Content-features");
      return key;
    }
    _handleContentType(structured) {
      this.contentType = structured.value.trim().toLowerCase();
      this.multipart = /^multipart\//i.test(this.contentType) ? this.contentType.substr(this.contentType.indexOf("/") + 1) : false;
      if (this.multipart) {
        this.boundary = structured.params.boundary = structured.params.boundary || this.boundary || this._generateBoundary();
      } else {
        this.boundary = false;
      }
    }
    _generateBoundary() {
      return this.rootNode.boundaryPrefix + "-" + this.rootNode.baseBoundary + "-Part_" + this._nodeId;
    }
    _encodeHeaderValue(key, value) {
      key = this._normalizeHeaderKey(key);
      switch (key) {
        case "From":
        case "Sender":
        case "To":
        case "Cc":
        case "Bcc":
        case "Reply-To":
          return this._convertAddresses(this._parseAddresses(value));
        case "Message-ID":
        case "In-Reply-To":
        case "Content-Id":
          value = (value || "").toString().replace(/\r?\n|\r/g, " ");
          if (value.charAt(0) !== "<") {
            value = "<" + value;
          }
          if (value.charAt(value.length - 1) !== ">") {
            value = value + ">";
          }
          return value;
        case "References":
          value = [].concat.apply([], [].concat(value || "").map((elm) => {
            elm = (elm || "").toString().replace(/\r?\n|\r/g, " ").trim();
            return elm.replace(/<[^>]*>/g, (str) => str.replace(/\s/g, "")).split(/\s+/);
          })).map((elm) => {
            if (elm.charAt(0) !== "<") {
              elm = "<" + elm;
            }
            if (elm.charAt(elm.length - 1) !== ">") {
              elm = elm + ">";
            }
            return elm;
          });
          return value.join(" ").trim();
        case "Date":
          if (Object.prototype.toString.call(value) === "[object Date]") {
            return value.toUTCString().replace(/GMT/, "+0000");
          }
          value = (value || "").toString().replace(/\r?\n|\r/g, " ");
          return this._encodeWords(value);
        case "Content-Type":
        case "Content-Disposition":
          return (value || "").toString().replace(/\r?\n|\r/g, " ");
        default:
          value = (value || "").toString().replace(/\r?\n|\r/g, " ");
          return this._encodeWords(value);
      }
    }
    _convertAddresses(addresses, uniqueList) {
      let values = [];
      uniqueList = uniqueList || [];
      [].concat(addresses || []).forEach((address) => {
        if (address.address) {
          address.address = this._normalizeAddress(address.address);
          if (!address.name) {
            values.push(address.address.indexOf(" ") >= 0 ? `<${address.address}>` : `${address.address}`);
          } else if (address.name) {
            values.push(`${this._encodeAddressName(address.name)} <${address.address}>`);
          }
          if (address.address) {
            if (!uniqueList.filter((a) => a.address === address.address).length) {
              uniqueList.push(address);
            }
          }
        } else if (address.group) {
          let groupListAddresses = (address.group.length ? this._convertAddresses(address.group, uniqueList) : "").trim();
          values.push(`${this._encodeAddressName(address.name)}:${groupListAddresses};`);
        }
      });
      return values.join(", ");
    }
    _normalizeAddress(address) {
      address = (address || "").toString().replace(/[\x00-\x1F<>]+/g, " ").trim();
      let lastAt = address.lastIndexOf("@");
      if (lastAt < 0) {
        return address;
      }
      let user = address.substr(0, lastAt);
      let domain = address.substr(lastAt + 1);
      let encodedDomain;
      try {
        encodedDomain = punycode.toASCII(domain.toLowerCase());
      } catch (err) {
      }
      if (user.indexOf(" ") >= 0) {
        if (user.charAt(0) !== '"') {
          user = '"' + user;
        }
        if (user.substr(-1) !== '"') {
          user = user + '"';
        }
      }
      return `${user}@${encodedDomain}`;
    }
    _encodeAddressName(name) {
      if (!/^[\w ]*$/.test(name)) {
        if (/^[\x20-\x7e]*$/.test(name)) {
          return '"' + name.replace(/([\\"])/g, "\\$1") + '"';
        } else {
          return mimeFuncs.encodeWord(name, this._getTextEncoding(name), 52);
        }
      }
      return name;
    }
    _encodeWords(value) {
      return mimeFuncs.encodeWords(value, this._getTextEncoding(value), 52, true);
    }
    _getTextEncoding(value) {
      value = (value || "").toString();
      let encoding = this.textEncoding;
      let latinLen;
      let nonLatinLen;
      if (!encoding) {
        nonLatinLen = (value.match(/[\x00-\x08\x0B\x0C\x0E-\x1F\u0080-\uFFFF]/g) || []).length;
        latinLen = (value.match(/[a-z]/gi) || []).length;
        encoding = nonLatinLen < latinLen ? "Q" : "B";
      }
      return encoding;
    }
    _generateMessageId() {
      return "<" + [2, 2, 2, 6].reduce((prev, len) => prev + "-" + crypto.randomBytes(len).toString("hex"), crypto.randomBytes(4).toString("hex")) + "@" + (this.getEnvelope().from || this.hostname || "localhost").split("@").pop() + ">";
    }
  }
  module.exports = MimeNode;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/mail-composer/index.js
var require_mail_composer = __commonJS((exports, module) => {
  var MimeNode = require_mime_node();
  var mimeFuncs = require_mime_funcs();
  var parseDataURI = require_shared().parseDataURI;

  class MailComposer {
    constructor(mail) {
      this.mail = mail || {};
      this.message = false;
    }
    compile() {
      this._alternatives = this.getAlternatives();
      this._htmlNode = this._alternatives.filter((alternative) => /^text\/html\b/i.test(alternative.contentType)).pop();
      this._attachments = this.getAttachments(!!this._htmlNode);
      this._useRelated = !!(this._htmlNode && this._attachments.related.length);
      this._useAlternative = this._alternatives.length > 1;
      this._useMixed = this._attachments.attached.length > 1 || this._alternatives.length && this._attachments.attached.length === 1;
      if (this.mail.raw) {
        this.message = new MimeNode("message/rfc822", { newline: this.mail.newline }).setRaw(this.mail.raw);
      } else if (this._useMixed) {
        this.message = this._createMixed();
      } else if (this._useAlternative) {
        this.message = this._createAlternative();
      } else if (this._useRelated) {
        this.message = this._createRelated();
      } else {
        this.message = this._createContentNode(false, [].concat(this._alternatives || []).concat(this._attachments.attached || []).shift() || {
          contentType: "text/plain",
          content: ""
        });
      }
      if (this.mail.headers) {
        this.message.addHeader(this.mail.headers);
      }
      ["from", "sender", "to", "cc", "bcc", "reply-to", "in-reply-to", "references", "subject", "message-id", "date"].forEach((header) => {
        let key = header.replace(/-(\w)/g, (o, c) => c.toUpperCase());
        if (this.mail[key]) {
          this.message.setHeader(header, this.mail[key]);
        }
      });
      if (this.mail.envelope) {
        this.message.setEnvelope(this.mail.envelope);
      }
      this.message.messageId();
      return this.message;
    }
    getAttachments(findRelated) {
      let icalEvent, eventObject;
      let attachments = [].concat(this.mail.attachments || []).map((attachment, i) => {
        let data;
        let isMessageNode = /^message\//i.test(attachment.contentType);
        if (/^data:/i.test(attachment.path || attachment.href)) {
          attachment = this._processDataUrl(attachment);
        }
        let contentType = attachment.contentType || mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || "bin");
        let isImage = /^image\//i.test(contentType);
        let contentDisposition = attachment.contentDisposition || (isMessageNode || isImage && attachment.cid ? "inline" : "attachment");
        data = {
          contentType,
          contentDisposition,
          contentTransferEncoding: "contentTransferEncoding" in attachment ? attachment.contentTransferEncoding : "base64"
        };
        if (attachment.filename) {
          data.filename = attachment.filename;
        } else if (!isMessageNode && attachment.filename !== false) {
          data.filename = (attachment.path || attachment.href || "").split("/").pop().split("?").shift() || "attachment-" + (i + 1);
          if (data.filename.indexOf(".") < 0) {
            data.filename += "." + mimeFuncs.detectExtension(data.contentType);
          }
        }
        if (/^https?:\/\//i.test(attachment.path)) {
          attachment.href = attachment.path;
          attachment.path = undefined;
        }
        if (attachment.cid) {
          data.cid = attachment.cid;
        }
        if (attachment.raw) {
          data.raw = attachment.raw;
        } else if (attachment.path) {
          data.content = {
            path: attachment.path
          };
        } else if (attachment.href) {
          data.content = {
            href: attachment.href,
            httpHeaders: attachment.httpHeaders
          };
        } else {
          data.content = attachment.content || "";
        }
        if (attachment.encoding) {
          data.encoding = attachment.encoding;
        }
        if (attachment.headers) {
          data.headers = attachment.headers;
        }
        return data;
      });
      if (this.mail.icalEvent) {
        if (typeof this.mail.icalEvent === "object" && (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)) {
          icalEvent = this.mail.icalEvent;
        } else {
          icalEvent = {
            content: this.mail.icalEvent
          };
        }
        eventObject = {};
        Object.keys(icalEvent).forEach((key) => {
          eventObject[key] = icalEvent[key];
        });
        eventObject.contentType = "application/ics";
        if (!eventObject.headers) {
          eventObject.headers = {};
        }
        eventObject.filename = eventObject.filename || "invite.ics";
        eventObject.headers["Content-Disposition"] = "attachment";
        eventObject.headers["Content-Transfer-Encoding"] = "base64";
      }
      if (!findRelated) {
        return {
          attached: attachments.concat(eventObject || []),
          related: []
        };
      } else {
        return {
          attached: attachments.filter((attachment) => !attachment.cid).concat(eventObject || []),
          related: attachments.filter((attachment) => !!attachment.cid)
        };
      }
    }
    getAlternatives() {
      let alternatives = [], text, html, watchHtml, amp, icalEvent, eventObject;
      if (this.mail.text) {
        if (typeof this.mail.text === "object" && (this.mail.text.content || this.mail.text.path || this.mail.text.href || this.mail.text.raw)) {
          text = this.mail.text;
        } else {
          text = {
            content: this.mail.text
          };
        }
        text.contentType = "text/plain; charset=utf-8";
      }
      if (this.mail.watchHtml) {
        if (typeof this.mail.watchHtml === "object" && (this.mail.watchHtml.content || this.mail.watchHtml.path || this.mail.watchHtml.href || this.mail.watchHtml.raw)) {
          watchHtml = this.mail.watchHtml;
        } else {
          watchHtml = {
            content: this.mail.watchHtml
          };
        }
        watchHtml.contentType = "text/watch-html; charset=utf-8";
      }
      if (this.mail.amp) {
        if (typeof this.mail.amp === "object" && (this.mail.amp.content || this.mail.amp.path || this.mail.amp.href || this.mail.amp.raw)) {
          amp = this.mail.amp;
        } else {
          amp = {
            content: this.mail.amp
          };
        }
        amp.contentType = "text/x-amp-html; charset=utf-8";
      }
      if (this.mail.icalEvent) {
        if (typeof this.mail.icalEvent === "object" && (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)) {
          icalEvent = this.mail.icalEvent;
        } else {
          icalEvent = {
            content: this.mail.icalEvent
          };
        }
        eventObject = {};
        Object.keys(icalEvent).forEach((key) => {
          eventObject[key] = icalEvent[key];
        });
        if (eventObject.content && typeof eventObject.content === "object") {
          eventObject.content._resolve = true;
        }
        eventObject.filename = false;
        eventObject.contentType = "text/calendar; charset=utf-8; method=" + (eventObject.method || "PUBLISH").toString().trim().toUpperCase();
        if (!eventObject.headers) {
          eventObject.headers = {};
        }
      }
      if (this.mail.html) {
        if (typeof this.mail.html === "object" && (this.mail.html.content || this.mail.html.path || this.mail.html.href || this.mail.html.raw)) {
          html = this.mail.html;
        } else {
          html = {
            content: this.mail.html
          };
        }
        html.contentType = "text/html; charset=utf-8";
      }
      [].concat(text || []).concat(watchHtml || []).concat(amp || []).concat(html || []).concat(eventObject || []).concat(this.mail.alternatives || []).forEach((alternative) => {
        let data;
        if (/^data:/i.test(alternative.path || alternative.href)) {
          alternative = this._processDataUrl(alternative);
        }
        data = {
          contentType: alternative.contentType || mimeFuncs.detectMimeType(alternative.filename || alternative.path || alternative.href || "txt"),
          contentTransferEncoding: alternative.contentTransferEncoding
        };
        if (alternative.filename) {
          data.filename = alternative.filename;
        }
        if (/^https?:\/\//i.test(alternative.path)) {
          alternative.href = alternative.path;
          alternative.path = undefined;
        }
        if (alternative.raw) {
          data.raw = alternative.raw;
        } else if (alternative.path) {
          data.content = {
            path: alternative.path
          };
        } else if (alternative.href) {
          data.content = {
            href: alternative.href
          };
        } else {
          data.content = alternative.content || "";
        }
        if (alternative.encoding) {
          data.encoding = alternative.encoding;
        }
        if (alternative.headers) {
          data.headers = alternative.headers;
        }
        alternatives.push(data);
      });
      return alternatives;
    }
    _createMixed(parentNode) {
      let node;
      if (!parentNode) {
        node = new MimeNode("multipart/mixed", {
          baseBoundary: this.mail.baseBoundary,
          textEncoding: this.mail.textEncoding,
          boundaryPrefix: this.mail.boundaryPrefix,
          disableUrlAccess: this.mail.disableUrlAccess,
          disableFileAccess: this.mail.disableFileAccess,
          normalizeHeaderKey: this.mail.normalizeHeaderKey,
          newline: this.mail.newline
        });
      } else {
        node = parentNode.createChild("multipart/mixed", {
          disableUrlAccess: this.mail.disableUrlAccess,
          disableFileAccess: this.mail.disableFileAccess,
          normalizeHeaderKey: this.mail.normalizeHeaderKey,
          newline: this.mail.newline
        });
      }
      if (this._useAlternative) {
        this._createAlternative(node);
      } else if (this._useRelated) {
        this._createRelated(node);
      }
      [].concat(!this._useAlternative && this._alternatives || []).concat(this._attachments.attached || []).forEach((element) => {
        if (!this._useRelated || element !== this._htmlNode) {
          this._createContentNode(node, element);
        }
      });
      return node;
    }
    _createAlternative(parentNode) {
      let node;
      if (!parentNode) {
        node = new MimeNode("multipart/alternative", {
          baseBoundary: this.mail.baseBoundary,
          textEncoding: this.mail.textEncoding,
          boundaryPrefix: this.mail.boundaryPrefix,
          disableUrlAccess: this.mail.disableUrlAccess,
          disableFileAccess: this.mail.disableFileAccess,
          normalizeHeaderKey: this.mail.normalizeHeaderKey,
          newline: this.mail.newline
        });
      } else {
        node = parentNode.createChild("multipart/alternative", {
          disableUrlAccess: this.mail.disableUrlAccess,
          disableFileAccess: this.mail.disableFileAccess,
          normalizeHeaderKey: this.mail.normalizeHeaderKey,
          newline: this.mail.newline
        });
      }
      this._alternatives.forEach((alternative) => {
        if (this._useRelated && this._htmlNode === alternative) {
          this._createRelated(node);
        } else {
          this._createContentNode(node, alternative);
        }
      });
      return node;
    }
    _createRelated(parentNode) {
      let node;
      if (!parentNode) {
        node = new MimeNode('multipart/related; type="text/html"', {
          baseBoundary: this.mail.baseBoundary,
          textEncoding: this.mail.textEncoding,
          boundaryPrefix: this.mail.boundaryPrefix,
          disableUrlAccess: this.mail.disableUrlAccess,
          disableFileAccess: this.mail.disableFileAccess,
          normalizeHeaderKey: this.mail.normalizeHeaderKey,
          newline: this.mail.newline
        });
      } else {
        node = parentNode.createChild('multipart/related; type="text/html"', {
          disableUrlAccess: this.mail.disableUrlAccess,
          disableFileAccess: this.mail.disableFileAccess,
          normalizeHeaderKey: this.mail.normalizeHeaderKey,
          newline: this.mail.newline
        });
      }
      this._createContentNode(node, this._htmlNode);
      this._attachments.related.forEach((alternative) => this._createContentNode(node, alternative));
      return node;
    }
    _createContentNode(parentNode, element) {
      element = element || {};
      element.content = element.content || "";
      let node;
      let encoding = (element.encoding || "utf8").toString().toLowerCase().replace(/[-_\s]/g, "");
      if (!parentNode) {
        node = new MimeNode(element.contentType, {
          filename: element.filename,
          baseBoundary: this.mail.baseBoundary,
          textEncoding: this.mail.textEncoding,
          boundaryPrefix: this.mail.boundaryPrefix,
          disableUrlAccess: this.mail.disableUrlAccess,
          disableFileAccess: this.mail.disableFileAccess,
          normalizeHeaderKey: this.mail.normalizeHeaderKey,
          newline: this.mail.newline
        });
      } else {
        node = parentNode.createChild(element.contentType, {
          filename: element.filename,
          textEncoding: this.mail.textEncoding,
          disableUrlAccess: this.mail.disableUrlAccess,
          disableFileAccess: this.mail.disableFileAccess,
          normalizeHeaderKey: this.mail.normalizeHeaderKey,
          newline: this.mail.newline
        });
      }
      if (element.headers) {
        node.addHeader(element.headers);
      }
      if (element.cid) {
        node.setHeader("Content-Id", "<" + element.cid.replace(/[<>]/g, "") + ">");
      }
      if (element.contentTransferEncoding) {
        node.setHeader("Content-Transfer-Encoding", element.contentTransferEncoding);
      } else if (this.mail.encoding && /^text\//i.test(element.contentType)) {
        node.setHeader("Content-Transfer-Encoding", this.mail.encoding);
      }
      if (!/^text\//i.test(element.contentType) || element.contentDisposition) {
        node.setHeader("Content-Disposition", element.contentDisposition || (element.cid && /^image\//i.test(element.contentType) ? "inline" : "attachment"));
      }
      if (typeof element.content === "string" && !["utf8", "usascii", "ascii"].includes(encoding)) {
        element.content = Buffer.from(element.content, encoding);
      }
      if (element.raw) {
        node.setRaw(element.raw);
      } else {
        node.setContent(element.content);
      }
      return node;
    }
    _processDataUrl(element) {
      let parsedDataUri;
      if ((element.path || element.href).match(/^data:/)) {
        parsedDataUri = parseDataURI(element.path || element.href);
      }
      if (!parsedDataUri) {
        return element;
      }
      element.content = parsedDataUri.data;
      element.contentType = element.contentType || parsedDataUri.contentType;
      if ("path" in element) {
        element.path = false;
      }
      if ("href" in element) {
        element.href = false;
      }
      return element;
    }
  }
  module.exports = MailComposer;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/dkim/message-parser.js
var require_message_parser = __commonJS((exports, module) => {
  var Transform = __require("stream").Transform;

  class MessageParser extends Transform {
    constructor(options) {
      super(options);
      this.lastBytes = Buffer.alloc(4);
      this.headersParsed = false;
      this.headerBytes = 0;
      this.headerChunks = [];
      this.rawHeaders = false;
      this.bodySize = 0;
    }
    updateLastBytes(data) {
      let lblen = this.lastBytes.length;
      let nblen = Math.min(data.length, lblen);
      for (let i = 0, len = lblen - nblen;i < len; i++) {
        this.lastBytes[i] = this.lastBytes[i + nblen];
      }
      for (let i = 1;i <= nblen; i++) {
        this.lastBytes[lblen - i] = data[data.length - i];
      }
    }
    checkHeaders(data) {
      if (this.headersParsed) {
        return true;
      }
      let lblen = this.lastBytes.length;
      let headerPos = 0;
      this.curLinePos = 0;
      for (let i = 0, len = this.lastBytes.length + data.length;i < len; i++) {
        let chr;
        if (i < lblen) {
          chr = this.lastBytes[i];
        } else {
          chr = data[i - lblen];
        }
        if (chr === 10 && i) {
          let pr1 = i - 1 < lblen ? this.lastBytes[i - 1] : data[i - 1 - lblen];
          let pr2 = i > 1 ? i - 2 < lblen ? this.lastBytes[i - 2] : data[i - 2 - lblen] : false;
          if (pr1 === 10) {
            this.headersParsed = true;
            headerPos = i - lblen + 1;
            this.headerBytes += headerPos;
            break;
          } else if (pr1 === 13 && pr2 === 10) {
            this.headersParsed = true;
            headerPos = i - lblen + 1;
            this.headerBytes += headerPos;
            break;
          }
        }
      }
      if (this.headersParsed) {
        this.headerChunks.push(data.slice(0, headerPos));
        this.rawHeaders = Buffer.concat(this.headerChunks, this.headerBytes);
        this.headerChunks = null;
        this.emit("headers", this.parseHeaders());
        if (data.length - 1 > headerPos) {
          let chunk = data.slice(headerPos);
          this.bodySize += chunk.length;
          setImmediate(() => this.push(chunk));
        }
        return false;
      } else {
        this.headerBytes += data.length;
        this.headerChunks.push(data);
      }
      this.updateLastBytes(data);
      return false;
    }
    _transform(chunk, encoding, callback) {
      if (!chunk || !chunk.length) {
        return callback();
      }
      if (typeof chunk === "string") {
        chunk = Buffer.from(chunk, encoding);
      }
      let headersFound;
      try {
        headersFound = this.checkHeaders(chunk);
      } catch (E) {
        return callback(E);
      }
      if (headersFound) {
        this.bodySize += chunk.length;
        this.push(chunk);
      }
      setImmediate(callback);
    }
    _flush(callback) {
      if (this.headerChunks) {
        let chunk = Buffer.concat(this.headerChunks, this.headerBytes);
        this.bodySize += chunk.length;
        this.push(chunk);
        this.headerChunks = null;
      }
      callback();
    }
    parseHeaders() {
      let lines = (this.rawHeaders || "").toString().split(/\r?\n/);
      for (let i = lines.length - 1;i > 0; i--) {
        if (/^\s/.test(lines[i])) {
          lines[i - 1] += "\n" + lines[i];
          lines.splice(i, 1);
        }
      }
      return lines.filter((line) => line.trim()).map((line) => ({
        key: line.substr(0, line.indexOf(":")).trim().toLowerCase(),
        line
      }));
    }
  }
  module.exports = MessageParser;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/dkim/relaxed-body.js
var require_relaxed_body = __commonJS((exports, module) => {
  var Transform = __require("stream").Transform;
  var crypto = __require("crypto");

  class RelaxedBody extends Transform {
    constructor(options) {
      super();
      options = options || {};
      this.chunkBuffer = [];
      this.chunkBufferLen = 0;
      this.bodyHash = crypto.createHash(options.hashAlgo || "sha1");
      this.remainder = "";
      this.byteLength = 0;
      this.debug = options.debug;
      this._debugBody = options.debug ? [] : false;
    }
    updateHash(chunk) {
      let bodyStr;
      let nextRemainder = "";
      let state = "file";
      for (let i = chunk.length - 1;i >= 0; i--) {
        let c = chunk[i];
        if (state === "file" && (c === 10 || c === 13)) {
        } else if (state === "file" && (c === 9 || c === 32)) {
          state = "line";
        } else if (state === "line" && (c === 9 || c === 32)) {
        } else if (state === "file" || state === "line") {
          state = "body";
          if (i === chunk.length - 1) {
            break;
          }
        }
        if (i === 0) {
          if (state === "file" && (!this.remainder || /[\r\n]$/.test(this.remainder)) || state === "line" && (!this.remainder || /[ \t]$/.test(this.remainder))) {
            this.remainder += chunk.toString("binary");
            return;
          } else if (state === "line" || state === "file") {
            nextRemainder = chunk.toString("binary");
            chunk = false;
            break;
          }
        }
        if (state !== "body") {
          continue;
        }
        nextRemainder = chunk.slice(i + 1).toString("binary");
        chunk = chunk.slice(0, i + 1);
        break;
      }
      let needsFixing = !!this.remainder;
      if (chunk && !needsFixing) {
        for (let i = 0, len = chunk.length;i < len; i++) {
          if (i && chunk[i] === 10 && chunk[i - 1] !== 13) {
            needsFixing = true;
            break;
          } else if (i && chunk[i] === 13 && chunk[i - 1] === 32) {
            needsFixing = true;
            break;
          } else if (i && chunk[i] === 32 && chunk[i - 1] === 32) {
            needsFixing = true;
            break;
          } else if (chunk[i] === 9) {
            needsFixing = true;
            break;
          }
        }
      }
      if (needsFixing) {
        bodyStr = this.remainder + (chunk ? chunk.toString("binary") : "");
        this.remainder = nextRemainder;
        bodyStr = bodyStr.replace(/\r?\n/g, "\n").replace(/[ \t]*$/gm, "").replace(/[ \t]+/gm, " ").replace(/\n/g, "\r\n");
        chunk = Buffer.from(bodyStr, "binary");
      } else if (nextRemainder) {
        this.remainder = nextRemainder;
      }
      if (this.debug) {
        this._debugBody.push(chunk);
      }
      this.bodyHash.update(chunk);
    }
    _transform(chunk, encoding, callback) {
      if (!chunk || !chunk.length) {
        return callback();
      }
      if (typeof chunk === "string") {
        chunk = Buffer.from(chunk, encoding);
      }
      this.updateHash(chunk);
      this.byteLength += chunk.length;
      this.push(chunk);
      callback();
    }
    _flush(callback) {
      if (/[\r\n]$/.test(this.remainder) && this.byteLength > 2) {
        this.bodyHash.update(Buffer.from("\r\n"));
      }
      if (!this.byteLength) {
        this.push(Buffer.from("\r\n"));
      }
      this.emit("hash", this.bodyHash.digest("base64"), this.debug ? Buffer.concat(this._debugBody) : false);
      callback();
    }
  }
  module.exports = RelaxedBody;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/dkim/sign.js
var require_sign = __commonJS((exports, module) => {
  function generateDKIMHeader(domainName, keySelector, fieldNames, hashAlgo, bodyHash) {
    let dkim = [
      "v=1",
      "a=rsa-" + hashAlgo,
      "c=relaxed/relaxed",
      "d=" + punycode.toASCII(domainName),
      "q=dns/txt",
      "s=" + keySelector,
      "bh=" + bodyHash,
      "h=" + fieldNames
    ].join("; ");
    return mimeFuncs.foldLines("DKIM-Signature: " + dkim, 76) + ";\r\n b=";
  }
  function relaxedHeaders(headers, fieldNames, skipFields) {
    let includedFields = new Set;
    let skip = new Set;
    let headerFields = new Map;
    (skipFields || "").toLowerCase().split(":").forEach((field) => {
      skip.add(field.trim());
    });
    (fieldNames || "").toLowerCase().split(":").filter((field) => !skip.has(field.trim())).forEach((field) => {
      includedFields.add(field.trim());
    });
    for (let i = headers.length - 1;i >= 0; i--) {
      let line = headers[i];
      if (includedFields.has(line.key) && !headerFields.has(line.key)) {
        headerFields.set(line.key, relaxedHeaderLine(line.line));
      }
    }
    let headersList = [];
    let fields = [];
    includedFields.forEach((field) => {
      if (headerFields.has(field)) {
        fields.push(field);
        headersList.push(field + ":" + headerFields.get(field));
      }
    });
    return {
      headers: headersList.join("\r\n") + "\r\n",
      fieldNames: fields.join(":")
    };
  }
  function relaxedHeaderLine(line) {
    return line.substr(line.indexOf(":") + 1).replace(/\r?\n/g, "").replace(/\s+/g, " ").trim();
  }
  var punycode = require_punycode();
  var mimeFuncs = require_mime_funcs();
  var crypto = __require("crypto");
  module.exports = (headers, hashAlgo, bodyHash, options) => {
    options = options || {};
    let defaultFieldNames = "From:Sender:Reply-To:Subject:Date:Message-ID:To:" + "Cc:MIME-Version:Content-Type:Content-Transfer-Encoding:Content-ID:" + "Content-Description:Resent-Date:Resent-From:Resent-Sender:" + "Resent-To:Resent-Cc:Resent-Message-ID:In-Reply-To:References:" + "List-Id:List-Help:List-Unsubscribe:List-Subscribe:List-Post:" + "List-Owner:List-Archive";
    let fieldNames = options.headerFieldNames || defaultFieldNames;
    let canonicalizedHeaderData = relaxedHeaders(headers, fieldNames, options.skipFields);
    let dkimHeader = generateDKIMHeader(options.domainName, options.keySelector, canonicalizedHeaderData.fieldNames, hashAlgo, bodyHash);
    let signer, signature;
    canonicalizedHeaderData.headers += "dkim-signature:" + relaxedHeaderLine(dkimHeader);
    signer = crypto.createSign(("rsa-" + hashAlgo).toUpperCase());
    signer.update(canonicalizedHeaderData.headers);
    try {
      signature = signer.sign(options.privateKey, "base64");
    } catch (E) {
      return false;
    }
    return dkimHeader + signature.replace(/(^.{73}|.{75}(?!\r?\n|\r))/g, "$&\r\n ").trim();
  };
  module.exports.relaxedHeaders = relaxedHeaders;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/dkim/index.js
var require_dkim = __commonJS((exports, module) => {
  var MessageParser = require_message_parser();
  var RelaxedBody = require_relaxed_body();
  var sign = require_sign();
  var PassThrough = __require("stream").PassThrough;
  var fs = __require("fs");
  var path = __require("path");
  var crypto = __require("crypto");
  var DKIM_ALGO = "sha256";
  var MAX_MESSAGE_SIZE = 128 * 1024;

  class DKIMSigner {
    constructor(options, keys, input, output) {
      this.options = options || {};
      this.keys = keys;
      this.cacheTreshold = Number(this.options.cacheTreshold) || MAX_MESSAGE_SIZE;
      this.hashAlgo = this.options.hashAlgo || DKIM_ALGO;
      this.cacheDir = this.options.cacheDir || false;
      this.chunks = [];
      this.chunklen = 0;
      this.readPos = 0;
      this.cachePath = this.cacheDir ? path.join(this.cacheDir, "message." + Date.now() + "-" + crypto.randomBytes(14).toString("hex")) : false;
      this.cache = false;
      this.headers = false;
      this.bodyHash = false;
      this.parser = false;
      this.relaxedBody = false;
      this.input = input;
      this.output = output;
      this.output.usingCache = false;
      this.hasErrored = false;
      this.input.on("error", (err) => {
        this.hasErrored = true;
        this.cleanup();
        output.emit("error", err);
      });
    }
    cleanup() {
      if (!this.cache || !this.cachePath) {
        return;
      }
      fs.unlink(this.cachePath, () => false);
    }
    createReadCache() {
      this.cache = fs.createReadStream(this.cachePath);
      this.cache.once("error", (err) => {
        this.cleanup();
        this.output.emit("error", err);
      });
      this.cache.once("close", () => {
        this.cleanup();
      });
      this.cache.pipe(this.output);
    }
    sendNextChunk() {
      if (this.hasErrored) {
        return;
      }
      if (this.readPos >= this.chunks.length) {
        if (!this.cache) {
          return this.output.end();
        }
        return this.createReadCache();
      }
      let chunk = this.chunks[this.readPos++];
      if (this.output.write(chunk) === false) {
        return this.output.once("drain", () => {
          this.sendNextChunk();
        });
      }
      setImmediate(() => this.sendNextChunk());
    }
    sendSignedOutput() {
      let keyPos = 0;
      let signNextKey = () => {
        if (keyPos >= this.keys.length) {
          this.output.write(this.parser.rawHeaders);
          return setImmediate(() => this.sendNextChunk());
        }
        let key = this.keys[keyPos++];
        let dkimField = sign(this.headers, this.hashAlgo, this.bodyHash, {
          domainName: key.domainName,
          keySelector: key.keySelector,
          privateKey: key.privateKey,
          headerFieldNames: this.options.headerFieldNames,
          skipFields: this.options.skipFields
        });
        if (dkimField) {
          this.output.write(Buffer.from(dkimField + "\r\n"));
        }
        return setImmediate(signNextKey);
      };
      if (this.bodyHash && this.headers) {
        return signNextKey();
      }
      this.output.write(this.parser.rawHeaders);
      this.sendNextChunk();
    }
    createWriteCache() {
      this.output.usingCache = true;
      this.cache = fs.createWriteStream(this.cachePath);
      this.cache.once("error", (err) => {
        this.cleanup();
        this.relaxedBody.unpipe(this.cache);
        this.relaxedBody.on("readable", () => {
          while (this.relaxedBody.read() !== null) {
          }
        });
        this.hasErrored = true;
        this.output.emit("error", err);
      });
      this.cache.once("close", () => {
        this.sendSignedOutput();
      });
      this.relaxedBody.removeAllListeners("readable");
      this.relaxedBody.pipe(this.cache);
    }
    signStream() {
      this.parser = new MessageParser;
      this.relaxedBody = new RelaxedBody({
        hashAlgo: this.hashAlgo
      });
      this.parser.on("headers", (value) => {
        this.headers = value;
      });
      this.relaxedBody.on("hash", (value) => {
        this.bodyHash = value;
      });
      this.relaxedBody.on("readable", () => {
        let chunk;
        if (this.cache) {
          return;
        }
        while ((chunk = this.relaxedBody.read()) !== null) {
          this.chunks.push(chunk);
          this.chunklen += chunk.length;
          if (this.chunklen >= this.cacheTreshold && this.cachePath) {
            return this.createWriteCache();
          }
        }
      });
      this.relaxedBody.on("end", () => {
        if (this.cache) {
          return;
        }
        this.sendSignedOutput();
      });
      this.parser.pipe(this.relaxedBody);
      setImmediate(() => this.input.pipe(this.parser));
    }
  }

  class DKIM {
    constructor(options) {
      this.options = options || {};
      this.keys = [].concat(this.options.keys || {
        domainName: options.domainName,
        keySelector: options.keySelector,
        privateKey: options.privateKey
      });
    }
    sign(input, extraOptions) {
      let output = new PassThrough;
      let inputStream = input;
      let writeValue = false;
      if (Buffer.isBuffer(input)) {
        writeValue = input;
        inputStream = new PassThrough;
      } else if (typeof input === "string") {
        writeValue = Buffer.from(input);
        inputStream = new PassThrough;
      }
      let options = this.options;
      if (extraOptions && Object.keys(extraOptions).length) {
        options = {};
        Object.keys(this.options || {}).forEach((key) => {
          options[key] = this.options[key];
        });
        Object.keys(extraOptions || {}).forEach((key) => {
          if (!(key in options)) {
            options[key] = extraOptions[key];
          }
        });
      }
      let signer = new DKIMSigner(options, this.keys, inputStream, output);
      setImmediate(() => {
        signer.signStream();
        if (writeValue) {
          setImmediate(() => {
            inputStream.end(writeValue);
          });
        }
      });
      return output;
    }
  }
  module.exports = DKIM;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/smtp-connection/http-proxy-client.js
var require_http_proxy_client = __commonJS((exports, module) => {
  function httpProxyClient(proxyUrl, destinationPort, destinationHost, callback) {
    let proxy = urllib.parse(proxyUrl);
    let options;
    let connect;
    let socket;
    options = {
      host: proxy.hostname,
      port: Number(proxy.port) ? Number(proxy.port) : proxy.protocol === "https:" ? 443 : 80
    };
    if (proxy.protocol === "https:") {
      options.rejectUnauthorized = false;
      connect = tls.connect.bind(tls);
    } else {
      connect = net.connect.bind(net);
    }
    let finished = false;
    let tempSocketErr = (err) => {
      if (finished) {
        return;
      }
      finished = true;
      try {
        socket.destroy();
      } catch (E) {
      }
      callback(err);
    };
    let timeoutErr = () => {
      let err = new Error("Proxy socket timed out");
      err.code = "ETIMEDOUT";
      tempSocketErr(err);
    };
    socket = connect(options, () => {
      if (finished) {
        return;
      }
      let reqHeaders = {
        Host: destinationHost + ":" + destinationPort,
        Connection: "close"
      };
      if (proxy.auth) {
        reqHeaders["Proxy-Authorization"] = "Basic " + Buffer.from(proxy.auth).toString("base64");
      }
      socket.write("CONNECT " + destinationHost + ":" + destinationPort + " HTTP/1.1\r\n" + Object.keys(reqHeaders).map((key) => key + ": " + reqHeaders[key]).join("\r\n") + "\r\n\r\n");
      let headers = "";
      let onSocketData = (chunk) => {
        let match;
        let remainder;
        if (finished) {
          return;
        }
        headers += chunk.toString("binary");
        if (match = headers.match(/\r\n\r\n/)) {
          socket.removeListener("data", onSocketData);
          remainder = headers.substr(match.index + match[0].length);
          headers = headers.substr(0, match.index);
          if (remainder) {
            socket.unshift(Buffer.from(remainder, "binary"));
          }
          finished = true;
          match = headers.match(/^HTTP\/\d+\.\d+ (\d+)/i);
          if (!match || (match[1] || "").charAt(0) !== "2") {
            try {
              socket.destroy();
            } catch (E) {
            }
            return callback(new Error("Invalid response from proxy" + (match && ": " + match[1] || "")));
          }
          socket.removeListener("error", tempSocketErr);
          socket.removeListener("timeout", timeoutErr);
          socket.setTimeout(0);
          return callback(null, socket);
        }
      };
      socket.on("data", onSocketData);
    });
    socket.setTimeout(httpProxyClient.timeout || 30 * 1000);
    socket.on("timeout", timeoutErr);
    socket.once("error", tempSocketErr);
  }
  var net = __require("net");
  var tls = __require("tls");
  var urllib = __require("url");
  module.exports = httpProxyClient;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/mailer/mail-message.js
var require_mail_message = __commonJS((exports, module) => {
  var shared = require_shared();
  var MimeNode = require_mime_node();
  var mimeFuncs = require_mime_funcs();

  class MailMessage {
    constructor(mailer, data) {
      this.mailer = mailer;
      this.data = {};
      this.message = null;
      data = data || {};
      let options = mailer.options || {};
      let defaults = mailer._defaults || {};
      Object.keys(data).forEach((key) => {
        this.data[key] = data[key];
      });
      this.data.headers = this.data.headers || {};
      Object.keys(defaults).forEach((key) => {
        if (!(key in this.data)) {
          this.data[key] = defaults[key];
        } else if (key === "headers") {
          Object.keys(defaults.headers).forEach((key2) => {
            if (!(key2 in this.data.headers)) {
              this.data.headers[key2] = defaults.headers[key2];
            }
          });
        }
      });
      ["disableFileAccess", "disableUrlAccess", "normalizeHeaderKey"].forEach((key) => {
        if (key in options) {
          this.data[key] = options[key];
        }
      });
    }
    resolveContent(...args) {
      return shared.resolveContent(...args);
    }
    resolveAll(callback) {
      let keys = [
        [this.data, "html"],
        [this.data, "text"],
        [this.data, "watchHtml"],
        [this.data, "amp"],
        [this.data, "icalEvent"]
      ];
      if (this.data.alternatives && this.data.alternatives.length) {
        this.data.alternatives.forEach((alternative, i) => {
          keys.push([this.data.alternatives, i]);
        });
      }
      if (this.data.attachments && this.data.attachments.length) {
        this.data.attachments.forEach((attachment, i) => {
          if (!attachment.filename) {
            attachment.filename = (attachment.path || attachment.href || "").split("/").pop().split("?").shift() || "attachment-" + (i + 1);
            if (attachment.filename.indexOf(".") < 0) {
              attachment.filename += "." + mimeFuncs.detectExtension(attachment.contentType);
            }
          }
          if (!attachment.contentType) {
            attachment.contentType = mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || "bin");
          }
          keys.push([this.data.attachments, i]);
        });
      }
      let mimeNode = new MimeNode;
      let addressKeys = ["from", "to", "cc", "bcc", "sender", "replyTo"];
      addressKeys.forEach((address) => {
        let value;
        if (this.message) {
          value = [].concat(mimeNode._parseAddresses(this.message.getHeader(address === "replyTo" ? "reply-to" : address)) || []);
        } else if (this.data[address]) {
          value = [].concat(mimeNode._parseAddresses(this.data[address]) || []);
        }
        if (value && value.length) {
          this.data[address] = value;
        } else if (address in this.data) {
          this.data[address] = null;
        }
      });
      let singleKeys = ["from", "sender"];
      singleKeys.forEach((address) => {
        if (this.data[address]) {
          this.data[address] = this.data[address].shift();
        }
      });
      let pos = 0;
      let resolveNext = () => {
        if (pos >= keys.length) {
          return callback(null, this.data);
        }
        let args = keys[pos++];
        if (!args[0] || !args[0][args[1]]) {
          return resolveNext();
        }
        shared.resolveContent(...args, (err, value) => {
          if (err) {
            return callback(err);
          }
          let node = {
            content: value
          };
          if (args[0][args[1]] && typeof args[0][args[1]] === "object" && !Buffer.isBuffer(args[0][args[1]])) {
            Object.keys(args[0][args[1]]).forEach((key) => {
              if (!(key in node) && !["content", "path", "href", "raw"].includes(key)) {
                node[key] = args[0][args[1]][key];
              }
            });
          }
          args[0][args[1]] = node;
          resolveNext();
        });
      };
      setImmediate(() => resolveNext());
    }
    normalize(callback) {
      let envelope = this.data.envelope || this.message.getEnvelope();
      let messageId = this.message.messageId();
      this.resolveAll((err, data) => {
        if (err) {
          return callback(err);
        }
        data.envelope = envelope;
        data.messageId = messageId;
        ["html", "text", "watchHtml", "amp"].forEach((key) => {
          if (data[key] && data[key].content) {
            if (typeof data[key].content === "string") {
              data[key] = data[key].content;
            } else if (Buffer.isBuffer(data[key].content)) {
              data[key] = data[key].content.toString();
            }
          }
        });
        if (data.icalEvent && Buffer.isBuffer(data.icalEvent.content)) {
          data.icalEvent.content = data.icalEvent.content.toString("base64");
          data.icalEvent.encoding = "base64";
        }
        if (data.alternatives && data.alternatives.length) {
          data.alternatives.forEach((alternative) => {
            if (alternative && alternative.content && Buffer.isBuffer(alternative.content)) {
              alternative.content = alternative.content.toString("base64");
              alternative.encoding = "base64";
            }
          });
        }
        if (data.attachments && data.attachments.length) {
          data.attachments.forEach((attachment) => {
            if (attachment && attachment.content && Buffer.isBuffer(attachment.content)) {
              attachment.content = attachment.content.toString("base64");
              attachment.encoding = "base64";
            }
          });
        }
        data.normalizedHeaders = {};
        Object.keys(data.headers || {}).forEach((key) => {
          let value = [].concat(data.headers[key] || []).shift();
          value = value && value.value || value;
          if (value) {
            if (["references", "in-reply-to", "message-id", "content-id"].includes(key)) {
              value = this.message._encodeHeaderValue(key, value);
            }
            data.normalizedHeaders[key] = value;
          }
        });
        if (data.list && typeof data.list === "object") {
          let listHeaders = this._getListHeaders(data.list);
          listHeaders.forEach((entry) => {
            data.normalizedHeaders[entry.key] = entry.value.map((val) => val && val.value || val).join(", ");
          });
        }
        if (data.references) {
          data.normalizedHeaders.references = this.message._encodeHeaderValue("references", data.references);
        }
        if (data.inReplyTo) {
          data.normalizedHeaders["in-reply-to"] = this.message._encodeHeaderValue("in-reply-to", data.inReplyTo);
        }
        return callback(null, data);
      });
    }
    setMailerHeader() {
      if (!this.message || !this.data.xMailer) {
        return;
      }
      this.message.setHeader("X-Mailer", this.data.xMailer);
    }
    setPriorityHeaders() {
      if (!this.message || !this.data.priority) {
        return;
      }
      switch ((this.data.priority || "").toString().toLowerCase()) {
        case "high":
          this.message.setHeader("X-Priority", "1 (Highest)");
          this.message.setHeader("X-MSMail-Priority", "High");
          this.message.setHeader("Importance", "High");
          break;
        case "low":
          this.message.setHeader("X-Priority", "5 (Lowest)");
          this.message.setHeader("X-MSMail-Priority", "Low");
          this.message.setHeader("Importance", "Low");
          break;
        default:
      }
    }
    setListHeaders() {
      if (!this.message || !this.data.list || typeof this.data.list !== "object") {
        return;
      }
      if (this.data.list && typeof this.data.list === "object") {
        this._getListHeaders(this.data.list).forEach((listHeader) => {
          listHeader.value.forEach((value) => {
            this.message.addHeader(listHeader.key, value);
          });
        });
      }
    }
    _getListHeaders(listData) {
      return Object.keys(listData).map((key) => ({
        key: "list-" + key.toLowerCase().trim(),
        value: [].concat(listData[key] || []).map((value) => ({
          prepared: true,
          foldLines: true,
          value: [].concat(value || []).map((value2) => {
            if (typeof value2 === "string") {
              value2 = {
                url: value2
              };
            }
            if (value2 && value2.url) {
              if (key.toLowerCase().trim() === "id") {
                let comment2 = value2.comment || "";
                if (mimeFuncs.isPlainText(comment2)) {
                  comment2 = '"' + comment2 + '"';
                } else {
                  comment2 = mimeFuncs.encodeWord(comment2);
                }
                return (value2.comment ? comment2 + " " : "") + this._formatListUrl(value2.url).replace(/^<[^:]+\/{,2}/, "");
              }
              let comment = value2.comment || "";
              if (!mimeFuncs.isPlainText(comment)) {
                comment = mimeFuncs.encodeWord(comment);
              }
              return this._formatListUrl(value2.url) + (value2.comment ? " (" + comment + ")" : "");
            }
            return "";
          }).filter((value2) => value2).join(", ")
        }))
      }));
    }
    _formatListUrl(url) {
      url = url.replace(/[\s<]+|[\s>]+/g, "");
      if (/^(https?|mailto|ftp):/.test(url)) {
        return "<" + url + ">";
      }
      if (/^[^@]+@[^@]+$/.test(url)) {
        return "<mailto:" + url + ">";
      }
      return "<http://" + url + ">";
    }
  }
  module.exports = MailMessage;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/mailer/index.js
var require_mailer = __commonJS((exports, module) => {
  var EventEmitter = __require("events");
  var shared = require_shared();
  var mimeTypes = require_mime_types();
  var MailComposer = require_mail_composer();
  var DKIM = require_dkim();
  var httpProxyClient = require_http_proxy_client();
  var util = __require("util");
  var urllib = __require("url");
  var packageData = require_package();
  var MailMessage = require_mail_message();
  var net = __require("net");
  var dns = __require("dns");
  var crypto = __require("crypto");

  class Mail extends EventEmitter {
    constructor(transporter, options, defaults) {
      super();
      this.options = options || {};
      this._defaults = defaults || {};
      this._defaultPlugins = {
        compile: [(...args) => this._convertDataImages(...args)],
        stream: []
      };
      this._userPlugins = {
        compile: [],
        stream: []
      };
      this.meta = new Map;
      this.dkim = this.options.dkim ? new DKIM(this.options.dkim) : false;
      this.transporter = transporter;
      this.transporter.mailer = this;
      this.logger = shared.getLogger(this.options, {
        component: this.options.component || "mail"
      });
      this.logger.debug({
        tnx: "create"
      }, "Creating transport: %s", this.getVersionString());
      if (typeof this.transporter.on === "function") {
        this.transporter.on("log", (log) => {
          this.logger.debug({
            tnx: "transport"
          }, "%s: %s", log.type, log.message);
        });
        this.transporter.on("error", (err) => {
          this.logger.error({
            err,
            tnx: "transport"
          }, "Transport Error: %s", err.message);
          this.emit("error", err);
        });
        this.transporter.on("idle", (...args) => {
          this.emit("idle", ...args);
        });
      }
      ["close", "isIdle", "verify"].forEach((method) => {
        this[method] = (...args) => {
          if (typeof this.transporter[method] === "function") {
            if (method === "verify" && typeof this.getSocket === "function") {
              this.transporter.getSocket = this.getSocket;
              this.getSocket = false;
            }
            return this.transporter[method](...args);
          } else {
            this.logger.warn({
              tnx: "transport",
              methodName: method
            }, "Non existing method %s called for transport", method);
            return false;
          }
        };
      });
      if (this.options.proxy && typeof this.options.proxy === "string") {
        this.setupProxy(this.options.proxy);
      }
    }
    use(step, plugin) {
      step = (step || "").toString();
      if (!this._userPlugins.hasOwnProperty(step)) {
        this._userPlugins[step] = [plugin];
      } else {
        this._userPlugins[step].push(plugin);
      }
      return this;
    }
    sendMail(data, callback = null) {
      let promise;
      if (!callback) {
        promise = new Promise((resolve, reject) => {
          callback = shared.callbackPromise(resolve, reject);
        });
      }
      if (typeof this.getSocket === "function") {
        this.transporter.getSocket = this.getSocket;
        this.getSocket = false;
      }
      let mail = new MailMessage(this, data);
      this.logger.debug({
        tnx: "transport",
        name: this.transporter.name,
        version: this.transporter.version,
        action: "send"
      }, "Sending mail using %s/%s", this.transporter.name, this.transporter.version);
      this._processPlugins("compile", mail, (err) => {
        if (err) {
          this.logger.error({
            err,
            tnx: "plugin",
            action: "compile"
          }, "PluginCompile Error: %s", err.message);
          return callback(err);
        }
        mail.message = new MailComposer(mail.data).compile();
        mail.setMailerHeader();
        mail.setPriorityHeaders();
        mail.setListHeaders();
        this._processPlugins("stream", mail, (err2) => {
          if (err2) {
            this.logger.error({
              err: err2,
              tnx: "plugin",
              action: "stream"
            }, "PluginStream Error: %s", err2.message);
            return callback(err2);
          }
          if (mail.data.dkim || this.dkim) {
            mail.message.processFunc((input) => {
              let dkim = mail.data.dkim ? new DKIM(mail.data.dkim) : this.dkim;
              this.logger.debug({
                tnx: "DKIM",
                messageId: mail.message.messageId(),
                dkimDomains: dkim.keys.map((key) => key.keySelector + "." + key.domainName).join(", ")
              }, "Signing outgoing message with %s keys", dkim.keys.length);
              return dkim.sign(input, mail.data._dkim);
            });
          }
          this.transporter.send(mail, (...args) => {
            if (args[0]) {
              this.logger.error({
                err: args[0],
                tnx: "transport",
                action: "send"
              }, "Send Error: %s", args[0].message);
            }
            callback(...args);
          });
        });
      });
      return promise;
    }
    getVersionString() {
      return util.format("%s (%s; +%s; %s/%s)", packageData.name, packageData.version, packageData.homepage, this.transporter.name, this.transporter.version);
    }
    _processPlugins(step, mail, callback) {
      step = (step || "").toString();
      if (!this._userPlugins.hasOwnProperty(step)) {
        return callback();
      }
      let userPlugins = this._userPlugins[step] || [];
      let defaultPlugins = this._defaultPlugins[step] || [];
      if (userPlugins.length) {
        this.logger.debug({
          tnx: "transaction",
          pluginCount: userPlugins.length,
          step
        }, "Using %s plugins for %s", userPlugins.length, step);
      }
      if (userPlugins.length + defaultPlugins.length === 0) {
        return callback();
      }
      let pos = 0;
      let block = "default";
      let processPlugins = () => {
        let curplugins = block === "default" ? defaultPlugins : userPlugins;
        if (pos >= curplugins.length) {
          if (block === "default" && userPlugins.length) {
            block = "user";
            pos = 0;
            curplugins = userPlugins;
          } else {
            return callback();
          }
        }
        let plugin = curplugins[pos++];
        plugin(mail, (err) => {
          if (err) {
            return callback(err);
          }
          processPlugins();
        });
      };
      processPlugins();
    }
    setupProxy(proxyUrl) {
      let proxy = urllib.parse(proxyUrl);
      this.getSocket = (options, callback) => {
        let protocol = proxy.protocol.replace(/:$/, "").toLowerCase();
        if (this.meta.has("proxy_handler_" + protocol)) {
          return this.meta.get("proxy_handler_" + protocol)(proxy, options, callback);
        }
        switch (protocol) {
          case "http":
          case "https":
            httpProxyClient(proxy.href, options.port, options.host, (err, socket) => {
              if (err) {
                return callback(err);
              }
              return callback(null, {
                connection: socket
              });
            });
            return;
          case "socks":
          case "socks5":
          case "socks4":
          case "socks4a": {
            if (!this.meta.has("proxy_socks_module")) {
              return callback(new Error("Socks module not loaded"));
            }
            let connect = (ipaddress) => {
              let proxyV2 = !!this.meta.get("proxy_socks_module").SocksClient;
              let socksClient = proxyV2 ? this.meta.get("proxy_socks_module").SocksClient : this.meta.get("proxy_socks_module");
              let proxyType = Number(proxy.protocol.replace(/\D/g, "")) || 5;
              let connectionOpts = {
                proxy: {
                  ipaddress,
                  port: Number(proxy.port),
                  type: proxyType
                },
                [proxyV2 ? "destination" : "target"]: {
                  host: options.host,
                  port: options.port
                },
                command: "connect"
              };
              if (proxy.auth) {
                let username = decodeURIComponent(proxy.auth.split(":").shift());
                let password = decodeURIComponent(proxy.auth.split(":").pop());
                if (proxyV2) {
                  connectionOpts.proxy.userId = username;
                  connectionOpts.proxy.password = password;
                } else if (proxyType === 4) {
                  connectionOpts.userid = username;
                } else {
                  connectionOpts.authentication = {
                    username,
                    password
                  };
                }
              }
              socksClient.createConnection(connectionOpts, (err, info) => {
                if (err) {
                  return callback(err);
                }
                return callback(null, {
                  connection: info.socket || info
                });
              });
            };
            if (net.isIP(proxy.hostname)) {
              return connect(proxy.hostname);
            }
            return dns.resolve(proxy.hostname, (err, address) => {
              if (err) {
                return callback(err);
              }
              connect(Array.isArray(address) ? address[0] : address);
            });
          }
        }
        callback(new Error("Unknown proxy configuration"));
      };
    }
    _convertDataImages(mail, callback) {
      if (!this.options.attachDataUrls && !mail.data.attachDataUrls || !mail.data.html) {
        return callback();
      }
      mail.resolveContent(mail.data, "html", (err, html) => {
        if (err) {
          return callback(err);
        }
        let cidCounter = 0;
        html = (html || "").toString().replace(/(<img\b[^<>]{0,1024} src\s{0,20}=[\s"']{0,20})(data:([^;]+);[^"'>\s]+)/gi, (match, prefix, dataUri, mimeType) => {
          let cid = crypto.randomBytes(10).toString("hex") + "@localhost";
          if (!mail.data.attachments) {
            mail.data.attachments = [];
          }
          if (!Array.isArray(mail.data.attachments)) {
            mail.data.attachments = [].concat(mail.data.attachments || []);
          }
          mail.data.attachments.push({
            path: dataUri,
            cid,
            filename: "image-" + ++cidCounter + "." + mimeTypes.detectExtension(mimeType)
          });
          return prefix + "cid:" + cid;
        });
        mail.data.html = html;
        callback();
      });
    }
    set(key, value) {
      return this.meta.set(key, value);
    }
    get(key) {
      return this.meta.get(key);
    }
  }
  module.exports = Mail;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/smtp-connection/data-stream.js
var require_data_stream = __commonJS((exports, module) => {
  var stream2 = __require("stream");
  var Transform = stream2.Transform;

  class DataStream extends Transform {
    constructor(options) {
      super(options);
      this.options = options || {};
      this._curLine = "";
      this.inByteCount = 0;
      this.outByteCount = 0;
      this.lastByte = false;
    }
    _transform(chunk, encoding, done) {
      let chunks = [];
      let chunklen = 0;
      let i, len, lastPos = 0;
      let buf;
      if (!chunk || !chunk.length) {
        return done();
      }
      if (typeof chunk === "string") {
        chunk = Buffer.from(chunk);
      }
      this.inByteCount += chunk.length;
      for (i = 0, len = chunk.length;i < len; i++) {
        if (chunk[i] === 46) {
          if (i && chunk[i - 1] === 10 || !i && (!this.lastByte || this.lastByte === 10)) {
            buf = chunk.slice(lastPos, i + 1);
            chunks.push(buf);
            chunks.push(Buffer.from("."));
            chunklen += buf.length + 1;
            lastPos = i + 1;
          }
        } else if (chunk[i] === 10) {
          if (i && chunk[i - 1] !== 13 || !i && this.lastByte !== 13) {
            if (i > lastPos) {
              buf = chunk.slice(lastPos, i);
              chunks.push(buf);
              chunklen += buf.length + 2;
            } else {
              chunklen += 2;
            }
            chunks.push(Buffer.from("\r\n"));
            lastPos = i + 1;
          }
        }
      }
      if (chunklen) {
        if (lastPos < chunk.length) {
          buf = chunk.slice(lastPos);
          chunks.push(buf);
          chunklen += buf.length;
        }
        this.outByteCount += chunklen;
        this.push(Buffer.concat(chunks, chunklen));
      } else {
        this.outByteCount += chunk.length;
        this.push(chunk);
      }
      this.lastByte = chunk[chunk.length - 1];
      done();
    }
    _flush(done) {
      let buf;
      if (this.lastByte === 10) {
        buf = Buffer.from(".\r\n");
      } else if (this.lastByte === 13) {
        buf = Buffer.from("\n.\r\n");
      } else {
        buf = Buffer.from("\r\n.\r\n");
      }
      this.outByteCount += buf.length;
      this.push(buf);
      done();
    }
  }
  module.exports = DataStream;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/smtp-connection/index.js
var require_smtp_connection = __commonJS((exports, module) => {
  var packageInfo = require_package();
  var EventEmitter = __require("events").EventEmitter;
  var net = __require("net");
  var tls = __require("tls");
  var os = __require("os");
  var crypto = __require("crypto");
  var DataStream = require_data_stream();
  var PassThrough = __require("stream").PassThrough;
  var shared = require_shared();
  var CONNECTION_TIMEOUT = 2 * 60 * 1000;
  var SOCKET_TIMEOUT = 10 * 60 * 1000;
  var GREETING_TIMEOUT = 30 * 1000;
  var DNS_TIMEOUT = 30 * 1000;

  class SMTPConnection extends EventEmitter {
    constructor(options) {
      super(options);
      this.id = crypto.randomBytes(8).toString("base64").replace(/\W/g, "");
      this.stage = "init";
      this.options = options || {};
      this.secureConnection = !!this.options.secure;
      this.alreadySecured = !!this.options.secured;
      this.port = Number(this.options.port) || (this.secureConnection ? 465 : 587);
      this.host = this.options.host || "localhost";
      this.servername = this.options.servername ? this.options.servername : !net.isIP(this.host) ? this.host : false;
      this.allowInternalNetworkInterfaces = this.options.allowInternalNetworkInterfaces || false;
      if (typeof this.options.secure === "undefined" && this.port === 465) {
        this.secureConnection = true;
      }
      this.name = this.options.name || this._getHostname();
      this.logger = shared.getLogger(this.options, {
        component: this.options.component || "smtp-connection",
        sid: this.id
      });
      this.customAuth = new Map;
      Object.keys(this.options.customAuth || {}).forEach((key) => {
        let mapKey = (key || "").toString().trim().toUpperCase();
        if (!mapKey) {
          return;
        }
        this.customAuth.set(mapKey, this.options.customAuth[key]);
      });
      this.version = packageInfo.version;
      this.authenticated = false;
      this.destroyed = false;
      this.secure = !!this.secureConnection;
      this._remainder = "";
      this._responseQueue = [];
      this.lastServerResponse = false;
      this._socket = false;
      this._supportedAuth = [];
      this.allowsAuth = false;
      this._envelope = false;
      this._supportedExtensions = [];
      this._maxAllowedSize = 0;
      this._responseActions = [];
      this._recipientQueue = [];
      this._greetingTimeout = false;
      this._connectionTimeout = false;
      this._destroyed = false;
      this._closing = false;
      this._onSocketData = (chunk) => this._onData(chunk);
      this._onSocketError = (error) => this._onError(error, "ESOCKET", false, "CONN");
      this._onSocketClose = () => this._onClose();
      this._onSocketEnd = () => this._onEnd();
      this._onSocketTimeout = () => this._onTimeout();
    }
    connect(connectCallback) {
      if (typeof connectCallback === "function") {
        this.once("connect", () => {
          this.logger.debug({
            tnx: "smtp"
          }, "SMTP handshake finished");
          connectCallback();
        });
        const isDestroyedMessage = this._isDestroyedMessage("connect");
        if (isDestroyedMessage) {
          return connectCallback(this._formatError(isDestroyedMessage, "ECONNECTION", false, "CONN"));
        }
      }
      let opts = {
        port: this.port,
        host: this.host,
        allowInternalNetworkInterfaces: this.allowInternalNetworkInterfaces,
        timeout: this.options.dnsTimeout || DNS_TIMEOUT
      };
      if (this.options.localAddress) {
        opts.localAddress = this.options.localAddress;
      }
      let setupConnectionHandlers = () => {
        this._connectionTimeout = setTimeout(() => {
          this._onError("Connection timeout", "ETIMEDOUT", false, "CONN");
        }, this.options.connectionTimeout || CONNECTION_TIMEOUT);
        this._socket.on("error", this._onSocketError);
      };
      if (this.options.connection) {
        this._socket = this.options.connection;
        if (this.secureConnection && !this.alreadySecured) {
          setImmediate(() => this._upgradeConnection((err) => {
            if (err) {
              this._onError(new Error("Error initiating TLS - " + (err.message || err)), "ETLS", false, "CONN");
              return;
            }
            this._onConnect();
          }));
        } else {
          setImmediate(() => this._onConnect());
        }
        return;
      } else if (this.options.socket) {
        this._socket = this.options.socket;
        return shared.resolveHostname(opts, (err, resolved) => {
          if (err) {
            return setImmediate(() => this._onError(err, "EDNS", false, "CONN"));
          }
          this.logger.debug({
            tnx: "dns",
            source: opts.host,
            resolved: resolved.host,
            cached: !!resolved.cached
          }, "Resolved %s as %s [cache %s]", opts.host, resolved.host, resolved.cached ? "hit" : "miss");
          Object.keys(resolved).forEach((key) => {
            if (key.charAt(0) !== "_" && resolved[key]) {
              opts[key] = resolved[key];
            }
          });
          try {
            this._socket.connect(this.port, this.host, () => {
              this._socket.setKeepAlive(true);
              this._onConnect();
            });
            setupConnectionHandlers();
          } catch (E) {
            return setImmediate(() => this._onError(E, "ECONNECTION", false, "CONN"));
          }
        });
      } else if (this.secureConnection) {
        if (this.options.tls) {
          Object.keys(this.options.tls).forEach((key) => {
            opts[key] = this.options.tls[key];
          });
        }
        if (this.servername && !opts.servername) {
          opts.servername = this.servername;
        }
        return shared.resolveHostname(opts, (err, resolved) => {
          if (err) {
            return setImmediate(() => this._onError(err, "EDNS", false, "CONN"));
          }
          this.logger.debug({
            tnx: "dns",
            source: opts.host,
            resolved: resolved.host,
            cached: !!resolved.cached
          }, "Resolved %s as %s [cache %s]", opts.host, resolved.host, resolved.cached ? "hit" : "miss");
          Object.keys(resolved).forEach((key) => {
            if (key.charAt(0) !== "_" && resolved[key]) {
              opts[key] = resolved[key];
            }
          });
          try {
            this._socket = tls.connect(opts, () => {
              this._socket.setKeepAlive(true);
              this._onConnect();
            });
            setupConnectionHandlers();
          } catch (E) {
            return setImmediate(() => this._onError(E, "ECONNECTION", false, "CONN"));
          }
        });
      } else {
        return shared.resolveHostname(opts, (err, resolved) => {
          if (err) {
            return setImmediate(() => this._onError(err, "EDNS", false, "CONN"));
          }
          this.logger.debug({
            tnx: "dns",
            source: opts.host,
            resolved: resolved.host,
            cached: !!resolved.cached
          }, "Resolved %s as %s [cache %s]", opts.host, resolved.host, resolved.cached ? "hit" : "miss");
          Object.keys(resolved).forEach((key) => {
            if (key.charAt(0) !== "_" && resolved[key]) {
              opts[key] = resolved[key];
            }
          });
          try {
            this._socket = net.connect(opts, () => {
              this._socket.setKeepAlive(true);
              this._onConnect();
            });
            setupConnectionHandlers();
          } catch (E) {
            return setImmediate(() => this._onError(E, "ECONNECTION", false, "CONN"));
          }
        });
      }
    }
    quit() {
      this._sendCommand("QUIT");
      this._responseActions.push(this.close);
    }
    close() {
      clearTimeout(this._connectionTimeout);
      clearTimeout(this._greetingTimeout);
      this._responseActions = [];
      if (this._closing) {
        return;
      }
      this._closing = true;
      let closeMethod = "end";
      if (this.stage === "init") {
        closeMethod = "destroy";
      }
      this.logger.debug({
        tnx: "smtp"
      }, 'Closing connection to the server using "%s"', closeMethod);
      let socket = this._socket && this._socket.socket || this._socket;
      if (socket && !socket.destroyed) {
        try {
          this._socket[closeMethod]();
        } catch (E) {
        }
      }
      this._destroy();
    }
    login(authData, callback) {
      const isDestroyedMessage = this._isDestroyedMessage("login");
      if (isDestroyedMessage) {
        return callback(this._formatError(isDestroyedMessage, "ECONNECTION", false, "API"));
      }
      this._auth = authData || {};
      this._authMethod = (this._auth.method || "").toString().trim().toUpperCase() || false;
      if (!this._authMethod && this._auth.oauth2 && !this._auth.credentials) {
        this._authMethod = "XOAUTH2";
      } else if (!this._authMethod || this._authMethod === "XOAUTH2" && !this._auth.oauth2) {
        this._authMethod = (this._supportedAuth[0] || "PLAIN").toUpperCase().trim();
      }
      if (this._authMethod !== "XOAUTH2" && (!this._auth.credentials || !this._auth.credentials.user || !this._auth.credentials.pass)) {
        if (this._auth.user && this._auth.pass || this.customAuth.has(this._authMethod)) {
          this._auth.credentials = {
            user: this._auth.user,
            pass: this._auth.pass,
            options: this._auth.options
          };
        } else {
          return callback(this._formatError('Missing credentials for "' + this._authMethod + '"', "EAUTH", false, "API"));
        }
      }
      if (this.customAuth.has(this._authMethod)) {
        let handler = this.customAuth.get(this._authMethod);
        let lastResponse;
        let returned = false;
        let resolve = () => {
          if (returned) {
            return;
          }
          returned = true;
          this.logger.info({
            tnx: "smtp",
            username: this._auth.user,
            action: "authenticated",
            method: this._authMethod
          }, "User %s authenticated", JSON.stringify(this._auth.user));
          this.authenticated = true;
          callback(null, true);
        };
        let reject = (err) => {
          if (returned) {
            return;
          }
          returned = true;
          callback(this._formatError(err, "EAUTH", lastResponse, "AUTH " + this._authMethod));
        };
        let handlerResponse = handler({
          auth: this._auth,
          method: this._authMethod,
          extensions: [].concat(this._supportedExtensions),
          authMethods: [].concat(this._supportedAuth),
          maxAllowedSize: this._maxAllowedSize || false,
          sendCommand: (cmd, done) => {
            let promise;
            if (!done) {
              promise = new Promise((resolve2, reject2) => {
                done = shared.callbackPromise(resolve2, reject2);
              });
            }
            this._responseActions.push((str) => {
              lastResponse = str;
              let codes = str.match(/^(\d+)(?:\s(\d+\.\d+\.\d+))?\s/);
              let data = {
                command: cmd,
                response: str
              };
              if (codes) {
                data.status = Number(codes[1]) || 0;
                if (codes[2]) {
                  data.code = codes[2];
                }
                data.text = str.substr(codes[0].length);
              } else {
                data.text = str;
                data.status = 0;
              }
              done(null, data);
            });
            setImmediate(() => this._sendCommand(cmd));
            return promise;
          },
          resolve,
          reject
        });
        if (handlerResponse && typeof handlerResponse.catch === "function") {
          handlerResponse.then(resolve).catch(reject);
        }
        return;
      }
      switch (this._authMethod) {
        case "XOAUTH2":
          this._handleXOauth2Token(false, callback);
          return;
        case "LOGIN":
          this._responseActions.push((str) => {
            this._actionAUTH_LOGIN_USER(str, callback);
          });
          this._sendCommand("AUTH LOGIN");
          return;
        case "PLAIN":
          this._responseActions.push((str) => {
            this._actionAUTHComplete(str, callback);
          });
          this._sendCommand("AUTH PLAIN " + Buffer.from("\0" + this._auth.credentials.user + "\0" + this._auth.credentials.pass, "utf-8").toString("base64"), "AUTH PLAIN " + Buffer.from("\0" + this._auth.credentials.user + "\0" + "/* secret */", "utf-8").toString("base64"));
          return;
        case "CRAM-MD5":
          this._responseActions.push((str) => {
            this._actionAUTH_CRAM_MD5(str, callback);
          });
          this._sendCommand("AUTH CRAM-MD5");
          return;
      }
      return callback(this._formatError('Unknown authentication method "' + this._authMethod + '"', "EAUTH", false, "API"));
    }
    send(envelope, message2, done) {
      if (!message2) {
        return done(this._formatError("Empty message", "EMESSAGE", false, "API"));
      }
      const isDestroyedMessage = this._isDestroyedMessage("send message");
      if (isDestroyedMessage) {
        return done(this._formatError(isDestroyedMessage, "ECONNECTION", false, "API"));
      }
      if (this._maxAllowedSize && envelope.size > this._maxAllowedSize) {
        return setImmediate(() => {
          done(this._formatError("Message size larger than allowed " + this._maxAllowedSize, "EMESSAGE", false, "MAIL FROM"));
        });
      }
      let returned = false;
      let callback = function() {
        if (returned) {
          return;
        }
        returned = true;
        done(...arguments);
      };
      if (typeof message2.on === "function") {
        message2.on("error", (err) => callback(this._formatError(err, "ESTREAM", false, "API")));
      }
      let startTime = Date.now();
      this._setEnvelope(envelope, (err, info) => {
        if (err) {
          let stream3 = new PassThrough;
          if (typeof message2.pipe === "function") {
            message2.pipe(stream3);
          } else {
            stream3.write(message2);
            stream3.end();
          }
          return callback(err);
        }
        let envelopeTime = Date.now();
        let stream2 = this._createSendStream((err2, str) => {
          if (err2) {
            return callback(err2);
          }
          info.envelopeTime = envelopeTime - startTime;
          info.messageTime = Date.now() - envelopeTime;
          info.messageSize = stream2.outByteCount;
          info.response = str;
          return callback(null, info);
        });
        if (typeof message2.pipe === "function") {
          message2.pipe(stream2);
        } else {
          stream2.write(message2);
          stream2.end();
        }
      });
    }
    reset(callback) {
      this._sendCommand("RSET");
      this._responseActions.push((str) => {
        if (str.charAt(0) !== "2") {
          return callback(this._formatError("Could not reset session state. response=" + str, "EPROTOCOL", str, "RSET"));
        }
        this._envelope = false;
        return callback(null, true);
      });
    }
    _onConnect() {
      clearTimeout(this._connectionTimeout);
      this.logger.info({
        tnx: "network",
        localAddress: this._socket.localAddress,
        localPort: this._socket.localPort,
        remoteAddress: this._socket.remoteAddress,
        remotePort: this._socket.remotePort
      }, "%s established to %s:%s", this.secure ? "Secure connection" : "Connection", this._socket.remoteAddress, this._socket.remotePort);
      if (this._destroyed) {
        this.close();
        return;
      }
      this.stage = "connected";
      this._socket.removeListener("data", this._onSocketData);
      this._socket.removeListener("timeout", this._onSocketTimeout);
      this._socket.removeListener("close", this._onSocketClose);
      this._socket.removeListener("end", this._onSocketEnd);
      this._socket.on("data", this._onSocketData);
      this._socket.once("close", this._onSocketClose);
      this._socket.once("end", this._onSocketEnd);
      this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT);
      this._socket.on("timeout", this._onSocketTimeout);
      this._greetingTimeout = setTimeout(() => {
        if (this._socket && !this._destroyed && this._responseActions[0] === this._actionGreeting) {
          this._onError("Greeting never received", "ETIMEDOUT", false, "CONN");
        }
      }, this.options.greetingTimeout || GREETING_TIMEOUT);
      this._responseActions.push(this._actionGreeting);
      this._socket.resume();
    }
    _onData(chunk) {
      if (this._destroyed || !chunk || !chunk.length) {
        return;
      }
      let data = (chunk || "").toString("binary");
      let lines = (this._remainder + data).split(/\r?\n/);
      let lastline;
      this._remainder = lines.pop();
      for (let i = 0, len = lines.length;i < len; i++) {
        if (this._responseQueue.length) {
          lastline = this._responseQueue[this._responseQueue.length - 1];
          if (/^\d+-/.test(lastline.split("\n").pop())) {
            this._responseQueue[this._responseQueue.length - 1] += "\n" + lines[i];
            continue;
          }
        }
        this._responseQueue.push(lines[i]);
      }
      if (this._responseQueue.length) {
        lastline = this._responseQueue[this._responseQueue.length - 1];
        if (/^\d+-/.test(lastline.split("\n").pop())) {
          return;
        }
      }
      this._processResponse();
    }
    _onError(err, type, data, command) {
      clearTimeout(this._connectionTimeout);
      clearTimeout(this._greetingTimeout);
      if (this._destroyed) {
        return;
      }
      err = this._formatError(err, type, data, command);
      this.logger.error(data, err.message);
      this.emit("error", err);
      this.close();
    }
    _formatError(message2, type, response, command) {
      let err;
      if (/Error\]$/i.test(Object.prototype.toString.call(message2))) {
        err = message2;
      } else {
        err = new Error(message2);
      }
      if (type && type !== "Error") {
        err.code = type;
      }
      if (response) {
        err.response = response;
        err.message += ": " + response;
      }
      let responseCode = typeof response === "string" && Number((response.match(/^\d+/) || [])[0]) || false;
      if (responseCode) {
        err.responseCode = responseCode;
      }
      if (command) {
        err.command = command;
      }
      return err;
    }
    _onClose() {
      let serverResponse = false;
      if (this._remainder && this._remainder.trim()) {
        if (this.options.debug || this.options.transactionLog) {
          this.logger.debug({
            tnx: "server"
          }, this._remainder.replace(/\r?\n$/, ""));
        }
        this.lastServerResponse = serverResponse = this._remainder.trim();
      }
      this.logger.info({
        tnx: "network"
      }, "Connection closed");
      if (this.upgrading && !this._destroyed) {
        return this._onError(new Error("Connection closed unexpectedly"), "ETLS", serverResponse, "CONN");
      } else if (![this._actionGreeting, this.close].includes(this._responseActions[0]) && !this._destroyed) {
        return this._onError(new Error("Connection closed unexpectedly"), "ECONNECTION", serverResponse, "CONN");
      } else if (/^[45]\d{2}\b/.test(serverResponse)) {
        return this._onError(new Error("Connection closed unexpectedly"), "ECONNECTION", serverResponse, "CONN");
      }
      this._destroy();
    }
    _onEnd() {
      if (this._socket && !this._socket.destroyed) {
        this._socket.destroy();
      }
    }
    _onTimeout() {
      return this._onError(new Error("Timeout"), "ETIMEDOUT", false, "CONN");
    }
    _destroy() {
      if (this._destroyed) {
        return;
      }
      this._destroyed = true;
      this.emit("end");
    }
    _upgradeConnection(callback) {
      this._socket.removeListener("data", this._onSocketData);
      this._socket.removeListener("timeout", this._onSocketTimeout);
      let socketPlain = this._socket;
      let opts = {
        socket: this._socket,
        host: this.host
      };
      Object.keys(this.options.tls || {}).forEach((key) => {
        opts[key] = this.options.tls[key];
      });
      if (this.servername && !opts.servername) {
        opts.servername = this.servername;
      }
      this.upgrading = true;
      try {
        this._socket = tls.connect(opts, () => {
          this.secure = true;
          this.upgrading = false;
          this._socket.on("data", this._onSocketData);
          socketPlain.removeListener("close", this._onSocketClose);
          socketPlain.removeListener("end", this._onSocketEnd);
          return callback(null, true);
        });
      } catch (err) {
        return callback(err);
      }
      this._socket.on("error", this._onSocketError);
      this._socket.once("close", this._onSocketClose);
      this._socket.once("end", this._onSocketEnd);
      this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT);
      this._socket.on("timeout", this._onSocketTimeout);
      socketPlain.resume();
    }
    _processResponse() {
      if (!this._responseQueue.length) {
        return false;
      }
      let str = this.lastServerResponse = (this._responseQueue.shift() || "").toString();
      if (/^\d+-/.test(str.split("\n").pop())) {
        return;
      }
      if (this.options.debug || this.options.transactionLog) {
        this.logger.debug({
          tnx: "server"
        }, str.replace(/\r?\n$/, ""));
      }
      if (!str.trim()) {
        setImmediate(() => this._processResponse());
      }
      let action = this._responseActions.shift();
      if (typeof action === "function") {
        action.call(this, str);
        setImmediate(() => this._processResponse());
      } else {
        return this._onError(new Error("Unexpected Response"), "EPROTOCOL", str, "CONN");
      }
    }
    _sendCommand(str, logStr) {
      if (this._destroyed) {
        return;
      }
      if (this._socket.destroyed) {
        return this.close();
      }
      if (this.options.debug || this.options.transactionLog) {
        this.logger.debug({
          tnx: "client"
        }, (logStr || str || "").toString().replace(/\r?\n$/, ""));
      }
      this._socket.write(Buffer.from(str + "\r\n", "utf-8"));
    }
    _setEnvelope(envelope, callback) {
      let args = [];
      let useSmtpUtf8 = false;
      this._envelope = envelope || {};
      this._envelope.from = (this._envelope.from && this._envelope.from.address || this._envelope.from || "").toString().trim();
      this._envelope.to = [].concat(this._envelope.to || []).map((to) => (to && to.address || to || "").toString().trim());
      if (!this._envelope.to.length) {
        return callback(this._formatError("No recipients defined", "EENVELOPE", false, "API"));
      }
      if (this._envelope.from && /[\r\n<>]/.test(this._envelope.from)) {
        return callback(this._formatError("Invalid sender " + JSON.stringify(this._envelope.from), "EENVELOPE", false, "API"));
      }
      if (/[\x80-\uFFFF]/.test(this._envelope.from)) {
        useSmtpUtf8 = true;
      }
      for (let i = 0, len = this._envelope.to.length;i < len; i++) {
        if (!this._envelope.to[i] || /[\r\n<>]/.test(this._envelope.to[i])) {
          return callback(this._formatError("Invalid recipient " + JSON.stringify(this._envelope.to[i]), "EENVELOPE", false, "API"));
        }
        if (/[\x80-\uFFFF]/.test(this._envelope.to[i])) {
          useSmtpUtf8 = true;
        }
      }
      this._envelope.rcptQueue = JSON.parse(JSON.stringify(this._envelope.to || []));
      this._envelope.rejected = [];
      this._envelope.rejectedErrors = [];
      this._envelope.accepted = [];
      if (this._envelope.dsn) {
        try {
          this._envelope.dsn = this._setDsnEnvelope(this._envelope.dsn);
        } catch (err) {
          return callback(this._formatError("Invalid DSN " + err.message, "EENVELOPE", false, "API"));
        }
      }
      this._responseActions.push((str) => {
        this._actionMAIL(str, callback);
      });
      if (useSmtpUtf8 && this._supportedExtensions.includes("SMTPUTF8")) {
        args.push("SMTPUTF8");
        this._usingSmtpUtf8 = true;
      }
      if (this._envelope.use8BitMime && this._supportedExtensions.includes("8BITMIME")) {
        args.push("BODY=8BITMIME");
        this._using8BitMime = true;
      }
      if (this._envelope.size && this._supportedExtensions.includes("SIZE")) {
        args.push("SIZE=" + this._envelope.size);
      }
      if (this._envelope.dsn && this._supportedExtensions.includes("DSN")) {
        if (this._envelope.dsn.ret) {
          args.push("RET=" + shared.encodeXText(this._envelope.dsn.ret));
        }
        if (this._envelope.dsn.envid) {
          args.push("ENVID=" + shared.encodeXText(this._envelope.dsn.envid));
        }
      }
      this._sendCommand("MAIL FROM:<" + this._envelope.from + ">" + (args.length ? " " + args.join(" ") : ""));
    }
    _setDsnEnvelope(params) {
      let ret = (params.ret || params.return || "").toString().toUpperCase() || null;
      if (ret) {
        switch (ret) {
          case "HDRS":
          case "HEADERS":
            ret = "HDRS";
            break;
          case "FULL":
          case "BODY":
            ret = "FULL";
            break;
        }
      }
      if (ret && !["FULL", "HDRS"].includes(ret)) {
        throw new Error("ret: " + JSON.stringify(ret));
      }
      let envid = (params.envid || params.id || "").toString() || null;
      let notify = params.notify || null;
      if (notify) {
        if (typeof notify === "string") {
          notify = notify.split(",");
        }
        notify = notify.map((n) => n.trim().toUpperCase());
        let validNotify = ["NEVER", "SUCCESS", "FAILURE", "DELAY"];
        let invaliNotify = notify.filter((n) => !validNotify.includes(n));
        if (invaliNotify.length || notify.length > 1 && notify.includes("NEVER")) {
          throw new Error("notify: " + JSON.stringify(notify.join(",")));
        }
        notify = notify.join(",");
      }
      let orcpt = (params.recipient || params.orcpt || "").toString() || null;
      if (orcpt && orcpt.indexOf(";") < 0) {
        orcpt = "rfc822;" + orcpt;
      }
      return {
        ret,
        envid,
        notify,
        orcpt
      };
    }
    _getDsnRcptToArgs() {
      let args = [];
      if (this._envelope.dsn && this._supportedExtensions.includes("DSN")) {
        if (this._envelope.dsn.notify) {
          args.push("NOTIFY=" + shared.encodeXText(this._envelope.dsn.notify));
        }
        if (this._envelope.dsn.orcpt) {
          args.push("ORCPT=" + shared.encodeXText(this._envelope.dsn.orcpt));
        }
      }
      return args.length ? " " + args.join(" ") : "";
    }
    _createSendStream(callback) {
      let dataStream = new DataStream;
      let logStream;
      if (this.options.lmtp) {
        this._envelope.accepted.forEach((recipient, i) => {
          let final = i === this._envelope.accepted.length - 1;
          this._responseActions.push((str) => {
            this._actionLMTPStream(recipient, final, str, callback);
          });
        });
      } else {
        this._responseActions.push((str) => {
          this._actionSMTPStream(str, callback);
        });
      }
      dataStream.pipe(this._socket, {
        end: false
      });
      if (this.options.debug) {
        logStream = new PassThrough;
        logStream.on("readable", () => {
          let chunk;
          while (chunk = logStream.read()) {
            this.logger.debug({
              tnx: "message"
            }, chunk.toString("binary").replace(/\r?\n$/, ""));
          }
        });
        dataStream.pipe(logStream);
      }
      dataStream.once("end", () => {
        this.logger.info({
          tnx: "message",
          inByteCount: dataStream.inByteCount,
          outByteCount: dataStream.outByteCount
        }, "<%s bytes encoded mime message (source size %s bytes)>", dataStream.outByteCount, dataStream.inByteCount);
      });
      return dataStream;
    }
    _actionGreeting(str) {
      clearTimeout(this._greetingTimeout);
      if (str.substr(0, 3) !== "220") {
        this._onError(new Error("Invalid greeting. response=" + str), "EPROTOCOL", str, "CONN");
        return;
      }
      if (this.options.lmtp) {
        this._responseActions.push(this._actionLHLO);
        this._sendCommand("LHLO " + this.name);
      } else {
        this._responseActions.push(this._actionEHLO);
        this._sendCommand("EHLO " + this.name);
      }
    }
    _actionLHLO(str) {
      if (str.charAt(0) !== "2") {
        this._onError(new Error("Invalid LHLO. response=" + str), "EPROTOCOL", str, "LHLO");
        return;
      }
      this._actionEHLO(str);
    }
    _actionEHLO(str) {
      let match;
      if (str.substr(0, 3) === "421") {
        this._onError(new Error("Server terminates connection. response=" + str), "ECONNECTION", str, "EHLO");
        return;
      }
      if (str.charAt(0) !== "2") {
        if (this.options.requireTLS) {
          this._onError(new Error("EHLO failed but HELO does not support required STARTTLS. response=" + str), "ECONNECTION", str, "EHLO");
          return;
        }
        this._responseActions.push(this._actionHELO);
        this._sendCommand("HELO " + this.name);
        return;
      }
      this._ehloLines = str.split(/\r?\n/).map((line) => line.replace(/^\d+[ -]/, "").trim()).filter((line) => line).slice(1);
      if (!this.secure && !this.options.ignoreTLS && (/[ -]STARTTLS\b/im.test(str) || this.options.requireTLS)) {
        this._sendCommand("STARTTLS");
        this._responseActions.push(this._actionSTARTTLS);
        return;
      }
      if (/[ -]SMTPUTF8\b/im.test(str)) {
        this._supportedExtensions.push("SMTPUTF8");
      }
      if (/[ -]DSN\b/im.test(str)) {
        this._supportedExtensions.push("DSN");
      }
      if (/[ -]8BITMIME\b/im.test(str)) {
        this._supportedExtensions.push("8BITMIME");
      }
      if (/[ -]PIPELINING\b/im.test(str)) {
        this._supportedExtensions.push("PIPELINING");
      }
      if (/[ -]AUTH\b/i.test(str)) {
        this.allowsAuth = true;
      }
      if (/[ -]AUTH(?:(\s+|=)[^\n]*\s+|\s+|=)PLAIN/i.test(str)) {
        this._supportedAuth.push("PLAIN");
      }
      if (/[ -]AUTH(?:(\s+|=)[^\n]*\s+|\s+|=)LOGIN/i.test(str)) {
        this._supportedAuth.push("LOGIN");
      }
      if (/[ -]AUTH(?:(\s+|=)[^\n]*\s+|\s+|=)CRAM-MD5/i.test(str)) {
        this._supportedAuth.push("CRAM-MD5");
      }
      if (/[ -]AUTH(?:(\s+|=)[^\n]*\s+|\s+|=)XOAUTH2/i.test(str)) {
        this._supportedAuth.push("XOAUTH2");
      }
      if (match = str.match(/[ -]SIZE(?:[ \t]+(\d+))?/im)) {
        this._supportedExtensions.push("SIZE");
        this._maxAllowedSize = Number(match[1]) || 0;
      }
      this.emit("connect");
    }
    _actionHELO(str) {
      if (str.charAt(0) !== "2") {
        this._onError(new Error("Invalid HELO. response=" + str), "EPROTOCOL", str, "HELO");
        return;
      }
      this.allowsAuth = true;
      this.emit("connect");
    }
    _actionSTARTTLS(str) {
      if (str.charAt(0) !== "2") {
        if (this.options.opportunisticTLS) {
          this.logger.info({
            tnx: "smtp"
          }, "Failed STARTTLS upgrade, continuing unencrypted");
          return this.emit("connect");
        }
        this._onError(new Error("Error upgrading connection with STARTTLS"), "ETLS", str, "STARTTLS");
        return;
      }
      this._upgradeConnection((err, secured) => {
        if (err) {
          this._onError(new Error("Error initiating TLS - " + (err.message || err)), "ETLS", false, "STARTTLS");
          return;
        }
        this.logger.info({
          tnx: "smtp"
        }, "Connection upgraded with STARTTLS");
        if (secured) {
          if (this.options.lmtp) {
            this._responseActions.push(this._actionLHLO);
            this._sendCommand("LHLO " + this.name);
          } else {
            this._responseActions.push(this._actionEHLO);
            this._sendCommand("EHLO " + this.name);
          }
        } else {
          this.emit("connect");
        }
      });
    }
    _actionAUTH_LOGIN_USER(str, callback) {
      if (!/^334[ -]/.test(str)) {
        callback(this._formatError('Invalid login sequence while waiting for "334 VXNlcm5hbWU6"', "EAUTH", str, "AUTH LOGIN"));
        return;
      }
      this._responseActions.push((str2) => {
        this._actionAUTH_LOGIN_PASS(str2, callback);
      });
      this._sendCommand(Buffer.from(this._auth.credentials.user + "", "utf-8").toString("base64"));
    }
    _actionAUTH_CRAM_MD5(str, callback) {
      let challengeMatch = str.match(/^334\s+(.+)$/);
      let challengeString = "";
      if (!challengeMatch) {
        return callback(this._formatError("Invalid login sequence while waiting for server challenge string", "EAUTH", str, "AUTH CRAM-MD5"));
      } else {
        challengeString = challengeMatch[1];
      }
      let base64decoded = Buffer.from(challengeString, "base64").toString("ascii"), hmacMD5 = crypto.createHmac("md5", this._auth.credentials.pass);
      hmacMD5.update(base64decoded);
      let prepended = this._auth.credentials.user + " " + hmacMD5.digest("hex");
      this._responseActions.push((str2) => {
        this._actionAUTH_CRAM_MD5_PASS(str2, callback);
      });
      this._sendCommand(Buffer.from(prepended).toString("base64"), Buffer.from(this._auth.credentials.user + " /* secret */").toString("base64"));
    }
    _actionAUTH_CRAM_MD5_PASS(str, callback) {
      if (!str.match(/^235\s+/)) {
        return callback(this._formatError('Invalid login sequence while waiting for "235"', "EAUTH", str, "AUTH CRAM-MD5"));
      }
      this.logger.info({
        tnx: "smtp",
        username: this._auth.user,
        action: "authenticated",
        method: this._authMethod
      }, "User %s authenticated", JSON.stringify(this._auth.user));
      this.authenticated = true;
      callback(null, true);
    }
    _actionAUTH_LOGIN_PASS(str, callback) {
      if (!/^334[ -]/.test(str)) {
        return callback(this._formatError('Invalid login sequence while waiting for "334 UGFzc3dvcmQ6"', "EAUTH", str, "AUTH LOGIN"));
      }
      this._responseActions.push((str2) => {
        this._actionAUTHComplete(str2, callback);
      });
      this._sendCommand(Buffer.from((this._auth.credentials.pass || "").toString(), "utf-8").toString("base64"), Buffer.from("/* secret */", "utf-8").toString("base64"));
    }
    _actionAUTHComplete(str, isRetry, callback) {
      if (!callback && typeof isRetry === "function") {
        callback = isRetry;
        isRetry = false;
      }
      if (str.substr(0, 3) === "334") {
        this._responseActions.push((str2) => {
          if (isRetry || this._authMethod !== "XOAUTH2") {
            this._actionAUTHComplete(str2, true, callback);
          } else {
            setImmediate(() => this._handleXOauth2Token(true, callback));
          }
        });
        this._sendCommand("");
        return;
      }
      if (str.charAt(0) !== "2") {
        this.logger.info({
          tnx: "smtp",
          username: this._auth.user,
          action: "authfail",
          method: this._authMethod
        }, "User %s failed to authenticate", JSON.stringify(this._auth.user));
        return callback(this._formatError("Invalid login", "EAUTH", str, "AUTH " + this._authMethod));
      }
      this.logger.info({
        tnx: "smtp",
        username: this._auth.user,
        action: "authenticated",
        method: this._authMethod
      }, "User %s authenticated", JSON.stringify(this._auth.user));
      this.authenticated = true;
      callback(null, true);
    }
    _actionMAIL(str, callback) {
      let message2, curRecipient;
      if (Number(str.charAt(0)) !== 2) {
        if (this._usingSmtpUtf8 && /^550 /.test(str) && /[\x80-\uFFFF]/.test(this._envelope.from)) {
          message2 = "Internationalized mailbox name not allowed";
        } else {
          message2 = "Mail command failed";
        }
        return callback(this._formatError(message2, "EENVELOPE", str, "MAIL FROM"));
      }
      if (!this._envelope.rcptQueue.length) {
        return callback(this._formatError("Can't send mail - no recipients defined", "EENVELOPE", false, "API"));
      } else {
        this._recipientQueue = [];
        if (this._supportedExtensions.includes("PIPELINING")) {
          while (this._envelope.rcptQueue.length) {
            curRecipient = this._envelope.rcptQueue.shift();
            this._recipientQueue.push(curRecipient);
            this._responseActions.push((str2) => {
              this._actionRCPT(str2, callback);
            });
            this._sendCommand("RCPT TO:<" + curRecipient + ">" + this._getDsnRcptToArgs());
          }
        } else {
          curRecipient = this._envelope.rcptQueue.shift();
          this._recipientQueue.push(curRecipient);
          this._responseActions.push((str2) => {
            this._actionRCPT(str2, callback);
          });
          this._sendCommand("RCPT TO:<" + curRecipient + ">" + this._getDsnRcptToArgs());
        }
      }
    }
    _actionRCPT(str, callback) {
      let message2, err, curRecipient = this._recipientQueue.shift();
      if (Number(str.charAt(0)) !== 2) {
        if (this._usingSmtpUtf8 && /^553 /.test(str) && /[\x80-\uFFFF]/.test(curRecipient)) {
          message2 = "Internationalized mailbox name not allowed";
        } else {
          message2 = "Recipient command failed";
        }
        this._envelope.rejected.push(curRecipient);
        err = this._formatError(message2, "EENVELOPE", str, "RCPT TO");
        err.recipient = curRecipient;
        this._envelope.rejectedErrors.push(err);
      } else {
        this._envelope.accepted.push(curRecipient);
      }
      if (!this._envelope.rcptQueue.length && !this._recipientQueue.length) {
        if (this._envelope.rejected.length < this._envelope.to.length) {
          this._responseActions.push((str2) => {
            this._actionDATA(str2, callback);
          });
          this._sendCommand("DATA");
        } else {
          err = this._formatError("Can't send mail - all recipients were rejected", "EENVELOPE", str, "RCPT TO");
          err.rejected = this._envelope.rejected;
          err.rejectedErrors = this._envelope.rejectedErrors;
          return callback(err);
        }
      } else if (this._envelope.rcptQueue.length) {
        curRecipient = this._envelope.rcptQueue.shift();
        this._recipientQueue.push(curRecipient);
        this._responseActions.push((str2) => {
          this._actionRCPT(str2, callback);
        });
        this._sendCommand("RCPT TO:<" + curRecipient + ">" + this._getDsnRcptToArgs());
      }
    }
    _actionDATA(str, callback) {
      if (!/^[23]/.test(str)) {
        return callback(this._formatError("Data command failed", "EENVELOPE", str, "DATA"));
      }
      let response = {
        accepted: this._envelope.accepted,
        rejected: this._envelope.rejected
      };
      if (this._ehloLines && this._ehloLines.length) {
        response.ehlo = this._ehloLines;
      }
      if (this._envelope.rejectedErrors.length) {
        response.rejectedErrors = this._envelope.rejectedErrors;
      }
      callback(null, response);
    }
    _actionSMTPStream(str, callback) {
      if (Number(str.charAt(0)) !== 2) {
        return callback(this._formatError("Message failed", "EMESSAGE", str, "DATA"));
      } else {
        return callback(null, str);
      }
    }
    _actionLMTPStream(recipient, final, str, callback) {
      let err;
      if (Number(str.charAt(0)) !== 2) {
        err = this._formatError("Message failed for recipient " + recipient, "EMESSAGE", str, "DATA");
        err.recipient = recipient;
        this._envelope.rejected.push(recipient);
        this._envelope.rejectedErrors.push(err);
        for (let i = 0, len = this._envelope.accepted.length;i < len; i++) {
          if (this._envelope.accepted[i] === recipient) {
            this._envelope.accepted.splice(i, 1);
          }
        }
      }
      if (final) {
        return callback(null, str);
      }
    }
    _handleXOauth2Token(isRetry, callback) {
      this._auth.oauth2.getToken(isRetry, (err, accessToken) => {
        if (err) {
          this.logger.info({
            tnx: "smtp",
            username: this._auth.user,
            action: "authfail",
            method: this._authMethod
          }, "User %s failed to authenticate", JSON.stringify(this._auth.user));
          return callback(this._formatError(err, "EAUTH", false, "AUTH XOAUTH2"));
        }
        this._responseActions.push((str) => {
          this._actionAUTHComplete(str, isRetry, callback);
        });
        this._sendCommand("AUTH XOAUTH2 " + this._auth.oauth2.buildXOAuth2Token(accessToken), "AUTH XOAUTH2 " + this._auth.oauth2.buildXOAuth2Token("/* secret */"));
      });
    }
    _isDestroyedMessage(command) {
      if (this._destroyed) {
        return "Cannot " + command + " - smtp connection is already destroyed.";
      }
      if (this._socket) {
        if (this._socket.destroyed) {
          return "Cannot " + command + " - smtp connection socket is already destroyed.";
        }
        if (!this._socket.writable) {
          return "Cannot " + command + " - smtp connection socket is already half-closed.";
        }
      }
    }
    _getHostname() {
      let defaultHostname;
      try {
        defaultHostname = os.hostname() || "";
      } catch (err) {
        defaultHostname = "localhost";
      }
      if (!defaultHostname || defaultHostname.indexOf(".") < 0) {
        defaultHostname = "[127.0.0.1]";
      }
      if (defaultHostname.match(/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/)) {
        defaultHostname = "[" + defaultHostname + "]";
      }
      return defaultHostname;
    }
  }
  module.exports = SMTPConnection;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/xoauth2/index.js
var require_xoauth2 = __commonJS((exports, module) => {
  var Stream = __require("stream").Stream;
  var nmfetch = require_fetch();
  var crypto = __require("crypto");
  var shared = require_shared();

  class XOAuth2 extends Stream {
    constructor(options, logger) {
      super();
      this.options = options || {};
      if (options && options.serviceClient) {
        if (!options.privateKey || !options.user) {
          setImmediate(() => this.emit("error", new Error('Options "privateKey" and "user" are required for service account!')));
          return;
        }
        let serviceRequestTimeout = Math.min(Math.max(Number(this.options.serviceRequestTimeout) || 0, 0), 3600);
        this.options.serviceRequestTimeout = serviceRequestTimeout || 5 * 60;
      }
      this.logger = shared.getLogger({
        logger
      }, {
        component: this.options.component || "OAuth2"
      });
      this.provisionCallback = typeof this.options.provisionCallback === "function" ? this.options.provisionCallback : false;
      this.options.accessUrl = this.options.accessUrl || "https://accounts.google.com/o/oauth2/token";
      this.options.customHeaders = this.options.customHeaders || {};
      this.options.customParams = this.options.customParams || {};
      this.accessToken = this.options.accessToken || false;
      if (this.options.expires && Number(this.options.expires)) {
        this.expires = this.options.expires;
      } else {
        let timeout = Math.max(Number(this.options.timeout) || 0, 0);
        this.expires = timeout && Date.now() + timeout * 1000 || 0;
      }
    }
    getToken(renew, callback) {
      if (!renew && this.accessToken && (!this.expires || this.expires > Date.now())) {
        return callback(null, this.accessToken);
      }
      let generateCallback = (...args) => {
        if (args[0]) {
          this.logger.error({
            err: args[0],
            tnx: "OAUTH2",
            user: this.options.user,
            action: "renew"
          }, "Failed generating new Access Token for %s", this.options.user);
        } else {
          this.logger.info({
            tnx: "OAUTH2",
            user: this.options.user,
            action: "renew"
          }, "Generated new Access Token for %s", this.options.user);
        }
        callback(...args);
      };
      if (this.provisionCallback) {
        this.provisionCallback(this.options.user, !!renew, (err, accessToken, expires) => {
          if (!err && accessToken) {
            this.accessToken = accessToken;
            this.expires = expires || 0;
          }
          generateCallback(err, accessToken);
        });
      } else {
        this.generateToken(generateCallback);
      }
    }
    updateToken(accessToken, timeout) {
      this.accessToken = accessToken;
      timeout = Math.max(Number(timeout) || 0, 0);
      this.expires = timeout && Date.now() + timeout * 1000 || 0;
      this.emit("token", {
        user: this.options.user,
        accessToken: accessToken || "",
        expires: this.expires
      });
    }
    generateToken(callback) {
      let urlOptions;
      let loggedUrlOptions;
      if (this.options.serviceClient) {
        let iat = Math.floor(Date.now() / 1000);
        let tokenData = {
          iss: this.options.serviceClient,
          scope: this.options.scope || "https://mail.google.com/",
          sub: this.options.user,
          aud: this.options.accessUrl,
          iat,
          exp: iat + this.options.serviceRequestTimeout
        };
        let token;
        try {
          token = this.jwtSignRS256(tokenData);
        } catch (err) {
          return callback(new Error("Can't generate token. Check your auth options"));
        }
        urlOptions = {
          grant_type: "urn:ietf:params:oauth:grant-type:jwt-bearer",
          assertion: token
        };
        loggedUrlOptions = {
          grant_type: "urn:ietf:params:oauth:grant-type:jwt-bearer",
          assertion: tokenData
        };
      } else {
        if (!this.options.refreshToken) {
          return callback(new Error("Can't create new access token for user"));
        }
        urlOptions = {
          client_id: this.options.clientId || "",
          client_secret: this.options.clientSecret || "",
          refresh_token: this.options.refreshToken,
          grant_type: "refresh_token"
        };
        loggedUrlOptions = {
          client_id: this.options.clientId || "",
          client_secret: (this.options.clientSecret || "").substr(0, 6) + "...",
          refresh_token: (this.options.refreshToken || "").substr(0, 6) + "...",
          grant_type: "refresh_token"
        };
      }
      Object.keys(this.options.customParams).forEach((key) => {
        urlOptions[key] = this.options.customParams[key];
        loggedUrlOptions[key] = this.options.customParams[key];
      });
      this.logger.debug({
        tnx: "OAUTH2",
        user: this.options.user,
        action: "generate"
      }, "Requesting token using: %s", JSON.stringify(loggedUrlOptions));
      this.postRequest(this.options.accessUrl, urlOptions, this.options, (error, body) => {
        let data;
        if (error) {
          return callback(error);
        }
        try {
          data = JSON.parse(body.toString());
        } catch (E) {
          return callback(E);
        }
        if (!data || typeof data !== "object") {
          this.logger.debug({
            tnx: "OAUTH2",
            user: this.options.user,
            action: "post"
          }, "Response: %s", (body || "").toString());
          return callback(new Error("Invalid authentication response"));
        }
        let logData = {};
        Object.keys(data).forEach((key) => {
          if (key !== "access_token") {
            logData[key] = data[key];
          } else {
            logData[key] = (data[key] || "").toString().substr(0, 6) + "...";
          }
        });
        this.logger.debug({
          tnx: "OAUTH2",
          user: this.options.user,
          action: "post"
        }, "Response: %s", JSON.stringify(logData));
        if (data.error) {
          let errorMessage = data.error;
          if (data.error_description) {
            errorMessage += ": " + data.error_description;
          }
          if (data.error_uri) {
            errorMessage += " (" + data.error_uri + ")";
          }
          return callback(new Error(errorMessage));
        }
        if (data.access_token) {
          this.updateToken(data.access_token, data.expires_in);
          return callback(null, this.accessToken);
        }
        return callback(new Error("No access token"));
      });
    }
    buildXOAuth2Token(accessToken) {
      let authData = ["user=" + (this.options.user || ""), "auth=Bearer " + (accessToken || this.accessToken), "", ""];
      return Buffer.from(authData.join("\x01"), "utf-8").toString("base64");
    }
    postRequest(url, payload, params, callback) {
      let returned = false;
      let chunks = [];
      let chunklen = 0;
      let req = nmfetch(url, {
        method: "post",
        headers: params.customHeaders,
        body: payload,
        allowErrorResponse: true
      });
      req.on("readable", () => {
        let chunk;
        while ((chunk = req.read()) !== null) {
          chunks.push(chunk);
          chunklen += chunk.length;
        }
      });
      req.once("error", (err) => {
        if (returned) {
          return;
        }
        returned = true;
        return callback(err);
      });
      req.once("end", () => {
        if (returned) {
          return;
        }
        returned = true;
        return callback(null, Buffer.concat(chunks, chunklen));
      });
    }
    toBase64URL(data) {
      if (typeof data === "string") {
        data = Buffer.from(data);
      }
      return data.toString("base64").replace(/[=]+/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }
    jwtSignRS256(payload) {
      payload = ['{"alg":"RS256","typ":"JWT"}', JSON.stringify(payload)].map((val) => this.toBase64URL(val)).join(".");
      let signature = crypto.createSign("RSA-SHA256").update(payload).sign(this.options.privateKey);
      return payload + "." + this.toBase64URL(signature);
    }
  }
  module.exports = XOAuth2;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/smtp-pool/pool-resource.js
var require_pool_resource = __commonJS((exports, module) => {
  var SMTPConnection = require_smtp_connection();
  var assign = require_shared().assign;
  var XOAuth2 = require_xoauth2();
  var EventEmitter = __require("events");

  class PoolResource extends EventEmitter {
    constructor(pool) {
      super();
      this.pool = pool;
      this.options = pool.options;
      this.logger = this.pool.logger;
      if (this.options.auth) {
        switch ((this.options.auth.type || "").toString().toUpperCase()) {
          case "OAUTH2": {
            let oauth2 = new XOAuth2(this.options.auth, this.logger);
            oauth2.provisionCallback = this.pool.mailer && this.pool.mailer.get("oauth2_provision_cb") || oauth2.provisionCallback;
            this.auth = {
              type: "OAUTH2",
              user: this.options.auth.user,
              oauth2,
              method: "XOAUTH2"
            };
            oauth2.on("token", (token) => this.pool.mailer.emit("token", token));
            oauth2.on("error", (err) => this.emit("error", err));
            break;
          }
          default:
            if (!this.options.auth.user && !this.options.auth.pass) {
              break;
            }
            this.auth = {
              type: (this.options.auth.type || "").toString().toUpperCase() || "LOGIN",
              user: this.options.auth.user,
              credentials: {
                user: this.options.auth.user || "",
                pass: this.options.auth.pass,
                options: this.options.auth.options
              },
              method: (this.options.auth.method || "").trim().toUpperCase() || this.options.authMethod || false
            };
        }
      }
      this._connection = false;
      this._connected = false;
      this.messages = 0;
      this.available = true;
    }
    connect(callback) {
      this.pool.getSocket(this.options, (err, socketOptions) => {
        if (err) {
          return callback(err);
        }
        let returned = false;
        let options = this.options;
        if (socketOptions && socketOptions.connection) {
          this.logger.info({
            tnx: "proxy",
            remoteAddress: socketOptions.connection.remoteAddress,
            remotePort: socketOptions.connection.remotePort,
            destHost: options.host || "",
            destPort: options.port || "",
            action: "connected"
          }, "Using proxied socket from %s:%s to %s:%s", socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || "", options.port || "");
          options = assign(false, options);
          Object.keys(socketOptions).forEach((key) => {
            options[key] = socketOptions[key];
          });
        }
        this.connection = new SMTPConnection(options);
        this.connection.once("error", (err2) => {
          this.emit("error", err2);
          if (returned) {
            return;
          }
          returned = true;
          return callback(err2);
        });
        this.connection.once("end", () => {
          this.close();
          if (returned) {
            return;
          }
          returned = true;
          let timer = setTimeout(() => {
            if (returned) {
              return;
            }
            let err2 = new Error("Unexpected socket close");
            if (this.connection && this.connection._socket && this.connection._socket.upgrading) {
              err2.code = "ETLS";
            }
            callback(err2);
          }, 1000);
          try {
            timer.unref();
          } catch (E) {
          }
        });
        this.connection.connect(() => {
          if (returned) {
            return;
          }
          if (this.auth && (this.connection.allowsAuth || options.forceAuth)) {
            this.connection.login(this.auth, (err2) => {
              if (returned) {
                return;
              }
              returned = true;
              if (err2) {
                this.connection.close();
                this.emit("error", err2);
                return callback(err2);
              }
              this._connected = true;
              callback(null, true);
            });
          } else {
            returned = true;
            this._connected = true;
            return callback(null, true);
          }
        });
      });
    }
    send(mail, callback) {
      if (!this._connected) {
        return this.connect((err) => {
          if (err) {
            return callback(err);
          }
          return this.send(mail, callback);
        });
      }
      let envelope = mail.message.getEnvelope();
      let messageId = mail.message.messageId();
      let recipients = [].concat(envelope.to || []);
      if (recipients.length > 3) {
        recipients.push("...and " + recipients.splice(2).length + " more");
      }
      this.logger.info({
        tnx: "send",
        messageId,
        cid: this.id
      }, "Sending message %s using #%s to <%s>", messageId, this.id, recipients.join(", "));
      if (mail.data.dsn) {
        envelope.dsn = mail.data.dsn;
      }
      this.connection.send(envelope, mail.message.createReadStream(), (err, info) => {
        this.messages++;
        if (err) {
          this.connection.close();
          this.emit("error", err);
          return callback(err);
        }
        info.envelope = {
          from: envelope.from,
          to: envelope.to
        };
        info.messageId = messageId;
        setImmediate(() => {
          let err2;
          if (this.messages >= this.options.maxMessages) {
            err2 = new Error("Resource exhausted");
            err2.code = "EMAXLIMIT";
            this.connection.close();
            this.emit("error", err2);
          } else {
            this.pool._checkRateLimit(() => {
              this.available = true;
              this.emit("available");
            });
          }
        });
        callback(null, info);
      });
    }
    close() {
      this._connected = false;
      if (this.auth && this.auth.oauth2) {
        this.auth.oauth2.removeAllListeners();
      }
      if (this.connection) {
        this.connection.close();
      }
      this.emit("close");
    }
  }
  module.exports = PoolResource;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/well-known/services.json
var require_services = __commonJS((exports, module) => {
  module.exports = {
    "1und1": {
      host: "smtp.1und1.de",
      port: 465,
      secure: true,
      authMethod: "LOGIN"
    },
    Aliyun: {
      domains: ["aliyun.com"],
      host: "smtp.aliyun.com",
      port: 465,
      secure: true
    },
    AOL: {
      domains: ["aol.com"],
      host: "smtp.aol.com",
      port: 587
    },
    Bluewin: {
      host: "smtpauths.bluewin.ch",
      domains: ["bluewin.ch"],
      port: 465
    },
    DebugMail: {
      host: "debugmail.io",
      port: 25
    },
    DynectEmail: {
      aliases: ["Dynect"],
      host: "smtp.dynect.net",
      port: 25
    },
    Ethereal: {
      aliases: ["ethereal.email"],
      host: "smtp.ethereal.email",
      port: 587
    },
    FastMail: {
      domains: ["fastmail.fm"],
      host: "smtp.fastmail.com",
      port: 465,
      secure: true
    },
    "Forward Email": {
      aliases: ["FE", "ForwardEmail"],
      domains: ["forwardemail.net"],
      host: "smtp.forwardemail.net",
      port: 465,
      secure: true
    },
    "Feishu Mail": {
      aliases: ["Feishu", "FeishuMail"],
      domains: ["www.feishu.cn"],
      host: "smtp.feishu.cn",
      port: 465,
      secure: true
    },
    GandiMail: {
      aliases: ["Gandi", "Gandi Mail"],
      host: "mail.gandi.net",
      port: 587
    },
    Gmail: {
      aliases: ["Google Mail"],
      domains: ["gmail.com", "googlemail.com"],
      host: "smtp.gmail.com",
      port: 465,
      secure: true
    },
    Godaddy: {
      host: "smtpout.secureserver.net",
      port: 25
    },
    GodaddyAsia: {
      host: "smtp.asia.secureserver.net",
      port: 25
    },
    GodaddyEurope: {
      host: "smtp.europe.secureserver.net",
      port: 25
    },
    "hot.ee": {
      host: "mail.hot.ee"
    },
    Hotmail: {
      aliases: ["Outlook", "Outlook.com", "Hotmail.com"],
      domains: ["hotmail.com", "outlook.com"],
      host: "smtp-mail.outlook.com",
      port: 587
    },
    iCloud: {
      aliases: ["Me", "Mac"],
      domains: ["me.com", "mac.com"],
      host: "smtp.mail.me.com",
      port: 587
    },
    Infomaniak: {
      host: "mail.infomaniak.com",
      domains: ["ik.me", "ikmail.com", "etik.com"],
      port: 587
    },
    Loopia: {
      host: "mailcluster.loopia.se",
      port: 465
    },
    "mail.ee": {
      host: "smtp.mail.ee"
    },
    "Mail.ru": {
      host: "smtp.mail.ru",
      port: 465,
      secure: true
    },
    "Mailcatch.app": {
      host: "sandbox-smtp.mailcatch.app",
      port: 2525
    },
    Maildev: {
      port: 1025,
      ignoreTLS: true
    },
    Mailgun: {
      host: "smtp.mailgun.org",
      port: 465,
      secure: true
    },
    Mailjet: {
      host: "in.mailjet.com",
      port: 587
    },
    Mailosaur: {
      host: "mailosaur.io",
      port: 25
    },
    Mailtrap: {
      host: "live.smtp.mailtrap.io",
      port: 587
    },
    Mandrill: {
      host: "smtp.mandrillapp.com",
      port: 587
    },
    Naver: {
      host: "smtp.naver.com",
      port: 587
    },
    One: {
      host: "send.one.com",
      port: 465,
      secure: true
    },
    OpenMailBox: {
      aliases: ["OMB", "openmailbox.org"],
      host: "smtp.openmailbox.org",
      port: 465,
      secure: true
    },
    Outlook365: {
      host: "smtp.office365.com",
      port: 587,
      secure: false
    },
    OhMySMTP: {
      host: "smtp.ohmysmtp.com",
      port: 587,
      secure: false
    },
    Postmark: {
      aliases: ["PostmarkApp"],
      host: "smtp.postmarkapp.com",
      port: 2525
    },
    "qiye.aliyun": {
      host: "smtp.mxhichina.com",
      port: "465",
      secure: true
    },
    QQ: {
      domains: ["qq.com"],
      host: "smtp.qq.com",
      port: 465,
      secure: true
    },
    QQex: {
      aliases: ["QQ Enterprise"],
      domains: ["exmail.qq.com"],
      host: "smtp.exmail.qq.com",
      port: 465,
      secure: true
    },
    SendCloud: {
      host: "smtp.sendcloud.net",
      port: 2525
    },
    SendGrid: {
      host: "smtp.sendgrid.net",
      port: 587
    },
    SendinBlue: {
      aliases: ["Brevo"],
      host: "smtp-relay.brevo.com",
      port: 587
    },
    SendPulse: {
      host: "smtp-pulse.com",
      port: 465,
      secure: true
    },
    SES: {
      host: "email-smtp.us-east-1.amazonaws.com",
      port: 465,
      secure: true
    },
    "SES-US-EAST-1": {
      host: "email-smtp.us-east-1.amazonaws.com",
      port: 465,
      secure: true
    },
    "SES-US-WEST-2": {
      host: "email-smtp.us-west-2.amazonaws.com",
      port: 465,
      secure: true
    },
    "SES-EU-WEST-1": {
      host: "email-smtp.eu-west-1.amazonaws.com",
      port: 465,
      secure: true
    },
    "SES-AP-SOUTH-1": {
      host: "email-smtp.ap-south-1.amazonaws.com",
      port: 465,
      secure: true
    },
    "SES-AP-NORTHEAST-1": {
      host: "email-smtp.ap-northeast-1.amazonaws.com",
      port: 465,
      secure: true
    },
    "SES-AP-NORTHEAST-2": {
      host: "email-smtp.ap-northeast-2.amazonaws.com",
      port: 465,
      secure: true
    },
    "SES-AP-NORTHEAST-3": {
      host: "email-smtp.ap-northeast-3.amazonaws.com",
      port: 465,
      secure: true
    },
    "SES-AP-SOUTHEAST-1": {
      host: "email-smtp.ap-southeast-1.amazonaws.com",
      port: 465,
      secure: true
    },
    "SES-AP-SOUTHEAST-2": {
      host: "email-smtp.ap-southeast-2.amazonaws.com",
      port: 465,
      secure: true
    },
    Sparkpost: {
      aliases: ["SparkPost", "SparkPost Mail"],
      domains: ["sparkpost.com"],
      host: "smtp.sparkpostmail.com",
      port: 587,
      secure: false
    },
    Tipimail: {
      host: "smtp.tipimail.com",
      port: 587
    },
    Yahoo: {
      domains: ["yahoo.com"],
      host: "smtp.mail.yahoo.com",
      port: 465,
      secure: true
    },
    Yandex: {
      domains: ["yandex.ru"],
      host: "smtp.yandex.ru",
      port: 465,
      secure: true
    },
    Zoho: {
      host: "smtp.zoho.com",
      port: 465,
      secure: true,
      authMethod: "LOGIN"
    },
    "126": {
      host: "smtp.126.com",
      port: 465,
      secure: true
    },
    "163": {
      host: "smtp.163.com",
      port: 465,
      secure: true
    }
  };
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/well-known/index.js
var require_well_known = __commonJS((exports, module) => {
  function normalizeKey(key) {
    return key.replace(/[^a-zA-Z0-9.-]/g, "").toLowerCase();
  }
  function normalizeService(service) {
    let filter = ["domains", "aliases"];
    let response = {};
    Object.keys(service).forEach((key) => {
      if (filter.indexOf(key) < 0) {
        response[key] = service[key];
      }
    });
    return response;
  }
  var services = require_services();
  var normalized = {};
  Object.keys(services).forEach((key) => {
    let service = services[key];
    normalized[normalizeKey(key)] = normalizeService(service);
    [].concat(service.aliases || []).forEach((alias) => {
      normalized[normalizeKey(alias)] = normalizeService(service);
    });
    [].concat(service.domains || []).forEach((domain) => {
      normalized[normalizeKey(domain)] = normalizeService(service);
    });
  });
  module.exports = function(key) {
    key = normalizeKey(key.split("@").pop());
    return normalized[key] || false;
  };
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/smtp-pool/index.js
var require_smtp_pool = __commonJS((exports, module) => {
  var EventEmitter = __require("events");
  var PoolResource = require_pool_resource();
  var SMTPConnection = require_smtp_connection();
  var wellKnown = require_well_known();
  var shared = require_shared();
  var packageData = require_package();

  class SMTPPool extends EventEmitter {
    constructor(options) {
      super();
      options = options || {};
      if (typeof options === "string") {
        options = {
          url: options
        };
      }
      let urlData;
      let service = options.service;
      if (typeof options.getSocket === "function") {
        this.getSocket = options.getSocket;
      }
      if (options.url) {
        urlData = shared.parseConnectionUrl(options.url);
        service = service || urlData.service;
      }
      this.options = shared.assign(false, options, urlData, service && wellKnown(service));
      this.options.maxConnections = this.options.maxConnections || 5;
      this.options.maxMessages = this.options.maxMessages || 100;
      this.logger = shared.getLogger(this.options, {
        component: this.options.component || "smtp-pool"
      });
      let connection = new SMTPConnection(this.options);
      this.name = "SMTP (pool)";
      this.version = packageData.version + "[client:" + connection.version + "]";
      this._rateLimit = {
        counter: 0,
        timeout: null,
        waiting: [],
        checkpoint: false,
        delta: Number(this.options.rateDelta) || 1000,
        limit: Number(this.options.rateLimit) || 0
      };
      this._closed = false;
      this._queue = [];
      this._connections = [];
      this._connectionCounter = 0;
      this.idling = true;
      setImmediate(() => {
        if (this.idling) {
          this.emit("idle");
        }
      });
    }
    getSocket(options, callback) {
      return setImmediate(() => callback(null, false));
    }
    send(mail, callback) {
      if (this._closed) {
        return false;
      }
      this._queue.push({
        mail,
        requeueAttempts: 0,
        callback
      });
      if (this.idling && this._queue.length >= this.options.maxConnections) {
        this.idling = false;
      }
      setImmediate(() => this._processMessages());
      return true;
    }
    close() {
      let connection;
      let len = this._connections.length;
      this._closed = true;
      clearTimeout(this._rateLimit.timeout);
      if (!len && !this._queue.length) {
        return;
      }
      for (let i = len - 1;i >= 0; i--) {
        if (this._connections[i] && this._connections[i].available) {
          connection = this._connections[i];
          connection.close();
          this.logger.info({
            tnx: "connection",
            cid: connection.id,
            action: "removed"
          }, "Connection #%s removed", connection.id);
        }
      }
      if (len && !this._connections.length) {
        this.logger.debug({
          tnx: "connection"
        }, "All connections removed");
      }
      if (!this._queue.length) {
        return;
      }
      let invokeCallbacks = () => {
        if (!this._queue.length) {
          this.logger.debug({
            tnx: "connection"
          }, "Pending queue entries cleared");
          return;
        }
        let entry = this._queue.shift();
        if (entry && typeof entry.callback === "function") {
          try {
            entry.callback(new Error("Connection pool was closed"));
          } catch (E) {
            this.logger.error({
              err: E,
              tnx: "callback",
              cid: connection.id
            }, "Callback error for #%s: %s", connection.id, E.message);
          }
        }
        setImmediate(invokeCallbacks);
      };
      setImmediate(invokeCallbacks);
    }
    _processMessages() {
      let connection;
      let i, len;
      if (this._closed) {
        return;
      }
      if (!this._queue.length) {
        if (!this.idling) {
          this.idling = true;
          this.emit("idle");
        }
        return;
      }
      for (i = 0, len = this._connections.length;i < len; i++) {
        if (this._connections[i].available) {
          connection = this._connections[i];
          break;
        }
      }
      if (!connection && this._connections.length < this.options.maxConnections) {
        connection = this._createConnection();
      }
      if (!connection) {
        this.idling = false;
        return;
      }
      if (!this.idling && this._queue.length < this.options.maxConnections) {
        this.idling = true;
        this.emit("idle");
      }
      let entry = connection.queueEntry = this._queue.shift();
      entry.messageId = (connection.queueEntry.mail.message.getHeader("message-id") || "").replace(/[<>\s]/g, "");
      connection.available = false;
      this.logger.debug({
        tnx: "pool",
        cid: connection.id,
        messageId: entry.messageId,
        action: "assign"
      }, "Assigned message <%s> to #%s (%s)", entry.messageId, connection.id, connection.messages + 1);
      if (this._rateLimit.limit) {
        this._rateLimit.counter++;
        if (!this._rateLimit.checkpoint) {
          this._rateLimit.checkpoint = Date.now();
        }
      }
      connection.send(entry.mail, (err, info) => {
        if (entry === connection.queueEntry) {
          try {
            entry.callback(err, info);
          } catch (E) {
            this.logger.error({
              err: E,
              tnx: "callback",
              cid: connection.id
            }, "Callback error for #%s: %s", connection.id, E.message);
          }
          connection.queueEntry = false;
        }
      });
    }
    _createConnection() {
      let connection = new PoolResource(this);
      connection.id = ++this._connectionCounter;
      this.logger.info({
        tnx: "pool",
        cid: connection.id,
        action: "conection"
      }, "Created new pool resource #%s", connection.id);
      connection.on("available", () => {
        this.logger.debug({
          tnx: "connection",
          cid: connection.id,
          action: "available"
        }, "Connection #%s became available", connection.id);
        if (this._closed) {
          this.close();
        } else {
          this._processMessages();
        }
      });
      connection.once("error", (err) => {
        if (err.code !== "EMAXLIMIT") {
          this.logger.error({
            err,
            tnx: "pool",
            cid: connection.id
          }, "Pool Error for #%s: %s", connection.id, err.message);
        } else {
          this.logger.debug({
            tnx: "pool",
            cid: connection.id,
            action: "maxlimit"
          }, "Max messages limit exchausted for #%s", connection.id);
        }
        if (connection.queueEntry) {
          try {
            connection.queueEntry.callback(err);
          } catch (E) {
            this.logger.error({
              err: E,
              tnx: "callback",
              cid: connection.id
            }, "Callback error for #%s: %s", connection.id, E.message);
          }
          connection.queueEntry = false;
        }
        this._removeConnection(connection);
        this._continueProcessing();
      });
      connection.once("close", () => {
        this.logger.info({
          tnx: "connection",
          cid: connection.id,
          action: "closed"
        }, "Connection #%s was closed", connection.id);
        this._removeConnection(connection);
        if (connection.queueEntry) {
          setTimeout(() => {
            if (connection.queueEntry) {
              if (this._shouldRequeuOnConnectionClose(connection.queueEntry)) {
                this._requeueEntryOnConnectionClose(connection);
              } else {
                this._failDeliveryOnConnectionClose(connection);
              }
            }
            this._continueProcessing();
          }, 50);
        } else {
          this._continueProcessing();
        }
      });
      this._connections.push(connection);
      return connection;
    }
    _shouldRequeuOnConnectionClose(queueEntry) {
      if (this.options.maxRequeues === undefined || this.options.maxRequeues < 0) {
        return true;
      }
      return queueEntry.requeueAttempts < this.options.maxRequeues;
    }
    _failDeliveryOnConnectionClose(connection) {
      if (connection.queueEntry && connection.queueEntry.callback) {
        try {
          connection.queueEntry.callback(new Error("Reached maximum number of retries after connection was closed"));
        } catch (E) {
          this.logger.error({
            err: E,
            tnx: "callback",
            messageId: connection.queueEntry.messageId,
            cid: connection.id
          }, "Callback error for #%s: %s", connection.id, E.message);
        }
        connection.queueEntry = false;
      }
    }
    _requeueEntryOnConnectionClose(connection) {
      connection.queueEntry.requeueAttempts = connection.queueEntry.requeueAttempts + 1;
      this.logger.debug({
        tnx: "pool",
        cid: connection.id,
        messageId: connection.queueEntry.messageId,
        action: "requeue"
      }, "Re-queued message <%s> for #%s. Attempt: #%s", connection.queueEntry.messageId, connection.id, connection.queueEntry.requeueAttempts);
      this._queue.unshift(connection.queueEntry);
      connection.queueEntry = false;
    }
    _continueProcessing() {
      if (this._closed) {
        this.close();
      } else {
        setTimeout(() => this._processMessages(), 100);
      }
    }
    _removeConnection(connection) {
      let index = this._connections.indexOf(connection);
      if (index !== -1) {
        this._connections.splice(index, 1);
      }
    }
    _checkRateLimit(callback) {
      if (!this._rateLimit.limit) {
        return callback();
      }
      let now = Date.now();
      if (this._rateLimit.counter < this._rateLimit.limit) {
        return callback();
      }
      this._rateLimit.waiting.push(callback);
      if (this._rateLimit.checkpoint <= now - this._rateLimit.delta) {
        return this._clearRateLimit();
      } else if (!this._rateLimit.timeout) {
        this._rateLimit.timeout = setTimeout(() => this._clearRateLimit(), this._rateLimit.delta - (now - this._rateLimit.checkpoint));
        this._rateLimit.checkpoint = now;
      }
    }
    _clearRateLimit() {
      clearTimeout(this._rateLimit.timeout);
      this._rateLimit.timeout = null;
      this._rateLimit.counter = 0;
      this._rateLimit.checkpoint = false;
      while (this._rateLimit.waiting.length) {
        let cb = this._rateLimit.waiting.shift();
        setImmediate(cb);
      }
    }
    isIdle() {
      return this.idling;
    }
    verify(callback) {
      let promise;
      if (!callback) {
        promise = new Promise((resolve, reject) => {
          callback = shared.callbackPromise(resolve, reject);
        });
      }
      let auth = new PoolResource(this).auth;
      this.getSocket(this.options, (err, socketOptions) => {
        if (err) {
          return callback(err);
        }
        let options = this.options;
        if (socketOptions && socketOptions.connection) {
          this.logger.info({
            tnx: "proxy",
            remoteAddress: socketOptions.connection.remoteAddress,
            remotePort: socketOptions.connection.remotePort,
            destHost: options.host || "",
            destPort: options.port || "",
            action: "connected"
          }, "Using proxied socket from %s:%s to %s:%s", socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || "", options.port || "");
          options = shared.assign(false, options);
          Object.keys(socketOptions).forEach((key) => {
            options[key] = socketOptions[key];
          });
        }
        let connection = new SMTPConnection(options);
        let returned = false;
        connection.once("error", (err2) => {
          if (returned) {
            return;
          }
          returned = true;
          connection.close();
          return callback(err2);
        });
        connection.once("end", () => {
          if (returned) {
            return;
          }
          returned = true;
          return callback(new Error("Connection closed"));
        });
        let finalize = () => {
          if (returned) {
            return;
          }
          returned = true;
          connection.quit();
          return callback(null, true);
        };
        connection.connect(() => {
          if (returned) {
            return;
          }
          if (auth && (connection.allowsAuth || options.forceAuth)) {
            connection.login(auth, (err2) => {
              if (returned) {
                return;
              }
              if (err2) {
                returned = true;
                connection.close();
                return callback(err2);
              }
              finalize();
            });
          } else if (!auth && connection.allowsAuth && options.forceAuth) {
            let err2 = new Error("Authentication info was not provided");
            err2.code = "NoAuth";
            returned = true;
            connection.close();
            return callback(err2);
          } else {
            finalize();
          }
        });
      });
      return promise;
    }
  }
  module.exports = SMTPPool;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/smtp-transport/index.js
var require_smtp_transport = __commonJS((exports, module) => {
  var EventEmitter = __require("events");
  var SMTPConnection = require_smtp_connection();
  var wellKnown = require_well_known();
  var shared = require_shared();
  var XOAuth2 = require_xoauth2();
  var packageData = require_package();

  class SMTPTransport extends EventEmitter {
    constructor(options) {
      super();
      options = options || {};
      if (typeof options === "string") {
        options = {
          url: options
        };
      }
      let urlData;
      let service = options.service;
      if (typeof options.getSocket === "function") {
        this.getSocket = options.getSocket;
      }
      if (options.url) {
        urlData = shared.parseConnectionUrl(options.url);
        service = service || urlData.service;
      }
      this.options = shared.assign(false, options, urlData, service && wellKnown(service));
      this.logger = shared.getLogger(this.options, {
        component: this.options.component || "smtp-transport"
      });
      let connection = new SMTPConnection(this.options);
      this.name = "SMTP";
      this.version = packageData.version + "[client:" + connection.version + "]";
      if (this.options.auth) {
        this.auth = this.getAuth({});
      }
    }
    getSocket(options, callback) {
      return setImmediate(() => callback(null, false));
    }
    getAuth(authOpts) {
      if (!authOpts) {
        return this.auth;
      }
      let hasAuth = false;
      let authData = {};
      if (this.options.auth && typeof this.options.auth === "object") {
        Object.keys(this.options.auth).forEach((key) => {
          hasAuth = true;
          authData[key] = this.options.auth[key];
        });
      }
      if (authOpts && typeof authOpts === "object") {
        Object.keys(authOpts).forEach((key) => {
          hasAuth = true;
          authData[key] = authOpts[key];
        });
      }
      if (!hasAuth) {
        return false;
      }
      switch ((authData.type || "").toString().toUpperCase()) {
        case "OAUTH2": {
          if (!authData.service && !authData.user) {
            return false;
          }
          let oauth2 = new XOAuth2(authData, this.logger);
          oauth2.provisionCallback = this.mailer && this.mailer.get("oauth2_provision_cb") || oauth2.provisionCallback;
          oauth2.on("token", (token) => this.mailer.emit("token", token));
          oauth2.on("error", (err) => this.emit("error", err));
          return {
            type: "OAUTH2",
            user: authData.user,
            oauth2,
            method: "XOAUTH2"
          };
        }
        default:
          return {
            type: (authData.type || "").toString().toUpperCase() || "LOGIN",
            user: authData.user,
            credentials: {
              user: authData.user || "",
              pass: authData.pass,
              options: authData.options
            },
            method: (authData.method || "").trim().toUpperCase() || this.options.authMethod || false
          };
      }
    }
    send(mail, callback) {
      this.getSocket(this.options, (err, socketOptions) => {
        if (err) {
          return callback(err);
        }
        let returned = false;
        let options = this.options;
        if (socketOptions && socketOptions.connection) {
          this.logger.info({
            tnx: "proxy",
            remoteAddress: socketOptions.connection.remoteAddress,
            remotePort: socketOptions.connection.remotePort,
            destHost: options.host || "",
            destPort: options.port || "",
            action: "connected"
          }, "Using proxied socket from %s:%s to %s:%s", socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || "", options.port || "");
          options = shared.assign(false, options);
          Object.keys(socketOptions).forEach((key) => {
            options[key] = socketOptions[key];
          });
        }
        let connection = new SMTPConnection(options);
        connection.once("error", (err2) => {
          if (returned) {
            return;
          }
          returned = true;
          connection.close();
          return callback(err2);
        });
        connection.once("end", () => {
          if (returned) {
            return;
          }
          let timer = setTimeout(() => {
            if (returned) {
              return;
            }
            returned = true;
            let err2 = new Error("Unexpected socket close");
            if (connection && connection._socket && connection._socket.upgrading) {
              err2.code = "ETLS";
            }
            callback(err2);
          }, 1000);
          try {
            timer.unref();
          } catch (E) {
          }
        });
        let sendMessage = () => {
          let envelope = mail.message.getEnvelope();
          let messageId = mail.message.messageId();
          let recipients = [].concat(envelope.to || []);
          if (recipients.length > 3) {
            recipients.push("...and " + recipients.splice(2).length + " more");
          }
          if (mail.data.dsn) {
            envelope.dsn = mail.data.dsn;
          }
          this.logger.info({
            tnx: "send",
            messageId
          }, "Sending message %s to <%s>", messageId, recipients.join(", "));
          connection.send(envelope, mail.message.createReadStream(), (err2, info) => {
            returned = true;
            connection.close();
            if (err2) {
              this.logger.error({
                err: err2,
                tnx: "send"
              }, "Send error for %s: %s", messageId, err2.message);
              return callback(err2);
            }
            info.envelope = {
              from: envelope.from,
              to: envelope.to
            };
            info.messageId = messageId;
            try {
              return callback(null, info);
            } catch (E) {
              this.logger.error({
                err: E,
                tnx: "callback"
              }, "Callback error for %s: %s", messageId, E.message);
            }
          });
        };
        connection.connect(() => {
          if (returned) {
            return;
          }
          let auth = this.getAuth(mail.data.auth);
          if (auth && (connection.allowsAuth || options.forceAuth)) {
            connection.login(auth, (err2) => {
              if (auth && auth !== this.auth && auth.oauth2) {
                auth.oauth2.removeAllListeners();
              }
              if (returned) {
                return;
              }
              if (err2) {
                returned = true;
                connection.close();
                return callback(err2);
              }
              sendMessage();
            });
          } else {
            sendMessage();
          }
        });
      });
    }
    verify(callback) {
      let promise;
      if (!callback) {
        promise = new Promise((resolve, reject) => {
          callback = shared.callbackPromise(resolve, reject);
        });
      }
      this.getSocket(this.options, (err, socketOptions) => {
        if (err) {
          return callback(err);
        }
        let options = this.options;
        if (socketOptions && socketOptions.connection) {
          this.logger.info({
            tnx: "proxy",
            remoteAddress: socketOptions.connection.remoteAddress,
            remotePort: socketOptions.connection.remotePort,
            destHost: options.host || "",
            destPort: options.port || "",
            action: "connected"
          }, "Using proxied socket from %s:%s to %s:%s", socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || "", options.port || "");
          options = shared.assign(false, options);
          Object.keys(socketOptions).forEach((key) => {
            options[key] = socketOptions[key];
          });
        }
        let connection = new SMTPConnection(options);
        let returned = false;
        connection.once("error", (err2) => {
          if (returned) {
            return;
          }
          returned = true;
          connection.close();
          return callback(err2);
        });
        connection.once("end", () => {
          if (returned) {
            return;
          }
          returned = true;
          return callback(new Error("Connection closed"));
        });
        let finalize = () => {
          if (returned) {
            return;
          }
          returned = true;
          connection.quit();
          return callback(null, true);
        };
        connection.connect(() => {
          if (returned) {
            return;
          }
          let authData = this.getAuth({});
          if (authData && (connection.allowsAuth || options.forceAuth)) {
            connection.login(authData, (err2) => {
              if (returned) {
                return;
              }
              if (err2) {
                returned = true;
                connection.close();
                return callback(err2);
              }
              finalize();
            });
          } else if (!authData && connection.allowsAuth && options.forceAuth) {
            let err2 = new Error("Authentication info was not provided");
            err2.code = "NoAuth";
            returned = true;
            connection.close();
            return callback(err2);
          } else {
            finalize();
          }
        });
      });
      return promise;
    }
    close() {
      if (this.auth && this.auth.oauth2) {
        this.auth.oauth2.removeAllListeners();
      }
      this.emit("close");
    }
  }
  module.exports = SMTPTransport;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/sendmail-transport/index.js
var require_sendmail_transport = __commonJS((exports, module) => {
  var spawn = __require("child_process").spawn;
  var packageData = require_package();
  var shared = require_shared();

  class SendmailTransport {
    constructor(options) {
      options = options || {};
      this._spawn = spawn;
      this.options = options || {};
      this.name = "Sendmail";
      this.version = packageData.version;
      this.path = "sendmail";
      this.args = false;
      this.winbreak = false;
      this.logger = shared.getLogger(this.options, {
        component: this.options.component || "sendmail"
      });
      if (options) {
        if (typeof options === "string") {
          this.path = options;
        } else if (typeof options === "object") {
          if (options.path) {
            this.path = options.path;
          }
          if (Array.isArray(options.args)) {
            this.args = options.args;
          }
          this.winbreak = ["win", "windows", "dos", "\r\n"].includes((options.newline || "").toString().toLowerCase());
        }
      }
    }
    send(mail, done) {
      mail.message.keepBcc = true;
      let envelope = mail.data.envelope || mail.message.getEnvelope();
      let messageId = mail.message.messageId();
      let args;
      let sendmail;
      let returned;
      const hasInvalidAddresses = [].concat(envelope.from || []).concat(envelope.to || []).some((addr) => /^-/.test(addr));
      if (hasInvalidAddresses) {
        return done(new Error("Can not send mail. Invalid envelope addresses."));
      }
      if (this.args) {
        args = ["-i"].concat(this.args).concat(envelope.to);
      } else {
        args = ["-i"].concat(envelope.from ? ["-f", envelope.from] : []).concat(envelope.to);
      }
      let callback = (err) => {
        if (returned) {
          return;
        }
        returned = true;
        if (typeof done === "function") {
          if (err) {
            return done(err);
          } else {
            return done(null, {
              envelope: mail.data.envelope || mail.message.getEnvelope(),
              messageId,
              response: "Messages queued for delivery"
            });
          }
        }
      };
      try {
        sendmail = this._spawn(this.path, args);
      } catch (E) {
        this.logger.error({
          err: E,
          tnx: "spawn",
          messageId
        }, "Error occurred while spawning sendmail. %s", E.message);
        return callback(E);
      }
      if (sendmail) {
        sendmail.on("error", (err) => {
          this.logger.error({
            err,
            tnx: "spawn",
            messageId
          }, "Error occurred when sending message %s. %s", messageId, err.message);
          callback(err);
        });
        sendmail.once("exit", (code) => {
          if (!code) {
            return callback();
          }
          let err;
          if (code === 127) {
            err = new Error("Sendmail command not found, process exited with code " + code);
          } else {
            err = new Error("Sendmail exited with code " + code);
          }
          this.logger.error({
            err,
            tnx: "stdin",
            messageId
          }, "Error sending message %s to sendmail. %s", messageId, err.message);
          callback(err);
        });
        sendmail.once("close", callback);
        sendmail.stdin.on("error", (err) => {
          this.logger.error({
            err,
            tnx: "stdin",
            messageId
          }, "Error occurred when piping message %s to sendmail. %s", messageId, err.message);
          callback(err);
        });
        let recipients = [].concat(envelope.to || []);
        if (recipients.length > 3) {
          recipients.push("...and " + recipients.splice(2).length + " more");
        }
        this.logger.info({
          tnx: "send",
          messageId
        }, "Sending message %s to <%s>", messageId, recipients.join(", "));
        let sourceStream = mail.message.createReadStream();
        sourceStream.once("error", (err) => {
          this.logger.error({
            err,
            tnx: "stdin",
            messageId
          }, "Error occurred when generating message %s. %s", messageId, err.message);
          sendmail.kill("SIGINT");
          callback(err);
        });
        sourceStream.pipe(sendmail.stdin);
      } else {
        return callback(new Error("sendmail was not found"));
      }
    }
  }
  module.exports = SendmailTransport;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/stream-transport/index.js
var require_stream_transport = __commonJS((exports, module) => {
  var packageData = require_package();
  var shared = require_shared();

  class StreamTransport {
    constructor(options) {
      options = options || {};
      this.options = options || {};
      this.name = "StreamTransport";
      this.version = packageData.version;
      this.logger = shared.getLogger(this.options, {
        component: this.options.component || "stream-transport"
      });
      this.winbreak = ["win", "windows", "dos", "\r\n"].includes((options.newline || "").toString().toLowerCase());
    }
    send(mail, done) {
      mail.message.keepBcc = true;
      let envelope = mail.data.envelope || mail.message.getEnvelope();
      let messageId = mail.message.messageId();
      let recipients = [].concat(envelope.to || []);
      if (recipients.length > 3) {
        recipients.push("...and " + recipients.splice(2).length + " more");
      }
      this.logger.info({
        tnx: "send",
        messageId
      }, "Sending message %s to <%s> using %s line breaks", messageId, recipients.join(", "), this.winbreak ? "<CR><LF>" : "<LF>");
      setImmediate(() => {
        let stream2;
        try {
          stream2 = mail.message.createReadStream();
        } catch (E) {
          this.logger.error({
            err: E,
            tnx: "send",
            messageId
          }, "Creating send stream failed for %s. %s", messageId, E.message);
          return done(E);
        }
        if (!this.options.buffer) {
          stream2.once("error", (err) => {
            this.logger.error({
              err,
              tnx: "send",
              messageId
            }, "Failed creating message for %s. %s", messageId, err.message);
          });
          return done(null, {
            envelope: mail.data.envelope || mail.message.getEnvelope(),
            messageId,
            message: stream2
          });
        }
        let chunks = [];
        let chunklen = 0;
        stream2.on("readable", () => {
          let chunk;
          while ((chunk = stream2.read()) !== null) {
            chunks.push(chunk);
            chunklen += chunk.length;
          }
        });
        stream2.once("error", (err) => {
          this.logger.error({
            err,
            tnx: "send",
            messageId
          }, "Failed creating message for %s. %s", messageId, err.message);
          return done(err);
        });
        stream2.on("end", () => done(null, {
          envelope: mail.data.envelope || mail.message.getEnvelope(),
          messageId,
          message: Buffer.concat(chunks, chunklen)
        }));
      });
    }
  }
  module.exports = StreamTransport;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/json-transport/index.js
var require_json_transport = __commonJS((exports, module) => {
  var packageData = require_package();
  var shared = require_shared();

  class JSONTransport {
    constructor(options) {
      options = options || {};
      this.options = options || {};
      this.name = "JSONTransport";
      this.version = packageData.version;
      this.logger = shared.getLogger(this.options, {
        component: this.options.component || "json-transport"
      });
    }
    send(mail, done) {
      mail.message.keepBcc = true;
      let envelope = mail.data.envelope || mail.message.getEnvelope();
      let messageId = mail.message.messageId();
      let recipients = [].concat(envelope.to || []);
      if (recipients.length > 3) {
        recipients.push("...and " + recipients.splice(2).length + " more");
      }
      this.logger.info({
        tnx: "send",
        messageId
      }, "Composing JSON structure of %s to <%s>", messageId, recipients.join(", "));
      setImmediate(() => {
        mail.normalize((err, data) => {
          if (err) {
            this.logger.error({
              err,
              tnx: "send",
              messageId
            }, "Failed building JSON structure for %s. %s", messageId, err.message);
            return done(err);
          }
          delete data.envelope;
          delete data.normalizedHeaders;
          return done(null, {
            envelope,
            messageId,
            message: this.options.skipEncoding ? data : JSON.stringify(data)
          });
        });
      });
    }
  }
  module.exports = JSONTransport;
});

// ../pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/ses-transport/index.js
var require_ses_transport = __commonJS((exports, module) => {
  var EventEmitter = __require("events");
  var packageData = require_package();
  var shared = require_shared();
  var LeWindows = require_le_windows();

  class SESTransport extends EventEmitter {
    constructor(options) {
      super();
      options = options || {};
      this.options = options || {};
      this.ses = this.options.SES;
      this.name = "SESTransport";
      this.version = packageData.version;
      this.logger = shared.getLogger(this.options, {
        component: this.options.component || "ses-transport"
      });
      this.maxConnections = Number(this.options.maxConnections) || Infinity;
      this.connections = 0;
      this.sendingRate = Number(this.options.sendingRate) || Infinity;
      this.sendingRateTTL = null;
      this.rateInterval = 1000;
      this.rateMessages = [];
      this.pending = [];
      this.idling = true;
      setImmediate(() => {
        if (this.idling) {
          this.emit("idle");
        }
      });
    }
    send(mail, callback) {
      if (this.connections >= this.maxConnections) {
        this.idling = false;
        return this.pending.push({
          mail,
          callback
        });
      }
      if (!this._checkSendingRate()) {
        this.idling = false;
        return this.pending.push({
          mail,
          callback
        });
      }
      this._send(mail, (...args) => {
        setImmediate(() => callback(...args));
        this._sent();
      });
    }
    _checkRatedQueue() {
      if (this.connections >= this.maxConnections || !this._checkSendingRate()) {
        return;
      }
      if (!this.pending.length) {
        if (!this.idling) {
          this.idling = true;
          this.emit("idle");
        }
        return;
      }
      let next = this.pending.shift();
      this._send(next.mail, (...args) => {
        setImmediate(() => next.callback(...args));
        this._sent();
      });
    }
    _checkSendingRate() {
      clearTimeout(this.sendingRateTTL);
      let now = Date.now();
      let oldest = false;
      for (let i = this.rateMessages.length - 1;i >= 0; i--) {
        if (this.rateMessages[i].ts >= now - this.rateInterval && (!oldest || this.rateMessages[i].ts < oldest)) {
          oldest = this.rateMessages[i].ts;
        }
        if (this.rateMessages[i].ts < now - this.rateInterval && !this.rateMessages[i].pending) {
          this.rateMessages.splice(i, 1);
        }
      }
      if (this.rateMessages.length < this.sendingRate) {
        return true;
      }
      let delay = Math.max(oldest + 1001, now + 20);
      this.sendingRateTTL = setTimeout(() => this._checkRatedQueue(), now - delay);
      try {
        this.sendingRateTTL.unref();
      } catch (E) {
      }
      return false;
    }
    _sent() {
      this.connections--;
      this._checkRatedQueue();
    }
    isIdle() {
      return this.idling;
    }
    _send(mail, callback) {
      let statObject = {
        ts: Date.now(),
        pending: true
      };
      this.connections++;
      this.rateMessages.push(statObject);
      let envelope = mail.data.envelope || mail.message.getEnvelope();
      let messageId = mail.message.messageId();
      let recipients = [].concat(envelope.to || []);
      if (recipients.length > 3) {
        recipients.push("...and " + recipients.splice(2).length + " more");
      }
      this.logger.info({
        tnx: "send",
        messageId
      }, "Sending message %s to <%s>", messageId, recipients.join(", "));
      let getRawMessage = (next) => {
        if (!mail.data._dkim) {
          mail.data._dkim = {};
        }
        if (mail.data._dkim.skipFields && typeof mail.data._dkim.skipFields === "string") {
          mail.data._dkim.skipFields += ":date:message-id";
        } else {
          mail.data._dkim.skipFields = "date:message-id";
        }
        let sourceStream = mail.message.createReadStream();
        let stream2 = sourceStream.pipe(new LeWindows);
        let chunks = [];
        let chunklen = 0;
        stream2.on("readable", () => {
          let chunk;
          while ((chunk = stream2.read()) !== null) {
            chunks.push(chunk);
            chunklen += chunk.length;
          }
        });
        sourceStream.once("error", (err) => stream2.emit("error", err));
        stream2.once("error", (err) => {
          next(err);
        });
        stream2.once("end", () => next(null, Buffer.concat(chunks, chunklen)));
      };
      setImmediate(() => getRawMessage((err, raw) => {
        if (err) {
          this.logger.error({
            err,
            tnx: "send",
            messageId
          }, "Failed creating message for %s. %s", messageId, err.message);
          statObject.pending = false;
          return callback(err);
        }
        let sesMessage = {
          RawMessage: {
            Data: raw
          },
          Source: envelope.from,
          Destinations: envelope.to
        };
        Object.keys(mail.data.ses || {}).forEach((key) => {
          sesMessage[key] = mail.data.ses[key];
        });
        let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};
        let aws = this.ses.aws || {};
        let getRegion = (cb) => {
          if (ses.config && typeof ses.config.region === "function") {
            return ses.config.region().then((region) => cb(null, region)).catch((err2) => cb(err2));
          }
          return cb(null, ses.config && ses.config.region || "us-east-1");
        };
        getRegion((err2, region) => {
          if (err2 || !region) {
            region = "us-east-1";
          }
          let sendPromise;
          if (typeof ses.send === "function" && aws.SendRawEmailCommand) {
            sendPromise = ses.send(new aws.SendRawEmailCommand(sesMessage));
          } else {
            sendPromise = ses.sendRawEmail(sesMessage).promise();
          }
          sendPromise.then((data) => {
            if (region === "us-east-1") {
              region = "email";
            }
            statObject.pending = false;
            callback(null, {
              envelope: {
                from: envelope.from,
                to: envelope.to
              },
              messageId: "<" + data.MessageId + (!/@/.test(data.MessageId) ? "@" + region + ".amazonses.com" : "") + ">",
              response: data.MessageId,
              raw
            });
          }).catch((err3) => {
            this.logger.error({
              err: err3,
              tnx: "send"
            }, "Send error for %s: %s", messageId, err3.message);
            statObject.pending = false;
            callback(err3);
          });
        });
      }));
    }
    verify(callback) {
      let promise;
      let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};
      let aws = this.ses.aws || {};
      const sesMessage = {
        RawMessage: {
          Data: "From: invalid@invalid\r\nTo: invalid@invalid\r\n Subject: Invalid\r\n\r\nInvalid"
        },
        Source: "invalid@invalid",
        Destinations: ["invalid@invalid"]
      };
      if (!callback) {
        promise = new Promise((resolve, reject) => {
          callback = shared.callbackPromise(resolve, reject);
        });
      }
      const cb = (err) => {
        if (err && (err.code || err.Code) !== "InvalidParameterValue") {
          return callback(err);
        }
        return callback(null, true);
      };
      if (typeof ses.send === "function" && aws.SendRawEmailCommand) {
        sesMessage.RawMessage.Data = Buffer.from(sesMessage.RawMessage.Data);
        ses.send(new aws.SendRawEmailCommand(sesMessage), cb);
      } else {
        ses.sendRawEmail(sesMessage, cb);
      }
      return promise;
    }
  }
  module.exports = SESTransport;
});

// /home/max/tanso/pokemon-showdown/node_modules/nodemailer/lib/nodemailer.js
var require_nodemailer = __commonJS((exports, module) => {
  var Mailer = require_mailer();
  var shared = require_shared();
  var SMTPPool = require_smtp_pool();
  var SMTPTransport = require_smtp_transport();
  var SendmailTransport = require_sendmail_transport();
  var StreamTransport = require_stream_transport();
  var JSONTransport = require_json_transport();
  var SESTransport = require_ses_transport();
  var nmfetch = require_fetch();
  var packageData = require_package();
  var ETHEREAL_API = (process.env.ETHEREAL_API || "https://api.nodemailer.com").replace(/\/+$/, "");
  var ETHEREAL_WEB = (process.env.ETHEREAL_WEB || "https://ethereal.email").replace(/\/+$/, "");
  var ETHEREAL_API_KEY = (process.env.ETHEREAL_API_KEY || "").replace(/\s*/g, "") || null;
  var ETHEREAL_CACHE = ["true", "yes", "y", "1"].includes((process.env.ETHEREAL_CACHE || "yes").toString().trim().toLowerCase());
  var testAccount = false;
  exports.createTransport = function(transporter, defaults) {
    let urlConfig;
    let options;
    let mailer;
    if (typeof transporter === "object" && typeof transporter.send !== "function" || typeof transporter === "string" && /^(smtps?|direct):/i.test(transporter)) {
      if (urlConfig = typeof transporter === "string" ? transporter : transporter.url) {
        options = shared.parseConnectionUrl(urlConfig);
      } else {
        options = transporter;
      }
      if (options.pool) {
        transporter = new SMTPPool(options);
      } else if (options.sendmail) {
        transporter = new SendmailTransport(options);
      } else if (options.streamTransport) {
        transporter = new StreamTransport(options);
      } else if (options.jsonTransport) {
        transporter = new JSONTransport(options);
      } else if (options.SES) {
        transporter = new SESTransport(options);
      } else {
        transporter = new SMTPTransport(options);
      }
    }
    mailer = new Mailer(transporter, options, defaults);
    return mailer;
  };
  exports.createTestAccount = function(apiUrl, callback) {
    let promise;
    if (!callback && typeof apiUrl === "function") {
      callback = apiUrl;
      apiUrl = false;
    }
    if (!callback) {
      promise = new Promise((resolve, reject) => {
        callback = shared.callbackPromise(resolve, reject);
      });
    }
    if (ETHEREAL_CACHE && testAccount) {
      setImmediate(() => callback(null, testAccount));
      return promise;
    }
    apiUrl = apiUrl || ETHEREAL_API;
    let chunks = [];
    let chunklen = 0;
    let requestHeaders = {};
    let requestBody = {
      requestor: packageData.name,
      version: packageData.version
    };
    if (ETHEREAL_API_KEY) {
      requestHeaders.Authorization = "Bearer " + ETHEREAL_API_KEY;
    }
    let req = nmfetch(apiUrl + "/user", {
      contentType: "application/json",
      method: "POST",
      headers: requestHeaders,
      body: Buffer.from(JSON.stringify(requestBody))
    });
    req.on("readable", () => {
      let chunk;
      while ((chunk = req.read()) !== null) {
        chunks.push(chunk);
        chunklen += chunk.length;
      }
    });
    req.once("error", (err) => callback(err));
    req.once("end", () => {
      let res = Buffer.concat(chunks, chunklen);
      let data;
      let err;
      try {
        data = JSON.parse(res.toString());
      } catch (E) {
        err = E;
      }
      if (err) {
        return callback(err);
      }
      if (data.status !== "success" || data.error) {
        return callback(new Error(data.error || "Request failed"));
      }
      delete data.status;
      testAccount = data;
      callback(null, testAccount);
    });
    return promise;
  };
  exports.getTestMessageUrl = function(info) {
    if (!info || !info.response) {
      return false;
    }
    let infoProps = new Map;
    info.response.replace(/\[([^\]]+)\]$/, (m, props) => {
      props.replace(/\b([A-Z0-9]+)=([^\s]+)/g, (m2, key, value) => {
        infoProps.set(key, value);
      });
    });
    if (infoProps.has("STATUS") && infoProps.has("MSGID")) {
      return (testAccount.web || ETHEREAL_WEB) + "/message/" + infoProps.get("MSGID");
    }
    return false;
  };
});

// ../pokemon-showdown/dist/lib/crashlogger.js
var require_crashlogger = __commonJS((exports, module) => {
  function crashlogger(error, description, data = null, emailConfig = null) {
    const datenow = Date.now();
    let stack = (typeof error === "string" ? error : error?.stack) || "";
    if (data) {
      stack += `

Additional information:
`;
      for (const k in data) {
        stack += `  ${k} = ${data[k]}
`;
      }
    }
    console.error(`
CRASH: ${stack}
`);
    const out = fs.createWriteStream(logPath, { flags: "a" });
    out.on("open", () => {
      out.write(`
${stack}
`);
      out.end();
    }).on("error", (err) => {
      console.error(`
SUBCRASH: ${err.stack}
`);
    });
    const emailOpts = emailConfig || global.Config?.crashguardemail;
    if (emailOpts && datenow - lastCrashLog > CRASH_EMAIL_THROTTLE) {
      lastCrashLog = datenow;
      if (!transport) {
        try {
          __require.resolve("/home/max/tanso/pokemon-showdown/node_modules/.pnpm/nodemailer@6.9.15/node_modules/nodemailer/lib/nodemailer.js");
        } catch {
          throw new Error("nodemailer is not installed, but it is required if Config.crashguardemail is configured! Run npm install --no-save nodemailer and restart the server.");
        }
      }
      let text = `${description} crashed `;
      if (transport) {
        text += `again with this stack trace:
${stack}`;
      } else {
        try {
          transport = require_nodemailer().createTransport(emailOpts.options);
        } catch {
          throw new Error("Failed to start nodemailer; are you sure you've configured Config.crashguardemail correctly?");
        }
        text += `with this stack trace:
${stack}`;
      }
      transport.sendMail({
        from: emailOpts.from,
        to: emailOpts.to,
        subject: emailOpts.subject,
        text
      }, (err) => {
        if (err)
          console.error(`Error sending email: ${err}`);
      });
    }
    return null;
  }
  var __dirname = "/home/max/tanso/pokemon-showdown/dist/lib";
  var __create2 = Object.create;
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __getProtoOf2 = Object.getPrototypeOf;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var crashlogger_exports = {};
  __export2(crashlogger_exports, {
    crashlogger: () => crashlogger
  });
  module.exports = __toCommonJS2(crashlogger_exports);
  var fs = __toESM2(__require("fs"));
  var path = __toESM2(__require("path"));
  var CRASH_EMAIL_THROTTLE = 5 * 60 * 1000;
  var logPath = path.resolve(__dirname, "../", __dirname.includes(`${path.sep}dist${path.sep}`) ? ".." : "", path.join(global.Config?.logsdir || "logs", "errors.txt"));
  var lastCrashLog = 0;
  var transport;
});

// ../pokemon-showdown/dist/lib/streams.js
var require_streams = __commonJS((exports, module) => {
  function readAll(nodeStream, encoding) {
    return new ReadStream(nodeStream).readAll(encoding);
  }
  function stdin() {
    return new ReadStream(process.stdin);
  }
  function stdout() {
    return new WriteStream(process.stdout);
  }
  function stdpipe(stream2) {
    const promises = [];
    if (stream2.pipeTo) {
      promises.push(stream2.pipeTo(stdout()));
    }
    if (stream2.write) {
      promises.push(stdin().pipeTo(stream2));
    }
    return Promise.all(promises);
  }
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var streams_exports = {};
  __export2(streams_exports, {
    ObjectReadStream: () => ObjectReadStream,
    ObjectReadWriteStream: () => ObjectReadWriteStream,
    ObjectWriteStream: () => ObjectWriteStream,
    ReadStream: () => ReadStream,
    ReadWriteStream: () => ReadWriteStream,
    WriteStream: () => WriteStream,
    readAll: () => readAll,
    stdin: () => stdin,
    stdout: () => stdout,
    stdpipe: () => stdpipe
  });
  module.exports = __toCommonJS2(streams_exports);
  var BUF_SIZE = 65536 * 4;

  class ReadStream {
    constructor(optionsOrStreamLike = {}) {
      this.buf = Buffer.allocUnsafe(BUF_SIZE);
      this.bufStart = 0;
      this.bufEnd = 0;
      this.bufCapacity = BUF_SIZE;
      this.readSize = 0;
      this.atEOF = false;
      this.errorBuf = null;
      this.encoding = "utf8";
      this.isReadable = true;
      this.isWritable = false;
      this.nodeReadableStream = null;
      this.nextPushResolver = null;
      this.nextPush = new Promise((resolve) => {
        this.nextPushResolver = resolve;
      });
      this.awaitingPush = false;
      let options;
      if (typeof optionsOrStreamLike === "string") {
        options = { buffer: optionsOrStreamLike };
      } else if (optionsOrStreamLike instanceof Buffer) {
        options = { buffer: optionsOrStreamLike };
      } else if (typeof optionsOrStreamLike._readableState === "object") {
        options = { nodeStream: optionsOrStreamLike };
      } else {
        options = optionsOrStreamLike;
      }
      if (options.nodeStream) {
        const nodeStream = options.nodeStream;
        this.nodeReadableStream = nodeStream;
        nodeStream.on("data", (data) => {
          this.push(data);
        });
        nodeStream.on("end", () => {
          this.pushEnd();
        });
        options.read = function(unusedBytes) {
          this.nodeReadableStream.resume();
        };
        options.pause = function(unusedBytes) {
          this.nodeReadableStream.pause();
        };
      }
      if (options.read)
        this._read = options.read;
      if (options.pause)
        this._pause = options.pause;
      if (options.destroy)
        this._destroy = options.destroy;
      if (options.encoding)
        this.encoding = options.encoding;
      if (options.buffer !== undefined) {
        this.push(options.buffer);
        this.pushEnd();
      }
    }
    get bufSize() {
      return this.bufEnd - this.bufStart;
    }
    moveBuf() {
      if (this.bufStart !== this.bufEnd) {
        this.buf.copy(this.buf, 0, this.bufStart, this.bufEnd);
      }
      this.bufEnd -= this.bufStart;
      this.bufStart = 0;
    }
    expandBuf(newCapacity = this.bufCapacity * 2) {
      const newBuf = Buffer.allocUnsafe(newCapacity);
      this.buf.copy(newBuf, 0, this.bufStart, this.bufEnd);
      this.bufEnd -= this.bufStart;
      this.bufStart = 0;
      this.bufCapacity = newCapacity;
      this.buf = newBuf;
    }
    ensureCapacity(additionalCapacity) {
      if (this.bufEnd + additionalCapacity <= this.bufCapacity)
        return;
      const capacity = this.bufEnd - this.bufStart + additionalCapacity;
      if (capacity <= this.bufCapacity) {
        return this.moveBuf();
      }
      let newCapacity = this.bufCapacity * 2;
      while (newCapacity < capacity)
        newCapacity *= 2;
      this.expandBuf(newCapacity);
    }
    push(buf, encoding = this.encoding) {
      let size;
      if (this.atEOF)
        return;
      if (typeof buf === "string") {
        size = Buffer.byteLength(buf, encoding);
        this.ensureCapacity(size);
        this.buf.write(buf, this.bufEnd);
      } else {
        size = buf.length;
        this.ensureCapacity(size);
        buf.copy(this.buf, this.bufEnd);
      }
      this.bufEnd += size;
      if (this.bufSize > this.readSize && size * 2 < this.bufSize)
        this._pause();
      this.resolvePush();
    }
    pushEnd() {
      this.atEOF = true;
      this.resolvePush();
    }
    pushError(err, recoverable) {
      if (!this.errorBuf)
        this.errorBuf = [];
      this.errorBuf.push(err);
      if (!recoverable)
        this.atEOF = true;
      this.resolvePush();
    }
    readError() {
      if (this.errorBuf) {
        const err = this.errorBuf.shift();
        if (!this.errorBuf.length)
          this.errorBuf = null;
        throw err;
      }
    }
    peekError() {
      if (this.errorBuf) {
        throw this.errorBuf[0];
      }
    }
    resolvePush() {
      if (!this.nextPushResolver)
        throw new Error(`Push after end of read stream`);
      this.nextPushResolver();
      if (this.atEOF) {
        this.nextPushResolver = null;
        return;
      }
      this.nextPush = new Promise((resolve) => {
        this.nextPushResolver = resolve;
      });
    }
    _read(size = 0) {
      throw new Error(`ReadStream needs to be subclassed and the _read function needs to be implemented.`);
    }
    _destroy() {
    }
    _pause() {
    }
    loadIntoBuffer(byteCount = null, readError) {
      this[readError ? "readError" : "peekError"]();
      if (byteCount === 0)
        return;
      this.readSize = Math.max(byteCount === true ? this.bufSize + 1 : byteCount === null ? 1 : byteCount, this.readSize);
      if (!this.errorBuf && !this.atEOF && this.bufSize < this.readSize) {
        let bytes = this.readSize - this.bufSize;
        if (bytes === Infinity || byteCount === null || byteCount === true)
          bytes = null;
        return this.doLoad(bytes, readError);
      }
    }
    async doLoad(chunkSize, readError) {
      while (!this.errorBuf && !this.atEOF && this.bufSize < this.readSize) {
        if (chunkSize)
          this._read(chunkSize);
        else
          this._read();
        await this.nextPush;
        this[readError ? "readError" : "peekError"]();
      }
    }
    peek(byteCount = null, encoding = this.encoding) {
      if (typeof byteCount === "string") {
        encoding = byteCount;
        byteCount = null;
      }
      const maybeLoad = this.loadIntoBuffer(byteCount);
      if (maybeLoad)
        return maybeLoad.then(() => this.peek(byteCount, encoding));
      if (!this.bufSize && byteCount !== 0)
        return null;
      if (byteCount === null)
        return this.buf.toString(encoding, this.bufStart, this.bufEnd);
      if (byteCount > this.bufSize)
        byteCount = this.bufSize;
      return this.buf.toString(encoding, this.bufStart, this.bufStart + byteCount);
    }
    peekBuffer(byteCount = null) {
      const maybeLoad = this.loadIntoBuffer(byteCount);
      if (maybeLoad)
        return maybeLoad.then(() => this.peekBuffer(byteCount));
      if (!this.bufSize && byteCount !== 0)
        return null;
      if (byteCount === null)
        return this.buf.slice(this.bufStart, this.bufEnd);
      if (byteCount > this.bufSize)
        byteCount = this.bufSize;
      return this.buf.slice(this.bufStart, this.bufStart + byteCount);
    }
    async read(byteCount = null, encoding = this.encoding) {
      if (typeof byteCount === "string") {
        encoding = byteCount;
        byteCount = null;
      }
      await this.loadIntoBuffer(byteCount, true);
      const out = this.peek(byteCount, encoding);
      if (out && typeof out !== "string") {
        throw new Error("Race condition; you must not read before a previous read has completed");
      }
      if (byteCount === null || byteCount >= this.bufSize) {
        this.bufStart = 0;
        this.bufEnd = 0;
        this.readSize = 0;
      } else {
        this.bufStart += byteCount;
        this.readSize -= byteCount;
      }
      return out;
    }
    byChunk(byteCount) {
      const byteStream = this;
      return new ObjectReadStream({
        async read() {
          const next = await byteStream.read(byteCount);
          if (typeof next === "string")
            this.push(next);
          else
            this.pushEnd();
        }
      });
    }
    byLine() {
      const byteStream = this;
      return new ObjectReadStream({
        async read() {
          const next = await byteStream.readLine();
          if (typeof next === "string")
            this.push(next);
          else
            this.pushEnd();
        }
      });
    }
    delimitedBy(delimiter) {
      const byteStream = this;
      return new ObjectReadStream({
        async read() {
          const next = await byteStream.readDelimitedBy(delimiter);
          if (typeof next === "string")
            this.push(next);
          else
            this.pushEnd();
        }
      });
    }
    async readBuffer(byteCount = null) {
      await this.loadIntoBuffer(byteCount, true);
      const out = this.peekBuffer(byteCount);
      if (out && out.then) {
        throw new Error("Race condition; you must not read before a previous read has completed");
      }
      if (byteCount === null || byteCount >= this.bufSize) {
        this.bufStart = 0;
        this.bufEnd = 0;
      } else {
        this.bufStart += byteCount;
      }
      return out;
    }
    async indexOf(symbol, encoding = this.encoding) {
      let idx = this.buf.indexOf(symbol, this.bufStart, encoding);
      while (!this.atEOF && (idx >= this.bufEnd || idx < 0)) {
        await this.loadIntoBuffer(true);
        idx = this.buf.indexOf(symbol, this.bufStart, encoding);
      }
      if (idx >= this.bufEnd)
        return -1;
      return idx - this.bufStart;
    }
    async readAll(encoding = this.encoding) {
      return await this.read(Infinity, encoding) || "";
    }
    peekAll(encoding = this.encoding) {
      return this.peek(Infinity, encoding);
    }
    async readDelimitedBy(symbol, encoding = this.encoding) {
      if (this.atEOF && !this.bufSize)
        return null;
      const idx = await this.indexOf(symbol, encoding);
      if (idx < 0) {
        return this.readAll(encoding);
      } else {
        const out = await this.read(idx, encoding);
        this.bufStart += Buffer.byteLength(symbol, "utf8");
        return out;
      }
    }
    async readLine(encoding = this.encoding) {
      if (!encoding)
        throw new Error(`readLine must have an encoding`);
      let line = await this.readDelimitedBy("\n", encoding);
      if (line?.endsWith("\r"))
        line = line.slice(0, -1);
      return line;
    }
    destroy() {
      this.atEOF = true;
      this.bufStart = 0;
      this.bufEnd = 0;
      if (this.nextPushResolver)
        this.resolvePush();
      return this._destroy();
    }
    async next(byteCount = null) {
      const value = await this.read(byteCount);
      return { value, done: value === null };
    }
    async pipeTo(outStream, options = {}) {
      let value, done;
      while ({ value, done } = await this.next(), !done) {
        await outStream.write(value);
      }
      if (!options.noEnd)
        return outStream.writeEnd();
    }
  }

  class WriteStream {
    constructor(optionsOrStream = {}) {
      this.isReadable = false;
      this.isWritable = true;
      this.encoding = "utf8";
      this.nodeWritableStream = null;
      this.drainListeners = [];
      let options = optionsOrStream;
      if (options._writableState) {
        options = { nodeStream: optionsOrStream };
      }
      if (options.nodeStream) {
        const nodeStream = options.nodeStream;
        this.nodeWritableStream = nodeStream;
        options.write = function(data) {
          const result = this.nodeWritableStream.write(data);
          if (result !== false)
            return;
          if (!this.drainListeners.length) {
            this.nodeWritableStream.once("drain", () => {
              for (const listener of this.drainListeners)
                listener();
              this.drainListeners = [];
            });
          }
          return new Promise((resolve) => {
            this.drainListeners.push(resolve);
          });
        };
        if (nodeStream !== process.stdout && nodeStream !== process.stderr) {
          options.writeEnd = function() {
            return new Promise((resolve) => {
              this.nodeWritableStream.end(() => resolve());
            });
          };
        }
      }
      if (options.write)
        this._write = options.write;
      if (options.writeEnd)
        this._writeEnd = options.writeEnd;
    }
    write(chunk) {
      return this._write(chunk);
    }
    writeLine(chunk) {
      if (chunk === null) {
        return this.writeEnd();
      }
      return this.write(chunk + "\n");
    }
    _write(chunk) {
      throw new Error(`WriteStream needs to be subclassed and the _write function needs to be implemented.`);
    }
    _writeEnd() {
    }
    async writeEnd(chunk) {
      if (chunk) {
        await this.write(chunk);
      }
      return this._writeEnd();
    }
  }

  class ReadWriteStream extends ReadStream {
    constructor(options = {}) {
      super(options);
      this.isReadable = true;
      this.isWritable = true;
      this.nodeWritableStream = null;
      this.drainListeners = [];
      if (options.nodeStream) {
        const nodeStream = options.nodeStream;
        this.nodeWritableStream = nodeStream;
        options.write = function(data) {
          const result = this.nodeWritableStream.write(data);
          if (result !== false)
            return;
          if (!this.drainListeners.length) {
            this.nodeWritableStream.once("drain", () => {
              for (const listener of this.drainListeners)
                listener();
              this.drainListeners = [];
            });
          }
          return new Promise((resolve) => {
            this.drainListeners.push(resolve);
          });
        };
        if (nodeStream !== process.stdout && nodeStream !== process.stderr) {
          options.writeEnd = function() {
            return new Promise((resolve) => {
              this.nodeWritableStream.end(() => resolve());
            });
          };
        }
      }
      if (options.write)
        this._write = options.write;
      if (options.writeEnd)
        this._writeEnd = options.writeEnd;
    }
    write(chunk) {
      return this._write(chunk);
    }
    writeLine(chunk) {
      return this.write(chunk + "\n");
    }
    _write(chunk) {
      throw new Error(`WriteStream needs to be subclassed and the _write function needs to be implemented.`);
    }
    _read(size) {
    }
    _writeEnd() {
    }
    async writeEnd() {
      return this._writeEnd();
    }
  }

  class ObjectReadStream {
    constructor(optionsOrStreamLike = {}) {
      this.buf = [];
      this.readSize = 0;
      this.atEOF = false;
      this.errorBuf = null;
      this.isReadable = true;
      this.isWritable = false;
      this.nodeReadableStream = null;
      this.nextPushResolver = null;
      this.nextPush = new Promise((resolve) => {
        this.nextPushResolver = resolve;
      });
      this.awaitingPush = false;
      let options;
      if (Array.isArray(optionsOrStreamLike)) {
        options = { buffer: optionsOrStreamLike };
      } else if (typeof optionsOrStreamLike._readableState === "object") {
        options = { nodeStream: optionsOrStreamLike };
      } else {
        options = optionsOrStreamLike;
      }
      if (options.nodeStream) {
        const nodeStream = options.nodeStream;
        this.nodeReadableStream = nodeStream;
        nodeStream.on("data", (data) => {
          this.push(data);
        });
        nodeStream.on("end", () => {
          this.pushEnd();
        });
        options = {
          read() {
            this.nodeReadableStream.resume();
          },
          pause() {
            this.nodeReadableStream.pause();
          }
        };
      }
      if (options.read)
        this._read = options.read;
      if (options.pause)
        this._pause = options.pause;
      if (options.destroy)
        this._destroy = options.destroy;
      if (options.buffer !== undefined) {
        this.buf = options.buffer.slice();
        this.pushEnd();
      }
    }
    push(elem) {
      if (this.atEOF)
        return;
      this.buf.push(elem);
      if (this.buf.length > this.readSize && this.buf.length >= 16)
        this._pause();
      this.resolvePush();
    }
    pushEnd() {
      this.atEOF = true;
      this.resolvePush();
    }
    pushError(err, recoverable) {
      if (!this.errorBuf)
        this.errorBuf = [];
      this.errorBuf.push(err);
      if (!recoverable)
        this.atEOF = true;
      this.resolvePush();
    }
    readError() {
      if (this.errorBuf) {
        const err = this.errorBuf.shift();
        if (!this.errorBuf.length)
          this.errorBuf = null;
        throw err;
      }
    }
    peekError() {
      if (this.errorBuf) {
        throw this.errorBuf[0];
      }
    }
    resolvePush() {
      if (!this.nextPushResolver)
        throw new Error(`Push after end of read stream`);
      this.nextPushResolver();
      if (this.atEOF) {
        this.nextPushResolver = null;
        return;
      }
      this.nextPush = new Promise((resolve) => {
        this.nextPushResolver = resolve;
      });
    }
    _read(size = 0) {
      throw new Error(`ReadStream needs to be subclassed and the _read function needs to be implemented.`);
    }
    _destroy() {
    }
    _pause() {
    }
    async loadIntoBuffer(count = 1, readError) {
      this[readError ? "readError" : "peekError"]();
      if (count === true)
        count = this.buf.length + 1;
      if (this.buf.length >= count)
        return;
      this.readSize = Math.max(count, this.readSize);
      while (!this.errorBuf && !this.atEOF && this.buf.length < this.readSize) {
        const readResult = this._read();
        if (readResult) {
          await readResult;
        } else {
          await this.nextPush;
        }
        this[readError ? "readError" : "peekError"]();
      }
    }
    async peek() {
      if (this.buf.length)
        return this.buf[0];
      await this.loadIntoBuffer();
      return this.buf[0];
    }
    async read() {
      if (this.buf.length)
        return this.buf.shift();
      await this.loadIntoBuffer(1, true);
      if (!this.buf.length)
        return null;
      return this.buf.shift();
    }
    async peekArray(count = null) {
      await this.loadIntoBuffer(count === null ? 1 : count);
      return this.buf.slice(0, count === null ? Infinity : count);
    }
    async readArray(count = null) {
      await this.loadIntoBuffer(count === null ? 1 : count, true);
      const out = this.buf.slice(0, count === null ? Infinity : count);
      this.buf = this.buf.slice(out.length);
      return out;
    }
    async readAll() {
      await this.loadIntoBuffer(Infinity, true);
      const out = this.buf;
      this.buf = [];
      return out;
    }
    async peekAll() {
      await this.loadIntoBuffer(Infinity);
      return this.buf.slice();
    }
    destroy() {
      this.atEOF = true;
      this.buf = [];
      this.resolvePush();
      return this._destroy();
    }
    [Symbol.asyncIterator]() {
      return this;
    }
    async next() {
      if (this.buf.length)
        return { value: this.buf.shift(), done: false };
      await this.loadIntoBuffer(1, true);
      if (!this.buf.length)
        return { value: undefined, done: true };
      return { value: this.buf.shift(), done: false };
    }
    async pipeTo(outStream, options = {}) {
      let value, done;
      while ({ value, done } = await this.next(), !done) {
        await outStream.write(value);
      }
      if (!options.noEnd)
        return outStream.writeEnd();
    }
  }

  class ObjectWriteStream {
    constructor(optionsOrStream = {}) {
      this.isReadable = false;
      this.isWritable = true;
      this.nodeWritableStream = null;
      let options = optionsOrStream;
      if (options._writableState) {
        options = { nodeStream: optionsOrStream };
      }
      if (options.nodeStream) {
        const nodeStream = options.nodeStream;
        this.nodeWritableStream = nodeStream;
        options.write = function(data) {
          const result = this.nodeWritableStream.write(data);
          if (result === false) {
            return new Promise((resolve) => {
              this.nodeWritableStream.once("drain", () => {
                resolve();
              });
            });
          }
        };
        if (nodeStream !== process.stdout && nodeStream !== process.stderr) {
          options.writeEnd = function() {
            return new Promise((resolve) => {
              this.nodeWritableStream.end(() => resolve());
            });
          };
        }
      }
      if (options.write)
        this._write = options.write;
      if (options.writeEnd)
        this._writeEnd = options.writeEnd;
    }
    write(elem) {
      if (elem === null) {
        return this.writeEnd();
      }
      return this._write(elem);
    }
    _write(elem) {
      throw new Error(`WriteStream needs to be subclassed and the _write function needs to be implemented.`);
    }
    _writeEnd() {
    }
    async writeEnd(elem) {
      if (elem !== undefined) {
        await this.write(elem);
      }
      return this._writeEnd();
    }
  }

  class ObjectReadWriteStream extends ObjectReadStream {
    constructor(options = {}) {
      super(options);
      this.isReadable = true;
      this.isWritable = true;
      this.nodeWritableStream = null;
      if (options.write)
        this._write = options.write;
      if (options.writeEnd)
        this._writeEnd = options.writeEnd;
    }
    write(elem) {
      return this._write(elem);
    }
    _write(elem) {
      throw new Error(`WriteStream needs to be subclassed and the _write function needs to be implemented.`);
    }
    _read() {
    }
    _writeEnd() {
    }
    async writeEnd() {
      return this._writeEnd();
    }
  }
});

// ../pokemon-showdown/dist/lib/fs.js
var require_fs = __commonJS((exports, module) => {
  function getFs(path) {
    return new FSPath(path);
  }
  var __dirname = "/home/max/tanso/pokemon-showdown/dist/lib";
  var __create2 = Object.create;
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __getProtoOf2 = Object.getPrototypeOf;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var fs_exports = {};
  __export2(fs_exports, {
    FS: () => FS,
    FSPath: () => FSPath
  });
  module.exports = __toCommonJS2(fs_exports);
  var fs = __toESM2(__require("fs"));
  var pathModule = __toESM2(__require("path"));
  var import_streams = require_streams();
  var DIST = `${pathModule.sep}dist${pathModule.sep}`;
  var ROOT_PATH = pathModule.resolve(__dirname, __dirname.includes(DIST) ? ".." : "", "..");
  if (!global.__fsState) {
    global.__fsState = {
      pendingUpdates: /* @__PURE__ */ new Map
    };
  }

  class FSPath {
    constructor(path) {
      this.path = pathModule.resolve(ROOT_PATH, path);
    }
    parentDir() {
      return new FSPath(pathModule.dirname(this.path));
    }
    read(options = "utf8") {
      if (typeof options !== "string" && options.encoding === undefined) {
        options.encoding = "utf8";
      }
      return new Promise((resolve, reject) => {
        fs.readFile(this.path, options, (err, data) => {
          err ? reject(err) : resolve(data);
        });
      });
    }
    readSync(options = "utf8") {
      if (typeof options !== "string" && options.encoding === undefined) {
        options.encoding = "utf8";
      }
      return fs.readFileSync(this.path, options);
    }
    readBuffer(options = {}) {
      return new Promise((resolve, reject) => {
        fs.readFile(this.path, options, (err, data) => {
          err ? reject(err) : resolve(data);
        });
      });
    }
    readBufferSync(options = {}) {
      return fs.readFileSync(this.path, options);
    }
    exists() {
      return new Promise((resolve) => {
        fs.exists(this.path, (exists) => {
          resolve(exists);
        });
      });
    }
    existsSync() {
      return fs.existsSync(this.path);
    }
    readIfExists() {
      return new Promise((resolve, reject) => {
        fs.readFile(this.path, "utf8", (err, data) => {
          if (err && err.code === "ENOENT")
            return resolve("");
          err ? reject(err) : resolve(data);
        });
      });
    }
    readIfExistsSync() {
      try {
        return fs.readFileSync(this.path, "utf8");
      } catch (err) {
        if (err.code !== "ENOENT")
          throw err;
      }
      return "";
    }
    write(data, options = {}) {
      if (global.Config?.nofswriting)
        return Promise.resolve();
      return new Promise((resolve, reject) => {
        fs.writeFile(this.path, data, options, (err) => {
          err ? reject(err) : resolve();
        });
      });
    }
    writeSync(data, options = {}) {
      if (global.Config?.nofswriting)
        return;
      return fs.writeFileSync(this.path, data, options);
    }
    async safeWrite(data, options = {}) {
      await FS(this.path + ".NEW").write(data, options);
      await FS(this.path + ".NEW").rename(this.path);
    }
    safeWriteSync(data, options = {}) {
      FS(this.path + ".NEW").writeSync(data, options);
      FS(this.path + ".NEW").renameSync(this.path);
    }
    writeUpdate(dataFetcher, options = {}) {
      if (global.Config?.nofswriting)
        return;
      const pendingUpdate = __fsState.pendingUpdates.get(this.path);
      const throttleTime = options.throttle ? Date.now() + options.throttle : 0;
      if (pendingUpdate) {
        pendingUpdate.pendingDataFetcher = dataFetcher;
        pendingUpdate.pendingOptions = options;
        if (pendingUpdate.throttleTimer && throttleTime < pendingUpdate.throttleTime) {
          pendingUpdate.throttleTime = throttleTime;
          clearTimeout(pendingUpdate.throttleTimer);
          pendingUpdate.throttleTimer = setTimeout(() => this.checkNextUpdate(), throttleTime - Date.now());
        }
        return;
      }
      if (!throttleTime) {
        this.writeUpdateNow(dataFetcher, options);
        return;
      }
      const update = {
        isWriting: false,
        pendingDataFetcher: dataFetcher,
        pendingOptions: options,
        throttleTime,
        throttleTimer: setTimeout(() => this.checkNextUpdate(), throttleTime - Date.now())
      };
      __fsState.pendingUpdates.set(this.path, update);
    }
    writeUpdateNow(dataFetcher, options) {
      const throttleTime = options.throttle ? Date.now() + options.throttle : 0;
      const update = {
        isWriting: true,
        pendingDataFetcher: null,
        pendingOptions: null,
        throttleTime,
        throttleTimer: null
      };
      __fsState.pendingUpdates.set(this.path, update);
      this.safeWrite(dataFetcher(), options).then(() => this.finishUpdate());
    }
    checkNextUpdate() {
      const pendingUpdate = __fsState.pendingUpdates.get(this.path);
      if (!pendingUpdate)
        throw new Error(`FS: Pending update not found`);
      if (pendingUpdate.isWriting)
        throw new Error(`FS: Conflicting update`);
      const { pendingDataFetcher: dataFetcher, pendingOptions: options } = pendingUpdate;
      if (!dataFetcher || !options) {
        __fsState.pendingUpdates.delete(this.path);
        return;
      }
      this.writeUpdateNow(dataFetcher, options);
    }
    finishUpdate() {
      const pendingUpdate = __fsState.pendingUpdates.get(this.path);
      if (!pendingUpdate)
        throw new Error(`FS: Pending update not found`);
      if (!pendingUpdate.isWriting)
        throw new Error(`FS: Conflicting update`);
      pendingUpdate.isWriting = false;
      const throttleTime = pendingUpdate.throttleTime;
      if (!throttleTime || throttleTime < Date.now()) {
        this.checkNextUpdate();
        return;
      }
      pendingUpdate.throttleTimer = setTimeout(() => this.checkNextUpdate(), throttleTime - Date.now());
    }
    append(data, options = {}) {
      if (global.Config?.nofswriting)
        return Promise.resolve();
      return new Promise((resolve, reject) => {
        fs.appendFile(this.path, data, options, (err) => {
          err ? reject(err) : resolve();
        });
      });
    }
    appendSync(data, options = {}) {
      if (global.Config?.nofswriting)
        return;
      return fs.appendFileSync(this.path, data, options);
    }
    symlinkTo(target) {
      if (global.Config?.nofswriting)
        return Promise.resolve();
      return new Promise((resolve, reject) => {
        fs.symlink(target, this.path, (err) => {
          err ? reject(err) : resolve();
        });
      });
    }
    symlinkToSync(target) {
      if (global.Config?.nofswriting)
        return;
      return fs.symlinkSync(target, this.path);
    }
    copyFile(dest) {
      if (global.Config?.nofswriting)
        return Promise.resolve();
      return new Promise((resolve, reject) => {
        fs.copyFile(this.path, dest, (err) => {
          err ? reject(err) : resolve();
        });
      });
    }
    rename(target) {
      if (global.Config?.nofswriting)
        return Promise.resolve();
      return new Promise((resolve, reject) => {
        fs.rename(this.path, target, (err) => {
          err ? reject(err) : resolve();
        });
      });
    }
    renameSync(target) {
      if (global.Config?.nofswriting)
        return;
      return fs.renameSync(this.path, target);
    }
    readdir() {
      return new Promise((resolve, reject) => {
        fs.readdir(this.path, (err, data) => {
          err ? reject(err) : resolve(data);
        });
      });
    }
    readdirSync() {
      return fs.readdirSync(this.path);
    }
    async readdirIfExists() {
      if (await this.exists())
        return this.readdir();
      return Promise.resolve([]);
    }
    readdirIfExistsSync() {
      if (this.existsSync())
        return this.readdirSync();
      return [];
    }
    createReadStream() {
      return new FileReadStream(this.path);
    }
    createWriteStream(options = {}) {
      if (global.Config?.nofswriting) {
        return new import_streams.WriteStream({ write() {
        } });
      }
      return new import_streams.WriteStream(fs.createWriteStream(this.path, options));
    }
    createAppendStream(options = {}) {
      if (global.Config?.nofswriting) {
        return new import_streams.WriteStream({ write() {
        } });
      }
      options.flags = options.flags || "a";
      return new import_streams.WriteStream(fs.createWriteStream(this.path, options));
    }
    unlinkIfExists() {
      if (global.Config?.nofswriting)
        return Promise.resolve();
      return new Promise((resolve, reject) => {
        fs.unlink(this.path, (err) => {
          if (err && err.code === "ENOENT")
            return resolve();
          err ? reject(err) : resolve();
        });
      });
    }
    unlinkIfExistsSync() {
      if (global.Config?.nofswriting)
        return;
      try {
        fs.unlinkSync(this.path);
      } catch (err) {
        if (err.code !== "ENOENT")
          throw err;
      }
    }
    async rmdir(recursive) {
      if (global.Config?.nofswriting)
        return Promise.resolve();
      return new Promise((resolve, reject) => {
        fs.rmdir(this.path, { recursive }, (err) => {
          err ? reject(err) : resolve();
        });
      });
    }
    rmdirSync(recursive) {
      if (global.Config?.nofswriting)
        return;
      return fs.rmdirSync(this.path, { recursive });
    }
    mkdir(mode = 493) {
      if (global.Config?.nofswriting)
        return Promise.resolve();
      return new Promise((resolve, reject) => {
        fs.mkdir(this.path, mode, (err) => {
          err ? reject(err) : resolve();
        });
      });
    }
    mkdirSync(mode = 493) {
      if (global.Config?.nofswriting)
        return;
      return fs.mkdirSync(this.path, mode);
    }
    mkdirIfNonexistent(mode = 493) {
      if (global.Config?.nofswriting)
        return Promise.resolve();
      return new Promise((resolve, reject) => {
        fs.mkdir(this.path, mode, (err) => {
          if (err && err.code === "EEXIST")
            return resolve();
          err ? reject(err) : resolve();
        });
      });
    }
    mkdirIfNonexistentSync(mode = 493) {
      if (global.Config?.nofswriting)
        return;
      try {
        fs.mkdirSync(this.path, mode);
      } catch (err) {
        if (err.code !== "EEXIST")
          throw err;
      }
    }
    async mkdirp(mode = 493) {
      try {
        await this.mkdirIfNonexistent(mode);
      } catch (err) {
        if (err.code !== "ENOENT")
          throw err;
        await this.parentDir().mkdirp(mode);
        await this.mkdirIfNonexistent(mode);
      }
    }
    mkdirpSync(mode = 493) {
      try {
        this.mkdirIfNonexistentSync(mode);
      } catch (err) {
        if (err.code !== "ENOENT")
          throw err;
        this.parentDir().mkdirpSync(mode);
        this.mkdirIfNonexistentSync(mode);
      }
    }
    onModify(callback) {
      fs.watchFile(this.path, (curr, prev) => {
        if (curr.mtime > prev.mtime)
          return callback();
      });
    }
    unwatch() {
      fs.unwatchFile(this.path);
    }
    async isFile() {
      return new Promise((resolve, reject) => {
        fs.stat(this.path, (err, stats) => {
          err ? reject(err) : resolve(stats.isFile());
        });
      });
    }
    isFileSync() {
      return fs.statSync(this.path).isFile();
    }
    async isDirectory() {
      return new Promise((resolve, reject) => {
        fs.stat(this.path, (err, stats) => {
          err ? reject(err) : resolve(stats.isDirectory());
        });
      });
    }
    isDirectorySync() {
      return fs.statSync(this.path).isDirectory();
    }
    async realpath() {
      return new Promise((resolve, reject) => {
        fs.realpath(this.path, (err, path) => {
          err ? reject(err) : resolve(path);
        });
      });
    }
    realpathSync() {
      return fs.realpathSync(this.path);
    }
  }

  class FileReadStream extends import_streams.ReadStream {
    constructor(file) {
      super();
      this.fd = new Promise((resolve, reject) => {
        fs.open(file, "r", (err, fd) => err ? reject(err) : resolve(fd));
      });
      this.atEOF = false;
    }
    _read(size = 16384) {
      return new Promise((resolve, reject) => {
        if (this.atEOF)
          return resolve();
        this.ensureCapacity(size);
        this.fd.then((fd) => {
          fs.read(fd, this.buf, this.bufEnd, size, null, (err, bytesRead, buf) => {
            if (err)
              return reject(err);
            if (!bytesRead) {
              this.atEOF = true;
              this.resolvePush();
              return resolve();
            }
            this.bufEnd += bytesRead;
            this.resolvePush();
            resolve();
          });
        });
      });
    }
    _destroy() {
      return new Promise((resolve) => {
        this.fd.then((fd) => {
          fs.close(fd, () => resolve());
        });
      });
    }
  }
  var FS = Object.assign(getFs, {
    FileReadStream,
    FSPath,
    ROOT_PATH
  });
});

// ../pokemon-showdown/dist/lib/repl.js
var require_repl = __commonJS((exports, module) => {
  var __create2 = Object.create;
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __getProtoOf2 = Object.getPrototypeOf;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var repl_exports = {};
  __export2(repl_exports, {
    Repl: () => Repl
  });
  module.exports = __toCommonJS2(repl_exports);
  var fs = __toESM2(__require("fs"));
  var net = __toESM2(__require("net"));
  var path = __toESM2(__require("path"));
  var repl = __toESM2(__require("repl"));
  var import_crashlogger = require_crashlogger();
  var import_fs = require_fs();
  var Repl = new class {
    constructor() {
      this.socketPathnames = /* @__PURE__ */ new Set;
      this.listenersSetup = false;
    }
    setupListeners(filename) {
      if (Repl.listenersSetup)
        return;
      Repl.listenersSetup = true;
      process.once("exit", (code) => {
        for (const s of Repl.socketPathnames) {
          try {
            fs.unlinkSync(s);
          } catch {
          }
        }
        if (code === 129 || code === 130) {
          process.exitCode = 0;
        }
      });
      if (!process.listeners("SIGHUP").length) {
        process.once("SIGHUP", () => process.exit(128 + 1));
      }
      if (!process.listeners("SIGINT").length) {
        process.once("SIGINT", () => process.exit(128 + 2));
      }
      global.heapdump = (targetPath) => {
        if (!targetPath)
          targetPath = `${filename}-${new Date().toISOString()}`;
        let handler;
        try {
          handler = (()=>{throw new Error(`Cannot require module "node-oom-heapdump"`);})()();
        } catch (e) {
          if (e.code !== "MODULE_NOT_FOUND")
            throw e;
          throw new Error(`node-oom-heapdump is not installed. Run \`npm install --no-save node-oom-heapdump\` and try again.`);
        }
        return handler.createHeapSnapshot(targetPath);
      };
    }
    cleanup() {
      const config = typeof Config !== "undefined" ? Config : {};
      if (!config.repl)
        return;
      const directory = path.dirname(path.resolve(import_fs.FS.ROOT_PATH, config.replsocketprefix || "logs/repl", "app"));
      let files;
      try {
        files = fs.readdirSync(directory);
      } catch {
      }
      if (files) {
        for (const file of files) {
          const pathname = path.resolve(directory, file);
          const stat = fs.statSync(pathname);
          if (!stat.isSocket())
            continue;
          const socket = net.connect(pathname, () => {
            socket.end();
            socket.destroy();
          }).on("error", () => {
            fs.unlinkSync(pathname);
          });
        }
      }
    }
    start(filename, evalFunction) {
      const config = typeof Config !== "undefined" ? Config : {};
      if (!config.repl)
        return;
      Repl.setupListeners(filename);
      const server = net.createServer((socket) => {
        repl.start({
          input: socket,
          output: socket,
          eval(cmd, context, unusedFilename, callback) {
            try {
              return callback(null, evalFunction(cmd));
            } catch (e) {
              return callback(e, undefined);
            }
          }
        }).on("exit", () => socket.end());
        socket.on("error", () => socket.destroy());
      });
      const pathname = path.resolve(import_fs.FS.ROOT_PATH, Config.replsocketprefix || "logs/repl", filename);
      try {
        server.listen(pathname, () => {
          fs.chmodSync(pathname, Config.replsocketmode || 384);
          Repl.socketPathnames.add(pathname);
        });
        server.once("error", (err) => {
          server.close();
          if (err.code === "EADDRINUSE") {
            fs.unlink(pathname, (_err) => {
              if (_err && _err.code !== "ENOENT") {
                (0, import_crashlogger.crashlogger)(_err, `REPL: ${filename}`);
              }
            });
          } else if (err.code === "EACCES") {
            if (process.platform !== "win32") {
              console.error(`Could not start REPL server "${filename}": Your filesystem doesn't support Unix sockets (everything else will still work)`);
            }
          } else {
            (0, import_crashlogger.crashlogger)(err, `REPL: ${filename}`);
          }
        });
        server.once("close", () => {
          Repl.socketPathnames.delete(pathname);
        });
      } catch (err) {
        console.error(`Could not start REPL server "${filename}": ${err}`);
      }
    }
  };
});

// ../pokemon-showdown/dist/lib/net.js
var require_net = __commonJS((exports, module) => {
  var __create2 = Object.create;
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __getProtoOf2 = Object.getPrototypeOf;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var net_exports = {};
  __export2(net_exports, {
    HttpError: () => HttpError,
    Net: () => Net,
    NetRequest: () => NetRequest,
    NetStream: () => NetStream
  });
  module.exports = __toCommonJS2(net_exports);
  var https = __toESM2(__require("https"));
  var http = __toESM2(__require("http"));
  var url = __toESM2(__require("url"));
  var Streams = __toESM2(require_streams());

  class HttpError extends Error {
    constructor(message2, statusCode, body) {
      super(message2);
      this.name = "HttpError";
      this.statusCode = statusCode;
      this.body = body;
      Error.captureStackTrace(this, HttpError);
    }
  }

  class NetStream extends Streams.ReadWriteStream {
    constructor(uri, opts = null) {
      super();
      this.statusCode = null;
      this.headers = null;
      this.uri = uri;
      this.opts = opts;
      this.response = null;
      this.state = "pending";
      this.request = this.makeRequest(opts);
    }
    makeRequest(opts) {
      if (!opts)
        opts = {};
      let body = opts.body;
      if (body && typeof body !== "string") {
        if (!opts.headers)
          opts.headers = {};
        if (!opts.headers["Content-Type"]) {
          opts.headers["Content-Type"] = "application/x-www-form-urlencoded";
        }
        body = NetStream.encodeQuery(body);
      }
      if (opts.query) {
        this.uri += (this.uri.includes("?") ? "&" : "?") + NetStream.encodeQuery(opts.query);
      }
      if (body) {
        if (!opts.headers)
          opts.headers = {};
        if (!opts.headers["Content-Length"]) {
          opts.headers["Content-Length"] = Buffer.byteLength(body);
        }
      }
      const protocol = url.parse(this.uri).protocol;
      const net = protocol === "https:" ? https : http;
      let resolveResponse;
      this.response = new Promise((resolve) => {
        resolveResponse = resolve;
      });
      const request = net.request(this.uri, opts, (response) => {
        this.state = "open";
        this.nodeReadableStream = response;
        this.response = response;
        this.statusCode = response.statusCode || null;
        this.headers = response.headers;
        response.setEncoding("utf-8");
        resolveResponse(response);
        resolveResponse = null;
        response.on("data", (data) => {
          this.push(data);
        });
        response.on("end", () => {
          if (this.state === "open")
            this.state = "success";
          if (!this.atEOF)
            this.pushEnd();
        });
      });
      request.on("close", () => {
        if (!this.atEOF) {
          this.state = "error";
          this.pushError(new Error("Unexpected connection close"));
        }
        if (resolveResponse) {
          this.response = null;
          resolveResponse(null);
          resolveResponse = null;
        }
      });
      request.on("error", (error) => {
        if (!this.atEOF)
          this.pushError(error, true);
      });
      if (opts.timeout || opts.timeout === undefined) {
        request.setTimeout(opts.timeout || 5000, () => {
          this.state = "timeout";
          this.pushError(new Error("Request timeout"));
          request.abort();
        });
      }
      if (body) {
        request.write(body);
        request.end();
        if (opts.writable) {
          throw new Error(`options.body is what you would have written to a NetStream - you must choose one or the other`);
        }
      } else if (opts.writable) {
        this.nodeWritableStream = request;
      } else {
        request.end();
      }
      return request;
    }
    static encodeQuery(data) {
      let out = "";
      for (const key in data) {
        if (out)
          out += `&`;
        out += `${key}=${encodeURIComponent("" + data[key])}`;
      }
      return out;
    }
    _write(data) {
      if (!this.nodeWritableStream) {
        throw new Error("You must specify opts.writable to write to a request.");
      }
      const result = this.nodeWritableStream.write(data);
      if (result !== false)
        return;
      if (!this.drainListeners.length) {
        this.nodeWritableStream.once("drain", () => {
          for (const listener of this.drainListeners)
            listener();
          this.drainListeners = [];
        });
      }
      return new Promise((resolve) => {
        this.drainListeners.push(resolve);
      });
    }
    _read() {
      this.nodeReadableStream?.resume();
    }
    _pause() {
      this.nodeReadableStream?.pause();
    }
  }

  class NetRequest {
    constructor(uri) {
      this.uri = uri;
    }
    getStream(opts = {}) {
      if (typeof Config !== "undefined" && Config.noNetRequests) {
        throw new Error(`Net requests are disabled.`);
      }
      const stream2 = new NetStream(this.uri, opts);
      return stream2;
    }
    async get(opts = {}) {
      const stream2 = this.getStream(opts);
      const response = await stream2.response;
      if (response)
        this.response = response;
      if (response && response.statusCode !== 200) {
        throw new HttpError(response.statusMessage || "Connection error", response.statusCode, await stream2.readAll());
      }
      return stream2.readAll();
    }
    post(opts = {}, body) {
      if (!body)
        body = opts.body;
      return this.get({
        ...opts,
        method: "POST",
        body
      });
    }
  }
  var Net = Object.assign((path) => new NetRequest(path), {
    NetRequest,
    NetStream
  });
});

// ../pokemon-showdown/dist/lib/utils.js
var require_utils = __commonJS((exports, module) => {
  function getString(str) {
    return typeof str === "string" || typeof str === "number" ? "" + str : "";
  }
  function escapeRegex(str) {
    return str.replace(/[\\^$.*+?()[\]{}|]/g, "\\$&");
  }
  function escapeHTML(str) {
    if (str === null || str === undefined)
      return "";
    return ("" + str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;").replace(/\//g, "&#x2f;").replace(/\n/g, "<br />");
  }
  function stripHTML(htmlContent) {
    if (!htmlContent)
      return "";
    return htmlContent.replace(/<[^>]*>/g, "");
  }
  function formatOrder(place) {
    let remainder = place % 100;
    if (remainder >= 10 && remainder <= 20)
      return place + "th";
    remainder = place % 10;
    if (remainder === 1)
      return place + "st";
    if (remainder === 2)
      return place + "nd";
    if (remainder === 3)
      return place + "rd";
    return place + "th";
  }
  function visualize(value, depth = 0) {
    if (value === undefined)
      return `undefined`;
    if (value === null)
      return `null`;
    if (typeof value === "number" || typeof value === "boolean") {
      return `${value}`;
    }
    if (typeof value === "string") {
      return `"${value}"`;
    }
    if (typeof value === "symbol") {
      return value.toString();
    }
    if (Array.isArray(value)) {
      if (depth > 10)
        return `[array]`;
      return `[` + value.map((elem) => visualize(elem, depth + 1)).join(`, `) + `]`;
    }
    if (value instanceof RegExp || value instanceof Date || value instanceof Function) {
      if (depth && value instanceof Function)
        return `Function`;
      return `${value}`;
    }
    let constructor = "";
    if (value.constructor && value.constructor.name && typeof value.constructor.name === "string") {
      constructor = value.constructor.name;
      if (constructor === "Object")
        constructor = "";
    } else {
      constructor = "null";
    }
    const baseClass = value?.toString && /\[object (.*)\]/.exec(value.toString())?.[1] || constructor;
    switch (baseClass) {
      case "Map":
        if (depth > 2)
          return `Map`;
        const mapped = [...value.entries()].map((val) => `${visualize(val[0], depth + 1)} => ${visualize(val[1], depth + 1)}`);
        return `${constructor} (${value.size}) { ${mapped.join(", ")} }`;
      case "Set":
        if (depth > 2)
          return `Set`;
        return `${constructor} (${value.size}) { ${[...value].map((v) => visualize(v), depth + 1).join(", ")} }`;
    }
    if (value.toString) {
      try {
        const stringValue = value.toString();
        if (typeof stringValue === "string" && stringValue !== "[object Object]" && stringValue !== `[object ${constructor}]`) {
          return `${constructor}(${stringValue})`;
        }
      } catch {
      }
    }
    let buf = "";
    for (const key in value) {
      if (!Object.prototype.hasOwnProperty.call(value, key))
        continue;
      if (depth > 2 || depth && constructor) {
        buf = "...";
        break;
      }
      if (buf)
        buf += `, `;
      let displayedKey = key;
      if (!/^[A-Za-z0-9_$]+$/.test(key))
        displayedKey = JSON.stringify(key);
      buf += `${displayedKey}: ` + visualize(value[key], depth + 1);
    }
    if (constructor && !buf && constructor !== "null")
      return constructor;
    return `${constructor}{${buf}}`;
  }
  function compare(a, b) {
    if (typeof a === "number") {
      return a - b;
    }
    if (typeof a === "string") {
      return a.localeCompare(b);
    }
    if (typeof a === "boolean") {
      return (a ? 1 : 2) - (b ? 1 : 2);
    }
    if (Array.isArray(a)) {
      for (let i = 0;i < a.length; i++) {
        const comparison = compare(a[i], b[i]);
        if (comparison)
          return comparison;
      }
      return 0;
    }
    if ("reverse" in a) {
      return compare(b.reverse, a.reverse);
    }
    throw new Error(`Passed value ${a} is not comparable`);
  }
  function sortBy(array, callback) {
    if (!callback)
      return array.sort(compare);
    return array.sort((a, b) => compare(callback(a), callback(b)));
  }
  function splitFirst(str, delimiter, limit = 1) {
    const splitStr = [];
    while (splitStr.length < limit) {
      const delimiterIndex = str.indexOf(delimiter);
      if (delimiterIndex >= 0) {
        splitStr.push(str.slice(0, delimiterIndex));
        str = str.slice(delimiterIndex + delimiter.length);
      } else {
        splitStr.push(str);
        str = "";
      }
    }
    splitStr.push(str);
    return splitStr;
  }
  function html(strings, ...args) {
    let buf = strings[0];
    let i = 0;
    while (i < args.length) {
      buf += escapeHTML(args[i]);
      buf += strings[++i];
    }
    return buf;
  }
  function escapeHTMLForceWrap(text) {
    return escapeHTML(forceWrap(text)).replace(/\u200B/g, "<wbr />");
  }
  function forceWrap(text) {
    return text.replace(/[^\s]{30,}/g, (word) => {
      let lastBreak = 0;
      let brokenWord = "";
      for (let i = 1;i < word.length; i++) {
        if (i - lastBreak >= 10 || /[^a-zA-Z0-9([{][a-zA-Z0-9]/.test(word.slice(i - 1, i + 1))) {
          brokenWord += word.slice(lastBreak, i) + "\u200B";
          lastBreak = i;
        }
      }
      brokenWord += word.slice(lastBreak);
      return brokenWord;
    });
  }
  function shuffle(arr) {
    for (let i = arr.length - 1;i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }
  function randomElement(arr) {
    const i = Math.floor(Math.random() * arr.length);
    return arr[i];
  }
  function clampIntRange(num, min, max) {
    if (typeof num !== "number")
      num = 0;
    num = Math.floor(num);
    if (min !== undefined && num < min)
      num = min;
    if (max !== undefined && num > max)
      num = max;
    return num;
  }
  function clearRequireCache(options = {}) {
    const excludes = options?.exclude || [];
    excludes.push("/node_modules/");
    for (const path in __require.cache) {
      if (excludes.some((p) => path.includes(p)))
        continue;
      const mod = __require.cache[path];
      if (!mod)
        continue;
      uncacheModuleTree(mod, excludes);
      delete __require.cache[path];
    }
  }
  function uncacheModuleTree(mod, excludes) {
    if (!mod.children?.length || excludes.some((p) => mod.filename.includes(p)))
      return;
    for (const [i, child] of mod.children.entries()) {
      if (excludes.some((p) => child.filename.includes(p)))
        continue;
      mod.children?.splice(i, 1);
      uncacheModuleTree(child, excludes);
    }
    delete mod.children;
  }
  function deepClone(obj) {
    if (obj === null || typeof obj !== "object")
      return obj;
    if (Array.isArray(obj))
      return obj.map((prop) => deepClone(prop));
    const clone = Object.create(Object.getPrototypeOf(obj));
    for (const key of Object.keys(obj)) {
      clone[key] = deepClone(obj[key]);
    }
    return clone;
  }
  function deepFreeze(obj) {
    if (obj === null || typeof obj !== "object")
      return obj;
    if (Object.isFrozen(obj))
      return obj;
    Object.freeze(obj);
    if (Array.isArray(obj)) {
      for (const elem of obj)
        deepFreeze(elem);
    } else {
      for (const elem of Object.values(obj))
        deepFreeze(elem);
    }
    return obj;
  }
  function levenshtein(s, t, l) {
    const d = [];
    const n = s.length;
    const m = t.length;
    if (n === 0)
      return m;
    if (m === 0)
      return n;
    if (l && Math.abs(m - n) > l)
      return Math.abs(m - n);
    for (let i = n;i >= 0; i--)
      d[i] = [];
    for (let i = n;i >= 0; i--)
      d[i][0] = i;
    for (let j = m;j >= 0; j--)
      d[0][j] = j;
    for (let i = 1;i <= n; i++) {
      const si = s.charAt(i - 1);
      for (let j = 1;j <= m; j++) {
        if (i === j && d[i][j] > 4)
          return n;
        const tj = t.charAt(j - 1);
        const cost = si === tj ? 0 : 1;
        let mi = d[i - 1][j] + 1;
        const b = d[i][j - 1] + 1;
        const c = d[i - 1][j - 1] + cost;
        if (b < mi)
          mi = b;
        if (c < mi)
          mi = c;
        d[i][j] = mi;
      }
    }
    return d[n][m];
  }
  function waitUntil(time) {
    return new Promise((resolve) => {
      setTimeout(() => resolve(), time - Date.now());
    });
  }
  function parseExactInt(str) {
    if (!/^-?(0|[1-9][0-9]*)$/.test(str))
      return NaN;
    return parseInt(str);
  }
  function formatSQLArray(arr, args) {
    args?.push(...arr);
    return [..."?".repeat(arr.length)].join(", ");
  }
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var utils_exports = {};
  __export2(utils_exports, {
    Multiset: () => Multiset,
    Utils: () => Utils,
    clampIntRange: () => clampIntRange,
    clearRequireCache: () => clearRequireCache,
    compare: () => compare,
    deepClone: () => deepClone,
    deepFreeze: () => deepFreeze,
    escapeHTML: () => escapeHTML,
    escapeHTMLForceWrap: () => escapeHTMLForceWrap,
    escapeRegex: () => escapeRegex,
    forceWrap: () => forceWrap,
    formatOrder: () => formatOrder,
    formatSQLArray: () => formatSQLArray,
    getString: () => getString,
    html: () => html,
    levenshtein: () => levenshtein,
    parseExactInt: () => parseExactInt,
    randomElement: () => randomElement,
    shuffle: () => shuffle,
    sortBy: () => sortBy,
    splitFirst: () => splitFirst,
    stripHTML: () => stripHTML,
    uncacheModuleTree: () => uncacheModuleTree,
    visualize: () => visualize,
    waitUntil: () => waitUntil
  });
  module.exports = __toCommonJS2(utils_exports);

  class Multiset extends Map {
    get(key) {
      return super.get(key) ?? 0;
    }
    add(key) {
      this.set(key, this.get(key) + 1);
      return this;
    }
    remove(key) {
      const newValue = this.get(key) - 1;
      if (newValue <= 0)
        return this.delete(key);
      this.set(key, newValue);
      return true;
    }
  }
  var Utils = {
    parseExactInt,
    waitUntil,
    html,
    escapeHTML,
    compare,
    sortBy,
    levenshtein,
    shuffle,
    deepClone,
    clearRequireCache,
    randomElement,
    forceWrap,
    splitFirst,
    stripHTML,
    visualize,
    getString,
    escapeRegex,
    formatSQLArray,
    Multiset
  };
});

// ../pokemon-showdown/dist/lib/process-manager.js
var require_process_manager = __commonJS((exports, module) => {
  function exec(args, execOptions) {
    if (Array.isArray(args)) {
      const cmd = args.shift();
      if (!cmd)
        throw new Error(`You must pass a command to ProcessManager.exec.`);
      return new Promise((resolve, reject) => {
        child_process.execFile(cmd, args, execOptions, (err, stdout, stderr) => {
          if (err)
            reject(err);
          if (typeof stdout !== "string")
            stdout = stdout.toString();
          if (typeof stderr !== "string")
            stderr = stderr.toString();
          resolve({ stdout, stderr });
        });
      });
    } else {
      return new Promise((resolve, reject) => {
        child_process.exec(args, execOptions, (error, stdout, stderr) => {
          if (error)
            reject(error);
          if (typeof stdout !== "string")
            stdout = stdout.toString();
          resolve(stdout);
        });
      });
    }
  }
  var __create2 = Object.create;
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __getProtoOf2 = Object.getPrototypeOf;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var process_manager_exports = {};
  __export2(process_manager_exports, {
    ProcessManager: () => ProcessManager,
    QueryProcessManager: () => QueryProcessManager,
    QueryProcessWrapper: () => QueryProcessWrapper,
    RawProcessManager: () => RawProcessManager,
    RawProcessWrapper: () => RawProcessWrapper,
    StreamProcessManager: () => StreamProcessManager,
    StreamProcessWrapper: () => StreamProcessWrapper,
    StreamWorker: () => StreamWorker,
    exec: () => exec,
    processManagers: () => processManagers
  });
  module.exports = __toCommonJS2(process_manager_exports);
  var child_process = __toESM2(__require("child_process"));
  var cluster = __toESM2(__require("cluster"));
  var path = __toESM2(__require("path"));
  var Streams = __toESM2(require_streams());
  var import_fs = require_fs();
  var processManagers = [];

  class SubprocessStream extends Streams.ObjectReadWriteStream {
    constructor(process2, taskId2) {
      super();
      this.process = process2;
      this.taskId = taskId2;
      this.process.process.send(`${taskId2}
NEW`);
    }
    _write(message2) {
      if (!this.process.process.connected) {
        this.pushError(new Error(`Process disconnected (possibly crashed?)`));
        return;
      }
      this.process.process.send(`${this.taskId}
WRITE
${message2}`);
    }
    _writeEnd() {
      this.process.process.send(`${this.taskId}
WRITEEND`);
    }
    _destroy() {
      if (!this.process.process.connected)
        return;
      this.process.process.send(`${this.taskId}
DESTROY`);
      this.process.deleteStream(this.taskId);
      this.process = null;
    }
  }

  class RawSubprocessStream extends Streams.ObjectReadWriteStream {
    constructor(process2) {
      super();
      this.process = process2;
    }
    _write(message2) {
      if (!this.process.getProcess().connected) {
        return;
      }
      this.process.process.send(message2);
    }
  }

  class QueryProcessWrapper {
    constructor(file, messageCallback) {
      this.process = child_process.fork(file, [], { cwd: import_fs.FS.ROOT_PATH });
      this.taskId = 0;
      this.file = file;
      this.pendingTasks = /* @__PURE__ */ new Map;
      this.pendingRelease = null;
      this.resolveRelease = null;
      this.messageCallback = messageCallback || null;
      this.process.on("message", (message2) => {
        if (message2.startsWith("THROW\n")) {
          const error = new Error;
          error.stack = message2.slice(6);
          throw error;
        }
        if (message2.startsWith("DEBUG\n")) {
          this.debug = message2.slice(6);
          return;
        }
        if (this.messageCallback && message2.startsWith(`CALLBACK
`)) {
          this.messageCallback(message2.slice(9));
          return;
        }
        const nlLoc2 = message2.indexOf("\n");
        if (nlLoc2 <= 0)
          throw new Error(`Invalid response ${message2}`);
        const taskId2 = parseInt(message2.slice(0, nlLoc2));
        const resolve = this.pendingTasks.get(taskId2);
        if (!resolve)
          throw new Error(`Invalid taskId ${message2.slice(0, nlLoc2)}`);
        this.pendingTasks.delete(taskId2);
        const resp = this.safeJSON(message2.slice(nlLoc2 + 1));
        resolve(resp);
        if (this.resolveRelease && !this.getLoad())
          this.destroy();
      });
    }
    safeJSON(obj) {
      if (obj === "undefined") {
        return;
      }
      try {
        return JSON.parse(obj);
      } catch (e) {
        global.Monitor?.crashlog?.(e, `a ${path.basename(this.file)} process`, { result: obj });
        return;
      }
    }
    getProcess() {
      return this.process;
    }
    getLoad() {
      return this.pendingTasks.size;
    }
    query(input) {
      this.taskId++;
      const taskId2 = this.taskId;
      this.process.send(`${taskId2}
${JSON.stringify(input)}`);
      return new Promise((resolve) => {
        this.pendingTasks.set(taskId2, resolve);
      });
    }
    release() {
      if (this.pendingRelease)
        return this.pendingRelease;
      if (!this.getLoad()) {
        this.destroy();
      } else {
        this.pendingRelease = new Promise((resolve) => {
          this.resolveRelease = resolve;
        });
      }
      return this.pendingRelease;
    }
    destroy() {
      if (this.pendingRelease && !this.resolveRelease) {
        return;
      }
      this.process.disconnect();
      for (const resolver of this.pendingTasks.values()) {
        resolver("");
      }
      this.pendingTasks.clear();
      if (this.resolveRelease) {
        this.resolveRelease();
        this.resolveRelease = null;
      } else if (!this.pendingRelease) {
        this.pendingRelease = Promise.resolve();
      }
    }
  }

  class StreamProcessWrapper {
    constructor(file, messageCallback) {
      this.taskId = 0;
      this.activeStreams = /* @__PURE__ */ new Map;
      this.pendingRelease = null;
      this.resolveRelease = null;
      this.process = child_process.fork(file, [], { cwd: import_fs.FS.ROOT_PATH });
      this.messageCallback = messageCallback;
      this.process.on("message", (message2) => {
        if (message2.startsWith("THROW\n")) {
          const error = new Error;
          error.stack = message2.slice(6);
          throw error;
        }
        if (this.messageCallback && message2.startsWith(`CALLBACK
`)) {
          this.messageCallback(message2.slice(9));
          return;
        }
        if (message2.startsWith("DEBUG\n")) {
          this.setDebug(message2.slice(6));
          return;
        }
        let nlLoc2 = message2.indexOf("\n");
        if (nlLoc2 <= 0)
          throw new Error(`Invalid response ${message2}`);
        const taskId2 = parseInt(message2.slice(0, nlLoc2));
        const stream2 = this.activeStreams.get(taskId2);
        if (!stream2)
          return;
        message2 = message2.slice(nlLoc2 + 1);
        nlLoc2 = message2.indexOf("\n");
        if (nlLoc2 < 0)
          nlLoc2 = message2.length;
        const messageType2 = message2.slice(0, nlLoc2);
        message2 = message2.slice(nlLoc2 + 1);
        if (messageType2 === "END") {
          stream2.pushEnd();
          this.deleteStream(taskId2);
          return;
        } else if (messageType2 === "PUSH") {
          stream2.push(message2);
        } else if (messageType2 === "THROW") {
          const error = new Error;
          error.stack = message2;
          stream2.pushError(error, true);
        } else {
          throw new Error(`Unrecognized messageType ${messageType2}`);
        }
      });
    }
    setDebug(message2) {
      this.debug = (this.debug || "").slice(-32768) + "\n=====\n" + message2;
    }
    getLoad() {
      return this.activeStreams.size;
    }
    getProcess() {
      return this.process;
    }
    deleteStream(taskId2) {
      this.activeStreams.delete(taskId2);
      if (this.resolveRelease && !this.getLoad())
        this.destroy();
    }
    createStream() {
      this.taskId++;
      const taskId2 = this.taskId;
      const stream2 = new SubprocessStream(this, taskId2);
      this.activeStreams.set(taskId2, stream2);
      return stream2;
    }
    release() {
      if (this.pendingRelease)
        return this.pendingRelease;
      if (!this.getLoad()) {
        this.destroy();
      } else {
        this.pendingRelease = new Promise((resolve) => {
          this.resolveRelease = resolve;
        });
      }
      return this.pendingRelease;
    }
    destroy() {
      if (this.pendingRelease && !this.resolveRelease) {
        return;
      }
      this.process.disconnect();
      const destroyed = [];
      for (const stream2 of this.activeStreams.values()) {
        destroyed.push(stream2.destroy());
      }
      this.activeStreams.clear();
      if (this.resolveRelease) {
        this.resolveRelease();
        this.resolveRelease = null;
      } else if (!this.pendingRelease) {
        this.pendingRelease = Promise.resolve();
      }
      return Promise.all(destroyed);
    }
  }

  class StreamWorker {
    constructor(stream2) {
      this.load = 0;
      this.workerid = 0;
      this.stream = stream2;
    }
  }

  class RawProcessWrapper {
    constructor(file, isCluster, env) {
      this.taskId = 0;
      this.pendingRelease = null;
      this.resolveRelease = null;
      this.workerid = 0;
      this.load = 0;
      if (isCluster) {
        this.process = cluster.fork(env);
        this.workerid = this.process.id;
      } else {
        this.process = child_process.fork(file, [], { cwd: import_fs.FS.ROOT_PATH, env });
      }
      this.process.on("message", (message2) => {
        this.stream.push(message2);
      });
      this.stream = new RawSubprocessStream(this);
    }
    setDebug(message2) {
      this.debug = (this.debug || "").slice(-32768) + "\n=====\n" + message2;
    }
    getLoad() {
      return this.load;
    }
    getProcess() {
      return this.process.process ? this.process.process : this.process;
    }
    release() {
      if (this.pendingRelease)
        return this.pendingRelease;
      if (!this.getLoad()) {
        this.destroy();
      } else {
        this.pendingRelease = new Promise((resolve) => {
          this.resolveRelease = resolve;
        });
      }
      return this.pendingRelease;
    }
    destroy() {
      if (this.pendingRelease && !this.resolveRelease) {
        return;
      }
      this.stream.destroy();
      this.process.disconnect();
      return;
    }
  }
  var _ProcessManager = class {
    constructor(module2) {
      this.processes = [];
      this.releasingProcesses = [];
      this.crashedProcesses = [];
      this.crashTime = 0;
      this.crashRespawnCount = 0;
      this.filename = module2.filename;
      this.basename = path.basename(module2.filename);
      this.isParentProcess = process.mainModule !== module2 || !process.send;
      this.listen();
    }
    acquire() {
      if (!this.processes.length) {
        return null;
      }
      let lowestLoad = this.processes[0];
      for (const process2 of this.processes) {
        if (process2.getLoad() < lowestLoad.getLoad()) {
          lowestLoad = process2;
        }
      }
      return lowestLoad;
    }
    releaseCrashed(process2) {
      const index = this.processes.indexOf(process2);
      if (index < 0)
        return;
      this.processes.splice(index, 1);
      this.destroyProcess(process2);
      process2.release().then(() => {
        const releasingIndex = this.releasingProcesses.indexOf(process2);
        if (releasingIndex >= 0) {
          this.releasingProcesses.splice(releasingIndex, 1);
        }
      });
      const now = Date.now();
      if (this.crashTime && now - this.crashTime > 30 * 60 * 1000) {
        this.crashTime = 0;
        this.crashRespawnCount = 0;
      }
      if (!this.crashTime)
        this.crashTime = now;
      this.crashRespawnCount += 1;
      Promise.reject(new Error(`Process ${this.basename} ${process2.getProcess().pid} crashed and had to be restarted`));
      this.releasingProcesses.push(process2);
      this.crashedProcesses.push(process2);
      if (this.crashRespawnCount <= 5) {
        this.spawn(this.processes.length + 1);
      }
    }
    unspawn() {
      return Promise.all([...this.processes].map((process2) => this.unspawnOne(process2)));
    }
    async unspawnOne(process2) {
      if (!process2)
        return;
      this.destroyProcess(process2);
      const processIndex = this.processes.indexOf(process2);
      if (processIndex < 0)
        throw new Error("Process inactive");
      this.processes.splice(this.processes.indexOf(process2), 1);
      this.releasingProcesses.push(process2);
      await process2.release();
      const index = this.releasingProcesses.indexOf(process2);
      if (index < 0)
        return;
      this.releasingProcesses.splice(index, 1);
    }
    spawn(count = 1, force) {
      if (!this.isParentProcess)
        return;
      if (_ProcessManager.disabled && !force)
        return;
      const spawnCount = count - this.processes.length;
      for (let i = 0;i < spawnCount; i++) {
        this.spawnOne(force);
      }
    }
    spawnOne(force) {
      if (!this.isParentProcess)
        throw new Error("Must use in parent process");
      if (_ProcessManager.disabled && !force)
        return null;
      const process2 = this.createProcess();
      process2.process.on("disconnect", () => this.releaseCrashed(process2));
      this.processes.push(process2);
      return process2;
    }
    respawn(count = null) {
      if (count === null)
        count = this.processes.length;
      const unspawned = this.unspawn();
      this.spawn(count);
      return unspawned;
    }
    destroyProcess(process2) {
    }
    destroy() {
      const index = processManagers.indexOf(this);
      if (index >= 0)
        processManagers.splice(index, 1);
      return this.unspawn();
    }
  };
  var ProcessManager = _ProcessManager;
  ProcessManager.disabled = false;

  class QueryProcessManager extends ProcessManager {
    constructor(module2, query, timeout = 15 * 60 * 1000, debugCallback) {
      super(module2);
      this._query = query;
      this.timeout = timeout;
      this.messageCallback = debugCallback;
      processManagers.push(this);
    }
    async query(input, process2 = this.acquire()) {
      if (!process2)
        return this._query(input);
      const timeout = setTimeout(() => {
        const debugInfo = process2.debug || "No debug information found.";
        process2.destroy();
        this.spawnOne();
        throw new Error(`A query originating in ${this.basename} took too long to complete; the process has been respawned.
${debugInfo}`);
      }, this.timeout);
      const result = await process2.query(input);
      clearTimeout(timeout);
      return result;
    }
    queryTemporaryProcess(input, force) {
      const process2 = this.spawnOne(force);
      const result = this.query(input, process2);
      this.unspawnOne(process2);
      return result;
    }
    createProcess() {
      return new QueryProcessWrapper(this.filename, this.messageCallback);
    }
    listen() {
      if (this.isParentProcess)
        return;
      process.on("message", (message) => {
        const nlLoc = message.indexOf("\n");
        if (nlLoc <= 0)
          throw new Error(`Invalid response ${message}`);
        const taskId = message.slice(0, nlLoc);
        message = message.slice(nlLoc + 1);
        if (taskId.startsWith("EVAL")) {
          process.send(`${taskId}
` + eval(message));
          return;
        }
        Promise.resolve(this._query(JSON.parse(message))).then((response) => process.send(`${taskId}
${JSON.stringify(response)}`));
      });
      process.on("disconnect", () => {
        process.exit();
      });
    }
  }

  class StreamProcessManager extends ProcessManager {
    constructor(module2, createStream, messageCallback) {
      super(module2);
      this.activeStreams = /* @__PURE__ */ new Map;
      this._createStream = createStream;
      this.messageCallback = messageCallback;
      processManagers.push(this);
    }
    createStream() {
      const process2 = this.acquire();
      if (!process2)
        return this._createStream();
      return process2.createStream();
    }
    createProcess() {
      return new StreamProcessWrapper(this.filename, this.messageCallback);
    }
    async pipeStream(taskId2, stream2) {
      let done = false;
      while (!done) {
        try {
          let value;
          ({ value, done } = await stream2.next());
          process.send(`${taskId2}
PUSH
${value}`);
        } catch (err) {
          process.send(`${taskId2}
THROW
${err.stack}`);
        }
      }
      if (!this.activeStreams.has(taskId2)) {
        return;
      }
      process.send(`${taskId2}
END`);
      this.activeStreams.delete(taskId2);
    }
    listen() {
      if (this.isParentProcess)
        return;
      process.on("message", (message) => {
        let nlLoc = message.indexOf("\n");
        if (nlLoc <= 0)
          throw new Error(`Invalid request ${message}`);
        const taskId = message.slice(0, nlLoc);
        const stream = this.activeStreams.get(taskId);
        message = message.slice(nlLoc + 1);
        nlLoc = message.indexOf("\n");
        if (nlLoc < 0)
          nlLoc = message.length;
        const messageType = message.slice(0, nlLoc);
        message = message.slice(nlLoc + 1);
        if (taskId.startsWith("EVAL")) {
          process.send(`${taskId}
` + eval(message));
          return;
        }
        if (messageType === "NEW") {
          if (stream)
            throw new Error(`NEW: taskId ${taskId} already exists`);
          const newStream = this._createStream();
          this.activeStreams.set(taskId, newStream);
          this.pipeStream(taskId, newStream);
        } else if (messageType === "DESTROY") {
          if (!stream)
            throw new Error(`DESTROY: Invalid taskId ${taskId}`);
          stream.destroy();
          this.activeStreams.delete(taskId);
        } else if (messageType === "WRITE") {
          if (!stream)
            throw new Error(`WRITE: Invalid taskId ${taskId}`);
          stream.write(message);
        } else if (messageType === "WRITEEND") {
          if (!stream)
            throw new Error(`WRITEEND: Invalid taskId ${taskId}`);
          stream.writeEnd();
        } else {
          throw new Error(`Unrecognized messageType ${messageType}`);
        }
      });
      process.on("disconnect", () => {
        process.exit();
      });
    }
  }

  class RawProcessManager extends ProcessManager {
    constructor(options) {
      super(options.module);
      this.workers = [];
      this.masterWorker = null;
      this.activeStream = null;
      this.spawnSubscription = null;
      this.unspawnSubscription = null;
      this.workerid = cluster.worker?.id || 0;
      this.isCluster = !!options.isCluster;
      this._setupChild = options.setupChild;
      this.env = options.env;
      if (this.isCluster && this.isParentProcess) {
        cluster.setupMaster({
          exec: this.filename,
          cwd: import_fs.FS.ROOT_PATH
        });
      }
      processManagers.push(this);
    }
    subscribeSpawn(callback) {
      this.spawnSubscription = callback;
    }
    subscribeUnspawn(callback) {
      this.unspawnSubscription = callback;
    }
    spawn(count) {
      super.spawn(count);
      if (!this.workers.length) {
        this.masterWorker = new StreamWorker(this._setupChild());
        this.workers.push(this.masterWorker);
        this.spawnSubscription?.(this.masterWorker);
      }
    }
    createProcess() {
      const process2 = new RawProcessWrapper(this.filename, this.isCluster, this.env);
      this.workers.push(process2);
      this.spawnSubscription?.(process2);
      return process2;
    }
    destroyProcess(process2) {
      const index = this.workers.indexOf(process2);
      if (index >= 0)
        this.workers.splice(index, 1);
      this.unspawnSubscription?.(process2);
    }
    async pipeStream(stream2) {
      let done = false;
      while (!done) {
        try {
          let value;
          ({ value, done } = await stream2.next());
          process.send(value);
        } catch (err) {
          process.send(`THROW
${err.stack}`);
        }
      }
    }
    listen() {
      if (this.isParentProcess)
        return;
      setImmediate(() => {
        this.activeStream = this._setupChild();
        this.pipeStream(this.activeStream);
      });
      process.on("message", (message2) => {
        this.activeStream.write(message2);
      });
      process.on("disconnect", () => {
        process.exit();
      });
    }
  }
});

// /home/max/tanso/pokemon-showdown/node_modules/.pnpm/bindings@1.5.0/node_modules/file-uri-to-path/index.js
var require_file_uri_to_path = __commonJS((exports, module) => {
  function fileUriToPath(uri) {
    if (typeof uri != "string" || uri.length <= 7 || uri.substring(0, 7) != "file://") {
      throw new TypeError("must pass in a file:// URI to convert to a file path");
    }
    var rest = decodeURI(uri.substring(7));
    var firstSlash = rest.indexOf("/");
    var host = rest.substring(0, firstSlash);
    var path = rest.substring(firstSlash + 1);
    if (host == "localhost")
      host = "";
    if (host) {
      host = sep + sep + host;
    }
    path = path.replace(/^(.+)\|/, "$1:");
    if (sep == "\\") {
      path = path.replace(/\//g, "\\");
    }
    if (/^.+\:/.test(path)) {
    } else {
      path = sep + path;
    }
    return host + path;
  }
  var sep = __require("path").sep || "/";
  module.exports = fileUriToPath;
});

// /home/max/tanso/pokemon-showdown/node_modules/.pnpm/better-sqlite3@7.6.2/node_modules/bindings/bindings.js
var require_bindings = __commonJS((exports, module) => {
  function bindings(opts) {
    if (typeof opts == "string") {
      opts = { bindings: opts };
    } else if (!opts) {
      opts = {};
    }
    Object.keys(defaults).map(function(i2) {
      if (!(i2 in opts))
        opts[i2] = defaults[i2];
    });
    if (!opts.module_root) {
      opts.module_root = exports.getRoot(exports.getFileName());
    }
    if (path.extname(opts.bindings) != ".node") {
      opts.bindings += ".node";
    }
    var requireFunc = typeof __webpack_require__ === "function" ? __non_webpack_require__ : __require;
    var tries = [], i = 0, l = opts.try.length, n, b, err;
    for (;i < l; i++) {
      n = join.apply(null, opts.try[i].map(function(p) {
        return opts[p] || p;
      }));
      tries.push(n);
      try {
        b = opts.path ? requireFunc.resolve(n) : requireFunc(n);
        if (!opts.path) {
          b.path = n;
        }
        return b;
      } catch (e) {
        if (e.code !== "MODULE_NOT_FOUND" && e.code !== "QUALIFIED_PATH_RESOLUTION_FAILED" && !/not find/i.test(e.message)) {
          throw e;
        }
      }
    }
    err = new Error("Could not locate the bindings file. Tried:\n" + tries.map(function(a) {
      return opts.arrow + a;
    }).join("\n"));
    err.tries = tries;
    throw err;
  }
  var __filename = "/home/max/tanso/pokemon-showdown/node_modules/.pnpm/bindings@1.5.0/node_modules/bindings/bindings.js";
  var fs = __require("fs");
  var path = __require("path");
  var fileURLToPath = require_file_uri_to_path();
  var join = path.join;
  var dirname = path.dirname;
  var exists = fs.accessSync && function(path2) {
    try {
      fs.accessSync(path2);
    } catch (e) {
      return false;
    }
    return true;
  } || fs.existsSync || path.existsSync;
  var defaults = {
    arrow: process.env.NODE_BINDINGS_ARROW || " \u2192 ",
    compiled: process.env.NODE_BINDINGS_COMPILED_DIR || "compiled",
    platform: process.platform,
    arch: process.arch,
    nodePreGyp: "node-v" + process.versions.modules + "-" + process.platform + "-" + process.arch,
    version: process.versions.node,
    bindings: "bindings.node",
    try: [
      ["module_root", "build", "bindings"],
      ["module_root", "build", "Debug", "bindings"],
      ["module_root", "build", "Release", "bindings"],
      ["module_root", "out", "Debug", "bindings"],
      ["module_root", "Debug", "bindings"],
      ["module_root", "out", "Release", "bindings"],
      ["module_root", "Release", "bindings"],
      ["module_root", "build", "default", "bindings"],
      ["module_root", "compiled", "version", "platform", "arch", "bindings"],
      ["module_root", "addon-build", "release", "install-root", "bindings"],
      ["module_root", "addon-build", "debug", "install-root", "bindings"],
      ["module_root", "addon-build", "default", "install-root", "bindings"],
      ["module_root", "lib", "binding", "nodePreGyp", "bindings"]
    ]
  };
  module.exports = exports = bindings;
  exports.getFileName = function getFileName(calling_file) {
    var { prepareStackTrace: origPST, stackTraceLimit: origSTL } = Error, dummy = {}, fileName;
    Error.stackTraceLimit = 10;
    Error.prepareStackTrace = function(e, st) {
      for (var i = 0, l = st.length;i < l; i++) {
        fileName = st[i].getFileName();
        if (fileName !== __filename) {
          if (calling_file) {
            if (fileName !== calling_file) {
              return;
            }
          } else {
            return;
          }
        }
      }
    };
    Error.captureStackTrace(dummy);
    dummy.stack;
    Error.prepareStackTrace = origPST;
    Error.stackTraceLimit = origSTL;
    var fileSchema = "file://";
    if (fileName.indexOf(fileSchema) === 0) {
      fileName = fileURLToPath(fileName);
    }
    return fileName;
  };
  exports.getRoot = function getRoot(file) {
    var dir = dirname(file), prev;
    while (true) {
      if (dir === ".") {
        dir = process.cwd();
      }
      if (exists(join(dir, "package.json")) || exists(join(dir, "node_modules"))) {
        return dir;
      }
      if (prev === dir) {
        throw new Error('Could not find module root given file: "' + file + '". Do you have a `package.json` file? ');
      }
      prev = dir;
      dir = join(dir, "..");
    }
  };
});

// ../pokemon-showdown/node_modules/.pnpm/better-sqlite3@7.6.2/node_modules/better-sqlite3/lib/util.js
var require_util = __commonJS((exports) => {
  exports.getBooleanOption = (options, key) => {
    let value = false;
    if (key in options && typeof (value = options[key]) !== "boolean") {
      throw new TypeError(`Expected the "${key}" option to be a boolean`);
    }
    return value;
  };
  exports.cppdb = Symbol();
  exports.inspect = Symbol.for("nodejs.util.inspect.custom");
});

// ../pokemon-showdown/node_modules/.pnpm/better-sqlite3@7.6.2/node_modules/better-sqlite3/lib/sqlite-error.js
var require_sqlite_error = __commonJS((exports, module) => {
  function SqliteError(message2, code) {
    if (new.target !== SqliteError) {
      return new SqliteError(message2, code);
    }
    if (typeof code !== "string") {
      throw new TypeError("Expected second argument to be a string");
    }
    Error.call(this, message2);
    descriptor.value = "" + message2;
    Object.defineProperty(this, "message", descriptor);
    Error.captureStackTrace(this, SqliteError);
    this.code = code;
  }
  var descriptor = { value: "SqliteError", writable: true, enumerable: false, configurable: true };
  Object.setPrototypeOf(SqliteError, Error);
  Object.setPrototypeOf(SqliteError.prototype, Error.prototype);
  Object.defineProperty(SqliteError.prototype, "name", descriptor);
  module.exports = SqliteError;
});

// ../pokemon-showdown/node_modules/.pnpm/better-sqlite3@7.6.2/node_modules/better-sqlite3/lib/methods/wrappers.js
var require_wrappers = __commonJS((exports) => {
  var { cppdb } = require_util();
  exports.prepare = function prepare(sql) {
    return this[cppdb].prepare(sql, this, false);
  };
  exports.exec = function exec(sql) {
    this[cppdb].exec(sql);
    return this;
  };
  exports.close = function close() {
    this[cppdb].close();
    return this;
  };
  exports.loadExtension = function loadExtension(...args) {
    this[cppdb].loadExtension(...args);
    return this;
  };
  exports.defaultSafeIntegers = function defaultSafeIntegers(...args) {
    this[cppdb].defaultSafeIntegers(...args);
    return this;
  };
  exports.unsafeMode = function unsafeMode(...args) {
    this[cppdb].unsafeMode(...args);
    return this;
  };
  exports.getters = {
    name: {
      get: function name() {
        return this[cppdb].name;
      },
      enumerable: true
    },
    open: {
      get: function open() {
        return this[cppdb].open;
      },
      enumerable: true
    },
    inTransaction: {
      get: function inTransaction() {
        return this[cppdb].inTransaction;
      },
      enumerable: true
    },
    readonly: {
      get: function readonly() {
        return this[cppdb].readonly;
      },
      enumerable: true
    },
    memory: {
      get: function memory() {
        return this[cppdb].memory;
      },
      enumerable: true
    }
  };
});

// ../pokemon-showdown/node_modules/.pnpm/better-sqlite3@7.6.2/node_modules/better-sqlite3/lib/methods/transaction.js
var require_transaction = __commonJS((exports, module) => {
  var { cppdb } = require_util();
  var controllers = new WeakMap;
  module.exports = function transaction(fn) {
    if (typeof fn !== "function")
      throw new TypeError("Expected first argument to be a function");
    const db = this[cppdb];
    const controller = getController(db, this);
    const { apply } = Function.prototype;
    const properties = {
      default: { value: wrapTransaction(apply, fn, db, controller.default) },
      deferred: { value: wrapTransaction(apply, fn, db, controller.deferred) },
      immediate: { value: wrapTransaction(apply, fn, db, controller.immediate) },
      exclusive: { value: wrapTransaction(apply, fn, db, controller.exclusive) },
      database: { value: this, enumerable: true }
    };
    Object.defineProperties(properties.default.value, properties);
    Object.defineProperties(properties.deferred.value, properties);
    Object.defineProperties(properties.immediate.value, properties);
    Object.defineProperties(properties.exclusive.value, properties);
    return properties.default.value;
  };
  var getController = (db, self) => {
    let controller = controllers.get(db);
    if (!controller) {
      const shared = {
        commit: db.prepare("COMMIT", self, false),
        rollback: db.prepare("ROLLBACK", self, false),
        savepoint: db.prepare("SAVEPOINT `\t_bs3.\t`", self, false),
        release: db.prepare("RELEASE `\t_bs3.\t`", self, false),
        rollbackTo: db.prepare("ROLLBACK TO `\t_bs3.\t`", self, false)
      };
      controllers.set(db, controller = {
        default: Object.assign({ begin: db.prepare("BEGIN", self, false) }, shared),
        deferred: Object.assign({ begin: db.prepare("BEGIN DEFERRED", self, false) }, shared),
        immediate: Object.assign({ begin: db.prepare("BEGIN IMMEDIATE", self, false) }, shared),
        exclusive: Object.assign({ begin: db.prepare("BEGIN EXCLUSIVE", self, false) }, shared)
      });
    }
    return controller;
  };
  var wrapTransaction = (apply, fn, db, { begin, commit, rollback, savepoint, release, rollbackTo }) => function sqliteTransaction() {
    let before, after, undo;
    if (db.inTransaction) {
      before = savepoint;
      after = release;
      undo = rollbackTo;
    } else {
      before = begin;
      after = commit;
      undo = rollback;
    }
    before.run();
    try {
      const result = apply.call(fn, this, arguments);
      after.run();
      return result;
    } catch (ex) {
      if (db.inTransaction) {
        undo.run();
        if (undo !== rollback)
          after.run();
      }
      throw ex;
    }
  };
});

// ../pokemon-showdown/node_modules/.pnpm/better-sqlite3@7.6.2/node_modules/better-sqlite3/lib/methods/pragma.js
var require_pragma = __commonJS((exports, module) => {
  var { getBooleanOption, cppdb } = require_util();
  module.exports = function pragma(source, options) {
    if (options == null)
      options = {};
    if (typeof source !== "string")
      throw new TypeError("Expected first argument to be a string");
    if (typeof options !== "object")
      throw new TypeError("Expected second argument to be an options object");
    const simple = getBooleanOption(options, "simple");
    const stmt = this[cppdb].prepare(`PRAGMA ${source}`, this, true);
    return simple ? stmt.pluck().get() : stmt.all();
  };
});

// ../pokemon-showdown/node_modules/.pnpm/better-sqlite3@7.6.2/node_modules/better-sqlite3/lib/methods/backup.js
var require_backup = __commonJS((exports, module) => {
  var fs = __require("fs");
  var path = __require("path");
  var { promisify } = __require("util");
  var { cppdb } = require_util();
  var fsAccess = promisify(fs.access);
  module.exports = async function backup(filename, options) {
    if (options == null)
      options = {};
    if (typeof filename !== "string")
      throw new TypeError("Expected first argument to be a string");
    if (typeof options !== "object")
      throw new TypeError("Expected second argument to be an options object");
    filename = filename.trim();
    const attachedName = "attached" in options ? options.attached : "main";
    const handler = "progress" in options ? options.progress : null;
    if (!filename)
      throw new TypeError("Backup filename cannot be an empty string");
    if (filename === ":memory:")
      throw new TypeError('Invalid backup filename ":memory:"');
    if (typeof attachedName !== "string")
      throw new TypeError('Expected the "attached" option to be a string');
    if (!attachedName)
      throw new TypeError('The "attached" option cannot be an empty string');
    if (handler != null && typeof handler !== "function")
      throw new TypeError('Expected the "progress" option to be a function');
    await fsAccess(path.dirname(filename)).catch(() => {
      throw new TypeError("Cannot save backup because the directory does not exist");
    });
    const isNewFile = await fsAccess(filename).then(() => false, () => true);
    return runBackup(this[cppdb].backup(this, attachedName, filename, isNewFile), handler || null);
  };
  var runBackup = (backup, handler) => {
    let rate = 0;
    let useDefault = true;
    return new Promise((resolve, reject) => {
      setImmediate(function step() {
        try {
          const progress = backup.transfer(rate);
          if (!progress.remainingPages) {
            backup.close();
            resolve(progress);
            return;
          }
          if (useDefault) {
            useDefault = false;
            rate = 100;
          }
          if (handler) {
            const ret = handler(progress);
            if (ret !== undefined) {
              if (typeof ret === "number" && ret === ret)
                rate = Math.max(0, Math.min(2147483647, Math.round(ret)));
              else
                throw new TypeError("Expected progress callback to return a number or undefined");
            }
          }
          setImmediate(step);
        } catch (err) {
          backup.close();
          reject(err);
        }
      });
    });
  };
});

// ../pokemon-showdown/node_modules/.pnpm/better-sqlite3@7.6.2/node_modules/better-sqlite3/lib/methods/serialize.js
var require_serialize = __commonJS((exports, module) => {
  var { cppdb } = require_util();
  module.exports = function serialize(options) {
    if (options == null)
      options = {};
    if (typeof options !== "object")
      throw new TypeError("Expected first argument to be an options object");
    const attachedName = "attached" in options ? options.attached : "main";
    if (typeof attachedName !== "string")
      throw new TypeError('Expected the "attached" option to be a string');
    if (!attachedName)
      throw new TypeError('The "attached" option cannot be an empty string');
    return this[cppdb].serialize(attachedName);
  };
});

// ../pokemon-showdown/node_modules/.pnpm/better-sqlite3@7.6.2/node_modules/better-sqlite3/lib/methods/function.js
var require_function = __commonJS((exports, module) => {
  var { getBooleanOption, cppdb } = require_util();
  module.exports = function defineFunction(name, options, fn) {
    if (options == null)
      options = {};
    if (typeof options === "function") {
      fn = options;
      options = {};
    }
    if (typeof name !== "string")
      throw new TypeError("Expected first argument to be a string");
    if (typeof fn !== "function")
      throw new TypeError("Expected last argument to be a function");
    if (typeof options !== "object")
      throw new TypeError("Expected second argument to be an options object");
    if (!name)
      throw new TypeError("User-defined function name cannot be an empty string");
    const safeIntegers = "safeIntegers" in options ? +getBooleanOption(options, "safeIntegers") : 2;
    const deterministic = getBooleanOption(options, "deterministic");
    const directOnly = getBooleanOption(options, "directOnly");
    const varargs = getBooleanOption(options, "varargs");
    let argCount = -1;
    if (!varargs) {
      argCount = fn.length;
      if (!Number.isInteger(argCount) || argCount < 0)
        throw new TypeError("Expected function.length to be a positive integer");
      if (argCount > 100)
        throw new RangeError("User-defined functions cannot have more than 100 arguments");
    }
    this[cppdb].function(fn, name, argCount, safeIntegers, deterministic, directOnly);
    return this;
  };
});

// ../pokemon-showdown/node_modules/.pnpm/better-sqlite3@7.6.2/node_modules/better-sqlite3/lib/methods/aggregate.js
var require_aggregate = __commonJS((exports, module) => {
  var { getBooleanOption, cppdb } = require_util();
  module.exports = function defineAggregate(name, options) {
    if (typeof name !== "string")
      throw new TypeError("Expected first argument to be a string");
    if (typeof options !== "object" || options === null)
      throw new TypeError("Expected second argument to be an options object");
    if (!name)
      throw new TypeError("User-defined function name cannot be an empty string");
    const start = "start" in options ? options.start : null;
    const step = getFunctionOption(options, "step", true);
    const inverse = getFunctionOption(options, "inverse", false);
    const result = getFunctionOption(options, "result", false);
    const safeIntegers = "safeIntegers" in options ? +getBooleanOption(options, "safeIntegers") : 2;
    const deterministic = getBooleanOption(options, "deterministic");
    const directOnly = getBooleanOption(options, "directOnly");
    const varargs = getBooleanOption(options, "varargs");
    let argCount = -1;
    if (!varargs) {
      argCount = Math.max(getLength(step), inverse ? getLength(inverse) : 0);
      if (argCount > 0)
        argCount -= 1;
      if (argCount > 100)
        throw new RangeError("User-defined functions cannot have more than 100 arguments");
    }
    this[cppdb].aggregate(start, step, inverse, result, name, argCount, safeIntegers, deterministic, directOnly);
    return this;
  };
  var getFunctionOption = (options, key, required) => {
    const value = key in options ? options[key] : null;
    if (typeof value === "function")
      return value;
    if (value != null)
      throw new TypeError(`Expected the "${key}" option to be a function`);
    if (required)
      throw new TypeError(`Missing required option "${key}"`);
    return null;
  };
  var getLength = ({ length }) => {
    if (Number.isInteger(length) && length >= 0)
      return length;
    throw new TypeError("Expected function.length to be a positive integer");
  };
});

// ../pokemon-showdown/node_modules/.pnpm/better-sqlite3@7.6.2/node_modules/better-sqlite3/lib/methods/table.js
var require_table = __commonJS((exports, module) => {
  function wrapFactory(factory) {
    return function virtualTableFactory(moduleName, databaseName, tableName, ...args) {
      const thisObject = {
        module: moduleName,
        database: databaseName,
        table: tableName
      };
      const def = apply.call(factory, thisObject, args);
      if (typeof def !== "object" || def === null) {
        throw new TypeError(`Virtual table module "${moduleName}" did not return a table definition object`);
      }
      return parseTableDefinition(def, "returned", moduleName);
    };
  }
  function parseTableDefinition(def, verb, moduleName) {
    if (!hasOwnProperty.call(def, "rows")) {
      throw new TypeError(`Virtual table module "${moduleName}" ${verb} a table definition without a "rows" property`);
    }
    if (!hasOwnProperty.call(def, "columns")) {
      throw new TypeError(`Virtual table module "${moduleName}" ${verb} a table definition without a "columns" property`);
    }
    const rows = def.rows;
    if (typeof rows !== "function" || Object.getPrototypeOf(rows) !== GeneratorFunctionPrototype) {
      throw new TypeError(`Virtual table module "${moduleName}" ${verb} a table definition with an invalid "rows" property (should be a generator function)`);
    }
    let columns = def.columns;
    if (!Array.isArray(columns) || !(columns = [...columns]).every((x) => typeof x === "string")) {
      throw new TypeError(`Virtual table module "${moduleName}" ${verb} a table definition with an invalid "columns" property (should be an array of strings)`);
    }
    if (columns.length !== new Set(columns).size) {
      throw new TypeError(`Virtual table module "${moduleName}" ${verb} a table definition with duplicate column names`);
    }
    if (!columns.length) {
      throw new RangeError(`Virtual table module "${moduleName}" ${verb} a table definition with zero columns`);
    }
    let parameters;
    if (hasOwnProperty.call(def, "parameters")) {
      parameters = def.parameters;
      if (!Array.isArray(parameters) || !(parameters = [...parameters]).every((x) => typeof x === "string")) {
        throw new TypeError(`Virtual table module "${moduleName}" ${verb} a table definition with an invalid "parameters" property (should be an array of strings)`);
      }
    } else {
      parameters = inferParameters(rows);
    }
    if (parameters.length !== new Set(parameters).size) {
      throw new TypeError(`Virtual table module "${moduleName}" ${verb} a table definition with duplicate parameter names`);
    }
    if (parameters.length > 32) {
      throw new RangeError(`Virtual table module "${moduleName}" ${verb} a table definition with more than the maximum number of 32 parameters`);
    }
    for (const parameter of parameters) {
      if (columns.includes(parameter)) {
        throw new TypeError(`Virtual table module "${moduleName}" ${verb} a table definition with column "${parameter}" which was ambiguously defined as both a column and parameter`);
      }
    }
    let safeIntegers = 2;
    if (hasOwnProperty.call(def, "safeIntegers")) {
      const bool = def.safeIntegers;
      if (typeof bool !== "boolean") {
        throw new TypeError(`Virtual table module "${moduleName}" ${verb} a table definition with an invalid "safeIntegers" property (should be a boolean)`);
      }
      safeIntegers = +bool;
    }
    let directOnly = false;
    if (hasOwnProperty.call(def, "directOnly")) {
      directOnly = def.directOnly;
      if (typeof directOnly !== "boolean") {
        throw new TypeError(`Virtual table module "${moduleName}" ${verb} a table definition with an invalid "directOnly" property (should be a boolean)`);
      }
    }
    const columnDefinitions = [
      ...parameters.map(identifier).map((str) => `${str} HIDDEN`),
      ...columns.map(identifier)
    ];
    return [
      `CREATE TABLE x(${columnDefinitions.join(", ")});`,
      wrapGenerator(rows, new Map(columns.map((x, i) => [x, parameters.length + i])), moduleName),
      parameters,
      safeIntegers,
      directOnly
    ];
  }
  function wrapGenerator(generator, columnMap, moduleName) {
    return function* virtualTable(...args) {
      const output = args.map((x) => Buffer.isBuffer(x) ? Buffer.from(x) : x);
      for (let i = 0;i < columnMap.size; ++i) {
        output.push(null);
      }
      for (const row of generator(...args)) {
        if (Array.isArray(row)) {
          extractRowArray(row, output, columnMap.size, moduleName);
          yield output;
        } else if (typeof row === "object" && row !== null) {
          extractRowObject(row, output, columnMap, moduleName);
          yield output;
        } else {
          throw new TypeError(`Virtual table module "${moduleName}" yielded something that isn't a valid row object`);
        }
      }
    };
  }
  function extractRowArray(row, output, columnCount, moduleName) {
    if (row.length !== columnCount) {
      throw new TypeError(`Virtual table module "${moduleName}" yielded a row with an incorrect number of columns`);
    }
    const offset = output.length - columnCount;
    for (let i = 0;i < columnCount; ++i) {
      output[i + offset] = row[i];
    }
  }
  function extractRowObject(row, output, columnMap, moduleName) {
    let count = 0;
    for (const key of Object.keys(row)) {
      const index = columnMap.get(key);
      if (index === undefined) {
        throw new TypeError(`Virtual table module "${moduleName}" yielded a row with an undeclared column "${key}"`);
      }
      output[index] = row[key];
      count += 1;
    }
    if (count !== columnMap.size) {
      throw new TypeError(`Virtual table module "${moduleName}" yielded a row with missing columns`);
    }
  }
  function inferParameters({ length }) {
    if (!Number.isInteger(length) || length < 0) {
      throw new TypeError("Expected function.length to be a positive integer");
    }
    const params = [];
    for (let i = 0;i < length; ++i) {
      params.push(`\$${i + 1}`);
    }
    return params;
  }
  var { cppdb } = require_util();
  module.exports = function defineTable(name, factory) {
    if (typeof name !== "string")
      throw new TypeError("Expected first argument to be a string");
    if (!name)
      throw new TypeError("Virtual table module name cannot be an empty string");
    let eponymous = false;
    if (typeof factory === "object" && factory !== null) {
      eponymous = true;
      factory = defer(parseTableDefinition(factory, "used", name));
    } else {
      if (typeof factory !== "function")
        throw new TypeError("Expected second argument to be a function or a table definition object");
      factory = wrapFactory(factory);
    }
    this[cppdb].table(factory, name, eponymous);
    return this;
  };
  var { hasOwnProperty } = Object.prototype;
  var { apply } = Function.prototype;
  var GeneratorFunctionPrototype = Object.getPrototypeOf(function* () {
  });
  var identifier = (str) => `"${str.replace(/"/g, '""')}"`;
  var defer = (x) => () => x;
});

// ../pokemon-showdown/node_modules/.pnpm/better-sqlite3@7.6.2/node_modules/better-sqlite3/lib/methods/inspect.js
var require_inspect = __commonJS((exports, module) => {
  var DatabaseInspection = function Database() {
  };
  module.exports = function inspect(depth, opts) {
    return Object.assign(new DatabaseInspection, this);
  };
});

// ../pokemon-showdown/node_modules/.pnpm/better-sqlite3@7.6.2/node_modules/better-sqlite3/lib/database.js
var require_database = __commonJS((exports, module) => {
  function Database(filenameGiven, options) {
    if (new.target == null) {
      return new Database(filenameGiven, options);
    }
    let buffer;
    if (Buffer.isBuffer(filenameGiven)) {
      buffer = filenameGiven;
      filenameGiven = ":memory:";
    }
    if (filenameGiven == null)
      filenameGiven = "";
    if (options == null)
      options = {};
    if (typeof filenameGiven !== "string")
      throw new TypeError("Expected first argument to be a string");
    if (typeof options !== "object")
      throw new TypeError("Expected second argument to be an options object");
    if ("readOnly" in options)
      throw new TypeError('Misspelled option "readOnly" should be "readonly"');
    if ("memory" in options)
      throw new TypeError('Option "memory" was removed in v7.0.0 (use ":memory:" filename instead)');
    const filename = filenameGiven.trim();
    const anonymous = filename === "" || filename === ":memory:";
    const readonly = util.getBooleanOption(options, "readonly");
    const fileMustExist = util.getBooleanOption(options, "fileMustExist");
    const timeout = "timeout" in options ? options.timeout : 5000;
    const verbose = "verbose" in options ? options.verbose : null;
    const nativeBindingPath = "nativeBinding" in options ? options.nativeBinding : null;
    if (readonly && anonymous && !buffer)
      throw new TypeError("In-memory/temporary databases cannot be readonly");
    if (!Number.isInteger(timeout) || timeout < 0)
      throw new TypeError('Expected the "timeout" option to be a positive integer');
    if (timeout > 2147483647)
      throw new RangeError('Option "timeout" cannot be greater than 2147483647');
    if (verbose != null && typeof verbose !== "function")
      throw new TypeError('Expected the "verbose" option to be a function');
    if (nativeBindingPath != null && typeof nativeBindingPath !== "string")
      throw new TypeError('Expected the "nativeBinding" option to be a string');
    let addon;
    if (nativeBindingPath == null) {
      addon = DEFAULT_ADDON || (DEFAULT_ADDON = require_bindings()("better_sqlite3.node"));
    } else {
      addon = __require(path.resolve(nativeBindingPath).replace(/(\.node)?$/, ".node"));
    }
    if (!addon.isInitialized) {
      addon.setErrorConstructor(SqliteError);
      addon.isInitialized = true;
    }
    if (!anonymous && !fs.existsSync(path.dirname(filename))) {
      throw new TypeError("Cannot open database because the directory does not exist");
    }
    Object.defineProperties(this, {
      [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },
      ...wrappers.getters
    });
  }
  var fs = __require("fs");
  var path = __require("path");
  var util = require_util();
  var SqliteError = require_sqlite_error();
  var DEFAULT_ADDON;
  var wrappers = require_wrappers();
  Database.prototype.prepare = wrappers.prepare;
  Database.prototype.transaction = require_transaction();
  Database.prototype.pragma = require_pragma();
  Database.prototype.backup = require_backup();
  Database.prototype.serialize = require_serialize();
  Database.prototype.function = require_function();
  Database.prototype.aggregate = require_aggregate();
  Database.prototype.table = require_table();
  Database.prototype.loadExtension = wrappers.loadExtension;
  Database.prototype.exec = wrappers.exec;
  Database.prototype.close = wrappers.close;
  Database.prototype.defaultSafeIntegers = wrappers.defaultSafeIntegers;
  Database.prototype.unsafeMode = wrappers.unsafeMode;
  Database.prototype[util.inspect] = require_inspect();
  module.exports = Database;
});

// /home/max/tanso/pokemon-showdown/node_modules/better-sqlite3/lib/index.js
var require_lib = __commonJS((exports, module) => {
  module.exports = require_database();
  module.exports.SqliteError = require_sqlite_error();
});

// /home/max/tanso/pokemon-showdown/node_modules/sql-template-strings/index.js
var require_sql_template_strings = __commonJS((exports, module) => {
  function SQL(strings) {
    return new SQLStatement(strings.slice(0), Array.from(arguments).slice(1));
  }

  class SQLStatement {
    constructor(strings, values) {
      this.strings = strings;
      this.values = values;
    }
    get query() {
      return this.bind ? this.text : this.sql;
    }
    get text() {
      return this.strings.reduce((prev, curr, i) => prev + "$" + i + curr);
    }
    append(statement) {
      if (statement instanceof SQLStatement) {
        this.strings[this.strings.length - 1] += statement.strings[0];
        this.strings.push.apply(this.strings, statement.strings.slice(1));
        (this.values || this.bind).push.apply(this.values, statement.values);
      } else {
        this.strings[this.strings.length - 1] += statement;
      }
      return this;
    }
    useBind(value) {
      if (value === undefined) {
        value = true;
      }
      if (value && !this.bind) {
        this.bind = this.values;
        delete this.values;
      } else if (!value && this.bind) {
        this.values = this.bind;
        delete this.bind;
      }
      return this;
    }
    setName(name) {
      this.name = name;
      return this;
    }
  }
  Object.defineProperty(SQLStatement.prototype, "sql", {
    enumerable: true,
    get() {
      return this.strings.join("?");
    }
  });
  module.exports = SQL;
  module.exports.SQL = SQL;
  module.exports.default = SQL;
  module.exports.SQLStatement = SQLStatement;
});

// ../pokemon-showdown/dist/lib/sql.js
var require_sql = __commonJS((exports, module) => {
  function getModule() {
    try {
      return require_lib();
    } catch {
      return null;
    }
  }
  function getSQL(module2, input) {
    const { processes } = input;
    const PM = new SQLDatabaseManager(module2, input);
    if (PM.isParentProcess) {
      if (processes)
        PM.spawn(processes);
    }
    return PM;
  }
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var sql_exports = {};
  __export2(sql_exports, {
    DB_NOT_FOUND: () => DB_NOT_FOUND,
    DatabaseTable: () => DatabaseTable,
    SQL: () => SQL,
    SQLDatabaseManager: () => SQLDatabaseManager,
    Statement: () => Statement,
    tables: () => tables
  });
  module.exports = __toCommonJS2(sql_exports);
  var import_process_manager = require_process_manager();
  var import_fs = require_fs();
  var DB_NOT_FOUND = null;

  class Statement {
    constructor(statement, db) {
      this.db = db;
      this.statement = statement;
    }
    run(data) {
      return this.db.run(this.statement, data);
    }
    all(data) {
      return this.db.all(this.statement, data);
    }
    get(data) {
      return this.db.get(this.statement, data);
    }
    toString() {
      return this.statement;
    }
    toJSON() {
      return this.statement;
    }
  }

  class SQLDatabaseManager extends import_process_manager.QueryProcessManager {
    constructor(module2, options) {
      super(module2, (query) => {
        if (!this.dbReady) {
          this.setupDatabase();
        }
        try {
          switch (query.type) {
            case "load-extension": {
              if (!this.database)
                return null;
              this.loadExtensionFile(query.data);
              return true;
            }
            case "transaction": {
              const transaction = this.state.transactions.get(query.name);
              if (!transaction || !this.database) {
                return null;
              }
              const env = {
                db: this.database,
                statements: this.state.statements
              };
              return transaction(query.data, env) || null;
            }
            case "exec": {
              if (!this.database)
                return { changes: 0 };
              this.database.exec(query.data);
              return true;
            }
            case "get": {
              if (!this.database) {
                return null;
              }
              return this.extractStatement(query).get(query.data);
            }
            case "run": {
              if (!this.database) {
                return null;
              }
              return this.extractStatement(query).run(query.data);
            }
            case "all": {
              if (!this.database) {
                return null;
              }
              return this.extractStatement(query).all(query.data);
            }
            case "prepare":
              if (!this.database) {
                return null;
              }
              this.state.statements.set(query.data, this.database.prepare(query.data));
              return query.data;
          }
        } catch (error) {
          return this.onError(error, query);
        }
      });
      this.database = null;
      this.dbReady = false;
      this.options = options;
      this.state = {
        transactions: /* @__PURE__ */ new Map,
        statements: /* @__PURE__ */ new Map
      };
      if (!this.isParentProcess)
        this.setupDatabase();
    }
    onError(err, query) {
      if (this.options.onError) {
        const result = this.options.onError(err, query, false);
        if (result)
          return result;
      }
      return {
        queryError: {
          stack: err.stack,
          message: err.message,
          query
        }
      };
    }
    cacheStatement(source) {
      source = source.trim();
      let statement = this.state.statements.get(source);
      if (!statement) {
        statement = this.database.prepare(source);
        this.state.statements.set(source, statement);
      }
      return statement;
    }
    registerFunction(key, cb) {
      this.database.function(key, cb);
    }
    extractStatement(query) {
      query.statement = query.statement.trim();
      const statement = query.noPrepare ? this.state.statements.get(query.statement) : this.cacheStatement(query.statement);
      if (!statement)
        throw new Error(`Missing cached statement "${query.statement}" where required`);
      return statement;
    }
    setupDatabase() {
      if (this.dbReady)
        return;
      this.dbReady = true;
      const { file, extension } = this.options;
      const Database = getModule();
      this.database = Database ? new Database(file) : null;
      if (extension)
        this.loadExtensionFile(extension);
    }
    loadExtensionFile(extension) {
      return this.handleExtensions(__require("../" + extension));
    }
    handleExtensions(imports) {
      if (!this.database)
        return;
      const {
        functions,
        transactions: storedTransactions,
        statements: storedStatements,
        onDatabaseStart
      } = imports;
      if (onDatabaseStart) {
        onDatabaseStart.call(this, this.database);
      }
      if (functions) {
        for (const k in functions) {
          this.registerFunction(k, functions[k]);
        }
      }
      if (storedTransactions) {
        for (const t in storedTransactions) {
          const transaction = this.database.transaction(storedTransactions[t]);
          this.state.transactions.set(t, transaction);
        }
      }
      if (storedStatements) {
        for (const k in storedStatements) {
          const statement = this.database.prepare(storedStatements[k]);
          this.state.statements.set(statement.source, statement);
        }
      }
    }
    async query(input) {
      const result = await super.query(input);
      if (result?.queryError) {
        const err = new Error(result.queryError.message);
        err.stack = result.queryError.stack;
        if (this.options.onError) {
          const errResult = this.options.onError(err, result.queryError.query, true);
          if (errResult)
            return errResult;
        }
        throw err;
      }
      return result;
    }
    all(statement, data = [], noPrepare) {
      if (typeof statement !== "string")
        statement = statement.toString();
      return this.query({ type: "all", statement, data, noPrepare });
    }
    get(statement, data = [], noPrepare) {
      if (typeof statement !== "string")
        statement = statement.toString();
      return this.query({ type: "get", statement, data, noPrepare });
    }
    run(statement, data = [], noPrepare) {
      if (typeof statement !== "string")
        statement = statement.toString();
      return this.query({ type: "run", statement, data, noPrepare });
    }
    transaction(name, data = []) {
      return this.query({ type: "transaction", name, data });
    }
    async prepare(statement) {
      const source = await this.query({ type: "prepare", data: statement });
      if (!source)
        return null;
      return new Statement(source, this);
    }
    exec(data) {
      return this.query({ type: "exec", data });
    }
    loadExtension(filepath) {
      return this.query({ type: "load-extension", data: filepath });
    }
    async runFile(file) {
      const contents = await (0, import_fs.FS)(file).read();
      return this.query({ type: "exec", data: contents });
    }
  }
  var tables = /* @__PURE__ */ new Map;

  class DatabaseTable {
    constructor(name, primaryKeyName, database) {
      this.name = name;
      this.database = database;
      this.primaryKeyName = primaryKeyName;
      tables.set(this.name, this);
    }
    async selectOne(entries, where) {
      const query = where || SQL.SQL``;
      query.append(" LIMIT 1");
      const rows = await this.selectAll(entries, query);
      return rows?.[0] || null;
    }
    selectAll(entries, where) {
      const query = SQL.SQL`SELECT `;
      if (typeof entries === "string") {
        query.append(` ${entries} `);
      } else {
        for (let i = 0;i < entries.length; i++) {
          query.append(entries[i]);
          if (typeof entries[i + 1] !== "undefined")
            query.append(", ");
        }
        query.append(" ");
      }
      query.append(`FROM ${this.name} `);
      if (where) {
        query.append(" WHERE ");
        query.append(where);
      }
      return this.all(query);
    }
    get(entries, keyId) {
      const query = SQL.SQL``;
      query.append(this.primaryKeyName);
      query.append(SQL.SQL` = ${keyId}`);
      return this.selectOne(entries, query);
    }
    updateAll(toParams, where, limit) {
      const to = Object.entries(toParams);
      const query = SQL.SQL`UPDATE `;
      query.append(this.name + " SET ");
      for (let i = 0;i < to.length; i++) {
        const [k, v] = to[i];
        query.append(`${k} = `);
        query.append(SQL.SQL`${v}`);
        if (typeof to[i + 1] !== "undefined") {
          query.append(", ");
        }
      }
      if (where) {
        query.append(` WHERE `);
        query.append(where);
      }
      if (limit)
        query.append(SQL.SQL` LIMIT ${limit}`);
      return this.run(query);
    }
    updateOne(to, where) {
      return this.updateAll(to, where, 1);
    }
    deleteAll(where, limit) {
      const query = SQL.SQL`DELETE FROM `;
      query.append(this.name);
      if (where) {
        query.append(" WHERE ");
        query.append(where);
      }
      if (limit) {
        query.append(SQL.SQL` LIMIT ${limit}`);
      }
      return this.run(query);
    }
    delete(keyEntry) {
      const query = SQL.SQL``;
      query.append(this.primaryKeyName);
      query.append(SQL.SQL` = ${keyEntry}`);
      return this.deleteOne(query);
    }
    deleteOne(where) {
      return this.deleteAll(where, 1);
    }
    insert(colMap, rest, isReplace = false) {
      const query = SQL.SQL``;
      query.append(`${isReplace ? "REPLACE" : "INSERT"} INTO ${this.name} (`);
      const keys = Object.keys(colMap);
      for (let i = 0;i < keys.length; i++) {
        query.append(keys[i]);
        if (typeof keys[i + 1] !== "undefined")
          query.append(", ");
      }
      query.append(") VALUES (");
      for (let i = 0;i < keys.length; i++) {
        const key = keys[i];
        query.append(SQL.SQL`${colMap[key]}`);
        if (typeof keys[i + 1] !== "undefined")
          query.append(", ");
      }
      query.append(") ");
      if (rest)
        query.append(rest);
      return this.database.run(query.sql, query.values);
    }
    replace(cols, rest) {
      return this.insert(cols, rest, true);
    }
    update(primaryKey, data) {
      const query = SQL.SQL``;
      query.append(this.primaryKeyName + " = ");
      query.append(SQL.SQL`${primaryKey}`);
      return this.updateOne(data, query);
    }
    run(sql) {
      return this.database.run(sql.sql, sql.values);
    }
    all(sql) {
      return this.database.all(sql.sql, sql.values);
    }
  }
  var SQL = Object.assign(getSQL, {
    DatabaseTable,
    SQLDatabaseManager,
    tables,
    SQL: (() => {
      try {
        return require_sql_template_strings();
      } catch {
        return () => {
          throw new Error("Using SQL-template-strings without it installed");
        };
      }
    })()
  });
});

// /home/max/tanso/pokemon-showdown/node_modules/.pnpm/pg-types@2.2.0/node_modules/postgres-array/index.js
var require_postgres_array = __commonJS((exports) => {
  function identity(value) {
    return value;
  }
  exports.parse = function(source, transform) {
    return new ArrayParser(source, transform).parse();
  };

  class ArrayParser {
    constructor(source, transform) {
      this.source = source;
      this.transform = transform || identity;
      this.position = 0;
      this.entries = [];
      this.recorded = [];
      this.dimension = 0;
    }
    isEof() {
      return this.position >= this.source.length;
    }
    nextCharacter() {
      var character = this.source[this.position++];
      if (character === "\\") {
        return {
          value: this.source[this.position++],
          escaped: true
        };
      }
      return {
        value: character,
        escaped: false
      };
    }
    record(character) {
      this.recorded.push(character);
    }
    newEntry(includeEmpty) {
      var entry;
      if (this.recorded.length > 0 || includeEmpty) {
        entry = this.recorded.join("");
        if (entry === "NULL" && !includeEmpty) {
          entry = null;
        }
        if (entry !== null)
          entry = this.transform(entry);
        this.entries.push(entry);
        this.recorded = [];
      }
    }
    consumeDimensions() {
      if (this.source[0] === "[") {
        while (!this.isEof()) {
          var char = this.nextCharacter();
          if (char.value === "=")
            break;
        }
      }
    }
    parse(nested) {
      var character, parser, quote;
      this.consumeDimensions();
      while (!this.isEof()) {
        character = this.nextCharacter();
        if (character.value === "{" && !quote) {
          this.dimension++;
          if (this.dimension > 1) {
            parser = new ArrayParser(this.source.substr(this.position - 1), this.transform);
            this.entries.push(parser.parse(true));
            this.position += parser.position - 2;
          }
        } else if (character.value === "}" && !quote) {
          this.dimension--;
          if (!this.dimension) {
            this.newEntry();
            if (nested)
              return this.entries;
          }
        } else if (character.value === '"' && !character.escaped) {
          if (quote)
            this.newEntry(true);
          quote = !quote;
        } else if (character.value === "," && !quote) {
          this.newEntry();
        } else {
          this.record(character.value);
        }
      }
      if (this.dimension !== 0) {
        throw new Error("array dimension not balanced");
      }
      return this.entries;
    }
  }
});

// ../pokemon-showdown/node_modules/.pnpm/pg-types@2.2.0/node_modules/pg-types/lib/arrayParser.js
var require_arrayParser = __commonJS((exports, module) => {
  var array = require_postgres_array();
  module.exports = {
    create: function(source, transform) {
      return {
        parse: function() {
          return array.parse(source, transform);
        }
      };
    }
  };
});

// /home/max/tanso/pokemon-showdown/node_modules/.pnpm/pg-types@2.2.0/node_modules/postgres-date/index.js
var require_postgres_date = __commonJS((exports, module) => {
  function getDate(isoDate) {
    var matches = DATE.exec(isoDate);
    if (!matches) {
      return;
    }
    var year = parseInt(matches[1], 10);
    var isBC = !!matches[4];
    if (isBC) {
      year = bcYearToNegativeYear(year);
    }
    var month = parseInt(matches[2], 10) - 1;
    var day = matches[3];
    var date = new Date(year, month, day);
    if (is0To99(year)) {
      date.setFullYear(year);
    }
    return date;
  }
  function timeZoneOffset(isoDate) {
    if (isoDate.endsWith("+00")) {
      return 0;
    }
    var zone = TIME_ZONE.exec(isoDate.split(" ")[1]);
    if (!zone)
      return;
    var type = zone[1];
    if (type === "Z") {
      return 0;
    }
    var sign = type === "-" ? -1 : 1;
    var offset = parseInt(zone[2], 10) * 3600 + parseInt(zone[3] || 0, 10) * 60 + parseInt(zone[4] || 0, 10);
    return offset * sign * 1000;
  }
  function bcYearToNegativeYear(year) {
    return -(year - 1);
  }
  function is0To99(num) {
    return num >= 0 && num < 100;
  }
  var DATE_TIME = /(\d{1,})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})(\.\d{1,})?.*?( BC)?$/;
  var DATE = /^(\d{1,})-(\d{2})-(\d{2})( BC)?$/;
  var TIME_ZONE = /([Z+-])(\d{2})?:?(\d{2})?:?(\d{2})?/;
  var INFINITY = /^-?infinity$/;
  module.exports = function parseDate(isoDate) {
    if (INFINITY.test(isoDate)) {
      return Number(isoDate.replace("i", "I"));
    }
    var matches = DATE_TIME.exec(isoDate);
    if (!matches) {
      return getDate(isoDate) || null;
    }
    var isBC = !!matches[8];
    var year = parseInt(matches[1], 10);
    if (isBC) {
      year = bcYearToNegativeYear(year);
    }
    var month = parseInt(matches[2], 10) - 1;
    var day = matches[3];
    var hour = parseInt(matches[4], 10);
    var minute = parseInt(matches[5], 10);
    var second = parseInt(matches[6], 10);
    var ms = matches[7];
    ms = ms ? 1000 * parseFloat(ms) : 0;
    var date;
    var offset = timeZoneOffset(isoDate);
    if (offset != null) {
      date = new Date(Date.UTC(year, month, day, hour, minute, second, ms));
      if (is0To99(year)) {
        date.setUTCFullYear(year);
      }
      if (offset !== 0) {
        date.setTime(date.getTime() - offset);
      }
    } else {
      date = new Date(year, month, day, hour, minute, second, ms);
      if (is0To99(year)) {
        date.setFullYear(year);
      }
    }
    return date;
  };
});

// /home/max/tanso/pokemon-showdown/node_modules/.pnpm/postgres-interval@1.2.0/node_modules/xtend/mutable.js
var require_mutable = __commonJS((exports, module) => {
  function extend(target) {
    for (var i = 1;i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  }
  module.exports = extend;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
});

// /home/max/tanso/pokemon-showdown/node_modules/.pnpm/pg-types@2.2.0/node_modules/postgres-interval/index.js
var require_postgres_interval = __commonJS((exports, module) => {
  function PostgresInterval(raw) {
    if (!(this instanceof PostgresInterval)) {
      return new PostgresInterval(raw);
    }
    extend(this, parse(raw));
  }
  function parseMilliseconds(fraction) {
    var microseconds = fraction + "000000".slice(fraction.length);
    return parseInt(microseconds, 10) / 1000;
  }
  function parse(interval) {
    if (!interval)
      return {};
    var matches = INTERVAL.exec(interval);
    var isNegative = matches[8] === "-";
    return Object.keys(positions).reduce(function(parsed, property) {
      var position = positions[property];
      var value = matches[position];
      if (!value)
        return parsed;
      value = property === "milliseconds" ? parseMilliseconds(value) : parseInt(value, 10);
      if (!value)
        return parsed;
      if (isNegative && ~negatives.indexOf(property)) {
        value *= -1;
      }
      parsed[property] = value;
      return parsed;
    }, {});
  }
  var extend = require_mutable();
  module.exports = PostgresInterval;
  var properties = ["seconds", "minutes", "hours", "days", "months", "years"];
  PostgresInterval.prototype.toPostgres = function() {
    var filtered = properties.filter(this.hasOwnProperty, this);
    if (this.milliseconds && filtered.indexOf("seconds") < 0) {
      filtered.push("seconds");
    }
    if (filtered.length === 0)
      return "0";
    return filtered.map(function(property) {
      var value = this[property] || 0;
      if (property === "seconds" && this.milliseconds) {
        value = (value + this.milliseconds / 1000).toFixed(6).replace(/\.?0+$/, "");
      }
      return value + " " + property;
    }, this).join(" ");
  };
  var propertiesISOEquivalent = {
    years: "Y",
    months: "M",
    days: "D",
    hours: "H",
    minutes: "M",
    seconds: "S"
  };
  var dateProperties = ["years", "months", "days"];
  var timeProperties = ["hours", "minutes", "seconds"];
  PostgresInterval.prototype.toISOString = PostgresInterval.prototype.toISO = function() {
    var datePart = dateProperties.map(buildProperty, this).join("");
    var timePart = timeProperties.map(buildProperty, this).join("");
    return "P" + datePart + "T" + timePart;
    function buildProperty(property) {
      var value = this[property] || 0;
      if (property === "seconds" && this.milliseconds) {
        value = (value + this.milliseconds / 1000).toFixed(6).replace(/0+$/, "");
      }
      return value + propertiesISOEquivalent[property];
    }
  };
  var NUMBER = "([+-]?\\d+)";
  var YEAR = NUMBER + "\\s+years?";
  var MONTH = NUMBER + "\\s+mons?";
  var DAY = NUMBER + "\\s+days?";
  var TIME = "([+-])?([\\d]*):(\\d\\d):(\\d\\d)\\.?(\\d{1,6})?";
  var INTERVAL = new RegExp([YEAR, MONTH, DAY, TIME].map(function(regexString) {
    return "(" + regexString + ")?";
  }).join("\\s*"));
  var positions = {
    years: 2,
    months: 4,
    days: 6,
    hours: 9,
    minutes: 10,
    seconds: 11,
    milliseconds: 12
  };
  var negatives = ["hours", "minutes", "seconds", "milliseconds"];
});

// /home/max/tanso/pokemon-showdown/node_modules/.pnpm/pg-types@2.2.0/node_modules/postgres-bytea/index.js
var require_postgres_bytea = __commonJS((exports, module) => {
  module.exports = function parseBytea(input) {
    if (/^\\x/.test(input)) {
      return new Buffer(input.substr(2), "hex");
    }
    var output = "";
    var i = 0;
    while (i < input.length) {
      if (input[i] !== "\\") {
        output += input[i];
        ++i;
      } else {
        if (/[0-7]{3}/.test(input.substr(i + 1, 3))) {
          output += String.fromCharCode(parseInt(input.substr(i + 1, 3), 8));
          i += 4;
        } else {
          var backslashes = 1;
          while (i + backslashes < input.length && input[i + backslashes] === "\\") {
            backslashes++;
          }
          for (var k = 0;k < Math.floor(backslashes / 2); ++k) {
            output += "\\";
          }
          i += Math.floor(backslashes / 2) * 2;
        }
      }
    }
    return new Buffer(output, "binary");
  };
});

// ../pokemon-showdown/node_modules/.pnpm/pg-types@2.2.0/node_modules/pg-types/lib/textParsers.js
var require_textParsers = __commonJS((exports, module) => {
  function allowNull(fn) {
    return function nullAllowed(value) {
      if (value === null)
        return value;
      return fn(value);
    };
  }
  function parseBool(value) {
    if (value === null)
      return value;
    return value === "TRUE" || value === "t" || value === "true" || value === "y" || value === "yes" || value === "on" || value === "1";
  }
  function parseBoolArray(value) {
    if (!value)
      return null;
    return array.parse(value, parseBool);
  }
  function parseBaseTenInt(string) {
    return parseInt(string, 10);
  }
  function parseIntegerArray(value) {
    if (!value)
      return null;
    return array.parse(value, allowNull(parseBaseTenInt));
  }
  function parseBigIntegerArray(value) {
    if (!value)
      return null;
    return array.parse(value, allowNull(function(entry) {
      return parseBigInteger(entry).trim();
    }));
  }
  var array = require_postgres_array();
  var arrayParser = require_arrayParser();
  var parseDate = require_postgres_date();
  var parseInterval = require_postgres_interval();
  var parseByteA = require_postgres_bytea();
  var parsePointArray = function(value) {
    if (!value) {
      return null;
    }
    var p = arrayParser.create(value, function(entry) {
      if (entry !== null) {
        entry = parsePoint(entry);
      }
      return entry;
    });
    return p.parse();
  };
  var parseFloatArray = function(value) {
    if (!value) {
      return null;
    }
    var p = arrayParser.create(value, function(entry) {
      if (entry !== null) {
        entry = parseFloat(entry);
      }
      return entry;
    });
    return p.parse();
  };
  var parseStringArray = function(value) {
    if (!value) {
      return null;
    }
    var p = arrayParser.create(value);
    return p.parse();
  };
  var parseDateArray = function(value) {
    if (!value) {
      return null;
    }
    var p = arrayParser.create(value, function(entry) {
      if (entry !== null) {
        entry = parseDate(entry);
      }
      return entry;
    });
    return p.parse();
  };
  var parseIntervalArray = function(value) {
    if (!value) {
      return null;
    }
    var p = arrayParser.create(value, function(entry) {
      if (entry !== null) {
        entry = parseInterval(entry);
      }
      return entry;
    });
    return p.parse();
  };
  var parseByteAArray = function(value) {
    if (!value) {
      return null;
    }
    return array.parse(value, allowNull(parseByteA));
  };
  var parseInteger = function(value) {
    return parseInt(value, 10);
  };
  var parseBigInteger = function(value) {
    var valStr = String(value);
    if (/^\d+$/.test(valStr)) {
      return valStr;
    }
    return value;
  };
  var parseJsonArray = function(value) {
    if (!value) {
      return null;
    }
    return array.parse(value, allowNull(JSON.parse));
  };
  var parsePoint = function(value) {
    if (value[0] !== "(") {
      return null;
    }
    value = value.substring(1, value.length - 1).split(",");
    return {
      x: parseFloat(value[0]),
      y: parseFloat(value[1])
    };
  };
  var parseCircle = function(value) {
    if (value[0] !== "<" && value[1] !== "(") {
      return null;
    }
    var point = "(";
    var radius = "";
    var pointParsed = false;
    for (var i = 2;i < value.length - 1; i++) {
      if (!pointParsed) {
        point += value[i];
      }
      if (value[i] === ")") {
        pointParsed = true;
        continue;
      } else if (!pointParsed) {
        continue;
      }
      if (value[i] === ",") {
        continue;
      }
      radius += value[i];
    }
    var result = parsePoint(point);
    result.radius = parseFloat(radius);
    return result;
  };
  var init = function(register) {
    register(20, parseBigInteger);
    register(21, parseInteger);
    register(23, parseInteger);
    register(26, parseInteger);
    register(700, parseFloat);
    register(701, parseFloat);
    register(16, parseBool);
    register(1082, parseDate);
    register(1114, parseDate);
    register(1184, parseDate);
    register(600, parsePoint);
    register(651, parseStringArray);
    register(718, parseCircle);
    register(1000, parseBoolArray);
    register(1001, parseByteAArray);
    register(1005, parseIntegerArray);
    register(1007, parseIntegerArray);
    register(1028, parseIntegerArray);
    register(1016, parseBigIntegerArray);
    register(1017, parsePointArray);
    register(1021, parseFloatArray);
    register(1022, parseFloatArray);
    register(1231, parseFloatArray);
    register(1014, parseStringArray);
    register(1015, parseStringArray);
    register(1008, parseStringArray);
    register(1009, parseStringArray);
    register(1040, parseStringArray);
    register(1041, parseStringArray);
    register(1115, parseDateArray);
    register(1182, parseDateArray);
    register(1185, parseDateArray);
    register(1186, parseInterval);
    register(1187, parseIntervalArray);
    register(17, parseByteA);
    register(114, JSON.parse.bind(JSON));
    register(3802, JSON.parse.bind(JSON));
    register(199, parseJsonArray);
    register(3807, parseJsonArray);
    register(3907, parseStringArray);
    register(2951, parseStringArray);
    register(791, parseStringArray);
    register(1183, parseStringArray);
    register(1270, parseStringArray);
  };
  module.exports = {
    init
  };
});

// /home/max/tanso/pokemon-showdown/node_modules/.pnpm/pg-types@2.2.0/node_modules/pg-int8/index.js
var require_pg_int8 = __commonJS((exports, module) => {
  function readInt8(buffer) {
    var high = buffer.readInt32BE(0);
    var low = buffer.readUInt32BE(4);
    var sign = "";
    if (high < 0) {
      high = ~high + (low === 0);
      low = ~low + 1 >>> 0;
      sign = "-";
    }
    var result = "";
    var carry;
    var t;
    var digits;
    var pad;
    var l;
    var i;
    {
      carry = high % BASE;
      high = high / BASE >>> 0;
      t = 4294967296 * carry + low;
      low = t / BASE >>> 0;
      digits = "" + (t - BASE * low);
      if (low === 0 && high === 0) {
        return sign + digits + result;
      }
      pad = "";
      l = 6 - digits.length;
      for (i = 0;i < l; i++) {
        pad += "0";
      }
      result = pad + digits + result;
    }
    {
      carry = high % BASE;
      high = high / BASE >>> 0;
      t = 4294967296 * carry + low;
      low = t / BASE >>> 0;
      digits = "" + (t - BASE * low);
      if (low === 0 && high === 0) {
        return sign + digits + result;
      }
      pad = "";
      l = 6 - digits.length;
      for (i = 0;i < l; i++) {
        pad += "0";
      }
      result = pad + digits + result;
    }
    {
      carry = high % BASE;
      high = high / BASE >>> 0;
      t = 4294967296 * carry + low;
      low = t / BASE >>> 0;
      digits = "" + (t - BASE * low);
      if (low === 0 && high === 0) {
        return sign + digits + result;
      }
      pad = "";
      l = 6 - digits.length;
      for (i = 0;i < l; i++) {
        pad += "0";
      }
      result = pad + digits + result;
    }
    {
      carry = high % BASE;
      t = 4294967296 * carry + low;
      digits = "" + t % BASE;
      return sign + digits + result;
    }
  }
  var BASE = 1e6;
  module.exports = readInt8;
});

// ../pokemon-showdown/node_modules/.pnpm/pg-types@2.2.0/node_modules/pg-types/lib/binaryParsers.js
var require_binaryParsers = __commonJS((exports, module) => {
  var parseInt64 = require_pg_int8();
  var parseBits = function(data, bits, offset, invert, callback) {
    offset = offset || 0;
    invert = invert || false;
    callback = callback || function(lastValue, newValue, bits2) {
      return lastValue * Math.pow(2, bits2) + newValue;
    };
    var offsetBytes = offset >> 3;
    var inv = function(value) {
      if (invert) {
        return ~value & 255;
      }
      return value;
    };
    var mask = 255;
    var firstBits = 8 - offset % 8;
    if (bits < firstBits) {
      mask = 255 << 8 - bits & 255;
      firstBits = bits;
    }
    if (offset) {
      mask = mask >> offset % 8;
    }
    var result = 0;
    if (offset % 8 + bits >= 8) {
      result = callback(0, inv(data[offsetBytes]) & mask, firstBits);
    }
    var bytes = bits + offset >> 3;
    for (var i = offsetBytes + 1;i < bytes; i++) {
      result = callback(result, inv(data[i]), 8);
    }
    var lastBits = (bits + offset) % 8;
    if (lastBits > 0) {
      result = callback(result, inv(data[bytes]) >> 8 - lastBits, lastBits);
    }
    return result;
  };
  var parseFloatFromBits = function(data, precisionBits, exponentBits) {
    var bias = Math.pow(2, exponentBits - 1) - 1;
    var sign = parseBits(data, 1);
    var exponent = parseBits(data, exponentBits, 1);
    if (exponent === 0) {
      return 0;
    }
    var precisionBitsCounter = 1;
    var parsePrecisionBits = function(lastValue, newValue, bits) {
      if (lastValue === 0) {
        lastValue = 1;
      }
      for (var i = 1;i <= bits; i++) {
        precisionBitsCounter /= 2;
        if ((newValue & 1 << bits - i) > 0) {
          lastValue += precisionBitsCounter;
        }
      }
      return lastValue;
    };
    var mantissa = parseBits(data, precisionBits, exponentBits + 1, false, parsePrecisionBits);
    if (exponent == Math.pow(2, exponentBits + 1) - 1) {
      if (mantissa === 0) {
        return sign === 0 ? Infinity : -Infinity;
      }
      return NaN;
    }
    return (sign === 0 ? 1 : -1) * Math.pow(2, exponent - bias) * mantissa;
  };
  var parseInt16 = function(value) {
    if (parseBits(value, 1) == 1) {
      return -1 * (parseBits(value, 15, 1, true) + 1);
    }
    return parseBits(value, 15, 1);
  };
  var parseInt32 = function(value) {
    if (parseBits(value, 1) == 1) {
      return -1 * (parseBits(value, 31, 1, true) + 1);
    }
    return parseBits(value, 31, 1);
  };
  var parseFloat32 = function(value) {
    return parseFloatFromBits(value, 23, 8);
  };
  var parseFloat64 = function(value) {
    return parseFloatFromBits(value, 52, 11);
  };
  var parseNumeric = function(value) {
    var sign = parseBits(value, 16, 32);
    if (sign == 49152) {
      return NaN;
    }
    var weight = Math.pow(1e4, parseBits(value, 16, 16));
    var result = 0;
    var digits = [];
    var ndigits = parseBits(value, 16);
    for (var i = 0;i < ndigits; i++) {
      result += parseBits(value, 16, 64 + 16 * i) * weight;
      weight /= 1e4;
    }
    var scale = Math.pow(10, parseBits(value, 16, 48));
    return (sign === 0 ? 1 : -1) * Math.round(result * scale) / scale;
  };
  var parseDate = function(isUTC, value) {
    var sign = parseBits(value, 1);
    var rawValue = parseBits(value, 63, 1);
    var result = new Date((sign === 0 ? 1 : -1) * rawValue / 1000 + 946684800000);
    if (!isUTC) {
      result.setTime(result.getTime() + result.getTimezoneOffset() * 60000);
    }
    result.usec = rawValue % 1000;
    result.getMicroSeconds = function() {
      return this.usec;
    };
    result.setMicroSeconds = function(value2) {
      this.usec = value2;
    };
    result.getUTCMicroSeconds = function() {
      return this.usec;
    };
    return result;
  };
  var parseArray = function(value) {
    var dim = parseBits(value, 32);
    var flags = parseBits(value, 32, 32);
    var elementType = parseBits(value, 32, 64);
    var offset = 96;
    var dims = [];
    for (var i = 0;i < dim; i++) {
      dims[i] = parseBits(value, 32, offset);
      offset += 32;
      offset += 32;
    }
    var parseElement = function(elementType2) {
      var length = parseBits(value, 32, offset);
      offset += 32;
      if (length == 4294967295) {
        return null;
      }
      var result;
      if (elementType2 == 23 || elementType2 == 20) {
        result = parseBits(value, length * 8, offset);
        offset += length * 8;
        return result;
      } else if (elementType2 == 25) {
        result = value.toString(this.encoding, offset >> 3, (offset += length << 3) >> 3);
        return result;
      } else {
        console.log("ERROR: ElementType not implemented: " + elementType2);
      }
    };
    var parse = function(dimension, elementType2) {
      var array = [];
      var i2;
      if (dimension.length > 1) {
        var count = dimension.shift();
        for (i2 = 0;i2 < count; i2++) {
          array[i2] = parse(dimension, elementType2);
        }
        dimension.unshift(count);
      } else {
        for (i2 = 0;i2 < dimension[0]; i2++) {
          array[i2] = parseElement(elementType2);
        }
      }
      return array;
    };
    return parse(dims, elementType);
  };
  var parseText = function(value) {
    return value.toString("utf8");
  };
  var parseBool = function(value) {
    if (value === null)
      return null;
    return parseBits(value, 8) > 0;
  };
  var init = function(register) {
    register(20, parseInt64);
    register(21, parseInt16);
    register(23, parseInt32);
    register(26, parseInt32);
    register(1700, parseNumeric);
    register(700, parseFloat32);
    register(701, parseFloat64);
    register(16, parseBool);
    register(1114, parseDate.bind(null, false));
    register(1184, parseDate.bind(null, true));
    register(1000, parseArray);
    register(1007, parseArray);
    register(1016, parseArray);
    register(1008, parseArray);
    register(1009, parseArray);
    register(25, parseText);
  };
  module.exports = {
    init
  };
});

// ../pokemon-showdown/node_modules/.pnpm/pg-types@2.2.0/node_modules/pg-types/lib/builtins.js
var require_builtins = __commonJS((exports, module) => {
  module.exports = {
    BOOL: 16,
    BYTEA: 17,
    CHAR: 18,
    INT8: 20,
    INT2: 21,
    INT4: 23,
    REGPROC: 24,
    TEXT: 25,
    OID: 26,
    TID: 27,
    XID: 28,
    CID: 29,
    JSON: 114,
    XML: 142,
    PG_NODE_TREE: 194,
    SMGR: 210,
    PATH: 602,
    POLYGON: 604,
    CIDR: 650,
    FLOAT4: 700,
    FLOAT8: 701,
    ABSTIME: 702,
    RELTIME: 703,
    TINTERVAL: 704,
    CIRCLE: 718,
    MACADDR8: 774,
    MONEY: 790,
    MACADDR: 829,
    INET: 869,
    ACLITEM: 1033,
    BPCHAR: 1042,
    VARCHAR: 1043,
    DATE: 1082,
    TIME: 1083,
    TIMESTAMP: 1114,
    TIMESTAMPTZ: 1184,
    INTERVAL: 1186,
    TIMETZ: 1266,
    BIT: 1560,
    VARBIT: 1562,
    NUMERIC: 1700,
    REFCURSOR: 1790,
    REGPROCEDURE: 2202,
    REGOPER: 2203,
    REGOPERATOR: 2204,
    REGCLASS: 2205,
    REGTYPE: 2206,
    UUID: 2950,
    TXID_SNAPSHOT: 2970,
    PG_LSN: 3220,
    PG_NDISTINCT: 3361,
    PG_DEPENDENCIES: 3402,
    TSVECTOR: 3614,
    TSQUERY: 3615,
    GTSVECTOR: 3642,
    REGCONFIG: 3734,
    REGDICTIONARY: 3769,
    JSONB: 3802,
    REGNAMESPACE: 4089,
    REGROLE: 4096
  };
});

// /home/max/tanso/pokemon-showdown/node_modules/.pnpm/pg@8.13.0/node_modules/pg-types/index.js
var require_pg_types = __commonJS((exports) => {
  function noParse(val) {
    return String(val);
  }
  function getTypeParser(oid, format) {
    format = format || "text";
    if (!typeParsers[format]) {
      return noParse;
    }
    return typeParsers[format][oid] || noParse;
  }
  function setTypeParser(oid, format, parseFn) {
    if (typeof format == "function") {
      parseFn = format;
      format = "text";
    }
    typeParsers[format][oid] = parseFn;
  }
  var textParsers = require_textParsers();
  var binaryParsers = require_binaryParsers();
  var arrayParser = require_arrayParser();
  var builtinTypes = require_builtins();
  exports.getTypeParser = getTypeParser;
  exports.setTypeParser = setTypeParser;
  exports.arrayParser = arrayParser;
  exports.builtins = builtinTypes;
  var typeParsers = {
    text: {},
    binary: {}
  };
  textParsers.init(function(oid, converter) {
    typeParsers.text[oid] = converter;
  });
  binaryParsers.init(function(oid, converter) {
    typeParsers.binary[oid] = converter;
  });
});

// ../pokemon-showdown/node_modules/.pnpm/pg@8.13.0/node_modules/pg/lib/defaults.js
var require_defaults = __commonJS((exports, module) => {
  module.exports = {
    host: "localhost",
    user: process.platform === "win32" ? process.env.USERNAME : process.env.USER,
    database: undefined,
    password: null,
    connectionString: undefined,
    port: 5432,
    rows: 0,
    binary: false,
    max: 10,
    idleTimeoutMillis: 30000,
    client_encoding: "",
    ssl: false,
    application_name: undefined,
    fallback_application_name: undefined,
    options: undefined,
    parseInputDatesAsUTC: false,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0,
    keepalives: 1,
    keepalives_idle: 0
  };
  var pgTypes = require_pg_types();
  var parseBigInteger = pgTypes.getTypeParser(20, "text");
  var parseBigIntegerArray = pgTypes.getTypeParser(1016, "text");
  module.exports.__defineSetter__("parseInt8", function(val) {
    pgTypes.setTypeParser(20, "text", val ? pgTypes.getTypeParser(23, "text") : parseBigInteger);
    pgTypes.setTypeParser(1016, "text", val ? pgTypes.getTypeParser(1007, "text") : parseBigIntegerArray);
  });
});

// ../pokemon-showdown/node_modules/.pnpm/pg@8.13.0/node_modules/pg/lib/utils.js
var require_utils2 = __commonJS((exports, module) => {
  function escapeElement(elementRepresentation) {
    var escaped = elementRepresentation.replace(/\\/g, "\\\\").replace(/"/g, '\\"');
    return '"' + escaped + '"';
  }
  function arrayString(val) {
    var result = "{";
    for (var i = 0;i < val.length; i++) {
      if (i > 0) {
        result = result + ",";
      }
      if (val[i] === null || typeof val[i] === "undefined") {
        result = result + "NULL";
      } else if (Array.isArray(val[i])) {
        result = result + arrayString(val[i]);
      } else if (ArrayBuffer.isView(val[i])) {
        var item = val[i];
        if (!(item instanceof Buffer)) {
          var buf = Buffer.from(item.buffer, item.byteOffset, item.byteLength);
          if (buf.length === item.byteLength) {
            item = buf;
          } else {
            item = buf.slice(item.byteOffset, item.byteOffset + item.byteLength);
          }
        }
        result += "\\\\x" + item.toString("hex");
      } else {
        result += escapeElement(prepareValue(val[i]));
      }
    }
    result = result + "}";
    return result;
  }
  function prepareObject(val, seen) {
    if (val && typeof val.toPostgres === "function") {
      seen = seen || [];
      if (seen.indexOf(val) !== -1) {
        throw new Error('circular reference detected while preparing "' + val + '" for query');
      }
      seen.push(val);
      return prepareValue(val.toPostgres(prepareValue), seen);
    }
    return JSON.stringify(val);
  }
  function pad(number, digits) {
    number = "" + number;
    while (number.length < digits) {
      number = "0" + number;
    }
    return number;
  }
  function dateToString(date) {
    var offset = -date.getTimezoneOffset();
    var year = date.getFullYear();
    var isBCYear = year < 1;
    if (isBCYear)
      year = Math.abs(year) + 1;
    var ret = pad(year, 4) + "-" + pad(date.getMonth() + 1, 2) + "-" + pad(date.getDate(), 2) + "T" + pad(date.getHours(), 2) + ":" + pad(date.getMinutes(), 2) + ":" + pad(date.getSeconds(), 2) + "." + pad(date.getMilliseconds(), 3);
    if (offset < 0) {
      ret += "-";
      offset *= -1;
    } else {
      ret += "+";
    }
    ret += pad(Math.floor(offset / 60), 2) + ":" + pad(offset % 60, 2);
    if (isBCYear)
      ret += " BC";
    return ret;
  }
  function dateToStringUTC(date) {
    var year = date.getUTCFullYear();
    var isBCYear = year < 1;
    if (isBCYear)
      year = Math.abs(year) + 1;
    var ret = pad(year, 4) + "-" + pad(date.getUTCMonth() + 1, 2) + "-" + pad(date.getUTCDate(), 2) + "T" + pad(date.getUTCHours(), 2) + ":" + pad(date.getUTCMinutes(), 2) + ":" + pad(date.getUTCSeconds(), 2) + "." + pad(date.getUTCMilliseconds(), 3);
    ret += "+00:00";
    if (isBCYear)
      ret += " BC";
    return ret;
  }
  function normalizeQueryConfig(config, values, callback) {
    config = typeof config === "string" ? { text: config } : config;
    if (values) {
      if (typeof values === "function") {
        config.callback = values;
      } else {
        config.values = values;
      }
    }
    if (callback) {
      config.callback = callback;
    }
    return config;
  }
  var defaults = require_defaults();
  var prepareValue = function(val, seen) {
    if (val == null) {
      return null;
    }
    if (val instanceof Buffer) {
      return val;
    }
    if (ArrayBuffer.isView(val)) {
      var buf = Buffer.from(val.buffer, val.byteOffset, val.byteLength);
      if (buf.length === val.byteLength) {
        return buf;
      }
      return buf.slice(val.byteOffset, val.byteOffset + val.byteLength);
    }
    if (val instanceof Date) {
      if (defaults.parseInputDatesAsUTC) {
        return dateToStringUTC(val);
      } else {
        return dateToString(val);
      }
    }
    if (Array.isArray(val)) {
      return arrayString(val);
    }
    if (typeof val === "object") {
      return prepareObject(val, seen);
    }
    return val.toString();
  };
  var escapeIdentifier = function(str) {
    return '"' + str.replace(/"/g, '""') + '"';
  };
  var escapeLiteral = function(str) {
    var hasBackslash = false;
    var escaped = "'";
    for (var i = 0;i < str.length; i++) {
      var c = str[i];
      if (c === "'") {
        escaped += c + c;
      } else if (c === "\\") {
        escaped += c + c;
        hasBackslash = true;
      } else {
        escaped += c;
      }
    }
    escaped += "'";
    if (hasBackslash === true) {
      escaped = " E" + escaped;
    }
    return escaped;
  };
  module.exports = {
    prepareValue: function prepareValueWrapper(value) {
      return prepareValue(value);
    },
    normalizeQueryConfig,
    escapeIdentifier,
    escapeLiteral
  };
});

// ../pokemon-showdown/node_modules/.pnpm/pg@8.13.0/node_modules/pg/lib/crypto/utils-legacy.js
var require_utils_legacy = __commonJS((exports, module) => {
  function md5(string) {
    return nodeCrypto.createHash("md5").update(string, "utf-8").digest("hex");
  }
  function postgresMd5PasswordHash(user, password, salt) {
    var inner = md5(password + user);
    var outer = md5(Buffer.concat([Buffer.from(inner), salt]));
    return "md5" + outer;
  }
  function sha256(text) {
    return nodeCrypto.createHash("sha256").update(text).digest();
  }
  function hmacSha256(key, msg) {
    return nodeCrypto.createHmac("sha256", key).update(msg).digest();
  }
  async function deriveKey(password, salt, iterations) {
    return nodeCrypto.pbkdf2Sync(password, salt, iterations, 32, "sha256");
  }
  var nodeCrypto = __require("crypto");
  module.exports = {
    postgresMd5PasswordHash,
    randomBytes: nodeCrypto.randomBytes,
    deriveKey,
    sha256,
    hmacSha256,
    md5
  };
});

// ../pokemon-showdown/node_modules/.pnpm/pg@8.13.0/node_modules/pg/lib/crypto/utils-webcrypto.js
var require_utils_webcrypto = __commonJS((exports, module) => {
  function randomBytes(length) {
    return webCrypto.getRandomValues(Buffer.alloc(length));
  }
  async function md5(string) {
    try {
      return nodeCrypto.createHash("md5").update(string, "utf-8").digest("hex");
    } catch (e) {
      const data = typeof string === "string" ? textEncoder.encode(string) : string;
      const hash = await subtleCrypto.digest("MD5", data);
      return Array.from(new Uint8Array(hash)).map((b) => b.toString(16).padStart(2, "0")).join("");
    }
  }
  async function postgresMd5PasswordHash(user, password, salt) {
    var inner = await md5(password + user);
    var outer = await md5(Buffer.concat([Buffer.from(inner), salt]));
    return "md5" + outer;
  }
  async function sha256(text) {
    return await subtleCrypto.digest("SHA-256", text);
  }
  async function hmacSha256(keyBuffer, msg) {
    const key = await subtleCrypto.importKey("raw", keyBuffer, { name: "HMAC", hash: "SHA-256" }, false, ["sign"]);
    return await subtleCrypto.sign("HMAC", key, textEncoder.encode(msg));
  }
  async function deriveKey(password, salt, iterations) {
    const key = await subtleCrypto.importKey("raw", textEncoder.encode(password), "PBKDF2", false, ["deriveBits"]);
    const params = { name: "PBKDF2", hash: "SHA-256", salt, iterations };
    return await subtleCrypto.deriveBits(params, key, 32 * 8, ["deriveBits"]);
  }
  var nodeCrypto = __require("crypto");
  module.exports = {
    postgresMd5PasswordHash,
    randomBytes,
    deriveKey,
    sha256,
    hmacSha256,
    md5
  };
  var webCrypto = nodeCrypto.webcrypto || globalThis.crypto;
  var subtleCrypto = webCrypto.subtle;
  var textEncoder = new TextEncoder;
});

// ../pokemon-showdown/node_modules/.pnpm/pg@8.13.0/node_modules/pg/lib/crypto/utils.js
var require_utils3 = __commonJS((exports, module) => {
  var useLegacyCrypto = parseInt(process.versions && process.versions.node && process.versions.node.split(".")[0]) < 15;
  if (useLegacyCrypto) {
    module.exports = require_utils_legacy();
  } else {
    module.exports = require_utils_webcrypto();
  }
});

// ../pokemon-showdown/node_modules/.pnpm/pg@8.13.0/node_modules/pg/lib/crypto/sasl.js
var require_sasl = __commonJS((exports, module) => {
  function startSession(mechanisms) {
    if (mechanisms.indexOf("SCRAM-SHA-256") === -1) {
      throw new Error("SASL: Only mechanism SCRAM-SHA-256 is currently supported");
    }
    const clientNonce = crypto.randomBytes(18).toString("base64");
    return {
      mechanism: "SCRAM-SHA-256",
      clientNonce,
      response: "n,,n=*,r=" + clientNonce,
      message: "SASLInitialResponse"
    };
  }
  async function continueSession(session, password, serverData) {
    if (session.message !== "SASLInitialResponse") {
      throw new Error("SASL: Last message was not SASLInitialResponse");
    }
    if (typeof password !== "string") {
      throw new Error("SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a string");
    }
    if (password === "") {
      throw new Error("SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a non-empty string");
    }
    if (typeof serverData !== "string") {
      throw new Error("SASL: SCRAM-SERVER-FIRST-MESSAGE: serverData must be a string");
    }
    const sv = parseServerFirstMessage(serverData);
    if (!sv.nonce.startsWith(session.clientNonce)) {
      throw new Error("SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce");
    } else if (sv.nonce.length === session.clientNonce.length) {
      throw new Error("SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce is too short");
    }
    var clientFirstMessageBare = "n=*,r=" + session.clientNonce;
    var serverFirstMessage = "r=" + sv.nonce + ",s=" + sv.salt + ",i=" + sv.iteration;
    var clientFinalMessageWithoutProof = "c=biws,r=" + sv.nonce;
    var authMessage = clientFirstMessageBare + "," + serverFirstMessage + "," + clientFinalMessageWithoutProof;
    var saltBytes = Buffer.from(sv.salt, "base64");
    var saltedPassword = await crypto.deriveKey(password, saltBytes, sv.iteration);
    var clientKey = await crypto.hmacSha256(saltedPassword, "Client Key");
    var storedKey = await crypto.sha256(clientKey);
    var clientSignature = await crypto.hmacSha256(storedKey, authMessage);
    var clientProof = xorBuffers(Buffer.from(clientKey), Buffer.from(clientSignature)).toString("base64");
    var serverKey = await crypto.hmacSha256(saltedPassword, "Server Key");
    var serverSignatureBytes = await crypto.hmacSha256(serverKey, authMessage);
    session.message = "SASLResponse";
    session.serverSignature = Buffer.from(serverSignatureBytes).toString("base64");
    session.response = clientFinalMessageWithoutProof + ",p=" + clientProof;
  }
  function finalizeSession(session, serverData) {
    if (session.message !== "SASLResponse") {
      throw new Error("SASL: Last message was not SASLResponse");
    }
    if (typeof serverData !== "string") {
      throw new Error("SASL: SCRAM-SERVER-FINAL-MESSAGE: serverData must be a string");
    }
    const { serverSignature } = parseServerFinalMessage(serverData);
    if (serverSignature !== session.serverSignature) {
      throw new Error("SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature does not match");
    }
  }
  function isPrintableChars(text) {
    if (typeof text !== "string") {
      throw new TypeError("SASL: text must be a string");
    }
    return text.split("").map((_, i) => text.charCodeAt(i)).every((c) => c >= 33 && c <= 43 || c >= 45 && c <= 126);
  }
  function isBase64(text) {
    return /^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.test(text);
  }
  function parseAttributePairs(text) {
    if (typeof text !== "string") {
      throw new TypeError("SASL: attribute pairs text must be a string");
    }
    return new Map(text.split(",").map((attrValue) => {
      if (!/^.=/.test(attrValue)) {
        throw new Error("SASL: Invalid attribute pair entry");
      }
      const name = attrValue[0];
      const value = attrValue.substring(2);
      return [name, value];
    }));
  }
  function parseServerFirstMessage(data) {
    const attrPairs = parseAttributePairs(data);
    const nonce = attrPairs.get("r");
    if (!nonce) {
      throw new Error("SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing");
    } else if (!isPrintableChars(nonce)) {
      throw new Error("SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce must only contain printable characters");
    }
    const salt = attrPairs.get("s");
    if (!salt) {
      throw new Error("SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing");
    } else if (!isBase64(salt)) {
      throw new Error("SASL: SCRAM-SERVER-FIRST-MESSAGE: salt must be base64");
    }
    const iterationText = attrPairs.get("i");
    if (!iterationText) {
      throw new Error("SASL: SCRAM-SERVER-FIRST-MESSAGE: iteration missing");
    } else if (!/^[1-9][0-9]*$/.test(iterationText)) {
      throw new Error("SASL: SCRAM-SERVER-FIRST-MESSAGE: invalid iteration count");
    }
    const iteration = parseInt(iterationText, 10);
    return {
      nonce,
      salt,
      iteration
    };
  }
  function parseServerFinalMessage(serverData) {
    const attrPairs = parseAttributePairs(serverData);
    const serverSignature = attrPairs.get("v");
    if (!serverSignature) {
      throw new Error("SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature is missing");
    } else if (!isBase64(serverSignature)) {
      throw new Error("SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature must be base64");
    }
    return {
      serverSignature
    };
  }
  function xorBuffers(a, b) {
    if (!Buffer.isBuffer(a)) {
      throw new TypeError("first argument must be a Buffer");
    }
    if (!Buffer.isBuffer(b)) {
      throw new TypeError("second argument must be a Buffer");
    }
    if (a.length !== b.length) {
      throw new Error("Buffer lengths must match");
    }
    if (a.length === 0) {
      throw new Error("Buffers cannot be empty");
    }
    return Buffer.from(a.map((_, i) => a[i] ^ b[i]));
  }
  var crypto = require_utils3();
  module.exports = {
    startSession,
    continueSession,
    finalizeSession
  };
});

// ../pokemon-showdown/node_modules/.pnpm/pg@8.13.0/node_modules/pg/lib/type-overrides.js
var require_type_overrides = __commonJS((exports, module) => {
  function TypeOverrides(userTypes) {
    this._types = userTypes || types;
    this.text = {};
    this.binary = {};
  }
  var types = require_pg_types();
  TypeOverrides.prototype.getOverrides = function(format) {
    switch (format) {
      case "text":
        return this.text;
      case "binary":
        return this.binary;
      default:
        return {};
    }
  };
  TypeOverrides.prototype.setTypeParser = function(oid, format, parseFn) {
    if (typeof format === "function") {
      parseFn = format;
      format = "text";
    }
    this.getOverrides(format)[oid] = parseFn;
  };
  TypeOverrides.prototype.getTypeParser = function(oid, format) {
    format = format || "text";
    return this.getOverrides(format)[oid] || this._types.getTypeParser(oid, format);
  };
  module.exports = TypeOverrides;
});

// /home/max/tanso/pokemon-showdown/node_modules/.pnpm/pg@8.13.0/node_modules/pg-connection-string/index.js
var require_pg_connection_string = __commonJS((exports, module) => {
  function parse(str) {
    if (str.charAt(0) === "/") {
      const config2 = str.split(" ");
      return { host: config2[0], database: config2[1] };
    }
    const config = {};
    let result;
    let dummyHost = false;
    if (/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(str)) {
      str = encodeURI(str).replace(/\%25(\d\d)/g, "%$1");
    }
    try {
      result = new URL(str, "postgres://base");
    } catch (e) {
      result = new URL(str.replace("@/", "@___DUMMY___/"), "postgres://base");
      dummyHost = true;
    }
    for (const entry of result.searchParams.entries()) {
      config[entry[0]] = entry[1];
    }
    config.user = config.user || decodeURIComponent(result.username);
    config.password = config.password || decodeURIComponent(result.password);
    if (result.protocol == "socket:") {
      config.host = decodeURI(result.pathname);
      config.database = result.searchParams.get("db");
      config.client_encoding = result.searchParams.get("encoding");
      return config;
    }
    const hostname = dummyHost ? "" : result.hostname;
    if (!config.host) {
      config.host = decodeURIComponent(hostname);
    } else if (hostname && /^%2f/i.test(hostname)) {
      result.pathname = hostname + result.pathname;
    }
    if (!config.port) {
      config.port = result.port;
    }
    const pathname = result.pathname.slice(1) || null;
    config.database = pathname ? decodeURI(pathname) : null;
    if (config.ssl === "true" || config.ssl === "1") {
      config.ssl = true;
    }
    if (config.ssl === "0") {
      config.ssl = false;
    }
    if (config.sslcert || config.sslkey || config.sslrootcert || config.sslmode) {
      config.ssl = {};
    }
    const fs = config.sslcert || config.sslkey || config.sslrootcert ? __require("fs") : null;
    if (config.sslcert) {
      config.ssl.cert = fs.readFileSync(config.sslcert).toString();
    }
    if (config.sslkey) {
      config.ssl.key = fs.readFileSync(config.sslkey).toString();
    }
    if (config.sslrootcert) {
      config.ssl.ca = fs.readFileSync(config.sslrootcert).toString();
    }
    switch (config.sslmode) {
      case "disable": {
        config.ssl = false;
        break;
      }
      case "prefer":
      case "require":
      case "verify-ca":
      case "verify-full": {
        break;
      }
      case "no-verify": {
        config.ssl.rejectUnauthorized = false;
        break;
      }
    }
    return config;
  }
  module.exports = parse;
  parse.parse = parse;
});

// ../pokemon-showdown/node_modules/.pnpm/pg@8.13.0/node_modules/pg/lib/connection-parameters.js
var require_connection_parameters = __commonJS((exports, module) => {
  var dns = __require("dns");
  var defaults = require_defaults();
  var parse = require_pg_connection_string().parse;
  var val = function(key, config, envVar) {
    if (envVar === undefined) {
      envVar = process.env["PG" + key.toUpperCase()];
    } else if (envVar === false) {
    } else {
      envVar = process.env[envVar];
    }
    return config[key] || envVar || defaults[key];
  };
  var readSSLConfigFromEnvironment = function() {
    switch (process.env.PGSSLMODE) {
      case "disable":
        return false;
      case "prefer":
      case "require":
      case "verify-ca":
      case "verify-full":
        return true;
      case "no-verify":
        return { rejectUnauthorized: false };
    }
    return defaults.ssl;
  };
  var quoteParamValue = function(value) {
    return "'" + ("" + value).replace(/\\/g, "\\\\").replace(/'/g, "\\'") + "'";
  };
  var add = function(params, config, paramName) {
    var value = config[paramName];
    if (value !== undefined && value !== null) {
      params.push(paramName + "=" + quoteParamValue(value));
    }
  };

  class ConnectionParameters {
    constructor(config) {
      config = typeof config === "string" ? parse(config) : config || {};
      if (config.connectionString) {
        config = Object.assign({}, config, parse(config.connectionString));
      }
      this.user = val("user", config);
      this.database = val("database", config);
      if (this.database === undefined) {
        this.database = this.user;
      }
      this.port = parseInt(val("port", config), 10);
      this.host = val("host", config);
      Object.defineProperty(this, "password", {
        configurable: true,
        enumerable: false,
        writable: true,
        value: val("password", config)
      });
      this.binary = val("binary", config);
      this.options = val("options", config);
      this.ssl = typeof config.ssl === "undefined" ? readSSLConfigFromEnvironment() : config.ssl;
      if (typeof this.ssl === "string") {
        if (this.ssl === "true") {
          this.ssl = true;
        }
      }
      if (this.ssl === "no-verify") {
        this.ssl = { rejectUnauthorized: false };
      }
      if (this.ssl && this.ssl.key) {
        Object.defineProperty(this.ssl, "key", {
          enumerable: false
        });
      }
      this.client_encoding = val("client_encoding", config);
      this.replication = val("replication", config);
      this.isDomainSocket = !(this.host || "").indexOf("/");
      this.application_name = val("application_name", config, "PGAPPNAME");
      this.fallback_application_name = val("fallback_application_name", config, false);
      this.statement_timeout = val("statement_timeout", config, false);
      this.lock_timeout = val("lock_timeout", config, false);
      this.idle_in_transaction_session_timeout = val("idle_in_transaction_session_timeout", config, false);
      this.query_timeout = val("query_timeout", config, false);
      if (config.connectionTimeoutMillis === undefined) {
        this.connect_timeout = process.env.PGCONNECT_TIMEOUT || 0;
      } else {
        this.connect_timeout = Math.floor(config.connectionTimeoutMillis / 1000);
      }
      if (config.keepAlive === false) {
        this.keepalives = 0;
      } else if (config.keepAlive === true) {
        this.keepalives = 1;
      }
      if (typeof config.keepAliveInitialDelayMillis === "number") {
        this.keepalives_idle = Math.floor(config.keepAliveInitialDelayMillis / 1000);
      }
    }
    getLibpqConnectionString(cb) {
      var params = [];
      add(params, this, "user");
      add(params, this, "password");
      add(params, this, "port");
      add(params, this, "application_name");
      add(params, this, "fallback_application_name");
      add(params, this, "connect_timeout");
      add(params, this, "options");
      var ssl = typeof this.ssl === "object" ? this.ssl : this.ssl ? { sslmode: this.ssl } : {};
      add(params, ssl, "sslmode");
      add(params, ssl, "sslca");
      add(params, ssl, "sslkey");
      add(params, ssl, "sslcert");
      add(params, ssl, "sslrootcert");
      if (this.database) {
        params.push("dbname=" + quoteParamValue(this.database));
      }
      if (this.replication) {
        params.push("replication=" + quoteParamValue(this.replication));
      }
      if (this.host) {
        params.push("host=" + quoteParamValue(this.host));
      }
      if (this.isDomainSocket) {
        return cb(null, params.join(" "));
      }
      if (this.client_encoding) {
        params.push("client_encoding=" + quoteParamValue(this.client_encoding));
      }
      dns.lookup(this.host, function(err, address) {
        if (err)
          return cb(err, null);
        params.push("hostaddr=" + quoteParamValue(address));
        return cb(null, params.join(" "));
      });
    }
  }
  module.exports = ConnectionParameters;
});

// ../pokemon-showdown/node_modules/.pnpm/pg@8.13.0/node_modules/pg/lib/result.js
var require_result = __commonJS((exports, module) => {
  var types = require_pg_types();
  var matchRegexp = /^([A-Za-z]+)(?: (\d+))?(?: (\d+))?/;

  class Result {
    constructor(rowMode, types2) {
      this.command = null;
      this.rowCount = null;
      this.oid = null;
      this.rows = [];
      this.fields = [];
      this._parsers = undefined;
      this._types = types2;
      this.RowCtor = null;
      this.rowAsArray = rowMode === "array";
      if (this.rowAsArray) {
        this.parseRow = this._parseRowAsArray;
      }
      this._prebuiltEmptyResultObject = null;
    }
    addCommandComplete(msg) {
      var match;
      if (msg.text) {
        match = matchRegexp.exec(msg.text);
      } else {
        match = matchRegexp.exec(msg.command);
      }
      if (match) {
        this.command = match[1];
        if (match[3]) {
          this.oid = parseInt(match[2], 10);
          this.rowCount = parseInt(match[3], 10);
        } else if (match[2]) {
          this.rowCount = parseInt(match[2], 10);
        }
      }
    }
    _parseRowAsArray(rowData) {
      var row = new Array(rowData.length);
      for (var i = 0, len = rowData.length;i < len; i++) {
        var rawValue = rowData[i];
        if (rawValue !== null) {
          row[i] = this._parsers[i](rawValue);
        } else {
          row[i] = null;
        }
      }
      return row;
    }
    parseRow(rowData) {
      var row = { ...this._prebuiltEmptyResultObject };
      for (var i = 0, len = rowData.length;i < len; i++) {
        var rawValue = rowData[i];
        var field = this.fields[i].name;
        if (rawValue !== null) {
          row[field] = this._parsers[i](rawValue);
        } else {
          row[field] = null;
        }
      }
      return row;
    }
    addRow(row) {
      this.rows.push(row);
    }
    addFields(fieldDescriptions) {
      this.fields = fieldDescriptions;
      if (this.fields.length) {
        this._parsers = new Array(fieldDescriptions.length);
      }
      var row = {};
      for (var i = 0;i < fieldDescriptions.length; i++) {
        var desc = fieldDescriptions[i];
        row[desc.name] = null;
        if (this._types) {
          this._parsers[i] = this._types.getTypeParser(desc.dataTypeID, desc.format || "text");
        } else {
          this._parsers[i] = types.getTypeParser(desc.dataTypeID, desc.format || "text");
        }
      }
      this._prebuiltEmptyResultObject = { ...row };
    }
  }
  module.exports = Result;
});

// ../pokemon-showdown/node_modules/.pnpm/pg@8.13.0/node_modules/pg/lib/query.js
var require_query = __commonJS((exports, module) => {
  var { EventEmitter } = __require("events");
  var Result = require_result();
  var utils = require_utils2();

  class Query extends EventEmitter {
    constructor(config, values, callback) {
      super();
      config = utils.normalizeQueryConfig(config, values, callback);
      this.text = config.text;
      this.values = config.values;
      this.rows = config.rows;
      this.types = config.types;
      this.name = config.name;
      this.queryMode = config.queryMode;
      this.binary = config.binary;
      this.portal = config.portal || "";
      this.callback = config.callback;
      this._rowMode = config.rowMode;
      if (process.domain && config.callback) {
        this.callback = process.domain.bind(config.callback);
      }
      this._result = new Result(this._rowMode, this.types);
      this._results = this._result;
      this._canceledDueToError = false;
    }
    requiresPreparation() {
      if (this.queryMode === "extended") {
        return true;
      }
      if (this.name) {
        return true;
      }
      if (this.rows) {
        return true;
      }
      if (!this.text) {
        return false;
      }
      if (!this.values) {
        return false;
      }
      return this.values.length > 0;
    }
    _checkForMultirow() {
      if (this._result.command) {
        if (!Array.isArray(this._results)) {
          this._results = [this._result];
        }
        this._result = new Result(this._rowMode, this.types);
        this._results.push(this._result);
      }
    }
    handleRowDescription(msg) {
      this._checkForMultirow();
      this._result.addFields(msg.fields);
      this._accumulateRows = this.callback || !this.listeners("row").length;
    }
    handleDataRow(msg) {
      let row;
      if (this._canceledDueToError) {
        return;
      }
      try {
        row = this._result.parseRow(msg.fields);
      } catch (err) {
        this._canceledDueToError = err;
        return;
      }
      this.emit("row", row, this._result);
      if (this._accumulateRows) {
        this._result.addRow(row);
      }
    }
    handleCommandComplete(msg, connection) {
      this._checkForMultirow();
      this._result.addCommandComplete(msg);
      if (this.rows) {
        connection.sync();
      }
    }
    handleEmptyQuery(connection) {
      if (this.rows) {
        connection.sync();
      }
    }
    handleError(err, connection) {
      if (this._canceledDueToError) {
        err = this._canceledDueToError;
        this._canceledDueToError = false;
      }
      if (this.callback) {
        return this.callback(err);
      }
      this.emit("error", err);
    }
    handleReadyForQuery(con) {
      if (this._canceledDueToError) {
        return this.handleError(this._canceledDueToError, con);
      }
      if (this.callback) {
        try {
          this.callback(null, this._results);
        } catch (err) {
          process.nextTick(() => {
            throw err;
          });
        }
      }
      this.emit("end", this._results);
    }
    submit(connection) {
      if (typeof this.text !== "string" && typeof this.name !== "string") {
        return new Error("A query must have either text or a name. Supplying neither is unsupported.");
      }
      const previous = connection.parsedStatements[this.name];
      if (this.text && previous && this.text !== previous) {
        return new Error(`Prepared statements must be unique - '${this.name}' was used for a different statement`);
      }
      if (this.values && !Array.isArray(this.values)) {
        return new Error("Query values must be an array");
      }
      if (this.requiresPreparation()) {
        this.prepare(connection);
      } else {
        connection.query(this.text);
      }
      return null;
    }
    hasBeenParsed(connection) {
      return this.name && connection.parsedStatements[this.name];
    }
    handlePortalSuspended(connection) {
      this._getRows(connection, this.rows);
    }
    _getRows(connection, rows) {
      connection.execute({
        portal: this.portal,
        rows
      });
      if (!rows) {
        connection.sync();
      } else {
        connection.flush();
      }
    }
    prepare(connection) {
      if (!this.hasBeenParsed(connection)) {
        connection.parse({
          text: this.text,
          name: this.name,
          types: this.types
        });
      }
      try {
        connection.bind({
          portal: this.portal,
          statement: this.name,
          values: this.values,
          binary: this.binary,
          valueMapper: utils.prepareValue
        });
      } catch (err) {
        this.handleError(err, connection);
        return;
      }
      connection.describe({
        type: "P",
        name: this.portal || ""
      });
      this._getRows(connection, this.rows);
    }
    handleCopyInResponse(connection) {
      connection.sendCopyFail("No source stream defined");
    }
    handleCopyData(msg, connection) {
    }
  }
  module.exports = Query;
});

// ../pokemon-showdown/node_modules/.pnpm/pg-protocol@1.7.0/node_modules/pg-protocol/dist/messages.js
var require_messages = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.NoticeMessage = exports.DataRowMessage = exports.CommandCompleteMessage = exports.ReadyForQueryMessage = exports.NotificationResponseMessage = exports.BackendKeyDataMessage = exports.AuthenticationMD5Password = exports.ParameterStatusMessage = exports.ParameterDescriptionMessage = exports.RowDescriptionMessage = exports.Field = exports.CopyResponse = exports.CopyDataMessage = exports.DatabaseError = exports.copyDone = exports.emptyQuery = exports.replicationStart = exports.portalSuspended = exports.noData = exports.closeComplete = exports.bindComplete = exports.parseComplete = undefined;
  exports.parseComplete = {
    name: "parseComplete",
    length: 5
  };
  exports.bindComplete = {
    name: "bindComplete",
    length: 5
  };
  exports.closeComplete = {
    name: "closeComplete",
    length: 5
  };
  exports.noData = {
    name: "noData",
    length: 5
  };
  exports.portalSuspended = {
    name: "portalSuspended",
    length: 5
  };
  exports.replicationStart = {
    name: "replicationStart",
    length: 4
  };
  exports.emptyQuery = {
    name: "emptyQuery",
    length: 4
  };
  exports.copyDone = {
    name: "copyDone",
    length: 4
  };

  class DatabaseError extends Error {
    constructor(message2, length, name) {
      super(message2);
      this.length = length;
      this.name = name;
    }
  }
  exports.DatabaseError = DatabaseError;

  class CopyDataMessage {
    constructor(length, chunk) {
      this.length = length;
      this.chunk = chunk;
      this.name = "copyData";
    }
  }
  exports.CopyDataMessage = CopyDataMessage;

  class CopyResponse {
    constructor(length, name, binary, columnCount) {
      this.length = length;
      this.name = name;
      this.binary = binary;
      this.columnTypes = new Array(columnCount);
    }
  }
  exports.CopyResponse = CopyResponse;

  class Field {
    constructor(name, tableID, columnID, dataTypeID, dataTypeSize, dataTypeModifier, format) {
      this.name = name;
      this.tableID = tableID;
      this.columnID = columnID;
      this.dataTypeID = dataTypeID;
      this.dataTypeSize = dataTypeSize;
      this.dataTypeModifier = dataTypeModifier;
      this.format = format;
    }
  }
  exports.Field = Field;

  class RowDescriptionMessage {
    constructor(length, fieldCount) {
      this.length = length;
      this.fieldCount = fieldCount;
      this.name = "rowDescription";
      this.fields = new Array(this.fieldCount);
    }
  }
  exports.RowDescriptionMessage = RowDescriptionMessage;

  class ParameterDescriptionMessage {
    constructor(length, parameterCount) {
      this.length = length;
      this.parameterCount = parameterCount;
      this.name = "parameterDescription";
      this.dataTypeIDs = new Array(this.parameterCount);
    }
  }
  exports.ParameterDescriptionMessage = ParameterDescriptionMessage;

  class ParameterStatusMessage {
    constructor(length, parameterName, parameterValue) {
      this.length = length;
      this.parameterName = parameterName;
      this.parameterValue = parameterValue;
      this.name = "parameterStatus";
    }
  }
  exports.ParameterStatusMessage = ParameterStatusMessage;

  class AuthenticationMD5Password {
    constructor(length, salt) {
      this.length = length;
      this.salt = salt;
      this.name = "authenticationMD5Password";
    }
  }
  exports.AuthenticationMD5Password = AuthenticationMD5Password;

  class BackendKeyDataMessage {
    constructor(length, processID, secretKey) {
      this.length = length;
      this.processID = processID;
      this.secretKey = secretKey;
      this.name = "backendKeyData";
    }
  }
  exports.BackendKeyDataMessage = BackendKeyDataMessage;

  class NotificationResponseMessage {
    constructor(length, processId, channel, payload) {
      this.length = length;
      this.processId = processId;
      this.channel = channel;
      this.payload = payload;
      this.name = "notification";
    }
  }
  exports.NotificationResponseMessage = NotificationResponseMessage;

  class ReadyForQueryMessage {
    constructor(length, status) {
      this.length = length;
      this.status = status;
      this.name = "readyForQuery";
    }
  }
  exports.ReadyForQueryMessage = ReadyForQueryMessage;

  class CommandCompleteMessage {
    constructor(length, text) {
      this.length = length;
      this.text = text;
      this.name = "commandComplete";
    }
  }
  exports.CommandCompleteMessage = CommandCompleteMessage;

  class DataRowMessage {
    constructor(length, fields) {
      this.length = length;
      this.fields = fields;
      this.name = "dataRow";
      this.fieldCount = fields.length;
    }
  }
  exports.DataRowMessage = DataRowMessage;

  class NoticeMessage {
    constructor(length, message2) {
      this.length = length;
      this.message = message2;
      this.name = "notice";
    }
  }
  exports.NoticeMessage = NoticeMessage;
});

// ../pokemon-showdown/node_modules/.pnpm/pg-protocol@1.7.0/node_modules/pg-protocol/dist/buffer-writer.js
var require_buffer_writer = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Writer = undefined;

  class Writer {
    constructor(size = 256) {
      this.size = size;
      this.offset = 5;
      this.headerPosition = 0;
      this.buffer = Buffer.allocUnsafe(size);
    }
    ensure(size) {
      var remaining = this.buffer.length - this.offset;
      if (remaining < size) {
        var oldBuffer = this.buffer;
        var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size;
        this.buffer = Buffer.allocUnsafe(newSize);
        oldBuffer.copy(this.buffer);
      }
    }
    addInt32(num) {
      this.ensure(4);
      this.buffer[this.offset++] = num >>> 24 & 255;
      this.buffer[this.offset++] = num >>> 16 & 255;
      this.buffer[this.offset++] = num >>> 8 & 255;
      this.buffer[this.offset++] = num >>> 0 & 255;
      return this;
    }
    addInt16(num) {
      this.ensure(2);
      this.buffer[this.offset++] = num >>> 8 & 255;
      this.buffer[this.offset++] = num >>> 0 & 255;
      return this;
    }
    addCString(string) {
      if (!string) {
        this.ensure(1);
      } else {
        var len = Buffer.byteLength(string);
        this.ensure(len + 1);
        this.buffer.write(string, this.offset, "utf-8");
        this.offset += len;
      }
      this.buffer[this.offset++] = 0;
      return this;
    }
    addString(string = "") {
      var len = Buffer.byteLength(string);
      this.ensure(len);
      this.buffer.write(string, this.offset);
      this.offset += len;
      return this;
    }
    add(otherBuffer) {
      this.ensure(otherBuffer.length);
      otherBuffer.copy(this.buffer, this.offset);
      this.offset += otherBuffer.length;
      return this;
    }
    join(code) {
      if (code) {
        this.buffer[this.headerPosition] = code;
        const length = this.offset - (this.headerPosition + 1);
        this.buffer.writeInt32BE(length, this.headerPosition + 1);
      }
      return this.buffer.slice(code ? 0 : 5, this.offset);
    }
    flush(code) {
      var result = this.join(code);
      this.offset = 5;
      this.headerPosition = 0;
      this.buffer = Buffer.allocUnsafe(this.size);
      return result;
    }
  }
  exports.Writer = Writer;
});

// ../pokemon-showdown/node_modules/.pnpm/pg-protocol@1.7.0/node_modules/pg-protocol/dist/serializer.js
var require_serializer = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.serialize = undefined;
  var buffer_writer_1 = require_buffer_writer();
  var writer = new buffer_writer_1.Writer;
  var startup = (opts) => {
    writer.addInt16(3).addInt16(0);
    for (const key of Object.keys(opts)) {
      writer.addCString(key).addCString(opts[key]);
    }
    writer.addCString("client_encoding").addCString("UTF8");
    var bodyBuffer = writer.addCString("").flush();
    var length = bodyBuffer.length + 4;
    return new buffer_writer_1.Writer().addInt32(length).add(bodyBuffer).flush();
  };
  var requestSsl = () => {
    const response = Buffer.allocUnsafe(8);
    response.writeInt32BE(8, 0);
    response.writeInt32BE(80877103, 4);
    return response;
  };
  var password = (password2) => {
    return writer.addCString(password2).flush(112);
  };
  var sendSASLInitialResponseMessage = function(mechanism, initialResponse) {
    writer.addCString(mechanism).addInt32(Buffer.byteLength(initialResponse)).addString(initialResponse);
    return writer.flush(112);
  };
  var sendSCRAMClientFinalMessage = function(additionalData) {
    return writer.addString(additionalData).flush(112);
  };
  var query = (text) => {
    return writer.addCString(text).flush(81);
  };
  var emptyArray = [];
  var parse = (query2) => {
    const name = query2.name || "";
    if (name.length > 63) {
      console.error("Warning! Postgres only supports 63 characters for query names.");
      console.error("You supplied %s (%s)", name, name.length);
      console.error("This can cause conflicts and silent errors executing queries");
    }
    const types = query2.types || emptyArray;
    var len = types.length;
    var buffer = writer.addCString(name).addCString(query2.text).addInt16(len);
    for (var i = 0;i < len; i++) {
      buffer.addInt32(types[i]);
    }
    return writer.flush(80);
  };
  var paramWriter = new buffer_writer_1.Writer;
  var writeValues = function(values, valueMapper) {
    for (let i = 0;i < values.length; i++) {
      const mappedVal = valueMapper ? valueMapper(values[i], i) : values[i];
      if (mappedVal == null) {
        writer.addInt16(0);
        paramWriter.addInt32(-1);
      } else if (mappedVal instanceof Buffer) {
        writer.addInt16(1);
        paramWriter.addInt32(mappedVal.length);
        paramWriter.add(mappedVal);
      } else {
        writer.addInt16(0);
        paramWriter.addInt32(Buffer.byteLength(mappedVal));
        paramWriter.addString(mappedVal);
      }
    }
  };
  var bind = (config = {}) => {
    const portal = config.portal || "";
    const statement = config.statement || "";
    const binary = config.binary || false;
    const values = config.values || emptyArray;
    const len = values.length;
    writer.addCString(portal).addCString(statement);
    writer.addInt16(len);
    writeValues(values, config.valueMapper);
    writer.addInt16(len);
    writer.add(paramWriter.flush());
    writer.addInt16(binary ? 1 : 0);
    return writer.flush(66);
  };
  var emptyExecute = Buffer.from([69, 0, 0, 0, 9, 0, 0, 0, 0, 0]);
  var execute = (config) => {
    if (!config || !config.portal && !config.rows) {
      return emptyExecute;
    }
    const portal = config.portal || "";
    const rows = config.rows || 0;
    const portalLength = Buffer.byteLength(portal);
    const len = 4 + portalLength + 1 + 4;
    const buff = Buffer.allocUnsafe(1 + len);
    buff[0] = 69;
    buff.writeInt32BE(len, 1);
    buff.write(portal, 5, "utf-8");
    buff[portalLength + 5] = 0;
    buff.writeUInt32BE(rows, buff.length - 4);
    return buff;
  };
  var cancel = (processID, secretKey) => {
    const buffer = Buffer.allocUnsafe(16);
    buffer.writeInt32BE(16, 0);
    buffer.writeInt16BE(1234, 4);
    buffer.writeInt16BE(5678, 6);
    buffer.writeInt32BE(processID, 8);
    buffer.writeInt32BE(secretKey, 12);
    return buffer;
  };
  var cstringMessage = (code, string) => {
    const stringLen = Buffer.byteLength(string);
    const len = 4 + stringLen + 1;
    const buffer = Buffer.allocUnsafe(1 + len);
    buffer[0] = code;
    buffer.writeInt32BE(len, 1);
    buffer.write(string, 5, "utf-8");
    buffer[len] = 0;
    return buffer;
  };
  var emptyDescribePortal = writer.addCString("P").flush(68);
  var emptyDescribeStatement = writer.addCString("S").flush(68);
  var describe = (msg) => {
    return msg.name ? cstringMessage(68, `${msg.type}${msg.name || ""}`) : msg.type === "P" ? emptyDescribePortal : emptyDescribeStatement;
  };
  var close = (msg) => {
    const text = `${msg.type}${msg.name || ""}`;
    return cstringMessage(67, text);
  };
  var copyData = (chunk) => {
    return writer.add(chunk).flush(100);
  };
  var copyFail = (message2) => {
    return cstringMessage(102, message2);
  };
  var codeOnlyBuffer = (code) => Buffer.from([code, 0, 0, 0, 4]);
  var flushBuffer = codeOnlyBuffer(72);
  var syncBuffer = codeOnlyBuffer(83);
  var endBuffer = codeOnlyBuffer(88);
  var copyDoneBuffer = codeOnlyBuffer(99);
  var serialize = {
    startup,
    password,
    requestSsl,
    sendSASLInitialResponseMessage,
    sendSCRAMClientFinalMessage,
    query,
    parse,
    bind,
    execute,
    describe,
    close,
    flush: () => flushBuffer,
    sync: () => syncBuffer,
    end: () => endBuffer,
    copyData,
    copyDone: () => copyDoneBuffer,
    copyFail,
    cancel
  };
  exports.serialize = serialize;
});

// ../pokemon-showdown/node_modules/.pnpm/pg-protocol@1.7.0/node_modules/pg-protocol/dist/buffer-reader.js
var require_buffer_reader = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.BufferReader = undefined;
  var emptyBuffer = Buffer.allocUnsafe(0);

  class BufferReader {
    constructor(offset = 0) {
      this.offset = offset;
      this.buffer = emptyBuffer;
      this.encoding = "utf-8";
    }
    setBuffer(offset, buffer) {
      this.offset = offset;
      this.buffer = buffer;
    }
    int16() {
      const result = this.buffer.readInt16BE(this.offset);
      this.offset += 2;
      return result;
    }
    byte() {
      const result = this.buffer[this.offset];
      this.offset++;
      return result;
    }
    int32() {
      const result = this.buffer.readInt32BE(this.offset);
      this.offset += 4;
      return result;
    }
    string(length) {
      const result = this.buffer.toString(this.encoding, this.offset, this.offset + length);
      this.offset += length;
      return result;
    }
    cstring() {
      const start = this.offset;
      let end = start;
      while (this.buffer[end++] !== 0) {
      }
      this.offset = end;
      return this.buffer.toString(this.encoding, start, end - 1);
    }
    bytes(length) {
      const result = this.buffer.slice(this.offset, this.offset + length);
      this.offset += length;
      return result;
    }
  }
  exports.BufferReader = BufferReader;
});

// ../pokemon-showdown/node_modules/.pnpm/pg-protocol@1.7.0/node_modules/pg-protocol/dist/parser.js
var require_parser = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Parser = undefined;
  var messages_1 = require_messages();
  var buffer_reader_1 = require_buffer_reader();
  var CODE_LENGTH = 1;
  var LEN_LENGTH = 4;
  var HEADER_LENGTH = CODE_LENGTH + LEN_LENGTH;
  var emptyBuffer = Buffer.allocUnsafe(0);

  class Parser {
    constructor(opts) {
      this.buffer = emptyBuffer;
      this.bufferLength = 0;
      this.bufferOffset = 0;
      this.reader = new buffer_reader_1.BufferReader;
      if ((opts === null || opts === undefined ? undefined : opts.mode) === "binary") {
        throw new Error("Binary mode not supported yet");
      }
      this.mode = (opts === null || opts === undefined ? undefined : opts.mode) || "text";
    }
    parse(buffer, callback) {
      this.mergeBuffer(buffer);
      const bufferFullLength = this.bufferOffset + this.bufferLength;
      let offset = this.bufferOffset;
      while (offset + HEADER_LENGTH <= bufferFullLength) {
        const code = this.buffer[offset];
        const length = this.buffer.readUInt32BE(offset + CODE_LENGTH);
        const fullMessageLength = CODE_LENGTH + length;
        if (fullMessageLength + offset <= bufferFullLength) {
          const message2 = this.handlePacket(offset + HEADER_LENGTH, code, length, this.buffer);
          callback(message2);
          offset += fullMessageLength;
        } else {
          break;
        }
      }
      if (offset === bufferFullLength) {
        this.buffer = emptyBuffer;
        this.bufferLength = 0;
        this.bufferOffset = 0;
      } else {
        this.bufferLength = bufferFullLength - offset;
        this.bufferOffset = offset;
      }
    }
    mergeBuffer(buffer) {
      if (this.bufferLength > 0) {
        const newLength = this.bufferLength + buffer.byteLength;
        const newFullLength = newLength + this.bufferOffset;
        if (newFullLength > this.buffer.byteLength) {
          let newBuffer;
          if (newLength <= this.buffer.byteLength && this.bufferOffset >= this.bufferLength) {
            newBuffer = this.buffer;
          } else {
            let newBufferLength = this.buffer.byteLength * 2;
            while (newLength >= newBufferLength) {
              newBufferLength *= 2;
            }
            newBuffer = Buffer.allocUnsafe(newBufferLength);
          }
          this.buffer.copy(newBuffer, 0, this.bufferOffset, this.bufferOffset + this.bufferLength);
          this.buffer = newBuffer;
          this.bufferOffset = 0;
        }
        buffer.copy(this.buffer, this.bufferOffset + this.bufferLength);
        this.bufferLength = newLength;
      } else {
        this.buffer = buffer;
        this.bufferOffset = 0;
        this.bufferLength = buffer.byteLength;
      }
    }
    handlePacket(offset, code, length, bytes) {
      switch (code) {
        case 50:
          return messages_1.bindComplete;
        case 49:
          return messages_1.parseComplete;
        case 51:
          return messages_1.closeComplete;
        case 110:
          return messages_1.noData;
        case 115:
          return messages_1.portalSuspended;
        case 99:
          return messages_1.copyDone;
        case 87:
          return messages_1.replicationStart;
        case 73:
          return messages_1.emptyQuery;
        case 68:
          return this.parseDataRowMessage(offset, length, bytes);
        case 67:
          return this.parseCommandCompleteMessage(offset, length, bytes);
        case 90:
          return this.parseReadyForQueryMessage(offset, length, bytes);
        case 65:
          return this.parseNotificationMessage(offset, length, bytes);
        case 82:
          return this.parseAuthenticationResponse(offset, length, bytes);
        case 83:
          return this.parseParameterStatusMessage(offset, length, bytes);
        case 75:
          return this.parseBackendKeyData(offset, length, bytes);
        case 69:
          return this.parseErrorMessage(offset, length, bytes, "error");
        case 78:
          return this.parseErrorMessage(offset, length, bytes, "notice");
        case 84:
          return this.parseRowDescriptionMessage(offset, length, bytes);
        case 116:
          return this.parseParameterDescriptionMessage(offset, length, bytes);
        case 71:
          return this.parseCopyInMessage(offset, length, bytes);
        case 72:
          return this.parseCopyOutMessage(offset, length, bytes);
        case 100:
          return this.parseCopyData(offset, length, bytes);
        default:
          return new messages_1.DatabaseError("received invalid response: " + code.toString(16), length, "error");
      }
    }
    parseReadyForQueryMessage(offset, length, bytes) {
      this.reader.setBuffer(offset, bytes);
      const status = this.reader.string(1);
      return new messages_1.ReadyForQueryMessage(length, status);
    }
    parseCommandCompleteMessage(offset, length, bytes) {
      this.reader.setBuffer(offset, bytes);
      const text = this.reader.cstring();
      return new messages_1.CommandCompleteMessage(length, text);
    }
    parseCopyData(offset, length, bytes) {
      const chunk = bytes.slice(offset, offset + (length - 4));
      return new messages_1.CopyDataMessage(length, chunk);
    }
    parseCopyInMessage(offset, length, bytes) {
      return this.parseCopyMessage(offset, length, bytes, "copyInResponse");
    }
    parseCopyOutMessage(offset, length, bytes) {
      return this.parseCopyMessage(offset, length, bytes, "copyOutResponse");
    }
    parseCopyMessage(offset, length, bytes, messageName) {
      this.reader.setBuffer(offset, bytes);
      const isBinary = this.reader.byte() !== 0;
      const columnCount = this.reader.int16();
      const message2 = new messages_1.CopyResponse(length, messageName, isBinary, columnCount);
      for (let i = 0;i < columnCount; i++) {
        message2.columnTypes[i] = this.reader.int16();
      }
      return message2;
    }
    parseNotificationMessage(offset, length, bytes) {
      this.reader.setBuffer(offset, bytes);
      const processId = this.reader.int32();
      const channel = this.reader.cstring();
      const payload = this.reader.cstring();
      return new messages_1.NotificationResponseMessage(length, processId, channel, payload);
    }
    parseRowDescriptionMessage(offset, length, bytes) {
      this.reader.setBuffer(offset, bytes);
      const fieldCount = this.reader.int16();
      const message2 = new messages_1.RowDescriptionMessage(length, fieldCount);
      for (let i = 0;i < fieldCount; i++) {
        message2.fields[i] = this.parseField();
      }
      return message2;
    }
    parseField() {
      const name = this.reader.cstring();
      const tableID = this.reader.int32();
      const columnID = this.reader.int16();
      const dataTypeID = this.reader.int32();
      const dataTypeSize = this.reader.int16();
      const dataTypeModifier = this.reader.int32();
      const mode = this.reader.int16() === 0 ? "text" : "binary";
      return new messages_1.Field(name, tableID, columnID, dataTypeID, dataTypeSize, dataTypeModifier, mode);
    }
    parseParameterDescriptionMessage(offset, length, bytes) {
      this.reader.setBuffer(offset, bytes);
      const parameterCount = this.reader.int16();
      const message2 = new messages_1.ParameterDescriptionMessage(length, parameterCount);
      for (let i = 0;i < parameterCount; i++) {
        message2.dataTypeIDs[i] = this.reader.int32();
      }
      return message2;
    }
    parseDataRowMessage(offset, length, bytes) {
      this.reader.setBuffer(offset, bytes);
      const fieldCount = this.reader.int16();
      const fields = new Array(fieldCount);
      for (let i = 0;i < fieldCount; i++) {
        const len = this.reader.int32();
        fields[i] = len === -1 ? null : this.reader.string(len);
      }
      return new messages_1.DataRowMessage(length, fields);
    }
    parseParameterStatusMessage(offset, length, bytes) {
      this.reader.setBuffer(offset, bytes);
      const name = this.reader.cstring();
      const value = this.reader.cstring();
      return new messages_1.ParameterStatusMessage(length, name, value);
    }
    parseBackendKeyData(offset, length, bytes) {
      this.reader.setBuffer(offset, bytes);
      const processID = this.reader.int32();
      const secretKey = this.reader.int32();
      return new messages_1.BackendKeyDataMessage(length, processID, secretKey);
    }
    parseAuthenticationResponse(offset, length, bytes) {
      this.reader.setBuffer(offset, bytes);
      const code = this.reader.int32();
      const message2 = {
        name: "authenticationOk",
        length
      };
      switch (code) {
        case 0:
          break;
        case 3:
          if (message2.length === 8) {
            message2.name = "authenticationCleartextPassword";
          }
          break;
        case 5:
          if (message2.length === 12) {
            message2.name = "authenticationMD5Password";
            const salt = this.reader.bytes(4);
            return new messages_1.AuthenticationMD5Password(length, salt);
          }
          break;
        case 10:
          message2.name = "authenticationSASL";
          message2.mechanisms = [];
          let mechanism;
          do {
            mechanism = this.reader.cstring();
            if (mechanism) {
              message2.mechanisms.push(mechanism);
            }
          } while (mechanism);
          break;
        case 11:
          message2.name = "authenticationSASLContinue";
          message2.data = this.reader.string(length - 8);
          break;
        case 12:
          message2.name = "authenticationSASLFinal";
          message2.data = this.reader.string(length - 8);
          break;
        default:
          throw new Error("Unknown authenticationOk message type " + code);
      }
      return message2;
    }
    parseErrorMessage(offset, length, bytes, name) {
      this.reader.setBuffer(offset, bytes);
      const fields = {};
      let fieldType = this.reader.string(1);
      while (fieldType !== "\0") {
        fields[fieldType] = this.reader.cstring();
        fieldType = this.reader.string(1);
      }
      const messageValue = fields.M;
      const message2 = name === "notice" ? new messages_1.NoticeMessage(length, messageValue) : new messages_1.DatabaseError(messageValue, length, name);
      message2.severity = fields.S;
      message2.code = fields.C;
      message2.detail = fields.D;
      message2.hint = fields.H;
      message2.position = fields.P;
      message2.internalPosition = fields.p;
      message2.internalQuery = fields.q;
      message2.where = fields.W;
      message2.schema = fields.s;
      message2.table = fields.t;
      message2.column = fields.c;
      message2.dataType = fields.d;
      message2.constraint = fields.n;
      message2.file = fields.F;
      message2.line = fields.L;
      message2.routine = fields.R;
      return message2;
    }
  }
  exports.Parser = Parser;
});

// /home/max/tanso/pokemon-showdown/node_modules/.pnpm/pg@8.13.0/node_modules/pg-protocol/dist/index.js
var require_dist = __commonJS((exports) => {
  function parse(stream2, callback) {
    const parser = new parser_1.Parser;
    stream2.on("data", (buffer) => parser.parse(buffer, callback));
    return new Promise((resolve) => stream2.on("end", () => resolve()));
  }
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.DatabaseError = exports.serialize = exports.parse = undefined;
  var messages_1 = require_messages();
  Object.defineProperty(exports, "DatabaseError", { enumerable: true, get: function() {
    return messages_1.DatabaseError;
  } });
  var serializer_1 = require_serializer();
  Object.defineProperty(exports, "serialize", { enumerable: true, get: function() {
    return serializer_1.serialize;
  } });
  var parser_1 = require_parser();
  exports.parse = parse;
});

// /home/max/tanso/pokemon-showdown/node_modules/.pnpm/pg@8.13.0/node_modules/pg-cloudflare/dist/empty.js
var exports_empty = {};
__export(exports_empty, {
  default: () => empty_default
});
var empty_default;
var init_empty = __esm(() => {
  empty_default = {};
});

// ../pokemon-showdown/node_modules/.pnpm/pg@8.13.0/node_modules/pg/lib/stream.js
var require_stream = __commonJS((exports, module) => {
  function getNodejsStreamFuncs() {
    function getStream2(ssl) {
      const net = __require("net");
      return new net.Socket;
    }
    function getSecureStream2(options) {
      var tls = __require("tls");
      return tls.connect(options);
    }
    return {
      getStream: getStream2,
      getSecureStream: getSecureStream2
    };
  }
  function getCloudflareStreamFuncs() {
    function getStream2(ssl) {
      const { CloudflareSocket } = (init_empty(), __toCommonJS(exports_empty));
      return new CloudflareSocket(ssl);
    }
    function getSecureStream2(options) {
      options.socket.startTls(options);
      return options.socket;
    }
    return {
      getStream: getStream2,
      getSecureStream: getSecureStream2
    };
  }
  function isCloudflareRuntime() {
    if (typeof navigator === "object" && navigator !== null && typeof navigator.userAgent === "string") {
      return navigator.userAgent === "Cloudflare-Workers";
    }
    if (typeof Response === "function") {
      const resp = new Response(null, { cf: { thing: true } });
      if (typeof resp.cf === "object" && resp.cf !== null && resp.cf.thing) {
        return true;
      }
    }
    return false;
  }
  function getStreamFuncs() {
    if (isCloudflareRuntime()) {
      return getCloudflareStreamFuncs();
    }
    return getNodejsStreamFuncs();
  }
  var { getStream, getSecureStream } = getStreamFuncs();
  module.exports = {
    getStream,
    getSecureStream
  };
});

// ../pokemon-showdown/node_modules/.pnpm/pg@8.13.0/node_modules/pg/lib/connection.js
var require_connection = __commonJS((exports, module) => {
  var EventEmitter = __require("events").EventEmitter;
  var { parse, serialize } = require_dist();
  var { getStream, getSecureStream } = require_stream();
  var flushBuffer = serialize.flush();
  var syncBuffer = serialize.sync();
  var endBuffer = serialize.end();

  class Connection extends EventEmitter {
    constructor(config) {
      super();
      config = config || {};
      this.stream = config.stream || getStream(config.ssl);
      if (typeof this.stream === "function") {
        this.stream = this.stream(config);
      }
      this._keepAlive = config.keepAlive;
      this._keepAliveInitialDelayMillis = config.keepAliveInitialDelayMillis;
      this.lastBuffer = false;
      this.parsedStatements = {};
      this.ssl = config.ssl || false;
      this._ending = false;
      this._emitMessage = false;
      var self = this;
      this.on("newListener", function(eventName) {
        if (eventName === "message") {
          self._emitMessage = true;
        }
      });
    }
    connect(port, host) {
      var self = this;
      this._connecting = true;
      this.stream.setNoDelay(true);
      this.stream.connect(port, host);
      this.stream.once("connect", function() {
        if (self._keepAlive) {
          self.stream.setKeepAlive(true, self._keepAliveInitialDelayMillis);
        }
        self.emit("connect");
      });
      const reportStreamError = function(error) {
        if (self._ending && (error.code === "ECONNRESET" || error.code === "EPIPE")) {
          return;
        }
        self.emit("error", error);
      };
      this.stream.on("error", reportStreamError);
      this.stream.on("close", function() {
        self.emit("end");
      });
      if (!this.ssl) {
        return this.attachListeners(this.stream);
      }
      this.stream.once("data", function(buffer) {
        var responseCode = buffer.toString("utf8");
        switch (responseCode) {
          case "S":
            break;
          case "N":
            self.stream.end();
            return self.emit("error", new Error("The server does not support SSL connections"));
          default:
            self.stream.end();
            return self.emit("error", new Error("There was an error establishing an SSL connection"));
        }
        const options = {
          socket: self.stream
        };
        if (self.ssl !== true) {
          Object.assign(options, self.ssl);
          if ("key" in self.ssl) {
            options.key = self.ssl.key;
          }
        }
        var net = __require("net");
        if (net.isIP && net.isIP(host) === 0) {
          options.servername = host;
        }
        try {
          self.stream = getSecureStream(options);
        } catch (err) {
          return self.emit("error", err);
        }
        self.attachListeners(self.stream);
        self.stream.on("error", reportStreamError);
        self.emit("sslconnect");
      });
    }
    attachListeners(stream2) {
      parse(stream2, (msg) => {
        var eventName = msg.name === "error" ? "errorMessage" : msg.name;
        if (this._emitMessage) {
          this.emit("message", msg);
        }
        this.emit(eventName, msg);
      });
    }
    requestSsl() {
      this.stream.write(serialize.requestSsl());
    }
    startup(config) {
      this.stream.write(serialize.startup(config));
    }
    cancel(processID, secretKey) {
      this._send(serialize.cancel(processID, secretKey));
    }
    password(password) {
      this._send(serialize.password(password));
    }
    sendSASLInitialResponseMessage(mechanism, initialResponse) {
      this._send(serialize.sendSASLInitialResponseMessage(mechanism, initialResponse));
    }
    sendSCRAMClientFinalMessage(additionalData) {
      this._send(serialize.sendSCRAMClientFinalMessage(additionalData));
    }
    _send(buffer) {
      if (!this.stream.writable) {
        return false;
      }
      return this.stream.write(buffer);
    }
    query(text) {
      this._send(serialize.query(text));
    }
    parse(query) {
      this._send(serialize.parse(query));
    }
    bind(config) {
      this._send(serialize.bind(config));
    }
    execute(config) {
      this._send(serialize.execute(config));
    }
    flush() {
      if (this.stream.writable) {
        this.stream.write(flushBuffer);
      }
    }
    sync() {
      this._ending = true;
      this._send(syncBuffer);
    }
    ref() {
      this.stream.ref();
    }
    unref() {
      this.stream.unref();
    }
    end() {
      this._ending = true;
      if (!this._connecting || !this.stream.writable) {
        this.stream.end();
        return;
      }
      return this.stream.write(endBuffer, () => {
        this.stream.end();
      });
    }
    close(msg) {
      this._send(serialize.close(msg));
    }
    describe(msg) {
      this._send(serialize.describe(msg));
    }
    sendCopyFromChunk(chunk) {
      this._send(serialize.copyData(chunk));
    }
    endCopyFrom() {
      this._send(serialize.copyDone());
    }
    sendCopyFail(msg) {
      this._send(serialize.copyFail(msg));
    }
  }
  module.exports = Connection;
});

// /home/max/tanso/pokemon-showdown/node_modules/.pnpm/pgpass@1.0.5/node_modules/split2/index.js
var require_split2 = __commonJS((exports, module) => {
  function transform(chunk, enc, cb) {
    let list;
    if (this.overflow) {
      const buf = this[kDecoder].write(chunk);
      list = buf.split(this.matcher);
      if (list.length === 1)
        return cb();
      list.shift();
      this.overflow = false;
    } else {
      this[kLast] += this[kDecoder].write(chunk);
      list = this[kLast].split(this.matcher);
    }
    this[kLast] = list.pop();
    for (let i = 0;i < list.length; i++) {
      try {
        push(this, this.mapper(list[i]));
      } catch (error) {
        return cb(error);
      }
    }
    this.overflow = this[kLast].length > this.maxLength;
    if (this.overflow && !this.skipOverflow) {
      cb(new Error("maximum buffer reached"));
      return;
    }
    cb();
  }
  function flush(cb) {
    this[kLast] += this[kDecoder].end();
    if (this[kLast]) {
      try {
        push(this, this.mapper(this[kLast]));
      } catch (error) {
        return cb(error);
      }
    }
    cb();
  }
  function push(self, val) {
    if (val !== undefined) {
      self.push(val);
    }
  }
  function noop(incoming) {
    return incoming;
  }
  function split(matcher, mapper, options) {
    matcher = matcher || /\r?\n/;
    mapper = mapper || noop;
    options = options || {};
    switch (arguments.length) {
      case 1:
        if (typeof matcher === "function") {
          mapper = matcher;
          matcher = /\r?\n/;
        } else if (typeof matcher === "object" && !(matcher instanceof RegExp) && !matcher[Symbol.split]) {
          options = matcher;
          matcher = /\r?\n/;
        }
        break;
      case 2:
        if (typeof matcher === "function") {
          options = mapper;
          mapper = matcher;
          matcher = /\r?\n/;
        } else if (typeof mapper === "object") {
          options = mapper;
          mapper = noop;
        }
    }
    options = Object.assign({}, options);
    options.autoDestroy = true;
    options.transform = transform;
    options.flush = flush;
    options.readableObjectMode = true;
    const stream2 = new Transform(options);
    stream2[kLast] = "";
    stream2[kDecoder] = new StringDecoder("utf8");
    stream2.matcher = matcher;
    stream2.mapper = mapper;
    stream2.maxLength = options.maxLength;
    stream2.skipOverflow = options.skipOverflow || false;
    stream2.overflow = false;
    stream2._destroy = function(err, cb) {
      this._writableState.errorEmitted = false;
      cb(err);
    };
    return stream2;
  }
  var { Transform } = __require("stream");
  var { StringDecoder } = __require("string_decoder");
  var kLast = Symbol("last");
  var kDecoder = Symbol("decoder");
  module.exports = split;
});

// ../pokemon-showdown/node_modules/.pnpm/pgpass@1.0.5/node_modules/pgpass/lib/helper.js
var require_helper = __commonJS((exports, module) => {
  function isRegFile(mode) {
    return (mode & S_IFMT) == S_IFREG;
  }
  function warn() {
    var isWritable = warnStream instanceof Stream && warnStream.writable === true;
    if (isWritable) {
      var args = Array.prototype.slice.call(arguments).concat("\n");
      warnStream.write(util.format.apply(util, args));
    }
  }
  var path = __require("path");
  var Stream = __require("stream").Stream;
  var split = require_split2();
  var util = __require("util");
  var defaultPort = 5432;
  var isWin = process.platform === "win32";
  var warnStream = process.stderr;
  var S_IRWXG = 56;
  var S_IRWXO = 7;
  var S_IFMT = 61440;
  var S_IFREG = 32768;
  var fieldNames = ["host", "port", "database", "user", "password"];
  var nrOfFields = fieldNames.length;
  var passKey = fieldNames[nrOfFields - 1];
  Object.defineProperty(exports, "isWin", {
    get: function() {
      return isWin;
    },
    set: function(val) {
      isWin = val;
    }
  });
  exports.warnTo = function(stream2) {
    var old = warnStream;
    warnStream = stream2;
    return old;
  };
  exports.getFileName = function(rawEnv) {
    var env = rawEnv || process.env;
    var file = env.PGPASSFILE || (isWin ? path.join(env.APPDATA || "./", "postgresql", "pgpass.conf") : path.join(env.HOME || "./", ".pgpass"));
    return file;
  };
  exports.usePgPass = function(stats, fname) {
    if (Object.prototype.hasOwnProperty.call(process.env, "PGPASSWORD")) {
      return false;
    }
    if (isWin) {
      return true;
    }
    fname = fname || "<unkn>";
    if (!isRegFile(stats.mode)) {
      warn('WARNING: password file "%s" is not a plain file', fname);
      return false;
    }
    if (stats.mode & (S_IRWXG | S_IRWXO)) {
      warn('WARNING: password file "%s" has group or world access; permissions should be u=rw (0600) or less', fname);
      return false;
    }
    return true;
  };
  var matcher = exports.match = function(connInfo, entry) {
    return fieldNames.slice(0, -1).reduce(function(prev, field, idx) {
      if (idx == 1) {
        if (Number(connInfo[field] || defaultPort) === Number(entry[field])) {
          return prev && true;
        }
      }
      return prev && (entry[field] === "*" || entry[field] === connInfo[field]);
    }, true);
  };
  exports.getPassword = function(connInfo, stream2, cb) {
    var pass;
    var lineStream = stream2.pipe(split());
    function onLine(line) {
      var entry = parseLine(line);
      if (entry && isValidEntry(entry) && matcher(connInfo, entry)) {
        pass = entry[passKey];
        lineStream.end();
      }
    }
    var onEnd = function() {
      stream2.destroy();
      cb(pass);
    };
    var onErr = function(err) {
      stream2.destroy();
      warn("WARNING: error on reading file: %s", err);
      cb(undefined);
    };
    stream2.on("error", onErr);
    lineStream.on("data", onLine).on("end", onEnd).on("error", onErr);
  };
  var parseLine = exports.parseLine = function(line) {
    if (line.length < 11 || line.match(/^\s+#/)) {
      return null;
    }
    var curChar = "";
    var prevChar = "";
    var fieldIdx = 0;
    var startIdx = 0;
    var endIdx = 0;
    var obj = {};
    var isLastField = false;
    var addToObj = function(idx, i0, i1) {
      var field = line.substring(i0, i1);
      if (!Object.hasOwnProperty.call(process.env, "PGPASS_NO_DEESCAPE")) {
        field = field.replace(/\\([:\\])/g, "$1");
      }
      obj[fieldNames[idx]] = field;
    };
    for (var i = 0;i < line.length - 1; i += 1) {
      curChar = line.charAt(i + 1);
      prevChar = line.charAt(i);
      isLastField = fieldIdx == nrOfFields - 1;
      if (isLastField) {
        addToObj(fieldIdx, startIdx);
        break;
      }
      if (i >= 0 && curChar == ":" && prevChar !== "\\") {
        addToObj(fieldIdx, startIdx, i + 1);
        startIdx = i + 2;
        fieldIdx += 1;
      }
    }
    obj = Object.keys(obj).length === nrOfFields ? obj : null;
    return obj;
  };
  var isValidEntry = exports.isValidEntry = function(entry) {
    var rules = {
      0: function(x) {
        return x.length > 0;
      },
      1: function(x) {
        if (x === "*") {
          return true;
        }
        x = Number(x);
        return isFinite(x) && x > 0 && x < 9007199254740992 && Math.floor(x) === x;
      },
      2: function(x) {
        return x.length > 0;
      },
      3: function(x) {
        return x.length > 0;
      },
      4: function(x) {
        return x.length > 0;
      }
    };
    for (var idx = 0;idx < fieldNames.length; idx += 1) {
      var rule = rules[idx];
      var value = entry[fieldNames[idx]] || "";
      var res = rule(value);
      if (!res) {
        return false;
      }
    }
    return true;
  };
});

// /home/max/tanso/pokemon-showdown/node_modules/.pnpm/pg@8.13.0/node_modules/pgpass/lib/index.js
var require_lib2 = __commonJS((exports, module) => {
  var path = __require("path");
  var fs = __require("fs");
  var helper = require_helper();
  module.exports = function(connInfo, cb) {
    var file = helper.getFileName();
    fs.stat(file, function(err, stat) {
      if (err || !helper.usePgPass(stat, file)) {
        return cb(undefined);
      }
      var st = fs.createReadStream(file);
      helper.getPassword(connInfo, st, cb);
    });
  };
  module.exports.warnTo = helper.warnTo;
});

// ../pokemon-showdown/node_modules/.pnpm/pg@8.13.0/node_modules/pg/lib/client.js
var require_client = __commonJS((exports, module) => {
  var EventEmitter = __require("events").EventEmitter;
  var utils = require_utils2();
  var sasl = require_sasl();
  var TypeOverrides = require_type_overrides();
  var ConnectionParameters = require_connection_parameters();
  var Query = require_query();
  var defaults = require_defaults();
  var Connection = require_connection();
  var crypto = require_utils3();

  class Client extends EventEmitter {
    constructor(config) {
      super();
      this.connectionParameters = new ConnectionParameters(config);
      this.user = this.connectionParameters.user;
      this.database = this.connectionParameters.database;
      this.port = this.connectionParameters.port;
      this.host = this.connectionParameters.host;
      Object.defineProperty(this, "password", {
        configurable: true,
        enumerable: false,
        writable: true,
        value: this.connectionParameters.password
      });
      this.replication = this.connectionParameters.replication;
      var c = config || {};
      this._Promise = c.Promise || global.Promise;
      this._types = new TypeOverrides(c.types);
      this._ending = false;
      this._ended = false;
      this._connecting = false;
      this._connected = false;
      this._connectionError = false;
      this._queryable = true;
      this.connection = c.connection || new Connection({
        stream: c.stream,
        ssl: this.connectionParameters.ssl,
        keepAlive: c.keepAlive || false,
        keepAliveInitialDelayMillis: c.keepAliveInitialDelayMillis || 0,
        encoding: this.connectionParameters.client_encoding || "utf8"
      });
      this.queryQueue = [];
      this.binary = c.binary || defaults.binary;
      this.processID = null;
      this.secretKey = null;
      this.ssl = this.connectionParameters.ssl || false;
      if (this.ssl && this.ssl.key) {
        Object.defineProperty(this.ssl, "key", {
          enumerable: false
        });
      }
      this._connectionTimeoutMillis = c.connectionTimeoutMillis || 0;
    }
    _errorAllQueries(err) {
      const enqueueError = (query) => {
        process.nextTick(() => {
          query.handleError(err, this.connection);
        });
      };
      if (this.activeQuery) {
        enqueueError(this.activeQuery);
        this.activeQuery = null;
      }
      this.queryQueue.forEach(enqueueError);
      this.queryQueue.length = 0;
    }
    _connect(callback) {
      var self = this;
      var con = this.connection;
      this._connectionCallback = callback;
      if (this._connecting || this._connected) {
        const err = new Error("Client has already been connected. You cannot reuse a client.");
        process.nextTick(() => {
          callback(err);
        });
        return;
      }
      this._connecting = true;
      if (this._connectionTimeoutMillis > 0) {
        this.connectionTimeoutHandle = setTimeout(() => {
          con._ending = true;
          con.stream.destroy(new Error("timeout expired"));
        }, this._connectionTimeoutMillis);
      }
      if (this.host && this.host.indexOf("/") === 0) {
        con.connect(this.host + "/.s.PGSQL." + this.port);
      } else {
        con.connect(this.port, this.host);
      }
      con.on("connect", function() {
        if (self.ssl) {
          con.requestSsl();
        } else {
          con.startup(self.getStartupConf());
        }
      });
      con.on("sslconnect", function() {
        con.startup(self.getStartupConf());
      });
      this._attachListeners(con);
      con.once("end", () => {
        const error = this._ending ? new Error("Connection terminated") : new Error("Connection terminated unexpectedly");
        clearTimeout(this.connectionTimeoutHandle);
        this._errorAllQueries(error);
        this._ended = true;
        if (!this._ending) {
          if (this._connecting && !this._connectionError) {
            if (this._connectionCallback) {
              this._connectionCallback(error);
            } else {
              this._handleErrorEvent(error);
            }
          } else if (!this._connectionError) {
            this._handleErrorEvent(error);
          }
        }
        process.nextTick(() => {
          this.emit("end");
        });
      });
    }
    connect(callback) {
      if (callback) {
        this._connect(callback);
        return;
      }
      return new this._Promise((resolve, reject) => {
        this._connect((error) => {
          if (error) {
            reject(error);
          } else {
            resolve();
          }
        });
      });
    }
    _attachListeners(con) {
      con.on("authenticationCleartextPassword", this._handleAuthCleartextPassword.bind(this));
      con.on("authenticationMD5Password", this._handleAuthMD5Password.bind(this));
      con.on("authenticationSASL", this._handleAuthSASL.bind(this));
      con.on("authenticationSASLContinue", this._handleAuthSASLContinue.bind(this));
      con.on("authenticationSASLFinal", this._handleAuthSASLFinal.bind(this));
      con.on("backendKeyData", this._handleBackendKeyData.bind(this));
      con.on("error", this._handleErrorEvent.bind(this));
      con.on("errorMessage", this._handleErrorMessage.bind(this));
      con.on("readyForQuery", this._handleReadyForQuery.bind(this));
      con.on("notice", this._handleNotice.bind(this));
      con.on("rowDescription", this._handleRowDescription.bind(this));
      con.on("dataRow", this._handleDataRow.bind(this));
      con.on("portalSuspended", this._handlePortalSuspended.bind(this));
      con.on("emptyQuery", this._handleEmptyQuery.bind(this));
      con.on("commandComplete", this._handleCommandComplete.bind(this));
      con.on("parseComplete", this._handleParseComplete.bind(this));
      con.on("copyInResponse", this._handleCopyInResponse.bind(this));
      con.on("copyData", this._handleCopyData.bind(this));
      con.on("notification", this._handleNotification.bind(this));
    }
    _checkPgPass(cb) {
      const con = this.connection;
      if (typeof this.password === "function") {
        this._Promise.resolve().then(() => this.password()).then((pass) => {
          if (pass !== undefined) {
            if (typeof pass !== "string") {
              con.emit("error", new TypeError("Password must be a string"));
              return;
            }
            this.connectionParameters.password = this.password = pass;
          } else {
            this.connectionParameters.password = this.password = null;
          }
          cb();
        }).catch((err) => {
          con.emit("error", err);
        });
      } else if (this.password !== null) {
        cb();
      } else {
        try {
          const pgPass = require_lib2();
          pgPass(this.connectionParameters, (pass) => {
            if (pass !== undefined) {
              this.connectionParameters.password = this.password = pass;
            }
            cb();
          });
        } catch (e) {
          this.emit("error", e);
        }
      }
    }
    _handleAuthCleartextPassword(msg) {
      this._checkPgPass(() => {
        this.connection.password(this.password);
      });
    }
    _handleAuthMD5Password(msg) {
      this._checkPgPass(async () => {
        try {
          const hashedPassword = await crypto.postgresMd5PasswordHash(this.user, this.password, msg.salt);
          this.connection.password(hashedPassword);
        } catch (e) {
          this.emit("error", e);
        }
      });
    }
    _handleAuthSASL(msg) {
      this._checkPgPass(() => {
        try {
          this.saslSession = sasl.startSession(msg.mechanisms);
          this.connection.sendSASLInitialResponseMessage(this.saslSession.mechanism, this.saslSession.response);
        } catch (err) {
          this.connection.emit("error", err);
        }
      });
    }
    async _handleAuthSASLContinue(msg) {
      try {
        await sasl.continueSession(this.saslSession, this.password, msg.data);
        this.connection.sendSCRAMClientFinalMessage(this.saslSession.response);
      } catch (err) {
        this.connection.emit("error", err);
      }
    }
    _handleAuthSASLFinal(msg) {
      try {
        sasl.finalizeSession(this.saslSession, msg.data);
        this.saslSession = null;
      } catch (err) {
        this.connection.emit("error", err);
      }
    }
    _handleBackendKeyData(msg) {
      this.processID = msg.processID;
      this.secretKey = msg.secretKey;
    }
    _handleReadyForQuery(msg) {
      if (this._connecting) {
        this._connecting = false;
        this._connected = true;
        clearTimeout(this.connectionTimeoutHandle);
        if (this._connectionCallback) {
          this._connectionCallback(null, this);
          this._connectionCallback = null;
        }
        this.emit("connect");
      }
      const { activeQuery } = this;
      this.activeQuery = null;
      this.readyForQuery = true;
      if (activeQuery) {
        activeQuery.handleReadyForQuery(this.connection);
      }
      this._pulseQueryQueue();
    }
    _handleErrorWhileConnecting(err) {
      if (this._connectionError) {
        return;
      }
      this._connectionError = true;
      clearTimeout(this.connectionTimeoutHandle);
      if (this._connectionCallback) {
        return this._connectionCallback(err);
      }
      this.emit("error", err);
    }
    _handleErrorEvent(err) {
      if (this._connecting) {
        return this._handleErrorWhileConnecting(err);
      }
      this._queryable = false;
      this._errorAllQueries(err);
      this.emit("error", err);
    }
    _handleErrorMessage(msg) {
      if (this._connecting) {
        return this._handleErrorWhileConnecting(msg);
      }
      const activeQuery = this.activeQuery;
      if (!activeQuery) {
        this._handleErrorEvent(msg);
        return;
      }
      this.activeQuery = null;
      activeQuery.handleError(msg, this.connection);
    }
    _handleRowDescription(msg) {
      this.activeQuery.handleRowDescription(msg);
    }
    _handleDataRow(msg) {
      this.activeQuery.handleDataRow(msg);
    }
    _handlePortalSuspended(msg) {
      this.activeQuery.handlePortalSuspended(this.connection);
    }
    _handleEmptyQuery(msg) {
      this.activeQuery.handleEmptyQuery(this.connection);
    }
    _handleCommandComplete(msg) {
      if (this.activeQuery == null) {
        const error = new Error("Received unexpected commandComplete message from backend.");
        this._handleErrorEvent(error);
        return;
      }
      this.activeQuery.handleCommandComplete(msg, this.connection);
    }
    _handleParseComplete() {
      if (this.activeQuery == null) {
        const error = new Error("Received unexpected parseComplete message from backend.");
        this._handleErrorEvent(error);
        return;
      }
      if (this.activeQuery.name) {
        this.connection.parsedStatements[this.activeQuery.name] = this.activeQuery.text;
      }
    }
    _handleCopyInResponse(msg) {
      this.activeQuery.handleCopyInResponse(this.connection);
    }
    _handleCopyData(msg) {
      this.activeQuery.handleCopyData(msg, this.connection);
    }
    _handleNotification(msg) {
      this.emit("notification", msg);
    }
    _handleNotice(msg) {
      this.emit("notice", msg);
    }
    getStartupConf() {
      var params = this.connectionParameters;
      var data = {
        user: params.user,
        database: params.database
      };
      var appName = params.application_name || params.fallback_application_name;
      if (appName) {
        data.application_name = appName;
      }
      if (params.replication) {
        data.replication = "" + params.replication;
      }
      if (params.statement_timeout) {
        data.statement_timeout = String(parseInt(params.statement_timeout, 10));
      }
      if (params.lock_timeout) {
        data.lock_timeout = String(parseInt(params.lock_timeout, 10));
      }
      if (params.idle_in_transaction_session_timeout) {
        data.idle_in_transaction_session_timeout = String(parseInt(params.idle_in_transaction_session_timeout, 10));
      }
      if (params.options) {
        data.options = params.options;
      }
      return data;
    }
    cancel(client, query) {
      if (client.activeQuery === query) {
        var con = this.connection;
        if (this.host && this.host.indexOf("/") === 0) {
          con.connect(this.host + "/.s.PGSQL." + this.port);
        } else {
          con.connect(this.port, this.host);
        }
        con.on("connect", function() {
          con.cancel(client.processID, client.secretKey);
        });
      } else if (client.queryQueue.indexOf(query) !== -1) {
        client.queryQueue.splice(client.queryQueue.indexOf(query), 1);
      }
    }
    setTypeParser(oid, format, parseFn) {
      return this._types.setTypeParser(oid, format, parseFn);
    }
    getTypeParser(oid, format) {
      return this._types.getTypeParser(oid, format);
    }
    escapeIdentifier(str) {
      return utils.escapeIdentifier(str);
    }
    escapeLiteral(str) {
      return utils.escapeLiteral(str);
    }
    _pulseQueryQueue() {
      if (this.readyForQuery === true) {
        this.activeQuery = this.queryQueue.shift();
        if (this.activeQuery) {
          this.readyForQuery = false;
          this.hasExecuted = true;
          const queryError = this.activeQuery.submit(this.connection);
          if (queryError) {
            process.nextTick(() => {
              this.activeQuery.handleError(queryError, this.connection);
              this.readyForQuery = true;
              this._pulseQueryQueue();
            });
          }
        } else if (this.hasExecuted) {
          this.activeQuery = null;
          this.emit("drain");
        }
      }
    }
    query(config, values, callback) {
      var query;
      var result;
      var readTimeout;
      var readTimeoutTimer;
      var queryCallback;
      if (config === null || config === undefined) {
        throw new TypeError("Client was passed a null or undefined query");
      } else if (typeof config.submit === "function") {
        readTimeout = config.query_timeout || this.connectionParameters.query_timeout;
        result = query = config;
        if (typeof values === "function") {
          query.callback = query.callback || values;
        }
      } else {
        readTimeout = config.query_timeout || this.connectionParameters.query_timeout;
        query = new Query(config, values, callback);
        if (!query.callback) {
          result = new this._Promise((resolve, reject) => {
            query.callback = (err, res) => err ? reject(err) : resolve(res);
          }).catch((err) => {
            Error.captureStackTrace(err);
            throw err;
          });
        }
      }
      if (readTimeout) {
        queryCallback = query.callback;
        readTimeoutTimer = setTimeout(() => {
          var error = new Error("Query read timeout");
          process.nextTick(() => {
            query.handleError(error, this.connection);
          });
          queryCallback(error);
          query.callback = () => {
          };
          var index = this.queryQueue.indexOf(query);
          if (index > -1) {
            this.queryQueue.splice(index, 1);
          }
          this._pulseQueryQueue();
        }, readTimeout);
        query.callback = (err, res) => {
          clearTimeout(readTimeoutTimer);
          queryCallback(err, res);
        };
      }
      if (this.binary && !query.binary) {
        query.binary = true;
      }
      if (query._result && !query._result._types) {
        query._result._types = this._types;
      }
      if (!this._queryable) {
        process.nextTick(() => {
          query.handleError(new Error("Client has encountered a connection error and is not queryable"), this.connection);
        });
        return result;
      }
      if (this._ending) {
        process.nextTick(() => {
          query.handleError(new Error("Client was closed and is not queryable"), this.connection);
        });
        return result;
      }
      this.queryQueue.push(query);
      this._pulseQueryQueue();
      return result;
    }
    ref() {
      this.connection.ref();
    }
    unref() {
      this.connection.unref();
    }
    end(cb) {
      this._ending = true;
      if (!this.connection._connecting || this._ended) {
        if (cb) {
          cb();
        } else {
          return this._Promise.resolve();
        }
      }
      if (this.activeQuery || !this._queryable) {
        this.connection.stream.destroy();
      } else {
        this.connection.end();
      }
      if (cb) {
        this.connection.once("end", cb);
      } else {
        return new this._Promise((resolve) => {
          this.connection.once("end", resolve);
        });
      }
    }
  }
  Client.Query = Query;
  module.exports = Client;
});

// /home/max/tanso/pokemon-showdown/node_modules/.pnpm/pg@8.13.0/node_modules/pg-pool/index.js
var require_pg_pool = __commonJS((exports, module) => {
  function throwOnDoubleRelease() {
    throw new Error("Release called on client which has already been released to the pool.");
  }
  function promisify(Promise2, callback) {
    if (callback) {
      return { callback, result: undefined };
    }
    let rej;
    let res;
    const cb = function(err, client) {
      err ? rej(err) : res(client);
    };
    const result = new Promise2(function(resolve, reject) {
      res = resolve;
      rej = reject;
    }).catch((err) => {
      Error.captureStackTrace(err);
      throw err;
    });
    return { callback: cb, result };
  }
  function makeIdleListener(pool, client) {
    return function idleListener(err) {
      err.client = client;
      client.removeListener("error", idleListener);
      client.on("error", () => {
        pool.log("additional client error after disconnection due to error", err);
      });
      pool._remove(client);
      pool.emit("error", err, client);
    };
  }
  var EventEmitter = __require("events").EventEmitter;
  var NOOP = function() {
  };
  var removeWhere = (list, predicate) => {
    const i = list.findIndex(predicate);
    return i === -1 ? undefined : list.splice(i, 1)[0];
  };

  class IdleItem {
    constructor(client, idleListener, timeoutId) {
      this.client = client;
      this.idleListener = idleListener;
      this.timeoutId = timeoutId;
    }
  }

  class PendingItem {
    constructor(callback) {
      this.callback = callback;
    }
  }

  class Pool extends EventEmitter {
    constructor(options, Client) {
      super();
      this.options = Object.assign({}, options);
      if (options != null && "password" in options) {
        Object.defineProperty(this.options, "password", {
          configurable: true,
          enumerable: false,
          writable: true,
          value: options.password
        });
      }
      if (options != null && options.ssl && options.ssl.key) {
        Object.defineProperty(this.options.ssl, "key", {
          enumerable: false
        });
      }
      this.options.max = this.options.max || this.options.poolSize || 10;
      this.options.maxUses = this.options.maxUses || Infinity;
      this.options.allowExitOnIdle = this.options.allowExitOnIdle || false;
      this.options.maxLifetimeSeconds = this.options.maxLifetimeSeconds || 0;
      this.log = this.options.log || function() {
      };
      this.Client = this.options.Client || Client || require_lib3().Client;
      this.Promise = this.options.Promise || global.Promise;
      if (typeof this.options.idleTimeoutMillis === "undefined") {
        this.options.idleTimeoutMillis = 1e4;
      }
      this._clients = [];
      this._idle = [];
      this._expired = new WeakSet;
      this._pendingQueue = [];
      this._endCallback = undefined;
      this.ending = false;
      this.ended = false;
    }
    _isFull() {
      return this._clients.length >= this.options.max;
    }
    _pulseQueue() {
      this.log("pulse queue");
      if (this.ended) {
        this.log("pulse queue ended");
        return;
      }
      if (this.ending) {
        this.log("pulse queue on ending");
        if (this._idle.length) {
          this._idle.slice().map((item) => {
            this._remove(item.client);
          });
        }
        if (!this._clients.length) {
          this.ended = true;
          this._endCallback();
        }
        return;
      }
      if (!this._pendingQueue.length) {
        this.log("no queued requests");
        return;
      }
      if (!this._idle.length && this._isFull()) {
        return;
      }
      const pendingItem = this._pendingQueue.shift();
      if (this._idle.length) {
        const idleItem = this._idle.pop();
        clearTimeout(idleItem.timeoutId);
        const client = idleItem.client;
        client.ref && client.ref();
        const idleListener = idleItem.idleListener;
        return this._acquireClient(client, pendingItem, idleListener, false);
      }
      if (!this._isFull()) {
        return this.newClient(pendingItem);
      }
      throw new Error("unexpected condition");
    }
    _remove(client) {
      const removed = removeWhere(this._idle, (item) => item.client === client);
      if (removed !== undefined) {
        clearTimeout(removed.timeoutId);
      }
      this._clients = this._clients.filter((c) => c !== client);
      client.end();
      this.emit("remove", client);
    }
    connect(cb) {
      if (this.ending) {
        const err = new Error("Cannot use a pool after calling end on the pool");
        return cb ? cb(err) : this.Promise.reject(err);
      }
      const response = promisify(this.Promise, cb);
      const result = response.result;
      if (this._isFull() || this._idle.length) {
        if (this._idle.length) {
          process.nextTick(() => this._pulseQueue());
        }
        if (!this.options.connectionTimeoutMillis) {
          this._pendingQueue.push(new PendingItem(response.callback));
          return result;
        }
        const queueCallback = (err, res, done) => {
          clearTimeout(tid);
          response.callback(err, res, done);
        };
        const pendingItem = new PendingItem(queueCallback);
        const tid = setTimeout(() => {
          removeWhere(this._pendingQueue, (i) => i.callback === queueCallback);
          pendingItem.timedOut = true;
          response.callback(new Error("timeout exceeded when trying to connect"));
        }, this.options.connectionTimeoutMillis);
        this._pendingQueue.push(pendingItem);
        return result;
      }
      this.newClient(new PendingItem(response.callback));
      return result;
    }
    newClient(pendingItem) {
      const client = new this.Client(this.options);
      this._clients.push(client);
      const idleListener = makeIdleListener(this, client);
      this.log("checking client timeout");
      let tid;
      let timeoutHit = false;
      if (this.options.connectionTimeoutMillis) {
        tid = setTimeout(() => {
          this.log("ending client due to timeout");
          timeoutHit = true;
          client.connection ? client.connection.stream.destroy() : client.end();
        }, this.options.connectionTimeoutMillis);
      }
      this.log("connecting new client");
      client.connect((err) => {
        if (tid) {
          clearTimeout(tid);
        }
        client.on("error", idleListener);
        if (err) {
          this.log("client failed to connect", err);
          this._clients = this._clients.filter((c) => c !== client);
          if (timeoutHit) {
            err.message = "Connection terminated due to connection timeout";
          }
          this._pulseQueue();
          if (!pendingItem.timedOut) {
            pendingItem.callback(err, undefined, NOOP);
          }
        } else {
          this.log("new client connected");
          if (this.options.maxLifetimeSeconds !== 0) {
            const maxLifetimeTimeout = setTimeout(() => {
              this.log("ending client due to expired lifetime");
              this._expired.add(client);
              const idleIndex = this._idle.findIndex((idleItem) => idleItem.client === client);
              if (idleIndex !== -1) {
                this._acquireClient(client, new PendingItem((err2, client2, clientRelease) => clientRelease()), idleListener, false);
              }
            }, this.options.maxLifetimeSeconds * 1000);
            maxLifetimeTimeout.unref();
            client.once("end", () => clearTimeout(maxLifetimeTimeout));
          }
          return this._acquireClient(client, pendingItem, idleListener, true);
        }
      });
    }
    _acquireClient(client, pendingItem, idleListener, isNew) {
      if (isNew) {
        this.emit("connect", client);
      }
      this.emit("acquire", client);
      client.release = this._releaseOnce(client, idleListener);
      client.removeListener("error", idleListener);
      if (!pendingItem.timedOut) {
        if (isNew && this.options.verify) {
          this.options.verify(client, (err) => {
            if (err) {
              client.release(err);
              return pendingItem.callback(err, undefined, NOOP);
            }
            pendingItem.callback(undefined, client, client.release);
          });
        } else {
          pendingItem.callback(undefined, client, client.release);
        }
      } else {
        if (isNew && this.options.verify) {
          this.options.verify(client, client.release);
        } else {
          client.release();
        }
      }
    }
    _releaseOnce(client, idleListener) {
      let released = false;
      return (err) => {
        if (released) {
          throwOnDoubleRelease();
        }
        released = true;
        this._release(client, idleListener, err);
      };
    }
    _release(client, idleListener, err) {
      client.on("error", idleListener);
      client._poolUseCount = (client._poolUseCount || 0) + 1;
      this.emit("release", err, client);
      if (err || this.ending || !client._queryable || client._ending || client._poolUseCount >= this.options.maxUses) {
        if (client._poolUseCount >= this.options.maxUses) {
          this.log("remove expended client");
        }
        this._remove(client);
        this._pulseQueue();
        return;
      }
      const isExpired = this._expired.has(client);
      if (isExpired) {
        this.log("remove expired client");
        this._expired.delete(client);
        this._remove(client);
        this._pulseQueue();
        return;
      }
      let tid;
      if (this.options.idleTimeoutMillis) {
        tid = setTimeout(() => {
          this.log("remove idle client");
          this._remove(client);
        }, this.options.idleTimeoutMillis);
        if (this.options.allowExitOnIdle) {
          tid.unref();
        }
      }
      if (this.options.allowExitOnIdle) {
        client.unref();
      }
      this._idle.push(new IdleItem(client, idleListener, tid));
      this._pulseQueue();
    }
    query(text, values, cb) {
      if (typeof text === "function") {
        const response2 = promisify(this.Promise, text);
        setImmediate(function() {
          return response2.callback(new Error("Passing a function as the first parameter to pool.query is not supported"));
        });
        return response2.result;
      }
      if (typeof values === "function") {
        cb = values;
        values = undefined;
      }
      const response = promisify(this.Promise, cb);
      cb = response.callback;
      this.connect((err, client) => {
        if (err) {
          return cb(err);
        }
        let clientReleased = false;
        const onError = (err2) => {
          if (clientReleased) {
            return;
          }
          clientReleased = true;
          client.release(err2);
          cb(err2);
        };
        client.once("error", onError);
        this.log("dispatching query");
        try {
          client.query(text, values, (err2, res) => {
            this.log("query dispatched");
            client.removeListener("error", onError);
            if (clientReleased) {
              return;
            }
            clientReleased = true;
            client.release(err2);
            if (err2) {
              return cb(err2);
            }
            return cb(undefined, res);
          });
        } catch (err2) {
          client.release(err2);
          return cb(err2);
        }
      });
      return response.result;
    }
    end(cb) {
      this.log("ending");
      if (this.ending) {
        const err = new Error("Called end on pool more than once");
        return cb ? cb(err) : this.Promise.reject(err);
      }
      this.ending = true;
      const promised = promisify(this.Promise, cb);
      this._endCallback = promised.callback;
      this._pulseQueue();
      return promised.result;
    }
    get waitingCount() {
      return this._pendingQueue.length;
    }
    get idleCount() {
      return this._idle.length;
    }
    get expiredCount() {
      return this._clients.reduce((acc, client) => acc + (this._expired.has(client) ? 1 : 0), 0);
    }
    get totalCount() {
      return this._clients.length;
    }
  }
  module.exports = Pool;
});

// ../pokemon-showdown/node_modules/.pnpm/pg@8.13.0/node_modules/pg/lib/native/query.js
var require_query2 = __commonJS((exports, module) => {
  var EventEmitter = __require("events").EventEmitter;
  var util = __require("util");
  var utils = require_utils2();
  var NativeQuery = module.exports = function(config, values, callback) {
    EventEmitter.call(this);
    config = utils.normalizeQueryConfig(config, values, callback);
    this.text = config.text;
    this.values = config.values;
    this.name = config.name;
    this.queryMode = config.queryMode;
    this.callback = config.callback;
    this.state = "new";
    this._arrayMode = config.rowMode === "array";
    this._emitRowEvents = false;
    this.on("newListener", function(event) {
      if (event === "row")
        this._emitRowEvents = true;
    }.bind(this));
  };
  util.inherits(NativeQuery, EventEmitter);
  var errorFieldMap = {
    sqlState: "code",
    statementPosition: "position",
    messagePrimary: "message",
    context: "where",
    schemaName: "schema",
    tableName: "table",
    columnName: "column",
    dataTypeName: "dataType",
    constraintName: "constraint",
    sourceFile: "file",
    sourceLine: "line",
    sourceFunction: "routine"
  };
  NativeQuery.prototype.handleError = function(err) {
    var fields = this.native.pq.resultErrorFields();
    if (fields) {
      for (var key in fields) {
        var normalizedFieldName = errorFieldMap[key] || key;
        err[normalizedFieldName] = fields[key];
      }
    }
    if (this.callback) {
      this.callback(err);
    } else {
      this.emit("error", err);
    }
    this.state = "error";
  };
  NativeQuery.prototype.then = function(onSuccess, onFailure) {
    return this._getPromise().then(onSuccess, onFailure);
  };
  NativeQuery.prototype.catch = function(callback) {
    return this._getPromise().catch(callback);
  };
  NativeQuery.prototype._getPromise = function() {
    if (this._promise)
      return this._promise;
    this._promise = new Promise(function(resolve, reject) {
      this._once("end", resolve);
      this._once("error", reject);
    }.bind(this));
    return this._promise;
  };
  NativeQuery.prototype.submit = function(client) {
    this.state = "running";
    var self = this;
    this.native = client.native;
    client.native.arrayMode = this._arrayMode;
    var after = function(err, rows, results) {
      client.native.arrayMode = false;
      setImmediate(function() {
        self.emit("_done");
      });
      if (err) {
        return self.handleError(err);
      }
      if (self._emitRowEvents) {
        if (results.length > 1) {
          rows.forEach((rowOfRows, i) => {
            rowOfRows.forEach((row) => {
              self.emit("row", row, results[i]);
            });
          });
        } else {
          rows.forEach(function(row) {
            self.emit("row", row, results);
          });
        }
      }
      self.state = "end";
      self.emit("end", results);
      if (self.callback) {
        self.callback(null, results);
      }
    };
    if (process.domain) {
      after = process.domain.bind(after);
    }
    if (this.name) {
      if (this.name.length > 63) {
        console.error("Warning! Postgres only supports 63 characters for query names.");
        console.error("You supplied %s (%s)", this.name, this.name.length);
        console.error("This can cause conflicts and silent errors executing queries");
      }
      var values = (this.values || []).map(utils.prepareValue);
      if (client.namedQueries[this.name]) {
        if (this.text && client.namedQueries[this.name] !== this.text) {
          const err = new Error(`Prepared statements must be unique - '${this.name}' was used for a different statement`);
          return after(err);
        }
        return client.native.execute(this.name, values, after);
      }
      return client.native.prepare(this.name, this.text, values.length, function(err) {
        if (err)
          return after(err);
        client.namedQueries[self.name] = self.text;
        return self.native.execute(self.name, values, after);
      });
    } else if (this.values) {
      if (!Array.isArray(this.values)) {
        const err = new Error("Query values must be an array");
        return after(err);
      }
      var vals = this.values.map(utils.prepareValue);
      client.native.query(this.text, vals, after);
    } else if (this.queryMode === "extended") {
      client.native.query(this.text, [], after);
    } else {
      client.native.query(this.text, after);
    }
  };
});

// ../pokemon-showdown/node_modules/.pnpm/pg@8.13.0/node_modules/pg/lib/native/client.js
var require_client2 = __commonJS((exports, module) => {
  var Native;
  try {
    Native = (()=>{throw new Error(`Cannot require module "pg-native"`);})();
  } catch (e) {
    throw e;
  }
  var TypeOverrides = require_type_overrides();
  var EventEmitter = __require("events").EventEmitter;
  var util = __require("util");
  var ConnectionParameters = require_connection_parameters();
  var NativeQuery = require_query2();
  var Client = module.exports = function(config) {
    EventEmitter.call(this);
    config = config || {};
    this._Promise = config.Promise || global.Promise;
    this._types = new TypeOverrides(config.types);
    this.native = new Native({
      types: this._types
    });
    this._queryQueue = [];
    this._ending = false;
    this._connecting = false;
    this._connected = false;
    this._queryable = true;
    var cp = this.connectionParameters = new ConnectionParameters(config);
    if (config.nativeConnectionString)
      cp.nativeConnectionString = config.nativeConnectionString;
    this.user = cp.user;
    Object.defineProperty(this, "password", {
      configurable: true,
      enumerable: false,
      writable: true,
      value: cp.password
    });
    this.database = cp.database;
    this.host = cp.host;
    this.port = cp.port;
    this.namedQueries = {};
  };
  Client.Query = NativeQuery;
  util.inherits(Client, EventEmitter);
  Client.prototype._errorAllQueries = function(err) {
    const enqueueError = (query) => {
      process.nextTick(() => {
        query.native = this.native;
        query.handleError(err);
      });
    };
    if (this._hasActiveQuery()) {
      enqueueError(this._activeQuery);
      this._activeQuery = null;
    }
    this._queryQueue.forEach(enqueueError);
    this._queryQueue.length = 0;
  };
  Client.prototype._connect = function(cb) {
    var self = this;
    if (this._connecting) {
      process.nextTick(() => cb(new Error("Client has already been connected. You cannot reuse a client.")));
      return;
    }
    this._connecting = true;
    this.connectionParameters.getLibpqConnectionString(function(err, conString) {
      if (self.connectionParameters.nativeConnectionString)
        conString = self.connectionParameters.nativeConnectionString;
      if (err)
        return cb(err);
      self.native.connect(conString, function(err2) {
        if (err2) {
          self.native.end();
          return cb(err2);
        }
        self._connected = true;
        self.native.on("error", function(err3) {
          self._queryable = false;
          self._errorAllQueries(err3);
          self.emit("error", err3);
        });
        self.native.on("notification", function(msg) {
          self.emit("notification", {
            channel: msg.relname,
            payload: msg.extra
          });
        });
        self.emit("connect");
        self._pulseQueryQueue(true);
        cb();
      });
    });
  };
  Client.prototype.connect = function(callback) {
    if (callback) {
      this._connect(callback);
      return;
    }
    return new this._Promise((resolve, reject) => {
      this._connect((error) => {
        if (error) {
          reject(error);
        } else {
          resolve();
        }
      });
    });
  };
  Client.prototype.query = function(config, values, callback) {
    var query;
    var result;
    var readTimeout;
    var readTimeoutTimer;
    var queryCallback;
    if (config === null || config === undefined) {
      throw new TypeError("Client was passed a null or undefined query");
    } else if (typeof config.submit === "function") {
      readTimeout = config.query_timeout || this.connectionParameters.query_timeout;
      result = query = config;
      if (typeof values === "function") {
        config.callback = values;
      }
    } else {
      readTimeout = config.query_timeout || this.connectionParameters.query_timeout;
      query = new NativeQuery(config, values, callback);
      if (!query.callback) {
        let resolveOut, rejectOut;
        result = new this._Promise((resolve, reject) => {
          resolveOut = resolve;
          rejectOut = reject;
        }).catch((err) => {
          Error.captureStackTrace(err);
          throw err;
        });
        query.callback = (err, res) => err ? rejectOut(err) : resolveOut(res);
      }
    }
    if (readTimeout) {
      queryCallback = query.callback;
      readTimeoutTimer = setTimeout(() => {
        var error = new Error("Query read timeout");
        process.nextTick(() => {
          query.handleError(error, this.connection);
        });
        queryCallback(error);
        query.callback = () => {
        };
        var index = this._queryQueue.indexOf(query);
        if (index > -1) {
          this._queryQueue.splice(index, 1);
        }
        this._pulseQueryQueue();
      }, readTimeout);
      query.callback = (err, res) => {
        clearTimeout(readTimeoutTimer);
        queryCallback(err, res);
      };
    }
    if (!this._queryable) {
      query.native = this.native;
      process.nextTick(() => {
        query.handleError(new Error("Client has encountered a connection error and is not queryable"));
      });
      return result;
    }
    if (this._ending) {
      query.native = this.native;
      process.nextTick(() => {
        query.handleError(new Error("Client was closed and is not queryable"));
      });
      return result;
    }
    this._queryQueue.push(query);
    this._pulseQueryQueue();
    return result;
  };
  Client.prototype.end = function(cb) {
    var self = this;
    this._ending = true;
    if (!this._connected) {
      this.once("connect", this.end.bind(this, cb));
    }
    var result;
    if (!cb) {
      result = new this._Promise(function(resolve, reject) {
        cb = (err) => err ? reject(err) : resolve();
      });
    }
    this.native.end(function() {
      self._errorAllQueries(new Error("Connection terminated"));
      process.nextTick(() => {
        self.emit("end");
        if (cb)
          cb();
      });
    });
    return result;
  };
  Client.prototype._hasActiveQuery = function() {
    return this._activeQuery && this._activeQuery.state !== "error" && this._activeQuery.state !== "end";
  };
  Client.prototype._pulseQueryQueue = function(initialConnection) {
    if (!this._connected) {
      return;
    }
    if (this._hasActiveQuery()) {
      return;
    }
    var query = this._queryQueue.shift();
    if (!query) {
      if (!initialConnection) {
        this.emit("drain");
      }
      return;
    }
    this._activeQuery = query;
    query.submit(this);
    var self = this;
    query.once("_done", function() {
      self._pulseQueryQueue();
    });
  };
  Client.prototype.cancel = function(query) {
    if (this._activeQuery === query) {
      this.native.cancel(function() {
      });
    } else if (this._queryQueue.indexOf(query) !== -1) {
      this._queryQueue.splice(this._queryQueue.indexOf(query), 1);
    }
  };
  Client.prototype.ref = function() {
  };
  Client.prototype.unref = function() {
  };
  Client.prototype.setTypeParser = function(oid, format, parseFn) {
    return this._types.setTypeParser(oid, format, parseFn);
  };
  Client.prototype.getTypeParser = function(oid, format) {
    return this._types.getTypeParser(oid, format);
  };
});

// /home/max/tanso/pokemon-showdown/node_modules/pg/lib/index.js
var require_lib3 = __commonJS((exports, module) => {
  var Client = require_client();
  var defaults = require_defaults();
  var Connection = require_connection();
  var Pool = require_pg_pool();
  var { DatabaseError } = require_dist();
  var { escapeIdentifier, escapeLiteral } = require_utils2();
  var poolFactory = (Client2) => {
    return class BoundPool extends Pool {
      constructor(options) {
        super(options, Client2);
      }
    };
  };
  var PG = function(clientConstructor) {
    this.defaults = defaults;
    this.Client = clientConstructor;
    this.Query = this.Client.Query;
    this.Pool = poolFactory(this.Client);
    this._pools = [];
    this.Connection = Connection;
    this.types = require_pg_types();
    this.DatabaseError = DatabaseError;
    this.escapeIdentifier = escapeIdentifier;
    this.escapeLiteral = escapeLiteral;
  };
  if (typeof process.env.NODE_PG_FORCE_NATIVE !== "undefined") {
    module.exports = new PG(require_client2());
  } else {
    module.exports = new PG(Client);
    Object.defineProperty(module.exports, "native", {
      configurable: true,
      enumerable: false,
      get() {
        var native = null;
        try {
          native = new PG(require_client2());
        } catch (err) {
          if (err.code !== "MODULE_NOT_FOUND") {
            throw err;
          }
        }
        Object.defineProperty(module.exports, "native", {
          value: native
        });
        return native;
      }
    });
  }
});

// ../pokemon-showdown/dist/lib/postgres.js
var require_postgres = __commonJS((exports, module) => {
  var __create2 = Object.create;
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __getProtoOf2 = Object.getPrototypeOf;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var postgres_exports = {};
  __export2(postgres_exports, {
    PostgresDatabase: () => PostgresDatabase
  });
  module.exports = __toCommonJS2(postgres_exports);
  var Streams = __toESM2(require_streams());
  var import_fs = require_fs();
  var Utils = __toESM2(require_utils());

  class PostgresDatabase {
    constructor(config = PostgresDatabase.getConfig()) {
      try {
        this.pool = new (require_lib3()).Pool(config);
      } catch (e) {
        this.pool = null;
      }
    }
    destroy() {
      return this.pool.end();
    }
    async query(statement, values) {
      if (!this.pool) {
        throw new Error(`Attempting to use postgres without 'pg' installed`);
      }
      let result;
      try {
        result = await this.pool.query(statement, values);
      } catch (e) {
        throw new Error(e.message);
      }
      return result?.rows || [];
    }
    static getConfig() {
      let config = {};
      try {
        config = __require(import_fs.FS.ROOT_PATH + "/config/config").usepostgres;
        if (!config)
          throw new Error("Missing config for pg database");
      } catch (e) {
      }
      return config;
    }
    async transaction(callback, depth = 0) {
      const conn = await this.pool.connect();
      await conn.query(`BEGIN`);
      let result;
      try {
        result = await callback(conn);
      } catch (e) {
        await conn.query(`ROLLBACK`);
        if (e.code === "40001" && depth <= 10) {
          return this.transaction(callback, depth + 1);
        } else if (e.code === "23505" && !depth) {
          return this.transaction(callback, depth + 1);
        } else {
          throw e;
        }
      }
      await conn.query(`COMMIT`);
      return result;
    }
    stream(query) {
      const db = this;
      return new Streams.ObjectReadStream({
        async read() {
          const result = await db.query(query);
          if (!result.length)
            return this.pushEnd();
          this.buf.push(...result);
        }
      });
    }
    async ensureMigrated(opts) {
      let value;
      try {
        const stored = await this.query(`SELECT value FROM db_info WHERE key = 'version' AND name = \$1`, [opts.table]);
        if (stored.length) {
          value = stored[0].value || "0";
        }
      } catch (e) {
        await this.query(`CREATE TABLE db_info (name TEXT NOT NULL, key TEXT NOT NULL, value TEXT NOT NULL)`);
      }
      if (!value) {
        value = "0";
        await this.query("INSERT INTO db_info (name, key, value) VALUES ($1, $2, $3)", [opts.table, "version", value]);
      }
      value = Number(value);
      const files = (0, import_fs.FS)(opts.migrationsFolder).readdirSync().filter((f) => f.endsWith(".sql")).map((f) => Number(f.slice(1).split(".")[0]));
      Utils.sortBy(files, (f) => f);
      const curVer = files[files.length - 1] || 0;
      if (curVer !== value) {
        if (!value) {
          try {
            await this.query(`SELECT * FROM ${opts.table} LIMIT 1`);
          } catch {
            await this.query((0, import_fs.FS)(opts.baseSchemaFile).readSync());
          }
        }
        for (const n of files) {
          if (n <= value)
            continue;
          await this.query((0, import_fs.FS)(`${opts.migrationsFolder}/v${n}.sql`).readSync());
          await this.query(`UPDATE db_info SET value = \$1 WHERE key = 'version' AND name = \$2`, [`${n}`, opts.table]);
        }
      }
    }
  }
});

// ../pokemon-showdown/dist/lib/index.js
var require_lib4 = __commonJS((exports, module) => {
  var __create2 = Object.create;
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __getProtoOf2 = Object.getPrototypeOf;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var lib_exports = {};
  __export2(lib_exports, {
    Dashycode: () => Dashycode,
    FS: () => import_fs.FS,
    Net: () => import_net.Net,
    PostgresDatabase: () => import_postgres.PostgresDatabase,
    ProcessManager: () => ProcessManager,
    Repl: () => import_repl.Repl,
    SQL: () => import_sql.SQL,
    Streams: () => Streams,
    Utils: () => Utils,
    crashlogger: () => import_crashlogger.crashlogger
  });
  module.exports = __toCommonJS2(lib_exports);
  var Dashycode = __toESM2(require_dashycode());
  var import_repl = require_repl();
  var import_net = require_net();
  var Streams = __toESM2(require_streams());
  var import_fs = require_fs();
  var Utils = __toESM2(require_utils());
  var import_crashlogger = require_crashlogger();
  var ProcessManager = __toESM2(require_process_manager());
  var import_sql = require_sql();
  var import_postgres = require_postgres();
});

// ../pokemon-showdown/dist/sim/dex-data.js
var require_dex_data = __commonJS((exports, module) => {
  function toID(text) {
    if (text && text.id) {
      text = text.id;
    } else if (text && text.userid) {
      text = text.userid;
    } else if (text && text.roomid) {
      text = text.roomid;
    }
    if (typeof text !== "string" && typeof text !== "number")
      return "";
    return ("" + text).toLowerCase().replace(/[^a-z0-9]+/g, "");
  }
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var dex_data_exports = {};
  __export2(dex_data_exports, {
    BasicEffect: () => BasicEffect,
    DexNatures: () => DexNatures,
    DexStats: () => DexStats,
    DexTypes: () => DexTypes,
    Nature: () => Nature,
    TypeInfo: () => TypeInfo,
    toID: () => toID
  });
  module.exports = __toCommonJS2(dex_data_exports);
  var import_lib = require_lib4();

  class BasicEffect {
    constructor(data) {
      this.exists = true;
      Object.assign(this, data);
      this.name = import_lib.Utils.getString(data.name).trim();
      this.id = data.realMove ? toID(data.realMove) : toID(this.name);
      this.fullname = import_lib.Utils.getString(data.fullname) || this.name;
      this.effectType = import_lib.Utils.getString(data.effectType) || "Condition";
      this.exists = !!(this.exists && this.id);
      this.num = data.num || 0;
      this.gen = data.gen || 0;
      this.shortDesc = data.shortDesc || "";
      this.desc = data.desc || "";
      this.isNonstandard = data.isNonstandard || null;
      this.duration = data.duration;
      this.noCopy = !!data.noCopy;
      this.affectsFainted = !!data.affectsFainted;
      this.status = data.status || undefined;
      this.weather = data.weather || undefined;
      this.sourceEffect = data.sourceEffect || "";
    }
    toString() {
      return this.name;
    }
  }

  class Nature extends BasicEffect {
    constructor(data) {
      super(data);
      data = this;
      this.fullname = `nature: ${this.name}`;
      this.effectType = "Nature";
      this.gen = 3;
      this.plus = data.plus || undefined;
      this.minus = data.minus || undefined;
    }
  }

  class DexNatures {
    constructor(dex) {
      this.natureCache = /* @__PURE__ */ new Map;
      this.allCache = null;
      this.dex = dex;
    }
    get(name) {
      if (name && typeof name !== "string")
        return name;
      return this.getByID(toID(name));
    }
    getByID(id) {
      let nature = this.natureCache.get(id);
      if (nature)
        return nature;
      if (this.dex.data.Aliases.hasOwnProperty(id)) {
        nature = this.get(this.dex.data.Aliases[id]);
        if (nature.exists) {
          this.natureCache.set(id, nature);
        }
        return nature;
      }
      if (id && this.dex.data.Natures.hasOwnProperty(id)) {
        const natureData = this.dex.data.Natures[id];
        nature = new Nature(natureData);
        if (nature.gen > this.dex.gen)
          nature.isNonstandard = "Future";
      } else {
        nature = new Nature({ name: id, exists: false });
      }
      if (nature.exists)
        this.natureCache.set(id, this.dex.deepFreeze(nature));
      return nature;
    }
    all() {
      if (this.allCache)
        return this.allCache;
      const natures = [];
      for (const id in this.dex.data.Natures) {
        natures.push(this.getByID(id));
      }
      this.allCache = Object.freeze(natures);
      return this.allCache;
    }
  }

  class TypeInfo {
    constructor(data) {
      this.exists = true;
      Object.assign(this, data);
      this.name = data.name;
      this.id = data.id;
      this.effectType = import_lib.Utils.getString(data.effectType) || "Type";
      this.exists = !!(this.exists && this.id);
      this.gen = data.gen || 0;
      this.isNonstandard = data.isNonstandard || null;
      this.damageTaken = data.damageTaken || {};
      this.HPivs = data.HPivs || {};
      this.HPdvs = data.HPdvs || {};
    }
    toString() {
      return this.name;
    }
  }

  class DexTypes {
    constructor(dex) {
      this.typeCache = /* @__PURE__ */ new Map;
      this.allCache = null;
      this.namesCache = null;
      this.dex = dex;
    }
    get(name) {
      if (name && typeof name !== "string")
        return name;
      return this.getByID(toID(name));
    }
    getByID(id) {
      let type = this.typeCache.get(id);
      if (type)
        return type;
      const typeName = id.charAt(0).toUpperCase() + id.substr(1);
      if (typeName && this.dex.data.TypeChart.hasOwnProperty(id)) {
        type = new TypeInfo({ name: typeName, id, ...this.dex.data.TypeChart[id] });
      } else {
        type = new TypeInfo({ name: typeName, id, exists: false, effectType: "EffectType" });
      }
      if (type.exists)
        this.typeCache.set(id, this.dex.deepFreeze(type));
      return type;
    }
    names() {
      if (this.namesCache)
        return this.namesCache;
      this.namesCache = this.all().filter((type) => !type.isNonstandard).map((type) => type.name);
      return this.namesCache;
    }
    isName(name) {
      const id = name.toLowerCase();
      const typeName = id.charAt(0).toUpperCase() + id.substr(1);
      return name === typeName && this.dex.data.TypeChart.hasOwnProperty(id);
    }
    all() {
      if (this.allCache)
        return this.allCache;
      const types = [];
      for (const id in this.dex.data.TypeChart) {
        types.push(this.getByID(id));
      }
      this.allCache = Object.freeze(types);
      return this.allCache;
    }
  }
  var idsCache = ["hp", "atk", "def", "spa", "spd", "spe"];
  var reverseCache = {
    __proto: null,
    hitpoints: "hp",
    attack: "atk",
    defense: "def",
    specialattack: "spa",
    spatk: "spa",
    spattack: "spa",
    specialatk: "spa",
    special: "spa",
    spc: "spa",
    specialdefense: "spd",
    spdef: "spd",
    spdefense: "spd",
    specialdef: "spd",
    speed: "spe"
  };

  class DexStats {
    constructor(dex) {
      if (dex.gen !== 1) {
        this.shortNames = {
          __proto__: null,
          hp: "HP",
          atk: "Atk",
          def: "Def",
          spa: "SpA",
          spd: "SpD",
          spe: "Spe"
        };
        this.mediumNames = {
          __proto__: null,
          hp: "HP",
          atk: "Attack",
          def: "Defense",
          spa: "Sp. Atk",
          spd: "Sp. Def",
          spe: "Speed"
        };
        this.names = {
          __proto__: null,
          hp: "HP",
          atk: "Attack",
          def: "Defense",
          spa: "Special Attack",
          spd: "Special Defense",
          spe: "Speed"
        };
      } else {
        this.shortNames = {
          __proto__: null,
          hp: "HP",
          atk: "Atk",
          def: "Def",
          spa: "Spc",
          spd: "[SpD]",
          spe: "Spe"
        };
        this.mediumNames = {
          __proto__: null,
          hp: "HP",
          atk: "Attack",
          def: "Defense",
          spa: "Special",
          spd: "[Sp. Def]",
          spe: "Speed"
        };
        this.names = {
          __proto__: null,
          hp: "HP",
          atk: "Attack",
          def: "Defense",
          spa: "Special",
          spd: "[Special Defense]",
          spe: "Speed"
        };
      }
    }
    getID(name) {
      if (name === "Spd")
        return "spe";
      const id = toID(name);
      if (reverseCache[id])
        return reverseCache[id];
      if (idsCache.includes(id))
        return id;
      return null;
    }
    ids() {
      return idsCache;
    }
  }
});

// ../pokemon-showdown/dist/sim/dex-conditions.js
var require_dex_conditions = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var dex_conditions_exports = {};
  __export2(dex_conditions_exports, {
    Condition: () => Condition,
    DexConditions: () => DexConditions
  });
  module.exports = __toCommonJS2(dex_conditions_exports);
  var import_dex_data = require_dex_data();

  class Condition extends import_dex_data.BasicEffect {
    constructor(data) {
      super(data);
      data = this;
      this.effectType = ["Weather", "Status"].includes(data.effectType) ? data.effectType : "Condition";
    }
  }
  var EMPTY_CONDITION = new Condition({ name: "", exists: false });

  class DexConditions {
    constructor(dex) {
      this.conditionCache = /* @__PURE__ */ new Map;
      this.dex = dex;
    }
    get(name) {
      if (!name)
        return EMPTY_CONDITION;
      if (typeof name !== "string")
        return name;
      return this.getByID(name.startsWith("item:") || name.startsWith("ability:") ? name : (0, import_dex_data.toID)(name));
    }
    getByID(id) {
      if (!id)
        return EMPTY_CONDITION;
      let condition = this.conditionCache.get(id);
      if (condition)
        return condition;
      let found;
      if (id.startsWith("item:")) {
        const item = this.dex.items.getByID(id.slice(5));
        condition = { ...item, id: "item:" + item.id };
      } else if (id.startsWith("ability:")) {
        const ability = this.dex.abilities.getByID(id.slice(8));
        condition = { ...ability, id: "ability:" + ability.id };
      } else if (this.dex.data.Rulesets.hasOwnProperty(id)) {
        condition = this.dex.formats.get(id);
        this.conditionCache.set(id, condition);
        return condition;
      } else if (this.dex.data.Conditions.hasOwnProperty(id)) {
        condition = new Condition({ name: id, ...this.dex.data.Conditions[id] });
      } else if (this.dex.data.Moves.hasOwnProperty(id) && (found = this.dex.data.Moves[id]).condition || this.dex.data.Abilities.hasOwnProperty(id) && (found = this.dex.data.Abilities[id]).condition || this.dex.data.Items.hasOwnProperty(id) && (found = this.dex.data.Items[id]).condition) {
        condition = new Condition({ name: found.name || id, ...found.condition });
      } else if (id === "recoil") {
        condition = new Condition({ name: "Recoil", effectType: "Recoil" });
      } else if (id === "drain") {
        condition = new Condition({ name: "Drain", effectType: "Drain" });
      } else {
        condition = new Condition({ name: id, exists: false });
      }
      this.conditionCache.set(id, this.dex.deepFreeze(condition));
      return condition;
    }
  }
});

// ../pokemon-showdown/dist/sim/dex-moves.js
var require_dex_moves = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var dex_moves_exports = {};
  __export2(dex_moves_exports, {
    DataMove: () => DataMove,
    DexMoves: () => DexMoves
  });
  module.exports = __toCommonJS2(dex_moves_exports);
  var import_lib = require_lib4();
  var import_dex_data = require_dex_data();

  class DataMove extends import_dex_data.BasicEffect {
    constructor(data) {
      super(data);
      data = this;
      this.fullname = `move: ${this.name}`;
      this.effectType = "Move";
      this.type = import_lib.Utils.getString(data.type);
      this.target = data.target;
      this.basePower = Number(data.basePower);
      this.accuracy = data.accuracy;
      this.critRatio = Number(data.critRatio) || 1;
      this.baseMoveType = import_lib.Utils.getString(data.baseMoveType) || this.type;
      this.secondary = data.secondary || null;
      this.secondaries = data.secondaries || this.secondary && [this.secondary] || null;
      this.hasSheerForce = !!(data.hasSheerForce && !this.secondaries);
      this.priority = Number(data.priority) || 0;
      this.category = data.category;
      this.overrideOffensiveStat = data.overrideOffensiveStat || undefined;
      this.overrideOffensivePokemon = data.overrideOffensivePokemon || undefined;
      this.overrideDefensiveStat = data.overrideDefensiveStat || undefined;
      this.overrideDefensivePokemon = data.overrideDefensivePokemon || undefined;
      this.ignoreNegativeOffensive = !!data.ignoreNegativeOffensive;
      this.ignorePositiveDefensive = !!data.ignorePositiveDefensive;
      this.ignoreOffensive = !!data.ignoreOffensive;
      this.ignoreDefensive = !!data.ignoreDefensive;
      this.ignoreImmunity = data.ignoreImmunity !== undefined ? data.ignoreImmunity : this.category === "Status";
      this.pp = Number(data.pp);
      this.noPPBoosts = !!data.noPPBoosts;
      this.isZ = data.isZ || false;
      this.isMax = data.isMax || false;
      this.flags = data.flags || {};
      this.selfSwitch = (typeof data.selfSwitch === "string" ? data.selfSwitch : data.selfSwitch) || undefined;
      this.pressureTarget = data.pressureTarget || "";
      this.nonGhostTarget = data.nonGhostTarget || "";
      this.ignoreAbility = data.ignoreAbility || false;
      this.damage = data.damage;
      this.spreadHit = data.spreadHit || false;
      this.forceSTAB = !!data.forceSTAB;
      this.volatileStatus = typeof data.volatileStatus === "string" ? data.volatileStatus : undefined;
      if (this.category !== "Status" && !this.maxMove && this.id !== "struggle") {
        this.maxMove = { basePower: 1 };
        if (this.isMax || this.isZ) {
        } else if (!this.basePower) {
          this.maxMove.basePower = 100;
        } else if (["Fighting", "Poison"].includes(this.type)) {
          if (this.basePower >= 150) {
            this.maxMove.basePower = 100;
          } else if (this.basePower >= 110) {
            this.maxMove.basePower = 95;
          } else if (this.basePower >= 75) {
            this.maxMove.basePower = 90;
          } else if (this.basePower >= 65) {
            this.maxMove.basePower = 85;
          } else if (this.basePower >= 55) {
            this.maxMove.basePower = 80;
          } else if (this.basePower >= 45) {
            this.maxMove.basePower = 75;
          } else {
            this.maxMove.basePower = 70;
          }
        } else {
          if (this.basePower >= 150) {
            this.maxMove.basePower = 150;
          } else if (this.basePower >= 110) {
            this.maxMove.basePower = 140;
          } else if (this.basePower >= 75) {
            this.maxMove.basePower = 130;
          } else if (this.basePower >= 65) {
            this.maxMove.basePower = 120;
          } else if (this.basePower >= 55) {
            this.maxMove.basePower = 110;
          } else if (this.basePower >= 45) {
            this.maxMove.basePower = 100;
          } else {
            this.maxMove.basePower = 90;
          }
        }
      }
      if (this.category !== "Status" && !this.zMove && !this.isZ && !this.isMax && this.id !== "struggle") {
        let basePower = this.basePower;
        this.zMove = {};
        if (Array.isArray(this.multihit))
          basePower *= 3;
        if (!basePower) {
          this.zMove.basePower = 100;
        } else if (basePower >= 140) {
          this.zMove.basePower = 200;
        } else if (basePower >= 130) {
          this.zMove.basePower = 195;
        } else if (basePower >= 120) {
          this.zMove.basePower = 190;
        } else if (basePower >= 110) {
          this.zMove.basePower = 185;
        } else if (basePower >= 100) {
          this.zMove.basePower = 180;
        } else if (basePower >= 90) {
          this.zMove.basePower = 175;
        } else if (basePower >= 80) {
          this.zMove.basePower = 160;
        } else if (basePower >= 70) {
          this.zMove.basePower = 140;
        } else if (basePower >= 60) {
          this.zMove.basePower = 120;
        } else {
          this.zMove.basePower = 100;
        }
      }
      if (!this.gen) {
        if (this.num >= 827 && !this.isMax) {
          this.gen = 9;
        } else if (this.num >= 743) {
          this.gen = 8;
        } else if (this.num >= 622) {
          this.gen = 7;
        } else if (this.num >= 560) {
          this.gen = 6;
        } else if (this.num >= 468) {
          this.gen = 5;
        } else if (this.num >= 355) {
          this.gen = 4;
        } else if (this.num >= 252) {
          this.gen = 3;
        } else if (this.num >= 166) {
          this.gen = 2;
        } else if (this.num >= 1) {
          this.gen = 1;
        }
      }
    }
  }

  class DexMoves {
    constructor(dex) {
      this.moveCache = /* @__PURE__ */ new Map;
      this.allCache = null;
      this.dex = dex;
    }
    get(name) {
      if (name && typeof name !== "string")
        return name;
      name = (name || "").trim();
      const id = (0, import_dex_data.toID)(name);
      return this.getByID(id);
    }
    getByID(id) {
      let move = this.moveCache.get(id);
      if (move)
        return move;
      if (this.dex.data.Aliases.hasOwnProperty(id)) {
        move = this.get(this.dex.data.Aliases[id]);
        if (move.exists) {
          this.moveCache.set(id, move);
        }
        return move;
      }
      if (id.startsWith("hiddenpower")) {
        id = /([a-z]*)([0-9]*)/.exec(id)[1];
      }
      if (id && this.dex.data.Moves.hasOwnProperty(id)) {
        const moveData = this.dex.data.Moves[id];
        const moveTextData = this.dex.getDescs("Moves", id, moveData);
        move = new DataMove({
          name: id,
          ...moveData,
          ...moveTextData
        });
        if (move.gen > this.dex.gen) {
          move.isNonstandard = "Future";
        }
      } else {
        move = new DataMove({
          name: id,
          exists: false
        });
      }
      if (move.exists)
        this.moveCache.set(id, this.dex.deepFreeze(move));
      return move;
    }
    all() {
      if (this.allCache)
        return this.allCache;
      const moves = [];
      for (const id in this.dex.data.Moves) {
        moves.push(this.getByID(id));
      }
      this.allCache = Object.freeze(moves);
      return this.allCache;
    }
  }
});

// ../pokemon-showdown/dist/sim/dex-items.js
var require_dex_items = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var dex_items_exports = {};
  __export2(dex_items_exports, {
    DexItems: () => DexItems,
    Item: () => Item
  });
  module.exports = __toCommonJS2(dex_items_exports);
  var import_dex_data = require_dex_data();

  class Item extends import_dex_data.BasicEffect {
    constructor(data) {
      super(data);
      data = this;
      this.fullname = `item: ${this.name}`;
      this.effectType = "Item";
      this.fling = data.fling || undefined;
      this.onDrive = data.onDrive || undefined;
      this.onMemory = data.onMemory || undefined;
      this.megaStone = data.megaStone || undefined;
      this.megaEvolves = data.megaEvolves || undefined;
      this.zMove = data.zMove || undefined;
      this.zMoveType = data.zMoveType || undefined;
      this.zMoveFrom = data.zMoveFrom || undefined;
      this.itemUser = data.itemUser || undefined;
      this.isBerry = !!data.isBerry;
      this.ignoreKlutz = !!data.ignoreKlutz;
      this.onPlate = data.onPlate || undefined;
      this.isGem = !!data.isGem;
      this.isPokeball = !!data.isPokeball;
      if (!this.gen) {
        if (this.num >= 1124) {
          this.gen = 9;
        } else if (this.num >= 927) {
          this.gen = 8;
        } else if (this.num >= 689) {
          this.gen = 7;
        } else if (this.num >= 577) {
          this.gen = 6;
        } else if (this.num >= 537) {
          this.gen = 5;
        } else if (this.num >= 377) {
          this.gen = 4;
        } else {
          this.gen = 3;
        }
      }
      if (this.isBerry)
        this.fling = { basePower: 10 };
      if (this.id.endsWith("plate"))
        this.fling = { basePower: 90 };
      if (this.onDrive)
        this.fling = { basePower: 70 };
      if (this.megaStone)
        this.fling = { basePower: 80 };
      if (this.onMemory)
        this.fling = { basePower: 50 };
    }
  }

  class DexItems {
    constructor(dex) {
      this.itemCache = /* @__PURE__ */ new Map;
      this.allCache = null;
      this.dex = dex;
    }
    get(name) {
      if (name && typeof name !== "string")
        return name;
      name = (name || "").trim();
      const id = (0, import_dex_data.toID)(name);
      return this.getByID(id);
    }
    getByID(id) {
      let item = this.itemCache.get(id);
      if (item)
        return item;
      if (this.dex.data.Aliases.hasOwnProperty(id)) {
        item = this.get(this.dex.data.Aliases[id]);
        if (item.exists) {
          this.itemCache.set(id, item);
        }
        return item;
      }
      if (id && !this.dex.data.Items[id] && this.dex.data.Items[id + "berry"]) {
        item = this.getByID(id + "berry");
        this.itemCache.set(id, item);
        return item;
      }
      if (id && this.dex.data.Items.hasOwnProperty(id)) {
        const itemData = this.dex.data.Items[id];
        const itemTextData = this.dex.getDescs("Items", id, itemData);
        item = new Item({
          name: id,
          ...itemData,
          ...itemTextData
        });
        if (item.gen > this.dex.gen) {
          item.isNonstandard = "Future";
        }
      } else {
        item = new Item({ name: id, exists: false });
      }
      if (item.exists)
        this.itemCache.set(id, this.dex.deepFreeze(item));
      return item;
    }
    all() {
      if (this.allCache)
        return this.allCache;
      const items = [];
      for (const id in this.dex.data.Items) {
        items.push(this.getByID(id));
      }
      this.allCache = Object.freeze(items);
      return this.allCache;
    }
  }
});

// ../pokemon-showdown/dist/sim/dex-abilities.js
var require_dex_abilities = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var dex_abilities_exports = {};
  __export2(dex_abilities_exports, {
    Ability: () => Ability,
    DexAbilities: () => DexAbilities
  });
  module.exports = __toCommonJS2(dex_abilities_exports);
  var import_dex_data = require_dex_data();

  class Ability extends import_dex_data.BasicEffect {
    constructor(data) {
      super(data);
      this.fullname = `ability: ${this.name}`;
      this.effectType = "Ability";
      this.suppressWeather = !!data.suppressWeather;
      this.flags = data.flags || {};
      this.rating = data.rating || 0;
      if (!this.gen) {
        if (this.num >= 268) {
          this.gen = 9;
        } else if (this.num >= 234) {
          this.gen = 8;
        } else if (this.num >= 192) {
          this.gen = 7;
        } else if (this.num >= 165) {
          this.gen = 6;
        } else if (this.num >= 124) {
          this.gen = 5;
        } else if (this.num >= 77) {
          this.gen = 4;
        } else if (this.num >= 1) {
          this.gen = 3;
        }
      }
    }
  }

  class DexAbilities {
    constructor(dex) {
      this.abilityCache = /* @__PURE__ */ new Map;
      this.allCache = null;
      this.dex = dex;
    }
    get(name = "") {
      if (name && typeof name !== "string")
        return name;
      const id = (0, import_dex_data.toID)(name);
      return this.getByID(id);
    }
    getByID(id) {
      let ability = this.abilityCache.get(id);
      if (ability)
        return ability;
      if (this.dex.data.Aliases.hasOwnProperty(id)) {
        ability = this.get(this.dex.data.Aliases[id]);
      } else if (id && this.dex.data.Abilities.hasOwnProperty(id)) {
        const abilityData = this.dex.data.Abilities[id];
        const abilityTextData = this.dex.getDescs("Abilities", id, abilityData);
        ability = new Ability({
          name: id,
          ...abilityData,
          ...abilityTextData
        });
        if (ability.gen > this.dex.gen) {
          ability.isNonstandard = "Future";
        }
        if (this.dex.currentMod === "gen7letsgo" && ability.id !== "noability") {
          ability.isNonstandard = "Past";
        }
        if ((this.dex.currentMod === "gen7letsgo" || this.dex.gen <= 2) && ability.id === "noability") {
          ability.isNonstandard = null;
        }
      } else {
        ability = new Ability({
          id,
          name: id,
          exists: false
        });
      }
      if (ability.exists)
        this.abilityCache.set(id, this.dex.deepFreeze(ability));
      return ability;
    }
    all() {
      if (this.allCache)
        return this.allCache;
      const abilities = [];
      for (const id in this.dex.data.Abilities) {
        abilities.push(this.getByID(id));
      }
      this.allCache = abilities;
      return this.allCache;
    }
  }
});

// ../pokemon-showdown/dist/sim/dex-species.js
var require_dex_species = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var dex_species_exports = {};
  __export2(dex_species_exports, {
    DexSpecies: () => DexSpecies,
    Learnset: () => Learnset,
    Species: () => Species
  });
  module.exports = __toCommonJS2(dex_species_exports);
  var import_dex_data = require_dex_data();

  class Species extends import_dex_data.BasicEffect {
    constructor(data) {
      super(data);
      data = this;
      this.fullname = `pokemon: ${data.name}`;
      this.effectType = "Pokemon";
      this.baseSpecies = data.baseSpecies || this.name;
      this.forme = data.forme || "";
      this.baseForme = data.baseForme || "";
      this.cosmeticFormes = data.cosmeticFormes || undefined;
      this.otherFormes = data.otherFormes || undefined;
      this.formeOrder = data.formeOrder || undefined;
      this.spriteid = data.spriteid || (0, import_dex_data.toID)(this.baseSpecies) + (this.baseSpecies !== this.name ? `-${(0, import_dex_data.toID)(this.forme)}` : "");
      this.abilities = data.abilities || { 0: "" };
      this.types = data.types || ["???"];
      this.addedType = data.addedType || undefined;
      this.prevo = data.prevo || "";
      this.tier = data.tier || "";
      this.doublesTier = data.doublesTier || "";
      this.natDexTier = data.natDexTier || "";
      this.evos = data.evos || [];
      this.evoType = data.evoType || undefined;
      this.evoMove = data.evoMove || undefined;
      this.evoLevel = data.evoLevel || undefined;
      this.nfe = data.nfe || false;
      this.eggGroups = data.eggGroups || [];
      this.canHatch = data.canHatch || false;
      this.gender = data.gender || "";
      this.genderRatio = data.genderRatio || (this.gender === "M" ? { M: 1, F: 0 } : this.gender === "F" ? { M: 0, F: 1 } : this.gender === "N" ? { M: 0, F: 0 } : { M: 0.5, F: 0.5 });
      this.requiredItem = data.requiredItem || undefined;
      this.requiredItems = this.requiredItems || (this.requiredItem ? [this.requiredItem] : undefined);
      this.baseStats = data.baseStats || { hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0 };
      this.bst = this.baseStats.hp + this.baseStats.atk + this.baseStats.def + this.baseStats.spa + this.baseStats.spd + this.baseStats.spe;
      this.weightkg = data.weightkg || 0;
      this.weighthg = this.weightkg * 10;
      this.heightm = data.heightm || 0;
      this.color = data.color || "";
      this.tags = data.tags || [];
      this.unreleasedHidden = data.unreleasedHidden || false;
      this.maleOnlyHidden = !!data.maleOnlyHidden;
      this.maxHP = data.maxHP || undefined;
      this.isMega = !!(this.forme && ["Mega", "Mega-X", "Mega-Y"].includes(this.forme)) || undefined;
      this.canGigantamax = data.canGigantamax || undefined;
      this.gmaxUnreleased = !!data.gmaxUnreleased;
      this.cannotDynamax = !!data.cannotDynamax;
      this.battleOnly = data.battleOnly || (this.isMega ? this.baseSpecies : undefined);
      this.changesFrom = data.changesFrom || (this.battleOnly !== this.baseSpecies ? this.battleOnly : this.baseSpecies);
      this.pokemonGoData = data.pokemonGoData || undefined;
      if (Array.isArray(data.changesFrom))
        this.changesFrom = data.changesFrom[0];
      if (!this.gen && this.num >= 1) {
        if (this.num >= 906 || this.forme.includes("Paldea")) {
          this.gen = 9;
        } else if (this.num >= 810 || ["Gmax", "Galar", "Galar-Zen", "Hisui"].includes(this.forme)) {
          this.gen = 8;
        } else if (this.num >= 722 || this.forme.startsWith("Alola") || this.forme === "Starter") {
          this.gen = 7;
        } else if (this.forme === "Primal") {
          this.gen = 6;
          this.isPrimal = true;
          this.battleOnly = this.baseSpecies;
        } else if (this.num >= 650 || this.isMega) {
          this.gen = 6;
        } else if (this.num >= 494) {
          this.gen = 5;
        } else if (this.num >= 387) {
          this.gen = 4;
        } else if (this.num >= 252) {
          this.gen = 3;
        } else if (this.num >= 152) {
          this.gen = 2;
        } else {
          this.gen = 1;
        }
      }
    }
  }

  class Learnset {
    constructor(data, species) {
      this.exists = true;
      this.effectType = "Learnset";
      this.learnset = data.learnset || undefined;
      this.eventOnly = !!data.eventOnly;
      this.eventData = data.eventData || undefined;
      this.encounters = data.encounters || undefined;
      this.species = species;
    }
  }

  class DexSpecies {
    constructor(dex) {
      this.speciesCache = /* @__PURE__ */ new Map;
      this.learnsetCache = /* @__PURE__ */ new Map;
      this.allCache = null;
      this.dex = dex;
    }
    get(name) {
      if (name && typeof name !== "string")
        return name;
      name = (name || "").trim();
      let id = (0, import_dex_data.toID)(name);
      if (id === "nidoran" && name.endsWith("\u2640")) {
        id = "nidoranf";
      } else if (id === "nidoran" && name.endsWith("\u2642")) {
        id = "nidoranm";
      }
      return this.getByID(id);
    }
    getByID(id) {
      let species = this.speciesCache.get(id);
      if (species)
        return species;
      if (this.dex.data.Aliases.hasOwnProperty(id)) {
        if (this.dex.data.FormatsData.hasOwnProperty(id)) {
          const baseId = (0, import_dex_data.toID)(this.dex.data.Aliases[id]);
          species = new Species({
            ...this.dex.data.Pokedex[baseId],
            ...this.dex.data.FormatsData[id],
            name: id
          });
          species.abilities = { 0: species.abilities["S"] };
        } else {
          species = this.get(this.dex.data.Aliases[id]);
          if (species.cosmeticFormes) {
            for (const forme of species.cosmeticFormes) {
              if ((0, import_dex_data.toID)(forme) === id) {
                species = new Species({
                  ...species,
                  name: forme,
                  forme: forme.slice(species.name.length + 1),
                  baseForme: "",
                  baseSpecies: species.name,
                  otherFormes: null,
                  cosmeticFormes: null
                });
                break;
              }
            }
          }
        }
        this.speciesCache.set(id, this.dex.deepFreeze(species));
        return species;
      }
      if (!this.dex.data.Pokedex.hasOwnProperty(id)) {
        let aliasTo = "";
        const formeNames = {
          alola: ["a", "alola", "alolan"],
          galar: ["g", "galar", "galarian"],
          hisui: ["h", "hisui", "hisuian"],
          paldea: ["p", "paldea", "paldean"],
          mega: ["m", "mega"],
          primal: ["p", "primal"]
        };
        for (const forme in formeNames) {
          let pokeName = "";
          for (const i of formeNames[forme]) {
            if (id.startsWith(i)) {
              pokeName = id.slice(i.length);
            } else if (id.endsWith(i)) {
              pokeName = id.slice(0, -i.length);
            }
          }
          if (this.dex.data.Aliases.hasOwnProperty(pokeName))
            pokeName = (0, import_dex_data.toID)(this.dex.data.Aliases[pokeName]);
          if (this.dex.data.Pokedex[pokeName + forme]) {
            aliasTo = pokeName + forme;
            break;
          }
        }
        if (aliasTo) {
          species = this.get(aliasTo);
          if (species.exists) {
            this.speciesCache.set(id, species);
            return species;
          }
        }
      }
      if (id && this.dex.data.Pokedex.hasOwnProperty(id)) {
        const pokedexData = this.dex.data.Pokedex[id];
        const baseSpeciesTags = pokedexData.baseSpecies && this.dex.data.Pokedex[(0, import_dex_data.toID)(pokedexData.baseSpecies)].tags;
        species = new Species({
          tags: baseSpeciesTags,
          ...pokedexData,
          ...this.dex.data.FormatsData[id]
        });
        const baseSpeciesStatuses = this.dex.data.Conditions[(0, import_dex_data.toID)(species.baseSpecies)];
        if (baseSpeciesStatuses !== undefined) {
          for (const key in baseSpeciesStatuses) {
            if (!(key in species)) {
              species[key] = baseSpeciesStatuses[key];
            }
          }
        }
        if (!species.tier && !species.doublesTier && !species.natDexTier && species.baseSpecies !== species.name) {
          if (species.baseSpecies === "Mimikyu") {
            species.tier = this.dex.data.FormatsData[(0, import_dex_data.toID)(species.baseSpecies)].tier || "Illegal";
            species.doublesTier = this.dex.data.FormatsData[(0, import_dex_data.toID)(species.baseSpecies)].doublesTier || "Illegal";
            species.natDexTier = this.dex.data.FormatsData[(0, import_dex_data.toID)(species.baseSpecies)].natDexTier || "Illegal";
          } else if (species.id.endsWith("totem")) {
            species.tier = this.dex.data.FormatsData[species.id.slice(0, -5)].tier || "Illegal";
            species.doublesTier = this.dex.data.FormatsData[species.id.slice(0, -5)].doublesTier || "Illegal";
            species.natDexTier = this.dex.data.FormatsData[species.id.slice(0, -5)].natDexTier || "Illegal";
          } else if (species.battleOnly) {
            species.tier = this.dex.data.FormatsData[(0, import_dex_data.toID)(species.battleOnly)].tier || "Illegal";
            species.doublesTier = this.dex.data.FormatsData[(0, import_dex_data.toID)(species.battleOnly)].doublesTier || "Illegal";
            species.natDexTier = this.dex.data.FormatsData[(0, import_dex_data.toID)(species.battleOnly)].natDexTier || "Illegal";
          } else {
            const baseFormatsData = this.dex.data.FormatsData[(0, import_dex_data.toID)(species.baseSpecies)];
            if (!baseFormatsData) {
              throw new Error(`${species.baseSpecies} has no formats-data entry`);
            }
            species.tier = baseFormatsData.tier || "Illegal";
            species.doublesTier = baseFormatsData.doublesTier || "Illegal";
            species.natDexTier = baseFormatsData.natDexTier || "Illegal";
          }
        }
        if (!species.tier)
          species.tier = "Illegal";
        if (!species.doublesTier)
          species.doublesTier = species.tier;
        if (!species.natDexTier)
          species.natDexTier = species.tier;
        if (species.gen > this.dex.gen) {
          species.tier = "Illegal";
          species.doublesTier = "Illegal";
          species.natDexTier = "Illegal";
          species.isNonstandard = "Future";
        }
        if (this.dex.currentMod === "gen7letsgo" && !species.isNonstandard) {
          const isLetsGo = (species.num <= 151 || ["Meltan", "Melmetal"].includes(species.name)) && (!species.forme || ["Alola", "Mega", "Mega-X", "Mega-Y", "Starter"].includes(species.forme) && species.name !== "Pikachu-Alola");
          if (!isLetsGo)
            species.isNonstandard = "Past";
        }
        if (this.dex.currentMod === "gen8bdsp" && (!species.isNonstandard || ["Gigantamax", "CAP"].includes(species.isNonstandard))) {
          if (species.gen > 4 || species.num < 1 && species.isNonstandard !== "CAP" || species.id === "pichuspikyeared") {
            species.isNonstandard = "Future";
            species.tier = species.doublesTier = species.natDexTier = "Illegal";
          }
        }
        species.nfe = species.evos.some((evo) => {
          const evoSpecies = this.get(evo);
          return !evoSpecies.isNonstandard || evoSpecies.isNonstandard === species?.isNonstandard || evoSpecies.isNonstandard === "Unobtainable";
        });
        species.canHatch = species.canHatch || !["Ditto", "Undiscovered"].includes(species.eggGroups[0]) && !species.prevo && species.name !== "Manaphy";
        if (this.dex.gen === 1)
          species.bst -= species.baseStats.spd;
        if (this.dex.gen < 5) {
          species.abilities = this.dex.deepClone(species.abilities);
          delete species.abilities["H"];
        }
        if (this.dex.gen === 3 && this.dex.abilities.get(species.abilities["1"]).gen === 4)
          delete species.abilities["1"];
      } else {
        species = new Species({
          id,
          name: id,
          exists: false,
          tier: "Illegal",
          doublesTier: "Illegal",
          natDexTier: "Illegal",
          isNonstandard: "Custom"
        });
      }
      if (species.exists)
        this.speciesCache.set(id, this.dex.deepFreeze(species));
      return species;
    }
    getMovePool(id, isNatDex = false) {
      let eggMovesOnly = false;
      let maxGen = this.dex.gen;
      const movePool = /* @__PURE__ */ new Set;
      for (const { species, learnset } of this.getFullLearnset(id)) {
        for (const moveid in learnset) {
          if (eggMovesOnly) {
            if (learnset[moveid].some((source) => source.startsWith("9E"))) {
              movePool.add(moveid);
            }
          } else if (maxGen >= 9) {
            if (isNatDex || learnset[moveid].some((source) => source.startsWith("9"))) {
              movePool.add(moveid);
            }
          } else {
            if (learnset[moveid].some((source) => parseInt(source.charAt(0)) <= maxGen)) {
              movePool.add(moveid);
            }
          }
          if (moveid === "sketch" && movePool.has("sketch")) {
            if (species.isNonstandard === "CAP") {
              continue;
            }
            const sketchables = this.dex.moves.all().filter((m) => !m.flags["nosketch"] && !m.isNonstandard);
            for (const move of sketchables) {
              movePool.add(move.id);
            }
            break;
          }
        }
        if (species.evoRegion) {
          if (this.dex.gen >= 9)
            eggMovesOnly = true;
          if (this.dex.gen === 8 && species.evoRegion === "Alola")
            maxGen = 7;
        }
      }
      return movePool;
    }
    getFullLearnset(id) {
      const originalSpecies = this.get(id);
      let species = originalSpecies;
      const out = [];
      const alreadyChecked = {};
      while (species?.name && !alreadyChecked[species.id]) {
        alreadyChecked[species.id] = true;
        const learnset = this.getLearnsetData(species.id);
        if (learnset.learnset) {
          out.push(learnset);
          species = this.learnsetParent(species, true);
          continue;
        }
        if ((species.changesFrom || species.baseSpecies) !== species.name) {
          species = this.get(species.changesFrom || species.baseSpecies);
          continue;
        }
        if (species.isNonstandard) {
          return out;
        }
        if (species.prevo && this.getLearnsetData((0, import_dex_data.toID)(species.prevo)).learnset) {
          species = this.get((0, import_dex_data.toID)(species.prevo));
          continue;
        }
        throw new Error(`Species with no learnset data: ${species.id}`);
      }
      return out;
    }
    learnsetParent(species, checkingMoves = false) {
      if (["Gastrodon", "Pumpkaboo", "Sinistea", "Tatsugiri"].includes(species.baseSpecies) && species.forme) {
        return this.get(species.baseSpecies);
      } else if (species.name === "Lycanroc-Dusk") {
        return this.get("Rockruff-Dusk");
      } else if (species.prevo) {
        species = this.get(species.prevo);
        if (species.gen > Math.max(2, this.dex.gen))
          return null;
        return species;
      } else if (species.changesFrom && species.baseSpecies !== "Kyurem") {
        return this.get(species.changesFrom);
      } else if (checkingMoves && !species.prevo && species.baseSpecies && this.get(species.baseSpecies).prevo) {
        let baseEvo = this.get(species.baseSpecies);
        while (baseEvo.prevo) {
          baseEvo = this.get(baseEvo.prevo);
        }
        return baseEvo;
      }
      return null;
    }
    getLearnsetData(id) {
      let learnsetData = this.learnsetCache.get(id);
      if (learnsetData)
        return learnsetData;
      if (!this.dex.data.Learnsets.hasOwnProperty(id)) {
        return new Learnset({ exists: false }, this.get(id));
      }
      learnsetData = new Learnset(this.dex.data.Learnsets[id], this.get(id));
      this.learnsetCache.set(id, this.dex.deepFreeze(learnsetData));
      return learnsetData;
    }
    getPokemonGoData(id) {
      return this.dex.data.PokemonGoData[id];
    }
    all() {
      if (this.allCache)
        return this.allCache;
      const species = [];
      for (const id in this.dex.data.Pokedex) {
        species.push(this.getByID(id));
      }
      this.allCache = Object.freeze(species);
      return this.allCache;
    }
  }
});

// ../pokemon-showdown/dist/data/tags.js
var require_tags = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var tags_exports = {};
  __export2(tags_exports, {
    Tags: () => Tags
  });
  module.exports = __toCommonJS2(tags_exports);
  var Tags = {
    physical: {
      name: "Physical",
      desc: "Move deals damage with the Attack and Defense stats.",
      moveFilter: (move) => move.category === "Physical"
    },
    special: {
      name: "Special",
      desc: "Move deals damage with the Special Attack and Special Defense stats.",
      moveFilter: (move) => move.category === "Special"
    },
    status: {
      name: "Status",
      desc: "Move does not deal damage.",
      moveFilter: (move) => move.category === "Status"
    },
    mega: {
      name: "Mega",
      speciesFilter: (species) => !!species.isMega
    },
    mythical: {
      name: "Mythical",
      speciesFilter: (species) => species.tags.includes("Mythical")
    },
    sublegendary: {
      name: "Sub-Legendary",
      speciesFilter: (species) => species.tags.includes("Sub-Legendary")
    },
    restrictedlegendary: {
      name: "Restricted Legendary",
      speciesFilter: (species) => species.tags.includes("Restricted Legendary")
    },
    ultrabeast: {
      name: "Ultra Beast",
      speciesFilter: (species) => species.tags.includes("Ultra Beast")
    },
    paradox: {
      name: "Paradox",
      speciesFilter: (species) => species.tags.includes("Paradox")
    },
    zmove: {
      name: "Z-Move",
      moveFilter: (move) => !!move.isZ
    },
    maxmove: {
      name: "Max Move",
      moveFilter: (move) => !!move.isMax
    },
    contact: {
      name: "Contact",
      desc: "Affected by a variety of moves, abilities, and items. Moves affected by contact moves include: Spiky Shield, King's Shield. Abilities affected by contact moves include: Iron Barbs, Rough Skin, Gooey, Flame Body, Static, Tough Claws. Items affected by contact moves include: Rocky Helmet, Sticky Barb.",
      moveFilter: (move) => ("contact" in move.flags)
    },
    sound: {
      name: "Sound",
      desc: "Doesn't affect Soundproof Pok\xE9mon. (All sound moves also bypass Substitute.)",
      moveFilter: (move) => ("sound" in move.flags)
    },
    powder: {
      name: "Powder",
      desc: "Doesn't affect Grass-type Pok\xE9mon, Overcoat Pok\xE9mon, or Safety Goggles holders.",
      moveFilter: (move) => ("powder" in move.flags)
    },
    fist: {
      name: "Fist",
      desc: "Boosted 1.2x by Iron Fist.",
      moveFilter: (move) => ("punch" in move.flags)
    },
    pulse: {
      name: "Pulse",
      desc: "Boosted 1.5x by Mega Launcher.",
      moveFilter: (move) => ("pulse" in move.flags)
    },
    bite: {
      name: "Bite",
      desc: "Boosted 1.5x by Strong Jaw.",
      moveFilter: (move) => ("bite" in move.flags)
    },
    ballistic: {
      name: "Ballistic",
      desc: "Doesn't affect Bulletproof Pok\xE9mon.",
      moveFilter: (move) => ("bullet" in move.flags)
    },
    bypassprotect: {
      name: "Bypass Protect",
      desc: "Bypasses Protect, Detect, King's Shield, and Spiky Shield.",
      moveFilter: (move) => move.target !== "self" && !("protect" in move.flags)
    },
    nonreflectable: {
      name: "Nonreflectable",
      desc: "Can't be bounced by Magic Coat or Magic Bounce.",
      moveFilter: (move) => move.target !== "self" && move.category === "Status" && !("reflectable" in move.flags)
    },
    nonmirror: {
      name: "Nonmirror",
      desc: "Can't be copied by Mirror Move.",
      moveFilter: (move) => move.target !== "self" && !("mirror" in move.flags)
    },
    nonsnatchable: {
      name: "Nonsnatchable",
      desc: "Can't be copied by Snatch.",
      moveFilter: (move) => ["allyTeam", "self", "adjacentAllyOrSelf"].includes(move.target) && !("snatch" in move.flags)
    },
    bypasssubstitute: {
      name: "Bypass Substitute",
      desc: "Bypasses but does not break a Substitute.",
      moveFilter: (move) => ("bypasssub" in move.flags)
    },
    gmaxmove: {
      name: "G-Max Move",
      moveFilter: (move) => typeof move.isMax === "string"
    },
    uber: {
      name: "Uber",
      speciesFilter: (species) => species.tier === "Uber" || species.tier === "(Uber)" || species.tier === "AG"
    },
    ou: {
      name: "OU",
      speciesFilter: (species) => species.tier === "OU" || species.tier === "(OU)"
    },
    uubl: {
      name: "UUBL",
      speciesFilter: (species) => species.tier === "UUBL"
    },
    uu: {
      name: "UU",
      speciesFilter: (species) => species.tier === "UU"
    },
    rubl: {
      name: "RUBL",
      speciesFilter: (species) => species.tier === "RUBL"
    },
    ru: {
      name: "RU",
      speciesFilter: (species) => species.tier === "RU"
    },
    nubl: {
      name: "NUBL",
      speciesFilter: (species) => species.tier === "NUBL"
    },
    nu: {
      name: "NU",
      speciesFilter: (species) => species.tier === "NU"
    },
    publ: {
      name: "PUBL",
      speciesFilter: (species) => species.tier === "PUBL"
    },
    pu: {
      name: "PU",
      speciesFilter: (species) => species.tier === "PU" || species.tier === "(NU)"
    },
    zubl: {
      name: "ZUBL",
      speciesFilter: (species) => species.tier === "ZUBL"
    },
    zu: {
      name: "ZU",
      speciesFilter: (species) => species.tier === "(PU)" || species.tier === "ZU"
    },
    nfe: {
      name: "NFE",
      speciesFilter: (species) => species.tier === "NFE"
    },
    lc: {
      name: "LC",
      speciesFilter: (species) => species.doublesTier === "LC"
    },
    captier: {
      name: "CAP Tier",
      speciesFilter: (species) => species.isNonstandard === "CAP"
    },
    caplc: {
      name: "CAP LC",
      speciesFilter: (species) => species.tier === "CAP LC"
    },
    capnfe: {
      name: "CAP NFE",
      speciesFilter: (species) => species.tier === "CAP NFE"
    },
    ag: {
      name: "AG",
      speciesFilter: (species) => species.tier === "AG"
    },
    duber: {
      name: "DUber",
      speciesFilter: (species) => species.doublesTier === "DUber" || species.doublesTier === "(DUber)"
    },
    dou: {
      name: "DOU",
      speciesFilter: (species) => species.doublesTier === "DOU" || species.doublesTier === "(DOU)"
    },
    dbl: {
      name: "DBL",
      speciesFilter: (species) => species.doublesTier === "DBL"
    },
    duu: {
      name: "DUU",
      speciesFilter: (species) => species.doublesTier === "DUU"
    },
    dnu: {
      name: "DNU",
      speciesFilter: (species) => species.doublesTier === "(DUU)"
    },
    ndag: {
      name: "ND AG",
      speciesFilter: (species) => species.natDexTier === "AG"
    },
    nduber: {
      name: "ND Uber",
      speciesFilter: (species) => species.natDexTier === "Uber" || species.natDexTier === "(Uber)"
    },
    ndou: {
      name: "ND OU",
      speciesFilter: (species) => species.natDexTier === "OU" || species.natDexTier === "(OU)"
    },
    nduubl: {
      name: "ND UUBL",
      speciesFilter: (species) => species.natDexTier === "UUBL"
    },
    nduu: {
      name: "ND UU",
      speciesFilter: (species) => species.natDexTier === "UU"
    },
    ndrubl: {
      name: "ND RUBL",
      speciesFilter: (species) => species.natDexTier === "RUBL"
    },
    ndru: {
      name: "ND RU",
      speciesFilter: (species) => species.natDexTier === "RU"
    },
    past: {
      name: "Past",
      genericFilter: (thing) => thing.isNonstandard === "Past"
    },
    future: {
      name: "Future",
      genericFilter: (thing) => thing.isNonstandard === "Future"
    },
    lgpe: {
      name: "LGPE",
      genericFilter: (thing) => thing.isNonstandard === "LGPE"
    },
    unobtainable: {
      name: "Unobtainable",
      genericFilter: (thing) => thing.isNonstandard === "Unobtainable"
    },
    cap: {
      name: "CAP",
      speciesFilter: (thing) => thing.isNonstandard === "CAP"
    },
    custom: {
      name: "Custom",
      genericFilter: (thing) => thing.isNonstandard === "Custom"
    },
    nonexistent: {
      name: "Nonexistent",
      genericFilter: (thing) => !!thing.isNonstandard && thing.isNonstandard !== "Unobtainable"
    },
    introducedgen: {
      name: "Introduced Gen",
      genericNumCol: (thing) => thing.gen
    },
    height: {
      name: "Height",
      speciesNumCol: (species) => species.heightm
    },
    weight: {
      name: "Weight",
      speciesNumCol: (species) => species.weightkg
    },
    hp: {
      name: "HP",
      desc: "Hit Points",
      speciesNumCol: (species) => species.baseStats.hp
    },
    atk: {
      name: "Atk",
      desc: "Attack",
      speciesNumCol: (species) => species.baseStats.atk
    },
    def: {
      name: "Def",
      desc: "Defense",
      speciesNumCol: (species) => species.baseStats.def
    },
    spa: {
      name: "SpA",
      desc: "Special Attack",
      speciesNumCol: (species) => species.baseStats.spa
    },
    spd: {
      name: "SpD",
      desc: "Special Defense",
      speciesNumCol: (species) => species.baseStats.spd
    },
    spe: {
      name: "Spe",
      desc: "Speed",
      speciesNumCol: (species) => species.baseStats.spe
    },
    bst: {
      name: "BST",
      desc: "Base Stat Total",
      speciesNumCol: (species) => species.bst
    },
    basepower: {
      name: "Base Power",
      moveNumCol: (move) => move.basePower
    },
    priority: {
      name: "Priority",
      moveNumCol: (move) => move.priority
    },
    accuracy: {
      name: "Accuracy",
      moveNumCol: (move) => move.accuracy === true ? 101 : move.accuracy
    },
    maxpp: {
      name: "Max PP",
      moveNumCol: (move) => move.pp
    }
  };
});

// ../pokemon-showdown/dist/sim/dex-formats.js
var require_dex_formats = __commonJS((exports, module) => {
  function mergeFormatLists(main, custom) {
    const result = [];
    const build = [];
    let current = { section: "", formats: [] };
    for (const element of main) {
      if (element.section) {
        current = { section: element.section, column: element.column, formats: [] };
        build.push(current);
      } else if (element.name) {
        current.formats.push(element);
      }
    }
    if (custom !== undefined) {
      for (const element of custom) {
        if (element.section) {
          current = build.find((e) => e.section === element.section);
          if (current === undefined) {
            current = { section: element.section, column: element.column, formats: [] };
            build.push(current);
          }
        } else if (element.name) {
          current.formats.push(element);
        }
      }
    }
    for (const element of build) {
      result.push({ section: element.section, column: element.column }, ...element.formats);
    }
    return result;
  }
  var __dirname = "/home/max/tanso/pokemon-showdown/dist/sim";
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var dex_formats_exports = {};
  __export2(dex_formats_exports, {
    DexFormats: () => DexFormats,
    Format: () => Format,
    RuleTable: () => RuleTable
  });
  module.exports = __toCommonJS2(dex_formats_exports);
  var import_lib = require_lib4();
  var import_dex_data = require_dex_data();
  var import_tags = require_tags();
  var DEFAULT_MOD = "gen9";

  class RuleTable extends Map {
    constructor() {
      super();
      this.complexBans = [];
      this.complexTeamBans = [];
      this.checkCanLearn = null;
      this.timer = null;
      this.tagRules = [];
      this.valueRules = /* @__PURE__ */ new Map;
    }
    isBanned(thing) {
      if (this.has(`+${thing}`))
        return false;
      return this.has(`-${thing}`);
    }
    isBannedSpecies(species) {
      if (this.has(`+pokemon:${species.id}`))
        return false;
      if (this.has(`-pokemon:${species.id}`))
        return true;
      if (this.has(`+basepokemon:${(0, import_dex_data.toID)(species.baseSpecies)}`))
        return false;
      if (this.has(`-basepokemon:${(0, import_dex_data.toID)(species.baseSpecies)}`))
        return true;
      for (const tagid in import_tags.Tags) {
        const tag = import_tags.Tags[tagid];
        if (this.has(`-pokemontag:${tagid}`)) {
          if ((tag.speciesFilter || tag.genericFilter)(species))
            return true;
        }
      }
      for (const tagid in import_tags.Tags) {
        const tag = import_tags.Tags[tagid];
        if (this.has(`+pokemontag:${tagid}`)) {
          if ((tag.speciesFilter || tag.genericFilter)(species))
            return false;
        }
      }
      return this.has(`-pokemontag:allpokemon`);
    }
    isRestricted(thing) {
      if (this.has(`+${thing}`))
        return false;
      return this.has(`*${thing}`);
    }
    isRestrictedSpecies(species) {
      if (this.has(`+pokemon:${species.id}`))
        return false;
      if (this.has(`*pokemon:${species.id}`))
        return true;
      if (this.has(`+basepokemon:${(0, import_dex_data.toID)(species.baseSpecies)}`))
        return false;
      if (this.has(`*basepokemon:${(0, import_dex_data.toID)(species.baseSpecies)}`))
        return true;
      for (const tagid in import_tags.Tags) {
        const tag = import_tags.Tags[tagid];
        if (this.has(`*pokemontag:${tagid}`)) {
          if ((tag.speciesFilter || tag.genericFilter)(species))
            return true;
        }
      }
      for (const tagid in import_tags.Tags) {
        const tag = import_tags.Tags[tagid];
        if (this.has(`+pokemontag:${tagid}`)) {
          if ((tag.speciesFilter || tag.genericFilter)(species))
            return false;
        }
      }
      return this.has(`*pokemontag:allpokemon`);
    }
    getTagRules() {
      const tagRules = [];
      for (const ruleid of this.keys()) {
        if (/^[+*-]pokemontag:/.test(ruleid)) {
          const banid = ruleid.slice(12);
          if (banid === "allpokemon" || banid === "allitems" || banid === "allmoves" || banid === "allabilities" || banid === "allnatures") {
          } else {
            tagRules.push(ruleid);
          }
        } else if ("+*-".includes(ruleid.charAt(0)) && ruleid.slice(1) === "nonexistent") {
          tagRules.push(ruleid.charAt(0) + "pokemontag:nonexistent");
        }
      }
      this.tagRules = tagRules.reverse();
      return this.tagRules;
    }
    check(thing, setHas = null) {
      if (this.has(`+${thing}`))
        return "";
      if (setHas)
        setHas[thing] = true;
      return this.getReason(`-${thing}`);
    }
    getReason(key) {
      const source = this.get(key);
      if (source === undefined)
        return null;
      if (key === "-nonexistent" || key.startsWith("obtainable")) {
        return "not obtainable";
      }
      return source ? `banned by ${source}` : `banned`;
    }
    blame(key) {
      const source = this.get(key);
      return source ? ` from ${source}` : ``;
    }
    getComplexBanIndex(complexBans, rule) {
      const ruleId = (0, import_dex_data.toID)(rule);
      let complexBanIndex = -1;
      for (let i = 0;i < complexBans.length; i++) {
        if ((0, import_dex_data.toID)(complexBans[i][0]) === ruleId) {
          complexBanIndex = i;
          break;
        }
      }
      return complexBanIndex;
    }
    addComplexBan(rule, source, limit, bans) {
      const complexBanIndex = this.getComplexBanIndex(this.complexBans, rule);
      if (complexBanIndex !== -1) {
        if (this.complexBans[complexBanIndex][2] === Infinity)
          return;
        this.complexBans[complexBanIndex] = [rule, source, limit, bans];
      } else {
        this.complexBans.push([rule, source, limit, bans]);
      }
    }
    addComplexTeamBan(rule, source, limit, bans) {
      const complexBanTeamIndex = this.getComplexBanIndex(this.complexTeamBans, rule);
      if (complexBanTeamIndex !== -1) {
        if (this.complexTeamBans[complexBanTeamIndex][2] === Infinity)
          return;
        this.complexTeamBans[complexBanTeamIndex] = [rule, source, limit, bans];
      } else {
        this.complexTeamBans.push([rule, source, limit, bans]);
      }
    }
    resolveNumbers(format, dex) {
      const gameTypeMinTeamSize = ["triples", "rotation"].includes(format.gameType) ? 3 : format.gameType === "doubles" ? 2 : 1;
      this.minTeamSize = Number(this.valueRules.get("minteamsize")) || 0;
      this.maxTeamSize = Number(this.valueRules.get("maxteamsize")) || 6;
      this.pickedTeamSize = Number(this.valueRules.get("pickedteamsize")) || null;
      this.maxTotalLevel = Number(this.valueRules.get("maxtotallevel")) || null;
      this.maxMoveCount = Number(this.valueRules.get("maxmovecount")) || 4;
      this.minSourceGen = Number(this.valueRules.get("minsourcegen")) || 1;
      this.minLevel = Number(this.valueRules.get("minlevel")) || 1;
      this.maxLevel = Number(this.valueRules.get("maxlevel")) || 100;
      this.defaultLevel = Number(this.valueRules.get("defaultlevel")) || 0;
      this.adjustLevel = Number(this.valueRules.get("adjustlevel")) || null;
      this.adjustLevelDown = Number(this.valueRules.get("adjustleveldown")) || null;
      this.evLimit = Number(this.valueRules.get("evlimit"));
      if (isNaN(this.evLimit))
        this.evLimit = null;
      if (this.valueRules.get("pickedteamsize") === "Auto") {
        this.pickedTeamSize = ["doubles", "rotation"].includes(format.gameType) ? 4 : format.gameType === "triples" ? 6 : 3;
      }
      if (this.valueRules.get("evlimit") === "Auto") {
        this.evLimit = dex.gen > 2 ? 510 : null;
        if (format.mod === "gen7letsgo") {
          this.evLimit = this.has("allowavs") ? null : 0;
        }
      }
      if (this.maxTeamSize > 24) {
        throw new Error(`Max team size ${this.maxTeamSize}${this.blame("maxteamsize")} is unsupported (we only support up to 24).`);
      }
      if (this.maxLevel > 99999) {
        throw new Error(`Max level ${this.maxLevel}${this.blame("maxlevel")} is unsupported (we only support up to 99999)`);
      }
      if (this.maxMoveCount > 24) {
        throw new Error(`Max move count ${this.maxMoveCount}${this.blame("maxmovecount")} is unsupported (we only support up to 24)`);
      }
      if (!this.defaultLevel) {
        const maxTeamSize = this.pickedTeamSize || this.maxTeamSize;
        if (this.maxTotalLevel && this.maxLevel > 100 && this.maxLevel * maxTeamSize > this.maxTotalLevel) {
          this.defaultLevel = 100;
        } else {
          this.defaultLevel = this.maxLevel;
        }
      }
      if (this.minTeamSize && this.minTeamSize < gameTypeMinTeamSize) {
        throw new Error(`Min team size ${this.minTeamSize}${this.blame("minteamsize")} must be at least ${gameTypeMinTeamSize} for a ${format.gameType} game.`);
      }
      if (this.pickedTeamSize && this.pickedTeamSize < gameTypeMinTeamSize) {
        throw new Error(`Chosen team size ${this.pickedTeamSize}${this.blame("pickedteamsize")} must be at least ${gameTypeMinTeamSize} for a ${format.gameType} game.`);
      }
      if (this.minTeamSize && this.pickedTeamSize && this.minTeamSize < this.pickedTeamSize) {
        throw new Error(`Min team size ${this.minTeamSize}${this.blame("minteamsize")} is lower than chosen team size ${this.pickedTeamSize}${this.blame("pickedteamsize")}.`);
      }
      if (!this.minTeamSize)
        this.minTeamSize = Math.max(gameTypeMinTeamSize, this.pickedTeamSize || 0);
      if (this.maxTeamSize < gameTypeMinTeamSize) {
        throw new Error(`Max team size ${this.maxTeamSize}${this.blame("maxteamsize")} must be at least ${gameTypeMinTeamSize} for a ${format.gameType} game.`);
      }
      if (this.maxTeamSize < this.minTeamSize) {
        throw new Error(`Max team size ${this.maxTeamSize}${this.blame("maxteamsize")} must be at least min team size ${this.minTeamSize}${this.blame("minteamsize")}.`);
      }
      if (this.minLevel > this.maxLevel) {
        throw new Error(`Min level ${this.minLevel}${this.blame("minlevel")} should not be above max level ${this.maxLevel}${this.blame("maxlevel")}.`);
      }
      if (this.defaultLevel > this.maxLevel) {
        throw new Error(`Default level ${this.defaultLevel}${this.blame("defaultlevel")} should not be above max level ${this.maxLevel}${this.blame("maxlevel")}.`);
      }
      if (this.defaultLevel < this.minLevel) {
        throw new Error(`Default level ${this.defaultLevel}${this.blame("defaultlevel")} should not be below min level ${this.minLevel}${this.blame("minlevel")}.`);
      }
      if (this.adjustLevelDown && this.adjustLevelDown >= this.maxLevel) {
        throw new Error(`Adjust Level Down ${this.adjustLevelDown}${this.blame("adjustleveldown")} will have no effect because it's not below max level ${this.maxLevel}${this.blame("maxlevel")}.`);
      }
      if (this.adjustLevel && this.valueRules.has("minlevel")) {
        throw new Error(`Min Level ${this.minLevel}${this.blame("minlevel")} will have no effect because you're using Adjust Level ${this.adjustLevel}${this.blame("adjustlevel")}.`);
      }
      if (this.evLimit && this.evLimit >= 1512) {
        throw new Error(`EV Limit ${this.evLimit}${this.blame("evlimit")} will have no effect because it's not lower than 1512, the maximum possible combination of 252 EVs in every stat (if you currently have an EV limit, use "! EV Limit" to remove the limit).`);
      }
      if (this.evLimit && this.evLimit < 0) {
        throw new Error(`EV Limit ${this.evLimit}${this.blame("evlimit")} can't be less than 0 (you might have meant: "! EV Limit" to remove the limit, or "EV Limit = 0" to ban EVs).`);
      }
      if (format.cupLevelLimit) {
        throw new Error(`cupLevelLimit.range[0], cupLevelLimit.range[1], cupLevelLimit.total are now rules, respectively: "Min Level = NUMBER", "Max Level = NUMBER", and "Max Total Level = NUMBER"`);
      }
      if (format.teamLength) {
        throw new Error(`teamLength.validate[0], teamLength.validate[1], teamLength.battle are now rules, respectively: "Min Team Size = NUMBER", "Max Team Size = NUMBER", and "Picked Team Size = NUMBER"`);
      }
      if (format.minSourceGen) {
        throw new Error(`minSourceGen is now a rule: "Min Source Gen = NUMBER"`);
      }
      if (format.maxLevel) {
        throw new Error(`maxLevel is now a rule: "Max Level = NUMBER"`);
      }
      if (format.defaultLevel) {
        throw new Error(`defaultLevel is now a rule: "Default Level = NUMBER"`);
      }
      if (format.forcedLevel) {
        throw new Error(`forcedLevel is now a rule: "Adjust Level = NUMBER"`);
      }
      if (format.maxForcedLevel) {
        throw new Error(`maxForcedLevel is now a rule: "Adjust Level Down = NUMBER"`);
      }
    }
    hasComplexBans() {
      return this.complexBans?.length > 0 || this.complexTeamBans?.length > 0;
    }
  }

  class Format extends import_dex_data.BasicEffect {
    constructor(data) {
      super(data);
      data = this;
      this.mod = import_lib.Utils.getString(data.mod) || "gen9";
      this.effectType = import_lib.Utils.getString(data.effectType) || "Format";
      this.debug = !!data.debug;
      this.rated = typeof data.rated === "string" ? data.rated : data.rated !== false;
      this.gameType = data.gameType || "singles";
      this.ruleset = data.ruleset || [];
      this.baseRuleset = data.baseRuleset || [];
      this.banlist = data.banlist || [];
      this.restricted = data.restricted || [];
      this.unbanlist = data.unbanlist || [];
      this.customRules = data.customRules || null;
      this.ruleTable = null;
      this.onBegin = data.onBegin || undefined;
      this.noLog = !!data.noLog;
      this.playerCount = this.gameType === "multi" || this.gameType === "freeforall" ? 4 : 2;
    }
  }

  class DexFormats {
    constructor(dex) {
      this.rulesetCache = /* @__PURE__ */ new Map;
      this.dex = dex;
      this.formatsListCache = null;
    }
    load() {
      if (!this.dex.isBase)
        throw new Error(`This should only be run on the base mod`);
      this.dex.includeMods();
      if (this.formatsListCache)
        return this;
      const formatsList = [];
      let customFormats;
      try {
        customFormats = __require(`${__dirname}/../config/custom-formats`).Formats;
        if (!Array.isArray(customFormats)) {
          throw new TypeError(`Exported property 'Formats' from "./config/custom-formats.ts" must be an array`);
        }
      } catch (e) {
        if (e.code !== "MODULE_NOT_FOUND" && e.code !== "ENOENT") {
          throw e;
        }
      }
      let Formats = __require(`${__dirname}/../config/formats`).Formats;
      if (!Array.isArray(Formats)) {
        throw new TypeError(`Exported property 'Formats' from "./config/formats.ts" must be an array`);
      }
      if (customFormats)
        Formats = mergeFormatLists(Formats, customFormats);
      let section = "";
      let column = 1;
      for (const [i, format] of Formats.entries()) {
        const id = (0, import_dex_data.toID)(format.name);
        if (format.section)
          section = format.section;
        if (format.column)
          column = format.column;
        if (!format.name && format.section)
          continue;
        if (!id) {
          throw new RangeError(`Format #${i + 1} must have a name with alphanumeric characters, not '${format.name}'`);
        }
        if (!format.section)
          format.section = section;
        if (!format.column)
          format.column = column;
        if (this.rulesetCache.has(id))
          throw new Error(`Format #${i + 1} has a duplicate ID: '${id}'`);
        format.effectType = "Format";
        format.baseRuleset = format.ruleset ? format.ruleset.slice() : [];
        if (format.challengeShow === undefined)
          format.challengeShow = true;
        if (format.searchShow === undefined)
          format.searchShow = true;
        if (format.tournamentShow === undefined)
          format.tournamentShow = true;
        if (format.bestOfDefault === undefined)
          format.bestOfDefault = false;
        if (format.teraPreviewDefault === undefined)
          format.teraPreviewDefault = false;
        if (format.mod === undefined)
          format.mod = "gen9";
        if (!this.dex.dexes[format.mod])
          throw new Error(`Format "${format.name}" requires nonexistent mod: '${format.mod}'`);
        const ruleset = new Format(format);
        this.rulesetCache.set(id, ruleset);
        formatsList.push(ruleset);
      }
      this.formatsListCache = formatsList;
      return this;
    }
    validate(name) {
      const [formatName, customRulesString] = name.split("@@@", 2);
      const format = this.get(formatName);
      if (!format.exists)
        throw new Error(`Unrecognized format "${formatName}"`);
      if (!customRulesString)
        return format.id;
      const ruleTable = this.getRuleTable(format);
      const customRules = customRulesString.split(",").map((rule) => {
        rule = rule.replace(/[\r\n|]*/g, "").trim();
        const ruleSpec = this.validateRule(rule);
        if (typeof ruleSpec === "string" && ruleTable.has(ruleSpec))
          return null;
        return rule;
      }).filter(Boolean);
      if (!customRules.length)
        throw new Error(`The format already has your custom rules`);
      const validatedFormatid = format.id + "@@@" + customRules.join(",");
      const moddedFormat = this.get(validatedFormatid, true);
      this.getRuleTable(moddedFormat);
      return validatedFormatid;
    }
    get(name, isTrusted = false) {
      if (name && typeof name !== "string")
        return name;
      name = (name || "").trim();
      let id = (0, import_dex_data.toID)(name);
      if (!name.includes("@@@")) {
        const ruleset = this.rulesetCache.get(id);
        if (ruleset)
          return ruleset;
      }
      if (this.dex.data.Aliases.hasOwnProperty(id)) {
        name = this.dex.data.Aliases[id];
        id = (0, import_dex_data.toID)(name);
      }
      if (this.dex.data.Rulesets.hasOwnProperty(DEFAULT_MOD + id)) {
        id = DEFAULT_MOD + id;
      }
      let supplementaryAttributes = null;
      if (name.includes("@@@")) {
        if (!isTrusted) {
          try {
            name = this.validate(name);
            isTrusted = true;
          } catch {
          }
        }
        const [newName, customRulesString] = name.split("@@@", 2);
        name = newName.trim();
        id = (0, import_dex_data.toID)(name);
        if (isTrusted && customRulesString) {
          supplementaryAttributes = {
            customRules: customRulesString.split(","),
            searchShow: false
          };
        }
      }
      let effect;
      if (this.dex.data.Rulesets.hasOwnProperty(id)) {
        effect = new Format({ name, ...this.dex.data.Rulesets[id], ...supplementaryAttributes });
      } else {
        effect = new Format({ id, name, exists: false });
      }
      return effect;
    }
    all() {
      this.load();
      return this.formatsListCache;
    }
    getRuleTable(format, depth = 1, repeals) {
      if (format.ruleTable && !repeals)
        return format.ruleTable;
      if (format.name.length > 50) {
        throw new Error(`Format "${format.name}" has a name longer than 50 characters`);
      }
      if (depth === 1) {
        const dex = this.dex.mod(format.mod);
        if (dex !== this.dex) {
          return dex.formats.getRuleTable(format, 2, repeals);
        }
      }
      const ruleTable = new RuleTable;
      const ruleset = format.ruleset.slice();
      for (const ban of format.banlist) {
        ruleset.push("-" + ban);
      }
      for (const ban of format.restricted) {
        ruleset.push("*" + ban);
      }
      for (const ban of format.unbanlist) {
        ruleset.push("+" + ban);
      }
      if (format.customRules) {
        ruleset.push(...format.customRules);
      }
      if (format.checkCanLearn) {
        ruleTable.checkCanLearn = [format.checkCanLearn, format.name];
      }
      if (format.timer) {
        ruleTable.timer = [format.timer, format.name];
      }
      for (const rule of ruleset) {
        if (rule.startsWith("!") && !rule.startsWith("!!")) {
          const ruleSpec = this.validateRule(rule, format);
          if (!repeals)
            repeals = /* @__PURE__ */ new Map;
          repeals.set(ruleSpec.slice(1), depth);
        }
      }
      for (const rule of ruleset) {
        const ruleSpec = this.validateRule(rule, format);
        if (typeof ruleSpec !== "string") {
          if (ruleSpec[0] === "complexTeamBan") {
            const complexTeamBan = ruleSpec.slice(1);
            ruleTable.addComplexTeamBan(complexTeamBan[0], complexTeamBan[1], complexTeamBan[2], complexTeamBan[3]);
          } else if (ruleSpec[0] === "complexBan") {
            const complexBan = ruleSpec.slice(1);
            ruleTable.addComplexBan(complexBan[0], complexBan[1], complexBan[2], complexBan[3]);
          } else {
            throw new Error(`Unrecognized rule spec ${ruleSpec}`);
          }
          continue;
        }
        if (rule.startsWith("!") && !rule.startsWith("!!")) {
          const repealDepth = repeals.get(ruleSpec.slice(1));
          if (repealDepth === undefined)
            throw new Error(`Multiple "${rule}" rules in ${format.name}`);
          if (repealDepth === depth) {
            throw new Error(`Rule "${rule}" did nothing because "${rule.slice(1)}" is not in effect`);
          }
          if (repealDepth === -depth)
            repeals.delete(ruleSpec.slice(1));
          continue;
        }
        if ("+*-".includes(ruleSpec.charAt(0))) {
          if (ruleTable.has(ruleSpec)) {
            throw new Error(`Rule "${rule}" in "${format.name}" already exists in "${ruleTable.get(ruleSpec) || format.name}"`);
          }
          for (const prefix of "+*-")
            ruleTable.delete(prefix + ruleSpec.slice(1));
          ruleTable.set(ruleSpec, "");
          continue;
        }
        let [formatid, value] = ruleSpec.split("=");
        const subformat = this.get(formatid);
        const repealAndReplace = ruleSpec.startsWith("!!");
        if (repeals?.has(subformat.id)) {
          repeals.set(subformat.id, -Math.abs(repeals.get(subformat.id)));
          continue;
        }
        if (subformat.hasValue) {
          if (value === undefined)
            throw new Error(`Rule "${ruleSpec}" should have a value (like "${ruleSpec} = something")`);
          if (value === "Current Gen")
            value = `${this.dex.gen}`;
          if ((subformat.id === "pickedteamsize" || subformat.id === "evlimit") && value === "Auto") {
          } else if (subformat.hasValue === "integer" || subformat.hasValue === "positive-integer") {
            const intValue = parseInt(value);
            if (isNaN(intValue) || value !== `${intValue}`) {
              throw new Error(`In rule "${ruleSpec}", "${value}" must be an integer number.`);
            }
          }
          if (subformat.hasValue === "positive-integer") {
            if (parseInt(value) === 0) {
              throw new Error(`In rule "${ruleSpec}", "${value}" must be positive (to remove it, use the rule "! ${subformat.name}").`);
            }
            if (parseInt(value) <= 0) {
              throw new Error(`In rule "${ruleSpec}", "${value}" must be positive.`);
            }
          }
          const oldValue = ruleTable.valueRules.get(subformat.id);
          if (oldValue === value) {
            throw new Error(`Rule "${ruleSpec}" is redundant with existing rule "${subformat.id}=${value}"${ruleTable.blame(subformat.id)}.`);
          } else if (repealAndReplace) {
            if (oldValue === undefined) {
              if (subformat.mutuallyExclusiveWith && ruleTable.valueRules.has(subformat.mutuallyExclusiveWith)) {
                if (this.dex.formats.get(subformat.mutuallyExclusiveWith).ruleset.length) {
                  throw new Error(`This format does not support "!!"`);
                }
                ruleTable.valueRules.delete(subformat.mutuallyExclusiveWith);
                ruleTable.delete(subformat.mutuallyExclusiveWith);
              } else {
                throw new Error(`Rule "${ruleSpec}" is not replacing anything (it should not have "!!")`);
              }
            }
          } else {
            if (oldValue !== undefined) {
              throw new Error(`Rule "${ruleSpec}" conflicts with "${subformat.id}=${oldValue}"${ruleTable.blame(subformat.id)} (Use "!! ${ruleSpec}" to override "${subformat.id}=${oldValue}".)`);
            }
            if (subformat.mutuallyExclusiveWith && ruleTable.valueRules.has(subformat.mutuallyExclusiveWith)) {
              const oldRule = `"${subformat.mutuallyExclusiveWith}=${ruleTable.valueRules.get(subformat.mutuallyExclusiveWith)}"`;
              throw new Error(`Format can't simultaneously have "${ruleSpec}" and ${oldRule}${ruleTable.blame(subformat.mutuallyExclusiveWith)} (Use "!! ${ruleSpec}" to override ${oldRule}.)`);
            }
          }
          ruleTable.valueRules.set(subformat.id, value);
        } else {
          if (value !== undefined)
            throw new Error(`Rule "${ruleSpec}" should not have a value (no equals sign)`);
          if (repealAndReplace)
            throw new Error(`"!!" is not supported for this rule`);
          if (ruleTable.has(subformat.id) && !repealAndReplace) {
            throw new Error(`Rule "${rule}" in "${format.name}" already exists in "${ruleTable.get(subformat.id) || format.name}"`);
          }
        }
        ruleTable.set(subformat.id, "");
        if (depth > 16) {
          throw new Error(`Excessive ruleTable recursion in ${format.name}: ${ruleSpec} of ${format.ruleset}`);
        }
        const subRuleTable = this.getRuleTable(subformat, depth + 1, repeals);
        for (const [ruleid, sourceFormat] of subRuleTable) {
          if (!repeals?.has(ruleid)) {
            const newValue = subRuleTable.valueRules.get(ruleid);
            const oldValue = ruleTable.valueRules.get(ruleid);
            if (newValue !== undefined) {
              const subSubFormat = this.get(ruleid);
              if (subSubFormat.mutuallyExclusiveWith && ruleTable.valueRules.has(subSubFormat.mutuallyExclusiveWith)) {
                throw new Error(`Rule "${ruleid}=${newValue}" from ${subformat.name}${subRuleTable.blame(ruleid)} conflicts with "${subSubFormat.mutuallyExclusiveWith}=${ruleTable.valueRules.get(subSubFormat.mutuallyExclusiveWith)}"${ruleTable.blame(subSubFormat.mutuallyExclusiveWith)} (Repeal one with ! before adding another)`);
              }
              if (newValue !== oldValue) {
                if (oldValue !== undefined) {
                  throw new Error(`Rule "${ruleid}=${newValue}" from ${subformat.name}${subRuleTable.blame(ruleid)} conflicts with "${ruleid}=${oldValue}"${ruleTable.blame(ruleid)} (Repeal one with ! before adding another)`);
                }
                ruleTable.valueRules.set(ruleid, newValue);
              }
            }
            ruleTable.set(ruleid, sourceFormat || subformat.name);
          }
        }
        for (const [subRule, source, limit, bans] of subRuleTable.complexBans) {
          ruleTable.addComplexBan(subRule, source || subformat.name, limit, bans);
        }
        for (const [subRule, source, limit, bans] of subRuleTable.complexTeamBans) {
          ruleTable.addComplexTeamBan(subRule, source || subformat.name, limit, bans);
        }
        if (subRuleTable.checkCanLearn) {
          if (ruleTable.checkCanLearn) {
            throw new Error(`"${format.name}" has conflicting move validation rules from "${ruleTable.checkCanLearn[1]}" and "${subRuleTable.checkCanLearn[1]}"`);
          }
          ruleTable.checkCanLearn = subRuleTable.checkCanLearn;
        }
        if (subRuleTable.timer) {
          if (ruleTable.timer) {
            throw new Error(`"${format.name}" has conflicting timer validation rules from "${ruleTable.timer[1]}" and "${subRuleTable.timer[1]}"`);
          }
          ruleTable.timer = subRuleTable.timer;
        }
      }
      ruleTable.getTagRules();
      ruleTable.resolveNumbers(format, this.dex);
      const canMegaEvo = this.dex.gen <= 7 || ruleTable.has("+pokemontag:past");
      if (ruleTable.has("obtainableformes") && canMegaEvo && ruleTable.isBannedSpecies(this.dex.species.get("rayquazamega")) && !ruleTable.isBannedSpecies(this.dex.species.get("rayquaza"))) {
        ruleTable.set("megarayquazaclause", "");
      }
      for (const rule of ruleTable.keys()) {
        if ("+*-!".includes(rule.charAt(0)))
          continue;
        const subFormat = this.dex.formats.get(rule);
        if (subFormat.exists) {
          const value = subFormat.onValidateRule?.call({ format, ruleTable, dex: this.dex }, ruleTable.valueRules.get(rule));
          if (typeof value === "string")
            ruleTable.valueRules.set(subFormat.id, value);
        }
      }
      if (!repeals)
        format.ruleTable = ruleTable;
      return ruleTable;
    }
    validateRule(rule, format = null) {
      if (rule !== rule.trim())
        throw new Error(`Rule "${rule}" should be trimmed`);
      switch (rule.charAt(0)) {
        case "-":
        case "*":
        case "+":
          if (rule.slice(1).includes(">") || rule.slice(1).includes("+")) {
            let buf = rule.slice(1);
            const gtIndex = buf.lastIndexOf(">");
            let limit = rule.startsWith("+") ? Infinity : 0;
            if (gtIndex >= 0 && /^[0-9]+$/.test(buf.slice(gtIndex + 1).trim())) {
              if (limit === 0)
                limit = parseInt(buf.slice(gtIndex + 1));
              buf = buf.slice(0, gtIndex);
            }
            let checkTeam = buf.includes("++");
            const banNames = buf.split(checkTeam ? "++" : "+").map((v) => v.trim());
            if (banNames.length === 1 && limit > 0)
              checkTeam = true;
            const innerRule = banNames.join(checkTeam ? " ++ " : " + ");
            const bans = banNames.map((v) => this.validateBanRule(v));
            if (checkTeam) {
              return ["complexTeamBan", innerRule, "", limit, bans];
            }
            if (bans.length > 1 || limit > 0) {
              return ["complexBan", innerRule, "", limit, bans];
            }
            throw new Error(`Confusing rule ${rule}`);
          }
          return rule.charAt(0) + this.validateBanRule(rule.slice(1));
        default:
          const [ruleName, value] = rule.split("=");
          let id = (0, import_dex_data.toID)(ruleName);
          const ruleset = this.dex.formats.get(id);
          if (!ruleset.exists) {
            throw new Error(`Unrecognized rule "${rule}"`);
          }
          if (typeof value === "string")
            id = `${id}=${value.trim()}`;
          if (rule.startsWith("!!"))
            return `!!${id}`;
          if (rule.startsWith("!"))
            return `!${id}`;
          return id;
      }
    }
    validPokemonTag(tagid) {
      const tag = import_tags.Tags.hasOwnProperty(tagid) && import_tags.Tags[tagid];
      if (!tag)
        return false;
      return !!(tag.speciesFilter || tag.genericFilter);
    }
    validateBanRule(rule) {
      let id = (0, import_dex_data.toID)(rule);
      if (id === "unreleased")
        return "unreleased";
      if (id === "nonexistent")
        return "nonexistent";
      const matches = [];
      let matchTypes = ["pokemon", "move", "ability", "item", "nature", "pokemontag"];
      for (const matchType of matchTypes) {
        if (rule.startsWith(`${matchType}:`)) {
          matchTypes = [matchType];
          id = id.slice(matchType.length);
          break;
        }
      }
      const ruleid = id;
      if (this.dex.data.Aliases.hasOwnProperty(id))
        id = (0, import_dex_data.toID)(this.dex.data.Aliases[id]);
      for (const matchType of matchTypes) {
        if (matchType === "item" && ruleid === "noitem")
          return "item:noitem";
        let table;
        switch (matchType) {
          case "pokemon":
            table = this.dex.data.Pokedex;
            break;
          case "move":
            table = this.dex.data.Moves;
            break;
          case "item":
            table = this.dex.data.Items;
            break;
          case "ability":
            table = this.dex.data.Abilities;
            break;
          case "nature":
            table = this.dex.data.Natures;
            break;
          case "pokemontag":
            const validTags = [
              "allpokemon",
              "allitems",
              "allmoves",
              "allabilities",
              "allnatures"
            ];
            if (validTags.includes(ruleid) || this.validPokemonTag(ruleid)) {
              matches.push("pokemontag:" + ruleid);
            }
            continue;
          default:
            throw new Error(`Unrecognized match type.`);
        }
        if (table.hasOwnProperty(id)) {
          if (matchType === "pokemon") {
            const species = table[id];
            if ((species.otherFormes || species.cosmeticFormes) && ruleid === id) {
              matches.push("basepokemon:" + id);
              continue;
            }
          }
          matches.push(matchType + ":" + id);
        } else if (matchType === "pokemon" && id.endsWith("base")) {
          id = id.slice(0, -4);
          if (table.hasOwnProperty(id)) {
            matches.push("pokemon:" + id);
          }
        }
      }
      if (matches.length > 1) {
        throw new Error(`More than one thing matches "${rule}"; please specify one of: ` + matches.join(", "));
      }
      if (matches.length < 1) {
        throw new Error(`Nothing matches "${rule}"`);
      }
      return matches[0];
    }
  }
});

// ../pokemon-showdown/dist/sim/dex.js
var require_dex = __commonJS((exports, module) => {
  var __dirname = "/home/max/tanso/pokemon-showdown/dist/sim";
  var __create2 = Object.create;
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __getProtoOf2 = Object.getPrototypeOf;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var dex_exports = {};
  __export2(dex_exports, {
    Dex: () => Dex,
    ModdedDex: () => ModdedDex,
    default: () => dex_default,
    toID: () => toID
  });
  module.exports = __toCommonJS2(dex_exports);
  var fs = __toESM2(__require("fs"));
  var path = __toESM2(__require("path"));
  var Data = __toESM2(require_dex_data());
  var import_dex_conditions = require_dex_conditions();
  var import_dex_moves = require_dex_moves();
  var import_dex_items = require_dex_items();
  var import_dex_abilities = require_dex_abilities();
  var import_dex_species = require_dex_species();
  var import_dex_formats = require_dex_formats();
  var import_lib = require_lib4();
  var BASE_MOD = "gen9";
  var DATA_DIR = path.resolve(__dirname, "../data");
  var MODS_DIR = path.resolve(DATA_DIR, "./mods");
  var dexes = /* @__PURE__ */ Object.create(null);
  var DATA_TYPES = [
    "Abilities",
    "Rulesets",
    "FormatsData",
    "Items",
    "Learnsets",
    "Moves",
    "Natures",
    "Pokedex",
    "Scripts",
    "Conditions",
    "TypeChart",
    "PokemonGoData"
  ];
  var DATA_FILES = {
    Abilities: "abilities",
    Aliases: "aliases",
    Rulesets: "rulesets",
    FormatsData: "formats-data",
    Items: "items",
    Learnsets: "learnsets",
    Moves: "moves",
    Natures: "natures",
    Pokedex: "pokedex",
    PokemonGoData: "pokemongo",
    Scripts: "scripts",
    Conditions: "conditions",
    TypeChart: "typechart"
  };
  var toID = Data.toID;

  class ModdedDex {
    constructor(mod = "base") {
      this.Data = Data;
      this.Condition = import_dex_conditions.Condition;
      this.Ability = import_dex_abilities.Ability;
      this.Item = import_dex_items.Item;
      this.Move = import_dex_moves.DataMove;
      this.Species = import_dex_species.Species;
      this.Format = import_dex_formats.Format;
      this.ModdedDex = ModdedDex;
      this.name = "[ModdedDex]";
      this.toID = Data.toID;
      this.gen = 0;
      this.parentMod = "";
      this.modsLoaded = false;
      this.deepClone = import_lib.Utils.deepClone;
      this.deepFreeze = import_lib.Utils.deepFreeze;
      this.Multiset = import_lib.Utils.Multiset;
      this.isBase = mod === "base";
      this.currentMod = mod;
      this.dataDir = this.isBase ? DATA_DIR : MODS_DIR + "/" + this.currentMod;
      this.dataCache = null;
      this.textCache = null;
      this.formats = new import_dex_formats.DexFormats(this);
      this.abilities = new import_dex_abilities.DexAbilities(this);
      this.items = new import_dex_items.DexItems(this);
      this.moves = new import_dex_moves.DexMoves(this);
      this.species = new import_dex_species.DexSpecies(this);
      this.conditions = new import_dex_conditions.DexConditions(this);
      this.natures = new Data.DexNatures(this);
      this.types = new Data.DexTypes(this);
      this.stats = new Data.DexStats(this);
    }
    get data() {
      return this.loadData();
    }
    get dexes() {
      this.includeMods();
      return dexes;
    }
    mod(mod) {
      if (!dexes["base"].modsLoaded)
        dexes["base"].includeMods();
      return dexes[mod || "base"];
    }
    forGen(gen) {
      if (!gen)
        return this;
      return this.mod(`gen${gen}`);
    }
    forFormat(format) {
      if (!this.modsLoaded)
        this.includeMods();
      const mod = this.formats.get(format).mod;
      return dexes[mod || BASE_MOD].includeData();
    }
    modData(dataType, id) {
      if (this.isBase)
        return this.data[dataType][id];
      if (this.data[dataType][id] !== dexes[this.parentMod].data[dataType][id])
        return this.data[dataType][id];
      return this.data[dataType][id] = import_lib.Utils.deepClone(this.data[dataType][id]);
    }
    effectToString() {
      return this.name;
    }
    getName(name) {
      if (typeof name !== "string" && typeof name !== "number")
        return "";
      name = ("" + name).replace(/[|\s[\],\u202e]+/g, " ").trim();
      if (name.length > 18)
        name = name.substr(0, 18).trim();
      name = name.replace(/[\u0300-\u036f\u0483-\u0489\u0610-\u0615\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06ED\u0E31\u0E34-\u0E3A\u0E47-\u0E4E]{3,}/g, "");
      name = name.replace(/[\u239b-\u23b9]/g, "");
      return name;
    }
    getImmunity(source, target) {
      const sourceType = typeof source !== "string" ? source.type : source;
      const targetTyping = target.getTypes?.() || target.types || target;
      if (Array.isArray(targetTyping)) {
        for (const type of targetTyping) {
          if (!this.getImmunity(sourceType, type))
            return false;
        }
        return true;
      }
      const typeData = this.types.get(targetTyping);
      if (typeData && typeData.damageTaken[sourceType] === 3)
        return false;
      return true;
    }
    getEffectiveness(source, target) {
      const sourceType = typeof source !== "string" ? source.type : source;
      const targetTyping = target.getTypes?.() || target.types || target;
      let totalTypeMod = 0;
      if (Array.isArray(targetTyping)) {
        for (const type of targetTyping) {
          totalTypeMod += this.getEffectiveness(sourceType, type);
        }
        return totalTypeMod;
      }
      const typeData = this.types.get(targetTyping);
      if (!typeData)
        return 0;
      switch (typeData.damageTaken[sourceType]) {
        case 1:
          return 1;
        case 2:
          return -1;
        default:
          return 0;
      }
    }
    getDescs(table, id, dataEntry) {
      if (dataEntry.shortDesc) {
        return {
          desc: dataEntry.desc,
          shortDesc: dataEntry.shortDesc
        };
      }
      const entry = this.loadTextData()[table][id];
      if (!entry)
        return null;
      const descs = {
        desc: "",
        shortDesc: ""
      };
      for (let i = this.gen;i < dexes["base"].gen; i++) {
        const curDesc = entry[`gen${i}`]?.desc;
        const curShortDesc = entry[`gen${i}`]?.shortDesc;
        if (!descs.desc && curDesc) {
          descs.desc = curDesc;
        }
        if (!descs.shortDesc && curShortDesc) {
          descs.shortDesc = curShortDesc;
        }
        if (descs.desc && descs.shortDesc)
          break;
      }
      if (!descs.shortDesc)
        descs.shortDesc = entry.shortDesc || "";
      if (!descs.desc)
        descs.desc = entry.desc || descs.shortDesc;
      return descs;
    }
    getActiveMove(move) {
      if (move && typeof move.hit === "number")
        return move;
      move = this.moves.get(move);
      const moveCopy = this.deepClone(move);
      moveCopy.hit = 0;
      return moveCopy;
    }
    getHiddenPower(ivs) {
      const hpTypes = [
        "Fighting",
        "Flying",
        "Poison",
        "Ground",
        "Rock",
        "Bug",
        "Ghost",
        "Steel",
        "Fire",
        "Water",
        "Grass",
        "Electric",
        "Psychic",
        "Ice",
        "Dragon",
        "Dark"
      ];
      const tr = this.trunc;
      const stats = { hp: 31, atk: 31, def: 31, spe: 31, spa: 31, spd: 31 };
      if (this.gen <= 2) {
        const atkDV = tr(ivs.atk / 2);
        const defDV = tr(ivs.def / 2);
        const speDV = tr(ivs.spe / 2);
        const spcDV = tr(ivs.spa / 2);
        return {
          type: hpTypes[4 * (atkDV % 4) + defDV % 4],
          power: tr((5 * ((spcDV >> 3) + 2 * (speDV >> 3) + 4 * (defDV >> 3) + 8 * (atkDV >> 3)) + spcDV % 4) / 2 + 31)
        };
      } else {
        let hpTypeX = 0;
        let hpPowerX = 0;
        let i = 1;
        for (const s in stats) {
          hpTypeX += i * (ivs[s] % 2);
          hpPowerX += i * (tr(ivs[s] / 2) % 2);
          i *= 2;
        }
        return {
          type: hpTypes[tr(hpTypeX * 15 / 63)],
          power: this.gen && this.gen < 6 ? tr(hpPowerX * 40 / 63) + 30 : 60
        };
      }
    }
    trunc(num, bits = 0) {
      if (bits)
        return (num >>> 0) % 2 ** bits;
      return num >>> 0;
    }
    dataSearch(target, searchIn, isInexact) {
      if (!target)
        return null;
      searchIn = searchIn || ["Pokedex", "Moves", "Abilities", "Items", "Natures"];
      const searchObjects = {
        Pokedex: "species",
        Moves: "moves",
        Abilities: "abilities",
        Items: "items",
        Natures: "natures"
      };
      const searchTypes = {
        Pokedex: "pokemon",
        Moves: "move",
        Abilities: "ability",
        Items: "item",
        Natures: "nature"
      };
      let searchResults = [];
      for (const table of searchIn) {
        const res = this[searchObjects[table]].get(target);
        if (res.exists && res.gen <= this.gen) {
          searchResults.push({
            isInexact,
            searchType: searchTypes[table],
            name: res.name
          });
        }
      }
      if (searchResults.length)
        return searchResults;
      if (isInexact)
        return null;
      const cmpTarget = toID(target);
      let maxLd = 3;
      if (cmpTarget.length <= 1) {
        return null;
      } else if (cmpTarget.length <= 4) {
        maxLd = 1;
      } else if (cmpTarget.length <= 6) {
        maxLd = 2;
      }
      searchResults = null;
      for (const table of [...searchIn, "Aliases"]) {
        const searchObj = this.data[table];
        if (!searchObj)
          continue;
        for (const j in searchObj) {
          const ld = import_lib.Utils.levenshtein(cmpTarget, j, maxLd);
          if (ld <= maxLd) {
            const word = searchObj[j].name || j;
            const results = this.dataSearch(word, searchIn, word);
            if (results) {
              searchResults = results;
              maxLd = ld;
            }
          }
        }
      }
      return searchResults;
    }
    loadDataFile(basePath, dataType) {
      try {
        const filePath = basePath + DATA_FILES[dataType];
        const dataObject = __require(filePath);
        if (!dataObject || typeof dataObject !== "object") {
          throw new TypeError(`${filePath}, if it exists, must export a non-null object`);
        }
        if (dataObject[dataType]?.constructor?.name !== "Object") {
          throw new TypeError(`${filePath}, if it exists, must export an object whose '${dataType}' property is an Object`);
        }
        return dataObject[dataType];
      } catch (e) {
        if (e.code !== "MODULE_NOT_FOUND" && e.code !== "ENOENT") {
          throw e;
        }
      }
      return {};
    }
    loadTextFile(name, exportName) {
      return __require(`${DATA_DIR}/text/${name}`)[exportName];
    }
    includeMods() {
      if (!this.isBase)
        throw new Error(`This must be called on the base Dex`);
      if (this.modsLoaded)
        return this;
      for (const mod of fs.readdirSync(MODS_DIR)) {
        dexes[mod] = new ModdedDex(mod);
      }
      this.modsLoaded = true;
      return this;
    }
    includeModData() {
      for (const mod in this.dexes) {
        dexes[mod].includeData();
      }
      return this;
    }
    includeData() {
      this.loadData();
      return this;
    }
    loadTextData() {
      if (dexes["base"].textCache)
        return dexes["base"].textCache;
      dexes["base"].textCache = {
        Pokedex: this.loadTextFile("pokedex", "PokedexText"),
        Moves: this.loadTextFile("moves", "MovesText"),
        Abilities: this.loadTextFile("abilities", "AbilitiesText"),
        Items: this.loadTextFile("items", "ItemsText"),
        Default: this.loadTextFile("default", "DefaultText")
      };
      return dexes["base"].textCache;
    }
    loadData() {
      if (this.dataCache)
        return this.dataCache;
      dexes["base"].includeMods();
      const dataCache = {};
      const basePath = this.dataDir + "/";
      const Scripts = this.loadDataFile(basePath, "Scripts");
      this.parentMod = this.isBase ? "" : Scripts.inherit || "base";
      let parentDex;
      if (this.parentMod) {
        parentDex = dexes[this.parentMod];
        if (!parentDex || parentDex === this) {
          throw new Error(`Unable to load ${this.currentMod}. 'inherit' in scripts.ts should specify a parent mod from which to inherit data, or must be not specified.`);
        }
      }
      if (!parentDex) {
        this.includeFormats();
      }
      for (const dataType of DATA_TYPES.concat("Aliases")) {
        const BattleData = this.loadDataFile(basePath, dataType);
        if (BattleData !== dataCache[dataType])
          dataCache[dataType] = Object.assign(BattleData, dataCache[dataType]);
        if (dataType === "Rulesets" && !parentDex) {
          for (const format of this.formats.all()) {
            BattleData[format.id] = { ...format, ruleTable: null };
          }
        }
      }
      if (parentDex) {
        for (const dataType of DATA_TYPES) {
          const parentTypedData = parentDex.data[dataType];
          const childTypedData = dataCache[dataType] || (dataCache[dataType] = {});
          for (const entryId in parentTypedData) {
            if (childTypedData[entryId] === null) {
              delete childTypedData[entryId];
            } else if (!(entryId in childTypedData)) {
              if (dataType === "Pokedex") {
                childTypedData[entryId] = this.deepClone(parentTypedData[entryId]);
              } else {
                childTypedData[entryId] = parentTypedData[entryId];
              }
            } else if (childTypedData[entryId] && childTypedData[entryId].inherit) {
              delete childTypedData[entryId].inherit;
              for (const key in parentTypedData[entryId]) {
                if (key in childTypedData[entryId])
                  continue;
                childTypedData[entryId][key] = parentTypedData[entryId][key];
              }
            }
          }
        }
        dataCache["Aliases"] = parentDex.data["Aliases"];
      }
      this.gen = dataCache.Scripts.gen;
      if (!this.gen)
        throw new Error(`Mod ${this.currentMod} needs a generation number in scripts.js`);
      this.dataCache = dataCache;
      if (Scripts.init)
        Scripts.init.call(this);
      return this.dataCache;
    }
    includeFormats() {
      this.formats.load();
      return this;
    }
  }
  dexes["base"] = new ModdedDex;
  dexes[BASE_MOD] = dexes["base"];
  var Dex = dexes["base"];
  var dex_default = Dex;
});

// ../pokemon-showdown/dist/sim/prng.js
var require_prng = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var prng_exports = {};
  __export2(prng_exports, {
    PRNG: () => PRNG
  });
  module.exports = __toCommonJS2(prng_exports);

  class PRNG {
    constructor(seed = null) {
      if (!seed)
        seed = PRNG.generateSeed();
      this.initialSeed = seed.slice();
      this.seed = seed.slice();
    }
    get startingSeed() {
      return this.initialSeed;
    }
    clone() {
      return new PRNG(this.seed);
    }
    next(from, to) {
      this.seed = this.nextFrame(this.seed);
      let result = (this.seed[0] << 16 >>> 0) + this.seed[1];
      if (from)
        from = Math.floor(from);
      if (to)
        to = Math.floor(to);
      if (from === undefined) {
        result = result / 4294967296;
      } else if (!to) {
        result = Math.floor(result * from / 4294967296);
      } else {
        result = Math.floor(result * (to - from) / 4294967296) + from;
      }
      return result;
    }
    randomChance(numerator, denominator) {
      return this.next(denominator) < numerator;
    }
    sample(items) {
      if (items.length === 0) {
        throw new RangeError(`Cannot sample an empty array`);
      }
      const index = this.next(items.length);
      const item = items[index];
      if (item === undefined && !Object.prototype.hasOwnProperty.call(items, index)) {
        throw new RangeError(`Cannot sample a sparse array`);
      }
      return item;
    }
    shuffle(items, start = 0, end = items.length) {
      while (start < end - 1) {
        const nextIndex = this.next(start, end);
        if (start !== nextIndex) {
          [items[start], items[nextIndex]] = [items[nextIndex], items[start]];
        }
        start++;
      }
    }
    multiplyAdd(a, b, c) {
      const out = [0, 0, 0, 0];
      let carry = 0;
      for (let outIndex = 3;outIndex >= 0; outIndex--) {
        for (let bIndex = outIndex;bIndex < 4; bIndex++) {
          const aIndex = 3 - (bIndex - outIndex);
          carry += a[aIndex] * b[bIndex];
        }
        carry += c[outIndex];
        out[outIndex] = carry & 65535;
        carry >>>= 16;
      }
      return out;
    }
    nextFrame(seed, framesToAdvance = 1) {
      const a = [23896, 35685, 27655, 35173];
      const c = [0, 0, 38, 40643];
      for (let i = 0;i < framesToAdvance; i++) {
        seed = this.multiplyAdd(seed, a, c);
      }
      return seed;
    }
    static generateSeed() {
      return [
        Math.floor(Math.random() * 65536),
        Math.floor(Math.random() * 65536),
        Math.floor(Math.random() * 65536),
        Math.floor(Math.random() * 65536)
      ];
    }
  }
});

// ../pokemon-showdown/dist/data/random-battles/gen9/sets.json
var require_sets = __commonJS((exports, module) => {
  module.exports = {
    venusaur: {
      level: 84,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Giga Drain", "Leech Seed", "Sleep Powder", "Sludge Bomb", "Substitute"],
          abilities: ["Chlorophyll", "Overgrow"],
          teraTypes: ["Steel", "Water"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Earth Power", "Energy Ball", "Knock Off", "Sleep Powder", "Sludge Bomb", "Synthesis", "Toxic"],
          abilities: ["Chlorophyll", "Overgrow"],
          teraTypes: ["Dark", "Steel", "Water"]
        }
      ]
    },
    charizard: {
      level: 85,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Earthquake", "Flamethrower", "Focus Blast", "Hurricane", "Will-O-Wisp"],
          abilities: ["Blaze"],
          teraTypes: ["Dragon", "Fire", "Ground"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Dance", "Earthquake", "Flare Blitz", "Outrage", "Swords Dance"],
          abilities: ["Blaze"],
          teraTypes: ["Dragon", "Ground"]
        }
      ]
    },
    blastoise: {
      level: 80,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Earthquake", "Hydro Pump", "Ice Beam", "Shell Smash"],
          abilities: ["Torrent"],
          teraTypes: ["Ground", "Steel", "Water"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Hydro Pump", "Ice Beam", "Shell Smash", "Tera Blast"],
          abilities: ["Torrent"],
          teraTypes: ["Electric", "Grass"]
        }
      ]
    },
    arbok: {
      level: 87,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Earthquake", "Glare", "Gunk Shot", "Knock Off", "Sucker Punch", "Toxic Spikes"],
          abilities: ["Intimidate"],
          teraTypes: ["Dark", "Ground"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Coil", "Earthquake", "Gunk Shot", "Trailblaze"],
          abilities: ["Intimidate"],
          teraTypes: ["Grass", "Ground"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Coil", "Earthquake", "Gunk Shot", "Sucker Punch"],
          abilities: ["Intimidate"],
          teraTypes: ["Dark", "Ground"]
        }
      ]
    },
    pikachu: {
      level: 93,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Fake Out", "Knock Off", "Play Rough", "Surf", "Volt Switch", "Volt Tackle"],
          abilities: ["Lightning Rod"],
          teraTypes: ["Water"]
        }
      ]
    },
    raichu: {
      level: 88,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Alluring Voice", "Encore", "Focus Blast", "Grass Knot", "Knock Off", "Nasty Plot", "Nuzzle", "Surf", "Thunderbolt", "Volt Switch"],
          abilities: ["Lightning Rod"],
          teraTypes: ["Grass", "Water"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Encore", "Focus Blast", "Nasty Plot", "Surf", "Tera Blast", "Thunderbolt"],
          abilities: ["Lightning Rod"],
          teraTypes: ["Ice"]
        }
      ]
    },
    raichualola: {
      level: 87,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Alluring Voice", "Focus Blast", "Grass Knot", "Psychic", "Psyshock", "Surf", "Thunderbolt", "Volt Switch"],
          abilities: ["Surge Surfer"],
          teraTypes: ["Fairy", "Fighting", "Grass", "Water"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Alluring Voice", "Focus Blast", "Grass Knot", "Nasty Plot", "Psyshock", "Surf", "Thunderbolt"],
          abilities: ["Surge Surfer"],
          teraTypes: ["Fairy", "Fighting", "Grass", "Water"]
        }
      ]
    },
    sandslash: {
      level: 88,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Knock Off", "Rapid Spin", "Spikes", "Stone Edge", "Swords Dance"],
          abilities: ["Sand Rush"],
          teraTypes: ["Dragon", "Steel", "Water"]
        }
      ]
    },
    sandslashalola: {
      level: 88,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Iron Head", "Knock Off", "Rapid Spin", "Spikes", "Triple Axel"],
          abilities: ["Slush Rush"],
          teraTypes: ["Flying", "Water"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Earthquake", "Ice Shard", "Knock Off", "Rapid Spin", "Swords Dance", "Triple Axel"],
          abilities: ["Slush Rush"],
          teraTypes: ["Ground"]
        }
      ]
    },
    clefable: {
      level: 83,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Flamethrower", "Knock Off", "Moonblast", "Moonlight", "Stealth Rock", "Thunder Wave"],
          abilities: ["Magic Guard", "Unaware"],
          teraTypes: ["Poison", "Steel"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Fire Blast", "Moonblast", "Moonlight"],
          abilities: ["Magic Guard", "Unaware"],
          teraTypes: ["Fire", "Steel"]
        }
      ]
    },
    ninetales: {
      level: 85,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Fire Blast", "Nasty Plot", "Scorching Sands", "Solar Beam"],
          abilities: ["Drought"],
          teraTypes: ["Fire", "Grass"]
        }
      ]
    },
    ninetalesalola: {
      level: 78,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Aurora Veil", "Blizzard", "Encore", "Moonblast", "Nasty Plot"],
          abilities: ["Snow Warning"],
          teraTypes: ["Steel", "Water"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Aurora Veil", "Blizzard", "Freeze-Dry", "Moonblast", "Nasty Plot"],
          abilities: ["Snow Warning"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    wigglytuff: {
      level: 96,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Alluring Voice", "Dazzling Gleam", "Fire Blast", "Knock Off", "Protect", "Thunder Wave", "Wish"],
          abilities: ["Competitive"],
          teraTypes: ["Poison", "Steel"]
        }
      ]
    },
    vileplume: {
      level: 86,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Giga Drain", "Leech Seed", "Sleep Powder", "Sludge Bomb", "Strength Sap"],
          abilities: ["Effect Spore"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    venomoth: {
      level: 84,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Bug Buzz", "Quiver Dance", "Sleep Powder", "Sludge Wave"],
          abilities: ["Tinted Lens"],
          teraTypes: ["Bug", "Poison", "Steel", "Water"]
        }
      ]
    },
    dugtrio: {
      level: 84,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Earthquake", "Stone Edge", "Sucker Punch", "Swords Dance"],
          abilities: ["Arena Trap"],
          teraTypes: ["Dark", "Fairy", "Flying", "Ghost", "Ground"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Earthquake", "Stone Edge", "Sucker Punch", "Throat Chop"],
          abilities: ["Arena Trap"],
          teraTypes: ["Dark", "Fairy", "Flying", "Ghost", "Ground"]
        }
      ]
    },
    dugtrioalola: {
      level: 84,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Earthquake", "Iron Head", "Stealth Rock", "Stone Edge", "Sucker Punch", "Swords Dance"],
          abilities: ["Sand Force", "Tangling Hair"],
          teraTypes: ["Ground", "Steel"]
        }
      ]
    },
    persian: {
      level: 92,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Double-Edge", "Gunk Shot", "Knock Off", "Switcheroo", "U-turn"],
          abilities: ["Limber"],
          teraTypes: ["Normal", "Poison"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Double-Edge", "Fake Out", "Knock Off", "U-turn"],
          abilities: ["Technician"],
          teraTypes: ["Normal"]
        }
      ]
    },
    persianalola: {
      level: 86,
      sets: [
        {
          role: "Fast Bulky Setup",
          movepool: ["Dark Pulse", "Hypnosis", "Nasty Plot", "Power Gem", "Thunderbolt"],
          abilities: ["Fur Coat"],
          teraTypes: ["Dark", "Electric"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Dark Pulse", "Nasty Plot", "Tera Blast", "Thunderbolt"],
          abilities: ["Fur Coat"],
          teraTypes: ["Fairy", "Poison"]
        }
      ]
    },
    golduck: {
      level: 90,
      sets: [
        {
          role: "Fast Bulky Setup",
          movepool: ["Encore", "Grass Knot", "Hydro Pump", "Ice Beam", "Nasty Plot", "Psyshock"],
          abilities: ["Cloud Nine", "Swift Swim"],
          teraTypes: ["Water"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Flip Turn", "Grass Knot", "Hydro Pump", "Ice Beam", "Nasty Plot"],
          abilities: ["Cloud Nine", "Swift Swim"],
          teraTypes: ["Grass", "Water"]
        }
      ]
    },
    annihilape: {
      level: 76,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "Drain Punch", "Gunk Shot", "Rage Fist", "Rest", "Taunt"],
          abilities: ["Defiant"],
          teraTypes: ["Fairy", "Ghost", "Steel", "Water"]
        }
      ]
    },
    arcanine: {
      level: 84,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Close Combat", "Extreme Speed", "Flare Blitz", "Morning Sun", "Roar", "Wild Charge", "Will-O-Wisp"],
          abilities: ["Intimidate"],
          teraTypes: ["Fighting", "Normal"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Close Combat", "Extreme Speed", "Flare Blitz", "Morning Sun", "Wild Charge"],
          abilities: ["Intimidate"],
          teraTypes: ["Fighting", "Normal"]
        }
      ]
    },
    arcaninehisui: {
      level: 82,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Close Combat", "Extreme Speed", "Flare Blitz", "Head Smash", "Wild Charge"],
          abilities: ["Rock Head"],
          teraTypes: ["Fire", "Normal", "Rock"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Extreme Speed", "Flare Blitz", "Head Smash", "Morning Sun"],
          abilities: ["Rock Head"],
          teraTypes: ["Fire", "Grass", "Normal", "Rock"]
        }
      ]
    },
    poliwrath: {
      level: 88,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Close Combat", "Knock Off", "Liquidation", "Rain Dance"],
          abilities: ["Swift Swim"],
          teraTypes: ["Dark", "Fighting", "Water"]
        },
        {
          role: "AV Pivot",
          movepool: ["Circle Throw", "Close Combat", "Knock Off", "Liquidation"],
          abilities: ["Water Absorb"],
          teraTypes: ["Dark", "Fighting", "Steel"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "Drain Punch", "Ice Punch", "Knock Off", "Liquidation", "Poison Jab"],
          abilities: ["Water Absorb"],
          teraTypes: ["Fighting", "Steel", "Water"]
        }
      ]
    },
    victreebel: {
      level: 90,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Poison Jab", "Power Whip", "Sucker Punch", "Swords Dance"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Dark", "Grass"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Knock Off", "Power Whip", "Sleep Powder", "Sludge Wave", "Strength Sap", "Sucker Punch"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Grass", "Steel"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Power Whip", "Sludge Wave", "Sunny Day", "Weather Ball"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Fire"]
        }
      ]
    },
    tentacruel: {
      level: 84,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Flip Turn", "Haze", "Knock Off", "Rapid Spin", "Sludge Bomb", "Surf", "Toxic", "Toxic Spikes"],
          abilities: ["Liquid Ooze"],
          teraTypes: ["Flying", "Grass"]
        }
      ]
    },
    golem: {
      level: 87,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Earthquake", "Explosion", "Rock Polish", "Stealth Rock", "Stone Edge"],
          abilities: ["Sturdy"],
          teraTypes: ["Grass", "Ground", "Steel"]
        }
      ]
    },
    golemalola: {
      level: 93,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Double-Edge", "Earthquake", "Rock Polish", "Stone Edge"],
          abilities: ["Galvanize"],
          teraTypes: ["Flying", "Grass"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Double-Edge", "Earthquake", "Explosion", "Stone Edge"],
          abilities: ["Galvanize"],
          teraTypes: ["Electric", "Grass", "Ground"]
        }
      ]
    },
    slowbro: {
      level: 85,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Calm Mind", "Psychic Noise", "Psyshock", "Scald", "Slack Off", "Thunder Wave"],
          abilities: ["Regenerator"],
          teraTypes: ["Fairy", "Water"]
        },
        {
          role: "AV Pivot",
          movepool: ["Body Press", "Fire Blast", "Future Sight", "Ice Beam", "Psychic Noise", "Scald"],
          abilities: ["Regenerator"],
          teraTypes: ["Fairy", "Fighting"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Body Press", "Iron Defense", "Scald", "Slack Off"],
          abilities: ["Regenerator"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    slowbrogalar: {
      level: 87,
      sets: [
        {
          role: "AV Pivot",
          movepool: ["Earthquake", "Fire Blast", "Foul Play", "Psychic", "Shell Side Arm", "Surf"],
          abilities: ["Regenerator"],
          teraTypes: ["Dark", "Ground", "Poison", "Water"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Fire Blast", "Psychic", "Shell Side Arm", "Trick Room"],
          abilities: ["Regenerator"],
          teraTypes: ["Poison", "Psychic"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Earthquake", "Fire Blast", "Psychic", "Shell Side Arm", "Slack Off", "Thunder Wave"],
          abilities: ["Regenerator"],
          teraTypes: ["Dark", "Ground", "Poison"]
        }
      ]
    },
    dodrio: {
      level: 86,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Brave Bird", "Double-Edge", "Drill Run", "Knock Off", "Swords Dance"],
          abilities: ["Early Bird"],
          teraTypes: ["Flying", "Ground", "Normal"]
        }
      ]
    },
    dewgong: {
      level: 94,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Encore", "Flip Turn", "Knock Off", "Surf", "Triple Axel"],
          abilities: ["Thick Fat"],
          teraTypes: ["Dragon", "Grass", "Ground", "Poison", "Steel"]
        },
        {
          role: "Bulky Support",
          movepool: ["Encore", "Flip Turn", "Hydro Pump", "Ice Beam", "Knock Off", "Surf"],
          abilities: ["Thick Fat"],
          teraTypes: ["Dragon", "Grass", "Ground", "Poison", "Steel"]
        }
      ]
    },
    muk: {
      level: 86,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Drain Punch", "Gunk Shot", "Haze", "Ice Punch", "Knock Off", "Poison Jab", "Shadow Sneak", "Toxic Spikes"],
          abilities: ["Poison Touch"],
          teraTypes: ["Dark"]
        },
        {
          role: "AV Pivot",
          movepool: ["Drain Punch", "Gunk Shot", "Ice Punch", "Knock Off", "Poison Jab", "Shadow Sneak"],
          abilities: ["Poison Touch"],
          teraTypes: ["Dark"]
        }
      ]
    },
    mukalola: {
      level: 82,
      sets: [
        {
          role: "AV Pivot",
          movepool: ["Drain Punch", "Gunk Shot", "Ice Punch", "Knock Off", "Poison Jab", "Shadow Sneak"],
          abilities: ["Poison Touch"],
          teraTypes: ["Dark"]
        }
      ]
    },
    cloyster: {
      level: 79,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Drill Run", "Icicle Spear", "Rock Blast", "Shell Smash"],
          abilities: ["Skill Link"],
          teraTypes: ["Ground"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Hydro Pump", "Icicle Spear", "Rock Blast", "Shell Smash"],
          abilities: ["Skill Link"],
          teraTypes: ["Ice", "Rock"]
        }
      ]
    },
    gengar: {
      level: 81,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Focus Blast", "Nasty Plot", "Shadow Ball", "Sludge Wave", "Trick"],
          abilities: ["Cursed Body"],
          teraTypes: ["Dark", "Fighting", "Ghost"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Encore", "Focus Blast", "Shadow Ball", "Sludge Wave", "Toxic Spikes", "Will-O-Wisp"],
          abilities: ["Cursed Body"],
          teraTypes: ["Dark", "Fighting", "Ghost"]
        }
      ]
    },
    hypno: {
      level: 95,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Encore", "Knock Off", "Psychic Noise", "Thunder Wave", "Toxic"],
          abilities: ["Insomnia"],
          teraTypes: ["Dark", "Fairy", "Steel"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Focus Blast", "Protect", "Psychic Noise", "Toxic"],
          abilities: ["Insomnia"],
          teraTypes: ["Dark", "Fighting", "Steel"]
        }
      ]
    },
    electrode: {
      level: 92,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Explosion", "Foul Play", "Taunt", "Thunder Wave", "Thunderbolt", "Volt Switch"],
          abilities: ["Aftermath", "Soundproof", "Static"],
          teraTypes: ["Dark", "Electric"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Taunt", "Tera Blast", "Thunderbolt", "Volt Switch"],
          abilities: ["Aftermath", "Soundproof", "Static"],
          teraTypes: ["Ice"]
        }
      ]
    },
    electrodehisui: {
      level: 87,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Giga Drain", "Leaf Storm", "Taunt", "Thunder Wave", "Thunderbolt", "Volt Switch"],
          abilities: ["Aftermath", "Soundproof", "Static"],
          teraTypes: ["Electric", "Grass"]
        },
        {
          role: "Fast Support",
          movepool: ["Giga Drain", "Leech Seed", "Substitute", "Thunderbolt"],
          abilities: ["Soundproof"],
          teraTypes: ["Poison"]
        }
      ]
    },
    exeggutor: {
      level: 89,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Leech Seed", "Psychic", "Psychic Noise", "Sleep Powder", "Sludge Bomb", "Substitute"],
          abilities: ["Harvest"],
          teraTypes: ["Steel"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Leech Seed", "Protect", "Psychic Noise", "Substitute"],
          abilities: ["Harvest"],
          teraTypes: ["Steel"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Giga Drain", "Psychic", "Psyshock", "Substitute"],
          abilities: ["Harvest"],
          teraTypes: ["Steel"]
        }
      ]
    },
    exeggutoralola: {
      level: 89,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Draco Meteor", "Flamethrower", "Giga Drain", "Leaf Storm"],
          abilities: ["Frisk"],
          teraTypes: ["Fire"]
        },
        {
          role: "AV Pivot",
          movepool: ["Draco Meteor", "Dragon Tail", "Flamethrower", "Giga Drain", "Knock Off"],
          abilities: ["Frisk"],
          teraTypes: ["Fire"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Dragon Pulse", "Flamethrower", "Giga Drain"],
          abilities: ["Harvest"],
          teraTypes: ["Fire", "Steel"]
        }
      ]
    },
    hitmonlee: {
      level: 85,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["High Jump Kick", "Knock Off", "Mach Punch", "Poison Jab", "Stone Edge"],
          abilities: ["Reckless"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Close Combat", "Knock Off", "Poison Jab", "Stone Edge", "Swords Dance"],
          abilities: ["Unburden"],
          teraTypes: ["Dark", "Fighting", "Poison"]
        }
      ]
    },
    hitmonchan: {
      level: 87,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Close Combat", "Drain Punch", "Ice Punch", "Knock Off", "Mach Punch", "Rapid Spin", "Swords Dance"],
          abilities: ["Inner Focus", "Iron Fist"],
          teraTypes: ["Dark", "Fighting"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "Drain Punch", "Knock Off", "Poison Jab", "Rapid Spin"],
          abilities: ["Iron Fist"],
          teraTypes: ["Dark", "Poison", "Steel"]
        }
      ]
    },
    weezing: {
      level: 88,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Fire Blast", "Gunk Shot", "Pain Split", "Sludge Bomb", "Toxic Spikes", "Will-O-Wisp"],
          abilities: ["Levitate"],
          teraTypes: ["Steel"]
        }
      ]
    },
    weezinggalar: {
      level: 86,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Defog", "Fire Blast", "Gunk Shot", "Pain Split", "Strange Steam", "Will-O-Wisp"],
          abilities: ["Levitate"],
          teraTypes: ["Steel"]
        }
      ]
    },
    rhydon: {
      level: 85,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Earthquake", "Megahorn", "Stealth Rock", "Stone Edge", "Swords Dance"],
          abilities: ["Lightning Rod"],
          teraTypes: ["Dragon", "Fairy", "Flying", "Grass", "Water"]
        }
      ]
    },
    scyther: {
      level: 82,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Bug Bite", "Close Combat", "Dual Wingbeat", "Swords Dance"],
          abilities: ["Technician"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Fast Support",
          movepool: ["Close Combat", "Defog", "Dual Wingbeat", "U-turn"],
          abilities: ["Technician"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    tauros: {
      level: 82,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Body Slam", "Close Combat", "Earthquake", "Throat Chop"],
          abilities: ["Sheer Force"],
          teraTypes: ["Fighting", "Ground", "Normal"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Body Slam", "Close Combat", "Throat Chop", "Zen Headbutt"],
          abilities: ["Sheer Force"],
          teraTypes: ["Fighting", "Normal", "Psychic"]
        }
      ]
    },
    taurospaldeacombat: {
      level: 83,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Bulk Up", "Close Combat", "Earthquake", "Iron Head", "Stone Edge", "Throat Chop"],
          abilities: ["Intimidate"],
          teraTypes: ["Dark", "Fighting", "Steel"]
        }
      ]
    },
    taurospaldeablaze: {
      level: 81,
      sets: [
        {
          role: "Fast Bulky Setup",
          movepool: ["Bulk Up", "Close Combat", "Raging Bull", "Substitute"],
          abilities: ["Cud Chew"],
          teraTypes: ["Water"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Close Combat", "Flare Blitz", "Stone Edge", "Wild Charge"],
          abilities: ["Intimidate"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    taurospaldeaaqua: {
      level: 81,
      sets: [
        {
          role: "Fast Bulky Setup",
          movepool: ["Bulk Up", "Close Combat", "Liquidation", "Substitute"],
          abilities: ["Cud Chew"],
          teraTypes: ["Steel", "Water"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Aqua Jet", "Close Combat", "Stone Edge", "Wave Crash"],
          abilities: ["Intimidate"],
          teraTypes: ["Water"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Aqua Jet", "Bulk Up", "Close Combat", "Liquidation"],
          abilities: ["Intimidate"],
          teraTypes: ["Water"]
        }
      ]
    },
    gyarados: {
      level: 79,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Dance", "Earthquake", "Stone Edge", "Temper Flare", "Waterfall"],
          abilities: ["Intimidate", "Moxie"],
          teraTypes: ["Ground"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Dragon Dance", "Earthquake", "Tera Blast", "Waterfall"],
          abilities: ["Intimidate", "Moxie"],
          teraTypes: ["Flying"]
        }
      ]
    },
    lapras: {
      level: 87,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Freeze-Dry", "Hydro Pump", "Ice Beam", "Sparkling Aria"],
          abilities: ["Water Absorb"],
          teraTypes: ["Ice", "Water"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Freeze-Dry", "Rest", "Sleep Talk", "Sparkling Aria"],
          abilities: ["Water Absorb"],
          teraTypes: ["Dragon", "Ghost", "Ground", "Poison", "Steel"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Dance", "Earthquake", "Icicle Spear", "Waterfall"],
          abilities: ["Water Absorb"],
          teraTypes: ["Ground"]
        }
      ]
    },
    ditto: {
      level: 87,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Transform"],
          abilities: ["Imposter"],
          teraTypes: ["Bug", "Dark", "Dragon", "Electric", "Fairy", "Fighting", "Fire", "Flying", "Ghost", "Grass", "Ground", "Ice", "Normal", "Poison", "Psychic", "Rock", "Steel", "Water"]
        }
      ]
    },
    vaporeon: {
      level: 86,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Flip Turn", "Ice Beam", "Protect", "Scald", "Wish"],
          abilities: ["Water Absorb"],
          teraTypes: ["Ghost", "Ground", "Poison"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Protect", "Scald", "Wish"],
          abilities: ["Water Absorb"],
          teraTypes: ["Ghost", "Ground", "Poison"]
        }
      ]
    },
    jolteon: {
      level: 84,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Alluring Voice", "Calm Mind", "Shadow Ball", "Thunderbolt", "Volt Switch"],
          abilities: ["Volt Absorb"],
          teraTypes: ["Electric", "Fairy"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Calm Mind", "Substitute", "Tera Blast", "Thunderbolt"],
          abilities: ["Volt Absorb"],
          teraTypes: ["Ice"]
        }
      ]
    },
    flareon: {
      level: 90,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Facade", "Flare Blitz", "Quick Attack", "Trailblaze", "Will-O-Wisp"],
          abilities: ["Guts"],
          teraTypes: ["Normal"]
        }
      ]
    },
    snorlax: {
      level: 82,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Body Slam", "Curse", "Rest", "Sleep Talk"],
          abilities: ["Thick Fat"],
          teraTypes: ["Fairy", "Poison"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Body Slam", "Crunch", "Curse", "Earthquake", "Rest"],
          abilities: ["Thick Fat"],
          teraTypes: ["Ground", "Poison"]
        }
      ]
    },
    articuno: {
      level: 86,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Brave Bird", "Freeze-Dry", "Haze", "Roost", "Substitute", "U-turn"],
          abilities: ["Pressure"],
          teraTypes: ["Ground", "Steel"]
        }
      ]
    },
    articunogalar: {
      level: 84,
      sets: [
        {
          role: "Fast Bulky Setup",
          movepool: ["Calm Mind", "Freezing Glare", "Hurricane", "Recover"],
          abilities: ["Competitive"],
          teraTypes: ["Steel"]
        }
      ]
    },
    zapdos: {
      level: 78,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Discharge", "Heat Wave", "Hurricane", "Roost", "Thunderbolt", "U-turn"],
          abilities: ["Static"],
          teraTypes: ["Electric", "Steel"]
        }
      ]
    },
    zapdosgalar: {
      level: 77,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Brave Bird", "Bulk Up", "Close Combat", "Knock Off", "U-turn"],
          abilities: ["Defiant"],
          teraTypes: ["Dark", "Fighting", "Steel"]
        }
      ]
    },
    moltres: {
      level: 81,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Brave Bird", "Fire Blast", "Roost", "Scorching Sands", "U-turn", "Will-O-Wisp"],
          abilities: ["Flame Body"],
          teraTypes: ["Dragon", "Ground", "Steel"]
        }
      ]
    },
    moltresgalar: {
      level: 79,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Agility", "Fiery Wrath", "Hurricane", "Nasty Plot", "Rest"],
          abilities: ["Berserk"],
          teraTypes: ["Dark", "Steel"]
        }
      ]
    },
    dragonite: {
      level: 74,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Dragon Dance", "Earthquake", "Outrage", "Roost"],
          abilities: ["Multiscale"],
          teraTypes: ["Ground", "Steel"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Dance", "Earthquake", "Iron Head", "Outrage"],
          abilities: ["Multiscale"],
          teraTypes: ["Steel"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Dragon Dance", "Earthquake", "Outrage", "Tera Blast"],
          abilities: ["Multiscale"],
          teraTypes: ["Flying"]
        }
      ]
    },
    mewtwo: {
      level: 72,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Aura Sphere", "Dark Pulse", "Fire Blast", "Nasty Plot", "Psystrike", "Recover"],
          abilities: ["Unnerve"],
          teraTypes: ["Dark", "Fighting", "Fire", "Psychic"]
        }
      ]
    },
    mew: {
      level: 82,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Encore", "Knock Off", "Psychic", "Psychic Noise", "Stealth Rock", "Toxic Spikes", "U-turn", "Will-O-Wisp"],
          abilities: ["Synchronize"],
          teraTypes: ["Dark", "Fairy", "Steel"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Close Combat", "Knock Off", "Leech Life", "Psychic Fangs", "Swords Dance"],
          abilities: ["Synchronize"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Aura Sphere", "Bug Buzz", "Dark Pulse", "Earth Power", "Fire Blast", "Hydro Pump", "Nasty Plot", "Psychic", "Psyshock"],
          abilities: ["Synchronize"],
          teraTypes: ["Dark", "Fighting", "Fire", "Ground", "Psychic", "Water"]
        }
      ]
    },
    meganium: {
      level: 90,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Dragon Tail", "Encore", "Energy Ball", "Knock Off", "Leech Seed", "Synthesis"],
          abilities: ["Overgrow"],
          teraTypes: ["Poison", "Steel", "Water"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Earthquake", "Knock Off", "Petal Blizzard", "Swords Dance"],
          abilities: ["Overgrow"],
          teraTypes: ["Ground", "Steel", "Water"]
        }
      ]
    },
    typhlosion: {
      level: 84,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Eruption", "Fire Blast", "Focus Blast", "Scorching Sands"],
          abilities: ["Flash Fire"],
          teraTypes: ["Fire"]
        }
      ]
    },
    typhlosionhisui: {
      level: 83,
      sets: [
        {
          role: "Fast Bulky Setup",
          movepool: ["Calm Mind", "Fire Blast", "Focus Blast", "Shadow Ball", "Substitute", "Will-O-Wisp"],
          abilities: ["Blaze"],
          teraTypes: ["Fighting", "Fire", "Ghost"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Eruption", "Fire Blast", "Focus Blast", "Shadow Ball"],
          abilities: ["Blaze"],
          teraTypes: ["Fire"]
        }
      ]
    },
    feraligatr: {
      level: 79,
      sets: [
        {
          role: "Fast Bulky Setup",
          movepool: ["Crunch", "Dragon Dance", "Ice Punch", "Liquidation"],
          abilities: ["Sheer Force"],
          teraTypes: ["Dark", "Dragon", "Steel", "Water"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Dance", "Ice Punch", "Liquidation", "Trailblaze"],
          abilities: ["Sheer Force"],
          teraTypes: ["Grass", "Water"]
        }
      ]
    },
    furret: {
      level: 93,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Double-Edge", "Knock Off", "Trick", "U-turn"],
          abilities: ["Frisk"],
          teraTypes: ["Ghost", "Normal"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Brick Break", "Double-Edge", "Knock Off", "Tidy Up"],
          abilities: ["Frisk"],
          teraTypes: ["Ghost", "Normal"]
        }
      ]
    },
    noctowl: {
      level: 95,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Calm Mind", "Defog", "Hurricane", "Hyper Voice", "Nasty Plot", "Roost"],
          abilities: ["Tinted Lens"],
          teraTypes: ["Ground", "Normal", "Steel"]
        }
      ]
    },
    ariados: {
      level: 95,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Knock Off", "Megahorn", "Poison Jab", "Sticky Web", "Sucker Punch", "Toxic Spikes"],
          abilities: ["Insomnia", "Swarm"],
          teraTypes: ["Ghost", "Steel"]
        }
      ]
    },
    lanturn: {
      level: 89,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Scald", "Thunder Wave", "Thunderbolt", "Volt Switch"],
          abilities: ["Volt Absorb"],
          teraTypes: ["Flying"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Ice Beam", "Scald", "Thunder Wave", "Thunderbolt", "Volt Switch"],
          abilities: ["Volt Absorb"],
          teraTypes: ["Flying", "Water"]
        }
      ]
    },
    ampharos: {
      level: 88,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Agility", "Dazzling Gleam", "Focus Blast", "Thunderbolt", "Volt Switch"],
          abilities: ["Static"],
          teraTypes: ["Electric", "Fairy"]
        },
        {
          role: "AV Pivot",
          movepool: ["Dazzling Gleam", "Discharge", "Focus Blast", "Thunderbolt", "Volt Switch"],
          abilities: ["Static"],
          teraTypes: ["Fairy"]
        }
      ]
    },
    bellossom: {
      level: 84,
      sets: [
        {
          role: "Fast Bulky Setup",
          movepool: ["Giga Drain", "Quiver Dance", "Sleep Powder", "Strength Sap"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Poison", "Steel", "Water"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Giga Drain", "Moonblast", "Quiver Dance", "Sludge Bomb", "Strength Sap"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Fairy", "Poison"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Giga Drain", "Quiver Dance", "Strength Sap", "Tera Blast"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Fire", "Rock"]
        }
      ]
    },
    azumarill: {
      level: 82,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Aqua Jet", "Ice Spinner", "Knock Off", "Liquidation", "Play Rough", "Superpower"],
          abilities: ["Huge Power"],
          teraTypes: ["Water"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Aqua Jet", "Belly Drum", "Liquidation", "Play Rough"],
          abilities: ["Huge Power"],
          teraTypes: ["Water"]
        },
        {
          role: "AV Pivot",
          movepool: ["Aqua Jet", "Knock Off", "Liquidation", "Play Rough"],
          abilities: ["Huge Power"],
          teraTypes: ["Dragon", "Steel", "Water"]
        }
      ]
    },
    sudowoodo: {
      level: 94,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Earthquake", "Head Smash", "Stealth Rock", "Sucker Punch", "Wood Hammer"],
          abilities: ["Rock Head"],
          teraTypes: ["Grass", "Rock"]
        }
      ]
    },
    politoed: {
      level: 88,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Encore", "Haze", "Hydro Pump", "Hypnosis", "Ice Beam", "Rest", "Surf"],
          abilities: ["Drizzle"],
          teraTypes: ["Steel", "Water"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Focus Blast", "Hydro Pump", "Ice Beam", "Weather Ball"],
          abilities: ["Drizzle"],
          teraTypes: ["Water"]
        }
      ]
    },
    jumpluff: {
      level: 87,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Acrobatics", "Leech Seed", "Strength Sap", "Substitute"],
          abilities: ["Infiltrator"],
          teraTypes: ["Steel"]
        },
        {
          role: "Fast Support",
          movepool: ["Acrobatics", "Encore", "Sleep Powder", "Strength Sap", "U-turn"],
          abilities: ["Infiltrator"],
          teraTypes: ["Steel"]
        }
      ]
    },
    sunflora: {
      level: 100,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Dazzling Gleam", "Earth Power", "Leaf Storm", "Sludge Bomb"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Fairy", "Grass", "Ground", "Poison"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Earth Power", "Solar Beam", "Sunny Day", "Weather Ball"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Fire"]
        }
      ]
    },
    quagsire: {
      level: 84,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Ice Beam", "Recover", "Spikes", "Toxic"],
          abilities: ["Unaware"],
          teraTypes: ["Fairy", "Poison", "Steel"]
        }
      ]
    },
    clodsire: {
      level: 81,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Curse", "Earthquake", "Gunk Shot", "Poison Jab", "Recover", "Stealth Rock", "Toxic", "Toxic Spikes"],
          abilities: ["Unaware", "Water Absorb"],
          teraTypes: ["Flying", "Steel"]
        }
      ]
    },
    espeon: {
      level: 84,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Alluring Voice", "Calm Mind", "Morning Sun", "Psychic", "Psyshock", "Shadow Ball", "Trick"],
          abilities: ["Magic Bounce"],
          teraTypes: ["Fairy", "Psychic"]
        }
      ]
    },
    umbreon: {
      level: 84,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Foul Play", "Protect", "Toxic", "Wish"],
          abilities: ["Synchronize"],
          teraTypes: ["Poison"]
        }
      ]
    },
    slowking: {
      level: 88,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Chilly Reception", "Psychic Noise", "Psyshock", "Scald", "Slack Off", "Thunder Wave"],
          abilities: ["Regenerator"],
          teraTypes: ["Dragon", "Fairy"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Fire Blast", "Hydro Pump", "Ice Beam", "Psychic", "Psyshock", "Trick Room"],
          abilities: ["Regenerator"],
          teraTypes: ["Psychic", "Water"]
        },
        {
          role: "Fast Support",
          movepool: ["Chilly Reception", "Future Sight", "Scald", "Slack Off"],
          abilities: ["Regenerator"],
          teraTypes: ["Dragon", "Fairy"]
        }
      ]
    },
    slowkinggalar: {
      level: 85,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Chilly Reception", "Fire Blast", "Psychic Noise", "Psyshock", "Slack Off", "Sludge Bomb", "Thunder Wave", "Toxic Spikes"],
          abilities: ["Regenerator"],
          teraTypes: ["Dark", "Poison"]
        },
        {
          role: "AV Pivot",
          movepool: ["Fire Blast", "Future Sight", "Ice Beam", "Psychic Noise", "Sludge Bomb"],
          abilities: ["Regenerator"],
          teraTypes: ["Poison", "Psychic"]
        }
      ]
    },
    misdreavus: {
      level: 90,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Draining Kiss", "Shadow Ball", "Will-O-Wisp"],
          abilities: ["Levitate"],
          teraTypes: ["Fairy"]
        }
      ]
    },
    girafarig: {
      level: 89,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Dazzling Gleam", "Nasty Plot", "Psychic", "Psyshock", "Shadow Ball", "Thunderbolt"],
          abilities: ["Sap Sipper"],
          teraTypes: ["Electric", "Fairy", "Psychic"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Hyper Voice", "Nasty Plot", "Psyshock", "Thunderbolt"],
          abilities: ["Sap Sipper"],
          teraTypes: ["Electric", "Normal"]
        }
      ]
    },
    forretress: {
      level: 84,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Iron Head", "Rapid Spin", "Stealth Rock", "Toxic Spikes", "Volt Switch"],
          abilities: ["Sturdy"],
          teraTypes: ["Water"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Body Press", "Iron Head", "Rapid Spin", "Spikes", "Stealth Rock"],
          abilities: ["Sturdy"],
          teraTypes: ["Fighting", "Water"]
        }
      ]
    },
    dunsparce: {
      level: 86,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Body Slam", "Coil", "Earthquake", "Roost"],
          abilities: ["Serene Grace"],
          teraTypes: ["Ghost", "Ground"]
        }
      ]
    },
    granbull: {
      level: 88,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Earthquake", "Encore", "Play Rough", "Thunder Wave"],
          abilities: ["Intimidate"],
          teraTypes: ["Ground"]
        },
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Play Rough", "Roar", "Thunder Wave"],
          abilities: ["Intimidate"],
          teraTypes: ["Ground"]
        }
      ]
    },
    qwilfish: {
      level: 86,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Destiny Bond", "Gunk Shot", "Spikes", "Taunt", "Thunder Wave", "Toxic Spikes", "Waterfall"],
          abilities: ["Intimidate"],
          teraTypes: ["Dark", "Grass"]
        },
        {
          role: "Fast Support",
          movepool: ["Flip Turn", "Gunk Shot", "Pain Split", "Thunder Wave", "Toxic", "Toxic Spikes"],
          abilities: ["Intimidate"],
          teraTypes: ["Dark", "Grass"]
        }
      ]
    },
    qwilfishhisui: {
      level: 83,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Crunch", "Gunk Shot", "Spikes", "Taunt", "Toxic Spikes"],
          abilities: ["Intimidate"],
          teraTypes: ["Flying", "Poison"]
        }
      ]
    },
    overqwil: {
      level: 82,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Aqua Jet", "Crunch", "Gunk Shot", "Liquidation", "Swords Dance"],
          abilities: ["Intimidate"],
          teraTypes: ["Water"]
        }
      ]
    },
    scizor: {
      level: 79,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Bullet Punch", "Close Combat", "Defog", "Knock Off", "U-turn"],
          abilities: ["Technician"],
          teraTypes: ["Dragon", "Steel"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Bug Bite", "Bullet Punch", "Close Combat", "Knock Off", "Swords Dance"],
          abilities: ["Technician"],
          teraTypes: ["Steel"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Bullet Punch", "Close Combat", "Knock Off", "U-turn"],
          abilities: ["Technician"],
          teraTypes: ["Steel"]
        }
      ]
    },
    heracross: {
      level: 80,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Close Combat", "Facade", "Knock Off", "Trailblaze"],
          abilities: ["Guts"],
          teraTypes: ["Normal"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Close Combat", "Earthquake", "Knock Off", "Megahorn", "Stone Edge"],
          abilities: ["Moxie"],
          teraTypes: ["Bug", "Fighting", "Rock"]
        }
      ]
    },
    ursaring: {
      level: 84,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Body Slam", "Earthquake", "Rest", "Sleep Talk", "Throat Chop"],
          abilities: ["Guts"],
          teraTypes: ["Ghost", "Ground"]
        }
      ]
    },
    magcargo: {
      level: 95,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Earth Power", "Fire Blast", "Power Gem", "Shell Smash"],
          abilities: ["Weak Armor"],
          teraTypes: ["Dragon", "Grass"]
        },
        {
          role: "Bulky Support",
          movepool: ["Lava Plume", "Power Gem", "Recover", "Stealth Rock", "Yawn"],
          abilities: ["Flame Body"],
          teraTypes: ["Dragon", "Grass"]
        }
      ]
    },
    delibird: {
      level: 100,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Brave Bird", "Drill Run", "Ice Shard", "Ice Spinner", "Spikes"],
          abilities: ["Hustle"],
          teraTypes: ["Flying", "Ground", "Ice"]
        },
        {
          role: "Fast Support",
          movepool: ["Brave Bird", "Freeze-Dry", "Rapid Spin", "Spikes"],
          abilities: ["Insomnia", "Vital Spirit"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    skarmory: {
      level: 80,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Body Press", "Brave Bird", "Iron Defense", "Roost"],
          abilities: ["Sturdy"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Body Press", "Brave Bird", "Roost", "Spikes", "Stealth Rock"],
          abilities: ["Sturdy"],
          teraTypes: ["Dragon", "Fighting"]
        },
        {
          role: "Bulky Support",
          movepool: ["Brave Bird", "Roost", "Spikes", "Stealth Rock", "Whirlwind"],
          abilities: ["Sturdy"],
          teraTypes: ["Dragon"]
        }
      ]
    },
    houndoom: {
      level: 87,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Dark Pulse", "Fire Blast", "Nasty Plot", "Sludge Bomb", "Sucker Punch"],
          abilities: ["Flash Fire"],
          teraTypes: ["Dark", "Fire", "Poison"]
        }
      ]
    },
    kingdra: {
      level: 84,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Draco Meteor", "Hurricane", "Rain Dance", "Wave Crash"],
          abilities: ["Swift Swim"],
          teraTypes: ["Water"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Dance", "Outrage", "Waterfall", "Wave Crash"],
          abilities: ["Sniper", "Swift Swim"],
          teraTypes: ["Water"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Dragon Dance", "Iron Head", "Outrage", "Wave Crash"],
          abilities: ["Sniper", "Swift Swim"],
          teraTypes: ["Steel"]
        }
      ]
    },
    donphan: {
      level: 84,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Ice Shard", "Ice Spinner", "Knock Off", "Rapid Spin", "Stealth Rock"],
          abilities: ["Sturdy"],
          teraTypes: ["Ghost", "Grass"]
        }
      ]
    },
    porygon2: {
      level: 82,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Discharge", "Ice Beam", "Recover", "Tri Attack"],
          abilities: ["Download"],
          teraTypes: ["Electric", "Ghost", "Poison"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Recover", "Shadow Ball", "Tera Blast", "Thunder Wave"],
          abilities: ["Download"],
          teraTypes: ["Fairy", "Fighting"]
        }
      ]
    },
    smeargle: {
      level: 95,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Ceaseless Edge", "Spore", "Stealth Rock", "Sticky Web", "Whirlwind"],
          abilities: ["Own Tempo"],
          teraTypes: ["Ghost"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Population Bomb", "Power Trip", "Shell Smash", "Spore"],
          abilities: ["Technician"],
          teraTypes: ["Normal"]
        }
      ]
    },
    hitmontop: {
      level: 88,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Close Combat", "Earthquake", "Rapid Spin", "Stone Edge", "Sucker Punch"],
          abilities: ["Intimidate"],
          teraTypes: ["Steel"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "Close Combat", "Rapid Spin", "Triple Axel"],
          abilities: ["Technician"],
          teraTypes: ["Ice"]
        }
      ]
    },
    chansey: {
      level: 85,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Heal Bell", "Seismic Toss", "Soft-Boiled", "Stealth Rock", "Thunder Wave"],
          abilities: ["Natural Cure"],
          teraTypes: ["Fairy", "Ghost", "Poison", "Steel"]
        }
      ]
    },
    blissey: {
      level: 84,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Heal Bell", "Seismic Toss", "Soft-Boiled", "Stealth Rock", "Thunder Wave"],
          abilities: ["Natural Cure"],
          teraTypes: ["Fairy", "Ghost", "Poison", "Steel"]
        }
      ]
    },
    raikou: {
      level: 81,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Scald", "Substitute", "Thunderbolt"],
          abilities: ["Pressure"],
          teraTypes: ["Water"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Calm Mind", "Scald", "Shadow Ball", "Thunderbolt", "Volt Switch"],
          abilities: ["Pressure"],
          teraTypes: ["Electric", "Water"]
        }
      ]
    },
    entei: {
      level: 78,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Extreme Speed", "Flare Blitz", "Sacred Fire", "Stomping Tantrum"],
          abilities: ["Inner Focus"],
          teraTypes: ["Fire", "Normal"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Extreme Speed", "Flare Blitz", "Sacred Fire", "Stone Edge"],
          abilities: ["Inner Focus"],
          teraTypes: ["Fire", "Normal"]
        }
      ]
    },
    suicune: {
      level: 82,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Calm Mind", "Rest", "Scald", "Sleep Talk"],
          abilities: ["Pressure"],
          teraTypes: ["Dragon", "Steel"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Ice Beam", "Rest", "Scald", "Substitute"],
          abilities: ["Pressure"],
          teraTypes: ["Dragon", "Steel"]
        },
        {
          role: "Fast Support",
          movepool: ["Calm Mind", "Protect", "Scald", "Substitute"],
          abilities: ["Pressure"],
          teraTypes: ["Steel"]
        }
      ]
    },
    tyranitar: {
      level: 79,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Dragon Dance", "Earthquake", "Ice Punch", "Knock Off", "Stone Edge"],
          abilities: ["Sand Stream"],
          teraTypes: ["Ghost", "Rock"]
        },
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Fire Blast", "Ice Beam", "Knock Off", "Stealth Rock", "Stone Edge", "Thunder Wave"],
          abilities: ["Sand Stream"],
          teraTypes: ["Ghost", "Rock"]
        }
      ]
    },
    lugia: {
      level: 72,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Aeroblast", "Calm Mind", "Earth Power", "Recover"],
          abilities: ["Multiscale"],
          teraTypes: ["Ground", "Steel"]
        }
      ]
    },
    hooh: {
      level: 71,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Brave Bird", "Earthquake", "Recover", "Sacred Fire"],
          abilities: ["Regenerator"],
          teraTypes: ["Ground", "Steel"]
        }
      ]
    },
    sceptile: {
      level: 87,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Earthquake", "Focus Blast", "Giga Drain", "Leaf Storm", "Rock Slide", "Shed Tail"],
          abilities: ["Overgrow"],
          teraTypes: ["Grass", "Ground", "Steel"]
        },
        {
          role: "Fast Support",
          movepool: ["Focus Blast", "Giga Drain", "Leech Seed", "Substitute"],
          abilities: ["Overgrow"],
          teraTypes: ["Steel"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Earthquake", "Leaf Blade", "Rock Slide", "Swords Dance"],
          abilities: ["Overgrow"],
          teraTypes: ["Rock"]
        }
      ]
    },
    blaziken: {
      level: 76,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Close Combat", "Flare Blitz", "Knock Off", "Protect", "Stone Edge", "Swords Dance"],
          abilities: ["Speed Boost"],
          teraTypes: ["Dark", "Fighting"]
        }
      ]
    },
    swampert: {
      level: 83,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Flip Turn", "Ice Beam", "Knock Off", "Roar", "Stealth Rock", "Yawn"],
          abilities: ["Damp", "Torrent"],
          teraTypes: ["Poison", "Steel"]
        }
      ]
    },
    mightyena: {
      level: 95,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Crunch", "Play Rough", "Poison Fang", "Sucker Punch", "Taunt", "Throat Chop"],
          abilities: ["Intimidate"],
          teraTypes: ["Fairy", "Poison"]
        },
        {
          role: "AV Pivot",
          movepool: ["Crunch", "Play Rough", "Poison Fang", "Sucker Punch", "Super Fang", "Throat Chop"],
          abilities: ["Intimidate"],
          teraTypes: ["Fairy", "Poison"]
        }
      ]
    },
    ludicolo: {
      level: 90,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Giga Drain", "Hydro Pump", "Ice Beam", "Rain Dance"],
          abilities: ["Swift Swim"],
          teraTypes: ["Grass", "Steel", "Water"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Giga Drain", "Hydro Pump", "Ice Beam", "Leaf Storm"],
          abilities: ["Swift Swim"],
          teraTypes: ["Grass", "Water"]
        }
      ]
    },
    shiftry: {
      level: 89,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Defog", "Knock Off", "Leaf Storm", "Sucker Punch", "Will-O-Wisp"],
          abilities: ["Wind Rider"],
          teraTypes: ["Dark", "Poison"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Knock Off", "Leaf Blade", "Sucker Punch", "Swords Dance"],
          abilities: ["Wind Rider"],
          teraTypes: ["Dark", "Poison"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Knock Off", "Leaf Blade", "Low Kick", "Tailwind"],
          abilities: ["Wind Rider"],
          teraTypes: ["Dark", "Fighting"]
        }
      ]
    },
    pelipper: {
      level: 86,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Hurricane", "Hydro Pump", "Knock Off", "Roost", "Surf", "U-turn"],
          abilities: ["Drizzle"],
          teraTypes: ["Ground", "Water"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Hurricane", "Hydro Pump", "U-turn", "Weather Ball"],
          abilities: ["Drizzle"],
          teraTypes: ["Flying", "Water"]
        }
      ]
    },
    gardevoir: {
      level: 83,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Calm Mind", "Focus Blast", "Healing Wish", "Moonblast", "Mystical Fire", "Psychic", "Psyshock", "Trick"],
          abilities: ["Trace"],
          teraTypes: ["Fairy", "Fighting", "Fire"]
        }
      ]
    },
    masquerain: {
      level: 87,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Bug Buzz", "Hurricane", "Hydro Pump", "Quiver Dance"],
          abilities: ["Intimidate"],
          teraTypes: ["Water"]
        },
        {
          role: "Fast Support",
          movepool: ["Bug Buzz", "Hurricane", "Hydro Pump", "Sticky Web", "Stun Spore", "U-turn"],
          abilities: ["Intimidate"],
          teraTypes: ["Ground", "Steel", "Water"]
        }
      ]
    },
    breloom: {
      level: 82,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Bullet Seed", "Mach Punch", "Rock Tomb", "Spore", "Swords Dance"],
          abilities: ["Technician"],
          teraTypes: ["Fighting", "Rock"]
        }
      ]
    },
    vigoroth: {
      level: 85,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Body Slam", "Bulk Up", "Knock Off", "Slack Off"],
          abilities: ["Vital Spirit"],
          teraTypes: ["Ghost"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Body Slam", "Bulk Up", "Earthquake", "Slack Off"],
          abilities: ["Vital Spirit"],
          teraTypes: ["Ground"]
        }
      ]
    },
    slaking: {
      level: 84,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Double-Edge", "Earthquake", "Giga Impact", "Knock Off"],
          abilities: ["Truant"],
          teraTypes: ["Ghost", "Ground", "Normal"]
        }
      ]
    },
    hariyama: {
      level: 87,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Bullet Punch", "Close Combat", "Facade", "Fake Out", "Headlong Rush", "Knock Off"],
          abilities: ["Guts"],
          teraTypes: ["Normal"]
        },
        {
          role: "AV Pivot",
          movepool: ["Bullet Punch", "Close Combat", "Headlong Rush", "Heavy Slam", "Knock Off", "Stone Edge"],
          abilities: ["Thick Fat"],
          teraTypes: ["Steel"]
        }
      ]
    },
    sableye: {
      level: 90,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Encore", "Knock Off", "Recover", "Taunt", "Thunder Wave", "Will-O-Wisp"],
          abilities: ["Prankster"],
          teraTypes: ["Steel"]
        }
      ]
    },
    medicham: {
      level: 86,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Bullet Punch", "Close Combat", "Ice Punch", "Poison Jab", "Zen Headbutt"],
          abilities: ["Pure Power"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    plusle: {
      level: 95,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Alluring Voice", "Encore", "Grass Knot", "Nasty Plot", "Thunderbolt"],
          abilities: ["Lightning Rod"],
          teraTypes: ["Electric", "Fairy", "Grass"]
        }
      ]
    },
    minun: {
      level: 95,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Alluring Voice", "Encore", "Grass Knot", "Nasty Plot", "Thunderbolt"],
          abilities: ["Volt Absorb"],
          teraTypes: ["Electric", "Fairy", "Grass"]
        }
      ]
    },
    volbeat: {
      level: 90,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Encore", "Roost", "Thunder Wave", "U-turn"],
          abilities: ["Prankster"],
          teraTypes: ["Steel", "Water"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Encore", "Lunge", "Roost", "Thunder Wave"],
          abilities: ["Prankster"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    illumise: {
      level: 91,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Bug Buzz", "Encore", "Roost", "Thunder Wave"],
          abilities: ["Prankster"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    swalot: {
      level: 90,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Clear Smog", "Earthquake", "Encore", "Ice Beam", "Knock Off", "Pain Split", "Sludge Bomb", "Toxic Spikes"],
          abilities: ["Liquid Ooze"],
          teraTypes: ["Dark"]
        },
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Protect", "Sludge Bomb", "Toxic"],
          abilities: ["Liquid Ooze", "Sticky Hold"],
          teraTypes: ["Ground"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Earthquake", "Gunk Shot", "Knock Off", "Swords Dance"],
          abilities: ["Liquid Ooze"],
          teraTypes: ["Dark", "Ground"]
        }
      ]
    },
    camerupt: {
      level: 91,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Overheat", "Roar", "Stealth Rock", "Will-O-Wisp"],
          abilities: ["Solid Rock"],
          teraTypes: ["Grass", "Water"]
        }
      ]
    },
    torkoal: {
      level: 88,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Earthquake", "Lava Plume", "Rapid Spin", "Solar Beam", "Stealth Rock", "Yawn"],
          abilities: ["Drought"],
          teraTypes: ["Grass"]
        },
        {
          role: "Bulky Support",
          movepool: ["Lava Plume", "Rapid Spin", "Solar Beam", "Stealth Rock", "Yawn"],
          abilities: ["Drought"],
          teraTypes: ["Dragon", "Grass"]
        }
      ]
    },
    grumpig: {
      level: 92,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Dazzling Gleam", "Earth Power", "Nasty Plot", "Psychic", "Psyshock", "Shadow Ball"],
          abilities: ["Thick Fat"],
          teraTypes: ["Fairy", "Ghost", "Ground", "Psychic"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Earth Power", "Focus Blast", "Psychic", "Psyshock", "Shadow Ball", "Trick"],
          abilities: ["Thick Fat"],
          teraTypes: ["Fighting", "Ghost", "Ground", "Psychic"]
        }
      ]
    },
    flygon: {
      level: 82,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Dragon Dance", "Earthquake", "Outrage", "Stone Edge", "U-turn"],
          abilities: ["Levitate"],
          teraTypes: ["Ground", "Rock", "Steel"]
        }
      ]
    },
    cacturne: {
      level: 92,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Focus Blast", "Knock Off", "Leaf Storm", "Spikes", "Sucker Punch", "Toxic Spikes"],
          abilities: ["Water Absorb"],
          teraTypes: ["Dark", "Grass", "Poison"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Drain Punch", "Knock Off", "Seed Bomb", "Sucker Punch", "Swords Dance"],
          abilities: ["Water Absorb"],
          teraTypes: ["Dark", "Poison"]
        }
      ]
    },
    altaria: {
      level: 88,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Brave Bird", "Defog", "Earthquake", "Haze", "Roost", "Will-O-Wisp"],
          abilities: ["Natural Cure"],
          teraTypes: ["Steel"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Brave Bird", "Dragon Dance", "Earthquake", "Roost"],
          abilities: ["Natural Cure"],
          teraTypes: ["Ground", "Steel"]
        }
      ]
    },
    zangoose: {
      level: 85,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Close Combat", "Facade", "Knock Off", "Quick Attack", "Swords Dance"],
          abilities: ["Toxic Boost"],
          teraTypes: ["Normal"]
        }
      ]
    },
    seviper: {
      level: 93,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Earthquake", "Flamethrower", "Giga Drain", "Glare", "Gunk Shot", "Knock Off", "Switcheroo"],
          abilities: ["Infiltrator"],
          teraTypes: ["Dark", "Fire", "Grass", "Ground", "Poison"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Earthquake", "Gunk Shot", "Swords Dance", "Trailblaze"],
          abilities: ["Infiltrator"],
          teraTypes: ["Grass", "Ground"]
        }
      ]
    },
    whiscash: {
      level: 88,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Hydro Pump", "Ice Beam", "Spikes", "Stealth Rock"],
          abilities: ["Oblivious"],
          teraTypes: ["Poison", "Steel"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Dance", "Earthquake", "Liquidation", "Stone Edge"],
          abilities: ["Oblivious"],
          teraTypes: ["Ground", "Steel"]
        }
      ]
    },
    crawdaunt: {
      level: 84,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Aqua Jet", "Close Combat", "Crabhammer", "Dragon Dance", "Knock Off"],
          abilities: ["Adaptability"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Aqua Jet", "Crabhammer", "Dragon Dance", "Knock Off"],
          abilities: ["Adaptability"],
          teraTypes: ["Water"]
        }
      ]
    },
    milotic: {
      level: 83,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Dragon Tail", "Flip Turn", "Haze", "Ice Beam", "Recover", "Scald"],
          abilities: ["Competitive"],
          teraTypes: ["Dragon", "Steel"]
        }
      ]
    },
    banette: {
      level: 93,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Gunk Shot", "Poltergeist", "Shadow Sneak", "Swords Dance", "Thunder Wave"],
          abilities: ["Cursed Body", "Frisk"],
          teraTypes: ["Ghost", "Poison"]
        }
      ]
    },
    tropius: {
      level: 91,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Air Slash", "Leech Seed", "Protect", "Substitute"],
          abilities: ["Harvest"],
          teraTypes: ["Steel"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Dance", "Dual Wingbeat", "Earthquake", "Leaf Blade", "Synthesis"],
          abilities: ["Harvest"],
          teraTypes: ["Ground"]
        }
      ]
    },
    chimecho: {
      level: 94,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Encore", "Heal Bell", "Knock Off", "Psychic Noise", "Recover", "Thunder Wave"],
          abilities: ["Levitate"],
          teraTypes: ["Dark", "Electric", "Poison", "Steel"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Dazzling Gleam", "Psychic", "Psychic Noise", "Psyshock", "Recover"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Fairy", "Poison", "Steel"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Cosmic Power", "Dazzling Gleam", "Recover", "Stored Power"],
          abilities: ["Levitate"],
          teraTypes: ["Steel"]
        }
      ]
    },
    glalie: {
      level: 96,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Disable", "Earthquake", "Freeze-Dry", "Spikes", "Taunt"],
          abilities: ["Inner Focus"],
          teraTypes: ["Ghost", "Ground", "Water"]
        }
      ]
    },
    luvdisc: {
      level: 100,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Endeavor", "Substitute", "Surf", "Whirlpool"],
          abilities: ["Swift Swim"],
          teraTypes: ["Ghost", "Ground"]
        }
      ]
    },
    salamence: {
      level: 77,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Dance", "Dual Wingbeat", "Earthquake", "Outrage", "Roost"],
          abilities: ["Intimidate", "Moxie"],
          teraTypes: ["Dragon", "Ground", "Steel"]
        }
      ]
    },
    metagross: {
      level: 79,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Agility", "Earthquake", "Heavy Slam", "Knock Off", "Psychic Fangs"],
          abilities: ["Clear Body"],
          teraTypes: ["Ground"]
        },
        {
          role: "Bulky Support",
          movepool: ["Bullet Punch", "Earthquake", "Heavy Slam", "Knock Off", "Psychic Fangs", "Stealth Rock"],
          abilities: ["Clear Body"],
          teraTypes: ["Water"]
        }
      ]
    },
    regirock: {
      level: 83,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Body Press", "Iron Defense", "Stealth Rock", "Stone Edge", "Thunder Wave"],
          abilities: ["Clear Body"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Body Press", "Curse", "Iron Defense", "Rest", "Stone Edge"],
          abilities: ["Clear Body"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    regice: {
      level: 88,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Body Press", "Ice Beam", "Rest", "Sleep Talk", "Thunder Wave", "Thunderbolt"],
          abilities: ["Clear Body"],
          teraTypes: ["Electric"]
        }
      ]
    },
    registeel: {
      level: 82,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Body Press", "Iron Defense", "Iron Head", "Rest"],
          abilities: ["Clear Body"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Bulky Support",
          movepool: ["Body Press", "Iron Defense", "Iron Head", "Stealth Rock", "Thunder Wave"],
          abilities: ["Clear Body"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    latias: {
      level: 79,
      sets: [
        {
          role: "Fast Bulky Setup",
          movepool: ["Calm Mind", "Draco Meteor", "Psyshock", "Recover"],
          abilities: ["Levitate"],
          teraTypes: ["Steel"]
        }
      ]
    },
    latios: {
      level: 78,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Draco Meteor", "Psyshock", "Recover"],
          abilities: ["Levitate"],
          teraTypes: ["Steel"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Aura Sphere", "Calm Mind", "Draco Meteor", "Flip Turn", "Luster Purge"],
          abilities: ["Levitate"],
          teraTypes: ["Dragon", "Psychic", "Steel"]
        }
      ]
    },
    kyogre: {
      level: 71,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Ice Beam", "Origin Pulse", "Thunder", "Water Spout"],
          abilities: ["Drizzle"],
          teraTypes: ["Water"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Ice Beam", "Origin Pulse", "Thunder"],
          abilities: ["Drizzle"],
          teraTypes: ["Dragon", "Electric", "Steel"]
        }
      ]
    },
    groudon: {
      level: 72,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Heat Crash", "Precipice Blades", "Roar", "Spikes", "Stealth Rock", "Stone Edge", "Thunder Wave", "Will-O-Wisp"],
          abilities: ["Drought"],
          teraTypes: ["Fire"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Heat Crash", "Precipice Blades", "Stone Edge", "Swords Dance", "Thunder Wave"],
          abilities: ["Drought"],
          teraTypes: ["Fire"]
        }
      ]
    },
    rayquaza: {
      level: 72,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Ascent", "Dragon Dance", "Earthquake", "Outrage"],
          abilities: ["Air Lock"],
          teraTypes: ["Flying", "Steel"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Dragon Ascent", "Earthquake", "Extreme Speed", "Swords Dance", "U-turn"],
          abilities: ["Air Lock"],
          teraTypes: ["Normal"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Dragon Ascent", "Earthquake", "Scale Shot", "Swords Dance"],
          abilities: ["Air Lock"],
          teraTypes: ["Dragon", "Flying", "Steel"]
        }
      ]
    },
    jirachi: {
      level: 80,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Body Slam", "Iron Head", "Protect", "Wish"],
          abilities: ["Serene Grace"],
          teraTypes: ["Water"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Body Slam", "Drain Punch", "Iron Head", "Stealth Rock", "U-turn"],
          abilities: ["Serene Grace"],
          teraTypes: ["Fighting", "Water"]
        },
        {
          role: "Bulky Support",
          movepool: ["Healing Wish", "Iron Head", "Protect", "Psychic", "U-turn", "Wish"],
          abilities: ["Serene Grace"],
          teraTypes: ["Water"]
        }
      ]
    },
    deoxys: {
      level: 74,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Extreme Speed", "Knock Off", "Psycho Boost", "Superpower"],
          abilities: ["Pressure"],
          teraTypes: ["Fighting", "Normal", "Psychic"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Ice Beam", "Knock Off", "Psycho Boost", "Superpower"],
          abilities: ["Pressure"],
          teraTypes: ["Fighting", "Psychic"]
        }
      ]
    },
    deoxysattack: {
      level: 72,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Extreme Speed", "Knock Off", "Psycho Boost", "Superpower"],
          abilities: ["Pressure"],
          teraTypes: ["Fighting", "Normal", "Psychic"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Ice Beam", "Knock Off", "Psycho Boost", "Superpower"],
          abilities: ["Pressure"],
          teraTypes: ["Fighting", "Psychic"]
        }
      ]
    },
    deoxysdefense: {
      level: 86,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Cosmic Power", "Night Shade", "Recover", "Stored Power"],
          abilities: ["Pressure"],
          teraTypes: ["Steel"]
        },
        {
          role: "Bulky Support",
          movepool: ["Knock Off", "Psychic Noise", "Recover", "Spikes", "Stealth Rock", "Teleport"],
          abilities: ["Pressure"],
          teraTypes: ["Dark", "Fairy", "Steel"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Dark Pulse", "Focus Blast", "Psychic", "Psychic Noise", "Psyshock", "Recover"],
          abilities: ["Pressure"],
          teraTypes: ["Dark", "Fighting", "Steel"]
        }
      ]
    },
    deoxysspeed: {
      level: 82,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Knock Off", "Psycho Boost", "Spikes", "Stealth Rock", "Superpower", "Taunt"],
          abilities: ["Pressure"],
          teraTypes: ["Dark", "Fighting", "Ghost", "Steel"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Dark Pulse", "Focus Blast", "Nasty Plot", "Psycho Boost"],
          abilities: ["Pressure"],
          teraTypes: ["Dark", "Fighting", "Psychic"]
        }
      ]
    },
    torterra: {
      level: 78,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Bullet Seed", "Headlong Rush", "Rock Blast", "Shell Smash"],
          abilities: ["Overgrow"],
          teraTypes: ["Grass", "Ground", "Rock", "Water"]
        }
      ]
    },
    infernape: {
      level: 82,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Close Combat", "Grass Knot", "Gunk Shot", "Knock Off", "Mach Punch", "Overheat", "Stone Edge"],
          abilities: ["Blaze", "Iron Fist"],
          teraTypes: ["Dark", "Fighting", "Fire"]
        },
        {
          role: "Fast Support",
          movepool: ["Close Combat", "Flare Blitz", "Gunk Shot", "Knock Off", "Mach Punch", "Stone Edge", "Swords Dance", "U-turn"],
          abilities: ["Blaze", "Iron Fist"],
          teraTypes: ["Dark", "Fighting", "Fire"]
        }
      ]
    },
    empoleon: {
      level: 84,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Flip Turn", "Ice Beam", "Knock Off", "Roar", "Roost", "Stealth Rock", "Surf", "Yawn"],
          abilities: ["Competitive"],
          teraTypes: ["Flying", "Grass"]
        }
      ]
    },
    staraptor: {
      level: 79,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Brave Bird", "Close Combat", "Double-Edge", "Quick Attack", "U-turn"],
          abilities: ["Reckless"],
          teraTypes: ["Fighting", "Flying"]
        }
      ]
    },
    kricketune: {
      level: 99,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Knock Off", "Pounce", "Sticky Web", "Swords Dance", "Taunt"],
          abilities: ["Technician"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    luxray: {
      level: 88,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Facade", "Play Rough", "Supercell Slam", "Throat Chop", "Trailblaze"],
          abilities: ["Guts"],
          teraTypes: ["Normal"]
        },
        {
          role: "AV Pivot",
          movepool: ["Ice Fang", "Play Rough", "Throat Chop", "Volt Switch", "Wild Charge"],
          abilities: ["Intimidate"],
          teraTypes: ["Electric", "Fairy"]
        }
      ]
    },
    rampardos: {
      level: 90,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Earthquake", "Fire Punch", "Head Smash", "Rock Slide"],
          abilities: ["Sheer Force"],
          teraTypes: ["Ground", "Rock"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Earthquake", "Fire Punch", "Rock Slide", "Zen Headbutt"],
          abilities: ["Sheer Force"],
          teraTypes: ["Psychic", "Rock"]
        }
      ]
    },
    bastiodon: {
      level: 89,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Body Press", "Foul Play", "Iron Defense", "Rest"],
          abilities: ["Soundproof"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    vespiquen: {
      level: 98,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Air Slash", "Hurricane", "Roost", "Spikes", "Toxic", "Toxic Spikes", "U-turn"],
          abilities: ["Pressure"],
          teraTypes: ["Steel"]
        }
      ]
    },
    pachirisu: {
      level: 96,
      sets: [
        {
          role: "AV Pivot",
          movepool: ["Nuzzle", "Super Fang", "Thunderbolt", "U-turn"],
          abilities: ["Volt Absorb"],
          teraTypes: ["Flying"]
        },
        {
          role: "Fast Support",
          movepool: ["Discharge", "Encore", "Super Fang", "U-turn"],
          abilities: ["Volt Absorb"],
          teraTypes: ["Flying"]
        }
      ]
    },
    floatzel: {
      level: 85,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Crunch", "Flip Turn", "Ice Spinner", "Wave Crash"],
          abilities: ["Water Veil"],
          teraTypes: ["Water"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "Crunch", "Ice Spinner", "Wave Crash"],
          abilities: ["Water Veil"],
          teraTypes: ["Dark", "Steel", "Water"]
        }
      ]
    },
    gastrodon: {
      level: 86,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Clear Smog", "Earthquake", "Ice Beam", "Recover", "Stealth Rock", "Surf"],
          abilities: ["Storm Drain"],
          teraTypes: ["Poison", "Steel"]
        },
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Recover", "Sludge Bomb", "Stealth Rock", "Surf"],
          abilities: ["Storm Drain"],
          teraTypes: ["Poison"]
        }
      ]
    },
    ambipom: {
      level: 84,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Double-Edge", "Knock Off", "Low Kick", "Triple Axel", "U-turn"],
          abilities: ["Technician"],
          teraTypes: ["Ice"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Double-Edge", "Fake Out", "Knock Off", "Low Kick", "U-turn"],
          abilities: ["Technician"],
          teraTypes: ["Normal"]
        }
      ]
    },
    drifblim: {
      level: 86,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Air Slash", "Calm Mind", "Defog", "Shadow Ball", "Strength Sap"],
          abilities: ["Aftermath", "Unburden"],
          teraTypes: ["Fairy", "Ghost"]
        }
      ]
    },
    mismagius: {
      level: 86,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Dazzling Gleam", "Energy Ball", "Mystical Fire", "Shadow Ball", "Thunderbolt", "Trick"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Fairy", "Fire", "Ghost"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Dazzling Gleam", "Mystical Fire", "Nasty Plot", "Shadow Ball", "Substitute", "Thunderbolt"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Fairy"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Nasty Plot", "Shadow Ball", "Substitute", "Tera Blast"],
          abilities: ["Levitate"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    honchkrow: {
      level: 86,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Brave Bird", "Heat Wave", "Sucker Punch", "U-turn"],
          abilities: ["Moxie"],
          teraTypes: ["Dark", "Flying"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Brave Bird", "Heat Wave", "Lash Out", "Sucker Punch", "Thunder Wave"],
          abilities: ["Moxie"],
          teraTypes: ["Dark", "Flying"]
        }
      ]
    },
    skuntank: {
      level: 84,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Fire Blast", "Gunk Shot", "Knock Off", "Sucker Punch", "Taunt", "Toxic Spikes"],
          abilities: ["Aftermath"],
          teraTypes: ["Dark", "Poison"]
        }
      ]
    },
    bronzong: {
      level: 88,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Hypnosis", "Iron Head", "Psychic", "Psychic Noise", "Stealth Rock"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Water"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Body Press", "Iron Defense", "Iron Head", "Psychic Noise", "Rest"],
          abilities: ["Levitate"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    spiritomb: {
      level: 89,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Foul Play", "Pain Split", "Poltergeist", "Shadow Sneak", "Sucker Punch", "Toxic", "Will-O-Wisp"],
          abilities: ["Infiltrator"],
          teraTypes: ["Dark", "Ghost"]
        }
      ]
    },
    garchomp: {
      level: 74,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Earthquake", "Outrage", "Spikes", "Stealth Rock", "Stone Edge"],
          abilities: ["Rough Skin"],
          teraTypes: ["Ground", "Steel"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Earthquake", "Fire Fang", "Iron Head", "Scale Shot", "Stone Edge", "Swords Dance"],
          abilities: ["Rough Skin"],
          teraTypes: ["Fire", "Ground", "Steel"]
        }
      ]
    },
    lucario: {
      level: 84,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Close Combat", "Extreme Speed", "Meteor Mash", "Stone Edge", "Swords Dance"],
          abilities: ["Justified"],
          teraTypes: ["Normal"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Aura Sphere", "Flash Cannon", "Focus Blast", "Nasty Plot", "Vacuum Wave"],
          abilities: ["Inner Focus"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    hippowdon: {
      level: 82,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Slack Off", "Stealth Rock", "Stone Edge", "Whirlwind"],
          abilities: ["Sand Stream"],
          teraTypes: ["Dragon", "Rock", "Steel"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Curse", "Earthquake", "Slack Off", "Stone Edge"],
          abilities: ["Sand Stream"],
          teraTypes: ["Rock", "Steel"]
        }
      ]
    },
    toxicroak: {
      level: 84,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Close Combat", "Earthquake", "Gunk Shot", "Knock Off", "Sucker Punch", "Swords Dance"],
          abilities: ["Dry Skin"],
          teraTypes: ["Dark"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Close Combat", "Earthquake", "Gunk Shot", "Sucker Punch", "Swords Dance"],
          abilities: ["Dry Skin"],
          teraTypes: ["Dark", "Fighting", "Ground"]
        }
      ]
    },
    lumineon: {
      level: 93,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Alluring Voice", "Encore", "Hydro Pump", "Ice Beam", "U-turn"],
          abilities: ["Storm Drain"],
          teraTypes: ["Fairy", "Water"]
        }
      ]
    },
    abomasnow: {
      level: 85,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Aurora Veil", "Blizzard", "Earthquake", "Ice Shard", "Wood Hammer"],
          abilities: ["Snow Warning"],
          teraTypes: ["Ice", "Water"]
        }
      ]
    },
    weavile: {
      level: 79,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Ice Shard", "Knock Off", "Low Kick", "Swords Dance", "Triple Axel"],
          abilities: ["Pickpocket"],
          teraTypes: ["Dark", "Fighting", "Ice"]
        }
      ]
    },
    sneasler: {
      level: 74,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Close Combat", "Dire Claw", "Gunk Shot", "Throat Chop", "U-turn"],
          abilities: ["Poison Touch"],
          teraTypes: ["Dark", "Fighting"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Acrobatics", "Close Combat", "Gunk Shot", "Swords Dance"],
          abilities: ["Unburden"],
          teraTypes: ["Flying"]
        }
      ]
    },
    magnezone: {
      level: 85,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Body Press", "Flash Cannon", "Thunderbolt", "Volt Switch"],
          abilities: ["Magnet Pull"],
          teraTypes: ["Electric", "Fighting", "Flying", "Water"]
        },
        {
          role: "AV Pivot",
          movepool: ["Discharge", "Flash Cannon", "Mirror Coat", "Thunderbolt", "Volt Switch"],
          abilities: ["Analytic", "Magnet Pull"],
          teraTypes: ["Flying", "Water"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Body Press", "Discharge", "Flash Cannon", "Iron Defense", "Thunderbolt"],
          abilities: ["Magnet Pull"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    rhyperior: {
      level: 82,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Earthquake", "Ice Punch", "Megahorn", "Rock Polish", "Stone Edge"],
          abilities: ["Solid Rock"],
          teraTypes: ["Bug", "Ground", "Rock"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Dragon Tail", "Earthquake", "Ice Punch", "Megahorn", "Stone Edge"],
          abilities: ["Solid Rock"],
          teraTypes: ["Bug", "Dragon", "Grass", "Steel"]
        }
      ]
    },
    electivire: {
      level: 84,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Earthquake", "Flamethrower", "Ice Punch", "Knock Off", "Supercell Slam", "Volt Switch"],
          abilities: ["Motor Drive"],
          teraTypes: ["Dark", "Electric", "Ground"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Bulk Up", "Earthquake", "Ice Punch", "Supercell Slam"],
          abilities: ["Motor Drive"],
          teraTypes: ["Ground"]
        }
      ]
    },
    magmortar: {
      level: 88,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Fire Blast", "Focus Blast", "Knock Off", "Scorching Sands", "Taunt", "Thunderbolt"],
          abilities: ["Flame Body"],
          teraTypes: ["Electric", "Fighting", "Water"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Earthquake", "Fire Blast", "Focus Blast", "Knock Off", "Thunderbolt", "Will-O-Wisp"],
          abilities: ["Flame Body"],
          teraTypes: ["Electric", "Fighting", "Water"]
        }
      ]
    },
    yanmega: {
      level: 82,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Air Slash", "Bug Buzz", "Giga Drain", "U-turn"],
          abilities: ["Tinted Lens"],
          teraTypes: ["Bug"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Air Slash", "Bug Buzz", "Protect", "Tera Blast"],
          abilities: ["Speed Boost"],
          teraTypes: ["Ground"]
        }
      ]
    },
    leafeon: {
      level: 88,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Double-Edge", "Knock Off", "Leaf Blade", "Substitute", "Swords Dance", "Synthesis"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Dark", "Normal"]
        }
      ]
    },
    glaceon: {
      level: 94,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Freeze-Dry", "Protect", "Wish"],
          abilities: ["Ice Body"],
          teraTypes: ["Water"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Freeze-Dry", "Mud Shot", "Protect", "Wish"],
          abilities: ["Ice Body"],
          teraTypes: ["Ground"]
        }
      ]
    },
    gliscor: {
      level: 76,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Earthquake", "Protect", "Substitute", "Toxic"],
          abilities: ["Poison Heal"],
          teraTypes: ["Water"]
        },
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Knock Off", "Protect", "Toxic", "Toxic Spikes", "U-turn"],
          abilities: ["Poison Heal"],
          teraTypes: ["Water"]
        }
      ]
    },
    mamoswine: {
      level: 81,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Earthquake", "Ice Shard", "Icicle Crash", "Knock Off", "Stealth Rock"],
          abilities: ["Thick Fat"],
          teraTypes: ["Ground", "Ice"]
        },
        {
          role: "AV Pivot",
          movepool: ["Earthquake", "Ice Shard", "Icicle Crash", "Trailblaze"],
          abilities: ["Thick Fat"],
          teraTypes: ["Grass"]
        }
      ]
    },
    porygonz: {
      level: 83,
      sets: [
        {
          role: "Tera Blast user",
          movepool: ["Agility", "Nasty Plot", "Shadow Ball", "Tera Blast"],
          abilities: ["Adaptability"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Ice Beam", "Nasty Plot", "Shadow Ball", "Thunderbolt", "Tri Attack", "Trick"],
          abilities: ["Adaptability", "Download"],
          teraTypes: ["Electric", "Ghost"]
        }
      ]
    },
    gallade: {
      level: 81,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Leaf Blade", "Night Slash", "Psycho Cut", "Sacred Sword", "Swords Dance"],
          abilities: ["Sharpness"],
          teraTypes: ["Dark", "Fighting", "Grass"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Agility", "Night Slash", "Psycho Cut", "Sacred Sword"],
          abilities: ["Sharpness"],
          teraTypes: ["Dark", "Fighting"]
        }
      ]
    },
    probopass: {
      level: 92,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Body Press", "Flash Cannon", "Iron Defense", "Power Gem", "Rest", "Thunder Wave"],
          abilities: ["Magnet Pull"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    dusknoir: {
      level: 89,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Earthquake", "Leech Life", "Pain Split", "Poltergeist", "Shadow Sneak", "Trick"],
          abilities: ["Frisk"],
          teraTypes: ["Ghost", "Ground"]
        },
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Pain Split", "Poltergeist", "Shadow Sneak", "Will-O-Wisp"],
          abilities: ["Frisk"],
          teraTypes: ["Dark", "Fairy"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Focus Punch", "Pain Split", "Poltergeist", "Substitute"],
          abilities: ["Frisk"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    froslass: {
      level: 87,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Destiny Bond", "Poltergeist", "Spikes", "Taunt", "Triple Axel", "Will-O-Wisp"],
          abilities: ["Cursed Body"],
          teraTypes: ["Ghost", "Ice"]
        }
      ]
    },
    rotom: {
      level: 88,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Nasty Plot", "Shadow Ball", "Thunderbolt", "Trick", "Volt Switch", "Will-O-Wisp"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Ghost"]
        }
      ]
    },
    rotomwash: {
      level: 82,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Hydro Pump", "Nasty Plot", "Pain Split", "Thunderbolt", "Trick", "Volt Switch", "Will-O-Wisp"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Water"]
        }
      ]
    },
    rotomheat: {
      level: 83,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Nasty Plot", "Overheat", "Pain Split", "Thunderbolt", "Trick", "Volt Switch", "Will-O-Wisp"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Fire"]
        }
      ]
    },
    rotomfrost: {
      level: 87,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Blizzard", "Nasty Plot", "Thunderbolt", "Volt Switch", "Will-O-Wisp"],
          abilities: ["Levitate"],
          teraTypes: ["Electric"]
        }
      ]
    },
    rotomfan: {
      level: 86,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Air Slash", "Nasty Plot", "Thunderbolt", "Volt Switch", "Will-O-Wisp"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Steel"]
        }
      ]
    },
    rotommow: {
      level: 86,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Leaf Storm", "Nasty Plot", "Thunderbolt", "Trick", "Volt Switch", "Will-O-Wisp"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Grass"]
        }
      ]
    },
    uxie: {
      level: 83,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Encore", "Knock Off", "Psychic Noise", "Stealth Rock", "Thunder Wave", "U-turn", "Yawn"],
          abilities: ["Levitate"],
          teraTypes: ["Dark", "Electric", "Steel"]
        }
      ]
    },
    mesprit: {
      level: 85,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Dazzling Gleam", "Healing Wish", "Ice Beam", "Nasty Plot", "Psychic", "Shadow Ball", "Thunderbolt", "U-turn"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Fairy"]
        },
        {
          role: "Bulky Support",
          movepool: ["Encore", "Knock Off", "Psychic Noise", "Stealth Rock", "Thunder Wave", "U-turn"],
          abilities: ["Levitate"],
          teraTypes: ["Dark", "Electric", "Steel"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Drain Punch", "Ice Beam", "Knock Off", "Psychic Noise", "Thunder Wave", "Thunderbolt", "U-turn"],
          abilities: ["Levitate"],
          teraTypes: ["Dark", "Fighting"]
        }
      ]
    },
    azelf: {
      level: 82,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Encore", "Explosion", "Fire Blast", "Knock Off", "Psychic", "Stealth Rock", "Taunt", "U-turn"],
          abilities: ["Levitate"],
          teraTypes: ["Dark", "Fire"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Dazzling Gleam", "Fire Blast", "Nasty Plot", "Psychic", "Psyshock", "Thunderbolt", "Trick", "U-turn"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Fairy", "Fire", "Psychic"]
        }
      ]
    },
    dialga: {
      level: 73,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Draco Meteor", "Fire Blast", "Heavy Slam", "Stealth Rock", "Thunder Wave"],
          abilities: ["Pressure"],
          teraTypes: ["Dragon", "Flying", "Steel"]
        },
        {
          role: "AV Pivot",
          movepool: ["Draco Meteor", "Dragon Tail", "Fire Blast", "Heavy Slam"],
          abilities: ["Pressure"],
          teraTypes: ["Dragon", "Flying", "Steel"]
        }
      ]
    },
    dialgaorigin: {
      level: 73,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Draco Meteor", "Fire Blast", "Flash Cannon", "Heavy Slam", "Stealth Rock", "Thunder Wave"],
          abilities: ["Pressure"],
          teraTypes: ["Dragon", "Fire", "Flying", "Steel"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Draco Meteor", "Dragon Tail", "Fire Blast", "Flash Cannon", "Heavy Slam", "Stealth Rock"],
          abilities: ["Pressure"],
          teraTypes: ["Dragon", "Fire", "Flying", "Steel"]
        }
      ]
    },
    palkia: {
      level: 75,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Draco Meteor", "Fire Blast", "Hydro Pump", "Spacial Rend"],
          abilities: ["Pressure"],
          teraTypes: ["Dragon", "Water"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Draco Meteor", "Fire Blast", "Hydro Pump", "Spacial Rend", "Thunder Wave"],
          abilities: ["Pressure"],
          teraTypes: ["Dragon", "Water"]
        }
      ]
    },
    palkiaorigin: {
      level: 72,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Draco Meteor", "Fire Blast", "Hydro Pump", "Spacial Rend", "Thunder Wave"],
          abilities: ["Pressure"],
          teraTypes: ["Dragon", "Water"]
        }
      ]
    },
    heatran: {
      level: 79,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earth Power", "Flash Cannon", "Heavy Slam", "Lava Plume", "Magma Storm", "Stealth Rock"],
          abilities: ["Flash Fire"],
          teraTypes: ["Flying", "Grass", "Steel"]
        }
      ]
    },
    regigigas: {
      level: 84,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Body Slam", "Double-Edge", "Knock Off", "Rest", "Sleep Talk"],
          abilities: ["Slow Start"],
          teraTypes: ["Ghost"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Body Slam", "Knock Off", "Protect", "Substitute"],
          abilities: ["Slow Start"],
          teraTypes: ["Ghost", "Poison"]
        }
      ]
    },
    giratina: {
      level: 75,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Dragon Tail", "Rest", "Shadow Ball", "Sleep Talk", "Will-O-Wisp"],
          abilities: ["Pressure"],
          teraTypes: ["Fairy"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Dragon Pulse", "Rest", "Sleep Talk"],
          abilities: ["Pressure"],
          teraTypes: ["Fairy"]
        },
        {
          role: "Bulky Support",
          movepool: ["Defog", "Dragon Tail", "Rest", "Shadow Ball", "Will-O-Wisp"],
          abilities: ["Pressure"],
          teraTypes: ["Fairy"]
        }
      ]
    },
    giratinaorigin: {
      level: 72,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Defog", "Draco Meteor", "Dragon Tail", "Poltergeist", "Shadow Sneak", "Will-O-Wisp"],
          abilities: ["Levitate"],
          teraTypes: ["Dragon", "Fairy", "Ghost", "Steel"]
        }
      ]
    },
    cresselia: {
      level: 80,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Moonblast", "Moonlight", "Psyshock", "Thunderbolt"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Fairy", "Poison", "Steel"]
        }
      ]
    },
    phione: {
      level: 90,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Rest", "Scald", "Sleep Talk", "Take Heart"],
          abilities: ["Hydration"],
          teraTypes: ["Dragon", "Steel"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Grass Knot", "Ice Beam", "Scald", "Take Heart"],
          abilities: ["Hydration"],
          teraTypes: ["Grass", "Steel"]
        }
      ]
    },
    manaphy: {
      level: 78,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Energy Ball", "Hydro Pump", "Ice Beam", "Surf", "Tail Glow"],
          abilities: ["Hydration"],
          teraTypes: ["Grass", "Water"]
        }
      ]
    },
    darkrai: {
      level: 76,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dark Pulse", "Focus Blast", "Hypnosis", "Nasty Plot", "Sludge Bomb", "Substitute"],
          abilities: ["Bad Dreams"],
          teraTypes: ["Poison"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Dark Pulse", "Focus Blast", "Sludge Bomb", "Trick"],
          abilities: ["Bad Dreams"],
          teraTypes: ["Poison"]
        }
      ]
    },
    shaymin: {
      level: 82,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Air Slash", "Earth Power", "Seed Flare", "Synthesis"],
          abilities: ["Natural Cure"],
          teraTypes: ["Grass", "Ground", "Steel"]
        },
        {
          role: "Bulky Support",
          movepool: ["Air Slash", "Leech Seed", "Seed Flare", "Substitute"],
          abilities: ["Natural Cure"],
          teraTypes: ["Steel"]
        }
      ]
    },
    shayminsky: {
      level: 73,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Air Slash", "Dazzling Gleam", "Earth Power", "Seed Flare"],
          abilities: ["Serene Grace"],
          teraTypes: ["Flying", "Grass"]
        },
        {
          role: "Bulky Support",
          movepool: ["Air Slash", "Leech Seed", "Seed Flare", "Substitute"],
          abilities: ["Serene Grace"],
          teraTypes: ["Steel"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Air Slash", "Earth Power", "Seed Flare", "Synthesis"],
          abilities: ["Serene Grace"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    arceus: {
      level: 68,
      sets: [
        {
          role: "Fast Bulky Setup",
          movepool: ["Earthquake", "Extreme Speed", "Recover", "Shadow Claw", "Swords Dance"],
          abilities: ["Multitype"],
          teraTypes: ["Ghost"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Earthquake", "Extreme Speed", "Recover", "Swords Dance"],
          abilities: ["Multitype"],
          teraTypes: ["Normal"]
        }
      ]
    },
    arceusbug: {
      level: 73,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Earth Power", "Fire Blast", "Judgment", "Recover"],
          abilities: ["Multitype"],
          teraTypes: ["Fire", "Ground"]
        }
      ]
    },
    arceusdark: {
      level: 71,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Dazzling Gleam", "Judgment", "Recover", "Sludge Bomb"],
          abilities: ["Multitype"],
          teraTypes: ["Fairy", "Poison"]
        }
      ]
    },
    arceusdragon: {
      level: 71,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Extreme Speed", "Flare Blitz", "Heavy Slam", "Outrage", "Swords Dance"],
          abilities: ["Multitype"],
          teraTypes: ["Fire"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Dragon Dance", "Flare Blitz", "Heavy Slam", "Outrage"],
          abilities: ["Multitype"],
          teraTypes: ["Fire", "Steel"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Calm Mind", "Fire Blast", "Judgment", "Recover", "Sludge Bomb"],
          abilities: ["Multitype"],
          teraTypes: ["Fire"]
        }
      ]
    },
    arceuselectric: {
      level: 70,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Ice Beam", "Judgment", "Recover"],
          abilities: ["Multitype"],
          teraTypes: ["Electric", "Ice"]
        }
      ]
    },
    arceusfairy: {
      level: 69,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Earth Power", "Judgment", "Recover"],
          abilities: ["Multitype"],
          teraTypes: ["Ground", "Steel"]
        }
      ]
    },
    arceusfighting: {
      level: 70,
      sets: [
        {
          role: "Fast Bulky Setup",
          movepool: ["Body Press", "Cosmic Power", "Recover", "Stored Power"],
          abilities: ["Multitype"],
          teraTypes: ["Steel"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Body Press", "Iron Defense", "Recover", "Shadow Ball"],
          abilities: ["Multitype"],
          teraTypes: ["Steel"]
        }
      ]
    },
    arceusfire: {
      level: 72,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Earthquake", "Extreme Speed", "Flare Blitz", "Recover", "Swords Dance"],
          abilities: ["Multitype"],
          teraTypes: ["Fire", "Ground"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Dragon Dance", "Earthquake", "Flare Blitz", "Recover"],
          abilities: ["Multitype"],
          teraTypes: ["Fire", "Ground"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Earth Power", "Energy Ball", "Judgment", "Recover"],
          abilities: ["Multitype"],
          teraTypes: ["Grass", "Ground"]
        }
      ]
    },
    arceusflying: {
      level: 69,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Earth Power", "Judgment", "Recover"],
          abilities: ["Multitype"],
          teraTypes: ["Ground", "Steel"]
        }
      ]
    },
    arceusghost: {
      level: 69,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Focus Blast", "Judgment", "Recover", "Will-O-Wisp"],
          abilities: ["Multitype"],
          teraTypes: ["Fighting", "Normal"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Focus Blast", "Judgment", "Recover"],
          abilities: ["Multitype"],
          teraTypes: ["Fighting", "Ghost", "Normal"]
        }
      ]
    },
    arceusgrass: {
      level: 72,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Calm Mind", "Earth Power", "Ice Beam", "Judgment"],
          abilities: ["Multitype"],
          teraTypes: ["Ground"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Fire Blast", "Judgment", "Recover"],
          abilities: ["Multitype"],
          teraTypes: ["Fire"]
        }
      ]
    },
    arceusground: {
      level: 70,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Fire Blast", "Ice Beam", "Judgment", "Recover"],
          abilities: ["Multitype"],
          teraTypes: ["Dragon", "Ground"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Earthquake", "Extreme Speed", "Stone Edge", "Swords Dance"],
          abilities: ["Multitype"],
          teraTypes: ["Normal"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Dragon Dance", "Earthquake", "Recover", "Stone Edge"],
          abilities: ["Multitype"],
          teraTypes: ["Ground", "Steel"]
        }
      ]
    },
    arceusice: {
      level: 72,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Earth Power", "Judgment", "Recover", "Thunderbolt"],
          abilities: ["Multitype"],
          teraTypes: ["Electric", "Ground"]
        }
      ]
    },
    arceuspoison: {
      level: 70,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Dance", "Earthquake", "Flare Blitz", "Gunk Shot", "Liquidation", "Recover", "Swords Dance"],
          abilities: ["Multitype"],
          teraTypes: ["Ground"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Earthquake", "Extreme Speed", "Gunk Shot", "Swords Dance"],
          abilities: ["Multitype"],
          teraTypes: ["Ground", "Normal"]
        }
      ]
    },
    arceuspsychic: {
      level: 69,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Body Press", "Cosmic Power", "Recover", "Stored Power"],
          abilities: ["Multitype"],
          teraTypes: ["Steel"]
        }
      ]
    },
    arceusrock: {
      level: 73,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Earth Power", "Fire Blast", "Judgment", "Recover"],
          abilities: ["Multitype"],
          teraTypes: ["Dragon", "Ground"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Dance", "Earthquake", "Recover", "Stone Edge", "Swords Dance"],
          abilities: ["Multitype"],
          teraTypes: ["Ground"]
        }
      ]
    },
    arceussteel: {
      level: 70,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Judgment", "Recover", "Will-O-Wisp"],
          abilities: ["Multitype"],
          teraTypes: ["Ghost"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Earth Power", "Judgment", "Recover"],
          abilities: ["Multitype"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    arceuswater: {
      level: 71,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Calm Mind", "Ice Beam", "Judgment", "Recover", "Will-O-Wisp"],
          abilities: ["Multitype"],
          teraTypes: ["Steel"]
        }
      ]
    },
    serperior: {
      level: 79,
      sets: [
        {
          role: "Tera Blast user",
          movepool: ["Glare", "Leaf Storm", "Leech Seed", "Substitute", "Synthesis", "Tera Blast"],
          abilities: ["Contrary"],
          teraTypes: ["Fire", "Rock"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Dragon Pulse", "Glare", "Leaf Storm", "Leech Seed", "Substitute", "Synthesis"],
          abilities: ["Contrary"],
          teraTypes: ["Dragon", "Grass", "Water"]
        }
      ]
    },
    emboar: {
      level: 84,
      sets: [
        {
          role: "AV Pivot",
          movepool: ["Close Combat", "Flare Blitz", "Knock Off", "Scald", "Sucker Punch", "Wild Charge"],
          abilities: ["Reckless"],
          teraTypes: ["Dark", "Electric", "Fire", "Water"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Close Combat", "Flare Blitz", "Head Smash", "Knock Off", "Wild Charge"],
          abilities: ["Reckless"],
          teraTypes: ["Fire"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Bulk Up", "Drain Punch", "Flare Blitz", "Trailblaze"],
          abilities: ["Reckless"],
          teraTypes: ["Fighting", "Grass"]
        }
      ]
    },
    samurott: {
      level: 88,
      sets: [
        {
          role: "AV Pivot",
          movepool: ["Aqua Jet", "Flip Turn", "Grass Knot", "Hydro Pump", "Ice Beam", "Knock Off", "Megahorn", "Sacred Sword"],
          abilities: ["Torrent"],
          teraTypes: ["Dark", "Grass", "Water"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Aqua Jet", "Knock Off", "Liquidation", "Megahorn", "Sacred Sword", "Swords Dance"],
          abilities: ["Torrent"],
          teraTypes: ["Dark", "Water"]
        }
      ]
    },
    samurotthisui: {
      level: 77,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Ceaseless Edge", "Flip Turn", "Razor Shell", "Sacred Sword", "Sucker Punch", "Swords Dance"],
          abilities: ["Sharpness"],
          teraTypes: ["Dark", "Poison", "Water"]
        }
      ]
    },
    zebstrika: {
      level: 87,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["High Horsepower", "Overheat", "Supercell Slam", "Volt Switch"],
          abilities: ["Sap Sipper"],
          teraTypes: ["Ground"]
        }
      ]
    },
    excadrill: {
      level: 80,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Earthquake", "Iron Head", "Rapid Spin", "Rock Slide", "Swords Dance"],
          abilities: ["Mold Breaker", "Sand Rush"],
          teraTypes: ["Grass", "Ground", "Water"]
        }
      ]
    },
    gurdurr: {
      level: 85,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Bulk Up", "Defog", "Drain Punch", "Knock Off", "Mach Punch"],
          abilities: ["Guts"],
          teraTypes: ["Steel"]
        }
      ]
    },
    conkeldurr: {
      level: 80,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Close Combat", "Facade", "Knock Off", "Mach Punch"],
          abilities: ["Guts"],
          teraTypes: ["Normal"]
        }
      ]
    },
    leavanny: {
      level: 86,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Knock Off", "Leaf Blade", "Lunge", "Sticky Web", "Swords Dance"],
          abilities: ["Chlorophyll", "Swarm"],
          teraTypes: ["Ghost", "Rock"]
        }
      ]
    },
    whimsicott: {
      level: 85,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Encore", "Giga Drain", "Moonblast", "Stun Spore", "Taunt", "U-turn"],
          abilities: ["Prankster"],
          teraTypes: ["Poison", "Steel"]
        },
        {
          role: "Bulky Support",
          movepool: ["Encore", "Hurricane", "Leech Seed", "Moonblast", "Substitute"],
          abilities: ["Prankster"],
          teraTypes: ["Steel"]
        }
      ]
    },
    lilligant: {
      level: 86,
      sets: [
        {
          role: "Tera Blast user",
          movepool: ["Giga Drain", "Quiver Dance", "Sleep Powder", "Tera Blast"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Fire", "Rock"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Alluring Voice", "Petal Dance", "Quiver Dance", "Sleep Powder"],
          abilities: ["Own Tempo"],
          teraTypes: ["Fairy", "Grass"]
        }
      ]
    },
    lilliganthisui: {
      level: 80,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Close Combat", "Ice Spinner", "Leaf Blade", "Sleep Powder", "Victory Dance"],
          abilities: ["Hustle"],
          teraTypes: ["Fighting", "Steel"]
        }
      ]
    },
    basculin: {
      level: 86,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Aqua Jet", "Double-Edge", "Flip Turn", "Wave Crash"],
          abilities: ["Adaptability"],
          teraTypes: ["Water"]
        }
      ]
    },
    basculegion: {
      level: 81,
      sets: [
        {
          role: "AV Pivot",
          movepool: ["Aqua Jet", "Flip Turn", "Shadow Ball", "Wave Crash"],
          abilities: ["Adaptability"],
          teraTypes: ["Water"]
        }
      ]
    },
    basculegionf: {
      level: 83,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Flip Turn", "Hydro Pump", "Ice Beam", "Shadow Ball"],
          abilities: ["Adaptability"],
          teraTypes: ["Water"]
        },
        {
          role: "AV Pivot",
          movepool: ["Flip Turn", "Hydro Pump", "Shadow Ball", "Wave Crash"],
          abilities: ["Adaptability"],
          teraTypes: ["Water"]
        }
      ]
    },
    krookodile: {
      level: 80,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Bulk Up", "Earthquake", "Gunk Shot", "Knock Off", "Stealth Rock", "Stone Edge"],
          abilities: ["Intimidate"],
          teraTypes: ["Ground", "Poison"]
        }
      ]
    },
    scrafty: {
      level: 84,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "Drain Punch", "Knock Off", "Rest"],
          abilities: ["Shed Skin"],
          teraTypes: ["Poison"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Close Combat", "Dragon Dance", "Knock Off", "Poison Jab"],
          abilities: ["Intimidate"],
          teraTypes: ["Poison"]
        }
      ]
    },
    zoroark: {
      level: 84,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Dark Pulse", "Flamethrower", "Focus Blast", "Nasty Plot", "Psychic", "Sludge Bomb", "Trick", "U-turn"],
          abilities: ["Illusion"],
          teraTypes: ["Poison"]
        }
      ]
    },
    zoroarkhisui: {
      level: 80,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Bitter Malice", "Flamethrower", "Focus Blast", "Hyper Voice", "Nasty Plot", "Trick", "U-turn"],
          abilities: ["Illusion"],
          teraTypes: ["Fighting", "Normal"]
        }
      ]
    },
    cinccino: {
      level: 83,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Bullet Seed", "Tail Slap", "Tidy Up", "Triple Axel", "U-turn"],
          abilities: ["Technician"],
          teraTypes: ["Grass", "Ice", "Normal"]
        }
      ]
    },
    gothitelle: {
      level: 90,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Dark Pulse", "Focus Blast", "Psychic Noise", "Thunderbolt"],
          abilities: ["Shadow Tag"],
          teraTypes: ["Dark", "Electric", "Fairy", "Fighting", "Flying", "Ghost", "Ground", "Steel"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Dark Pulse", "Focus Blast", "Psychic", "Trick"],
          abilities: ["Shadow Tag"],
          teraTypes: ["Dark", "Fairy", "Fighting", "Flying", "Ghost", "Ground", "Psychic", "Steel"]
        }
      ]
    },
    reuniclus: {
      level: 88,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Focus Blast", "Psychic", "Psyshock", "Recover", "Shadow Ball"],
          abilities: ["Magic Guard"],
          teraTypes: ["Fighting", "Steel"]
        }
      ]
    },
    swanna: {
      level: 88,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Brave Bird", "Defog", "Hydro Pump", "Knock Off", "Roost"],
          abilities: ["Hydration"],
          teraTypes: ["Ground"]
        }
      ]
    },
    sawsbuck: {
      level: 88,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Double-Edge", "High Horsepower", "Horn Leech", "Swords Dance"],
          abilities: ["Sap Sipper"],
          teraTypes: ["Ground", "Normal"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Headbutt", "High Horsepower", "Horn Leech", "Swords Dance"],
          abilities: ["Serene Grace"],
          teraTypes: ["Normal"]
        }
      ]
    },
    amoonguss: {
      level: 82,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Clear Smog", "Giga Drain", "Sludge Bomb", "Spore", "Toxic"],
          abilities: ["Regenerator"],
          teraTypes: ["Steel", "Water"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Giga Drain", "Sludge Bomb", "Spore", "Stomping Tantrum"],
          abilities: ["Regenerator"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    alomomola: {
      level: 87,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Flip Turn", "Protect", "Scald", "Wish"],
          abilities: ["Regenerator"],
          teraTypes: ["Steel"]
        },
        {
          role: "Fast Support",
          movepool: ["Flip Turn", "Protect", "Scald", "Wish"],
          abilities: ["Regenerator"],
          teraTypes: ["Steel"]
        }
      ]
    },
    galvantula: {
      level: 82,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Bug Buzz", "Giga Drain", "Sticky Web", "Thunder", "Volt Switch"],
          abilities: ["Compound Eyes"],
          teraTypes: ["Electric"]
        }
      ]
    },
    eelektross: {
      level: 87,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Coil", "Drain Punch", "Fire Punch", "Knock Off", "Supercell Slam"],
          abilities: ["Levitate"],
          teraTypes: ["Fighting"]
        },
        {
          role: "AV Pivot",
          movepool: ["Close Combat", "Discharge", "Flamethrower", "Giga Drain", "Knock Off", "U-turn"],
          abilities: ["Levitate"],
          teraTypes: ["Poison", "Steel"]
        }
      ]
    },
    chandelure: {
      level: 83,
      sets: [
        {
          role: "Fast Bulky Setup",
          movepool: ["Calm Mind", "Energy Ball", "Fire Blast", "Pain Split", "Shadow Ball", "Substitute", "Will-O-Wisp"],
          abilities: ["Flame Body", "Flash Fire"],
          teraTypes: ["Fire", "Ghost", "Grass"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Energy Ball", "Fire Blast", "Shadow Ball", "Trick"],
          abilities: ["Flash Fire"],
          teraTypes: ["Fire", "Ghost", "Grass"]
        }
      ]
    },
    haxorus: {
      level: 77,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Close Combat", "Dragon Dance", "Earthquake", "Iron Head", "Outrage"],
          abilities: ["Mold Breaker"],
          teraTypes: ["Steel"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Close Combat", "Earthquake", "Iron Head", "Scale Shot", "Swords Dance"],
          abilities: ["Mold Breaker"],
          teraTypes: ["Steel"]
        }
      ]
    },
    beartic: {
      level: 91,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Aqua Jet", "Close Combat", "Earthquake", "Icicle Crash", "Snowscape", "Swords Dance"],
          abilities: ["Slush Rush", "Swift Swim"],
          teraTypes: ["Fighting", "Ground", "Ice"]
        }
      ]
    },
    cryogonal: {
      level: 89,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Flash Cannon", "Freeze-Dry", "Haze", "Rapid Spin", "Recover"],
          abilities: ["Levitate"],
          teraTypes: ["Poison", "Steel"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Ice Beam", "Rapid Spin", "Recover", "Tera Blast"],
          abilities: ["Levitate"],
          teraTypes: ["Electric"]
        }
      ]
    },
    mienshao: {
      level: 83,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["High Jump Kick", "Knock Off", "Poison Jab", "Stone Edge", "U-turn"],
          abilities: ["Reckless"],
          teraTypes: ["Fighting"]
        },
        {
          role: "AV Pivot",
          movepool: ["Close Combat", "Fake Out", "Knock Off", "U-turn"],
          abilities: ["Regenerator"],
          teraTypes: ["Dark", "Steel"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Close Combat", "Knock Off", "Poison Jab", "Swords Dance", "Triple Axel"],
          abilities: ["Regenerator"],
          teraTypes: ["Dark", "Fighting", "Poison"]
        }
      ]
    },
    golurk: {
      level: 87,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Dynamic Punch", "Earthquake", "Poltergeist", "Stealth Rock", "Stone Edge"],
          abilities: ["No Guard"],
          teraTypes: ["Fighting", "Ghost", "Ground"]
        }
      ]
    },
    braviary: {
      level: 85,
      sets: [
        {
          role: "Fast Bulky Setup",
          movepool: ["Brave Bird", "Bulk Up", "Close Combat", "Roost"],
          abilities: ["Defiant"],
          teraTypes: ["Fighting", "Steel"]
        }
      ]
    },
    braviaryhisui: {
      level: 85,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Agility", "Heat Wave", "Hurricane", "Psychic"],
          abilities: ["Sheer Force"],
          teraTypes: ["Fairy", "Fire", "Psychic", "Steel"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Esper Wing", "Hurricane", "U-turn", "Vacuum Wave"],
          abilities: ["Tinted Lens"],
          teraTypes: ["Fairy", "Fighting", "Psychic", "Steel"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Calm Mind", "Defog", "Esper Wing", "Hurricane", "Roost"],
          abilities: ["Tinted Lens"],
          teraTypes: ["Fairy", "Psychic", "Steel"]
        }
      ]
    },
    mandibuzz: {
      level: 85,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Defog", "Foul Play", "Roost", "Toxic", "U-turn"],
          abilities: ["Overcoat"],
          teraTypes: ["Steel"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Brave Bird", "Defog", "Foul Play", "Knock Off", "Roost", "Toxic"],
          abilities: ["Overcoat"],
          teraTypes: ["Steel"]
        }
      ]
    },
    hydreigon: {
      level: 79,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Dark Pulse", "Draco Meteor", "Fire Blast", "Flash Cannon", "Nasty Plot", "U-turn"],
          abilities: ["Levitate"],
          teraTypes: ["Dark", "Dragon", "Fire", "Steel"]
        }
      ]
    },
    volcarona: {
      level: 77,
      sets: [
        {
          role: "Fast Bulky Setup",
          movepool: ["Bug Buzz", "Fiery Dance", "Fire Blast", "Giga Drain", "Morning Sun", "Quiver Dance"],
          abilities: ["Flame Body", "Swarm"],
          teraTypes: ["Fire", "Grass", "Steel"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Bug Buzz", "Fiery Dance", "Fire Blast", "Giga Drain", "Quiver Dance", "Tera Blast"],
          abilities: ["Flame Body", "Swarm"],
          teraTypes: ["Ground", "Water"]
        }
      ]
    },
    cobalion: {
      level: 80,
      sets: [
        {
          role: "Fast Bulky Setup",
          movepool: ["Close Combat", "Iron Head", "Stone Edge", "Swords Dance", "Taunt"],
          abilities: ["Justified"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Aura Sphere", "Calm Mind", "Flash Cannon", "Vacuum Wave"],
          abilities: ["Justified"],
          teraTypes: ["Fighting", "Ghost", "Water"]
        },
        {
          role: "Bulky Support",
          movepool: ["Body Press", "Iron Defense", "Iron Head", "Stealth Rock", "Stone Edge", "Thunder Wave", "Volt Switch"],
          abilities: ["Justified"],
          teraTypes: ["Ghost", "Water"]
        }
      ]
    },
    terrakion: {
      level: 79,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Close Combat", "Earthquake", "Stone Edge", "Swords Dance"],
          abilities: ["Justified"],
          teraTypes: ["Fighting", "Ground"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Close Combat", "Earthquake", "Quick Attack", "Stone Edge"],
          abilities: ["Justified"],
          teraTypes: ["Fighting", "Ground"]
        }
      ]
    },
    virizion: {
      level: 82,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Close Combat", "Leaf Blade", "Stone Edge", "Swords Dance"],
          abilities: ["Justified"],
          teraTypes: ["Rock"]
        }
      ]
    },
    tornadus: {
      level: 82,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Bleakwind Storm", "Focus Blast", "Grass Knot", "Heat Wave", "Nasty Plot", "U-turn"],
          abilities: ["Defiant", "Prankster"],
          teraTypes: ["Fighting", "Fire", "Flying"]
        }
      ]
    },
    tornadustherian: {
      level: 79,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Bleakwind Storm", "Focus Blast", "Grass Knot", "Heat Wave", "Nasty Plot", "U-turn"],
          abilities: ["Regenerator"],
          teraTypes: ["Fighting", "Fire", "Flying"]
        },
        {
          role: "AV Pivot",
          movepool: ["Bleakwind Storm", "Heat Wave", "Knock Off", "U-turn"],
          abilities: ["Regenerator"],
          teraTypes: ["Dark", "Fire", "Flying"]
        }
      ]
    },
    thundurus: {
      level: 80,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Focus Blast", "Grass Knot", "Knock Off", "Nasty Plot", "Sludge Wave", "Taunt", "Thunder Wave", "Thunderbolt", "U-turn"],
          abilities: ["Defiant", "Prankster"],
          teraTypes: ["Electric", "Grass", "Steel"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Focus Blast", "Nasty Plot", "Tera Blast", "Thunderbolt"],
          abilities: ["Defiant"],
          teraTypes: ["Flying"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Acrobatics", "Focus Blast", "Grass Knot", "Knock Off", "Taunt", "Thunder Wave", "Thunderbolt", "U-turn"],
          abilities: ["Defiant", "Prankster"],
          teraTypes: ["Electric", "Flying", "Grass", "Steel"]
        }
      ]
    },
    thundurustherian: {
      level: 80,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Focus Blast", "Grass Knot", "Nasty Plot", "Psychic", "Sludge Wave", "Thunderbolt", "Volt Switch"],
          abilities: ["Volt Absorb"],
          teraTypes: ["Electric", "Poison", "Psychic"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Focus Blast", "Nasty Plot", "Tera Blast", "Thunderbolt"],
          abilities: ["Volt Absorb"],
          teraTypes: ["Flying"]
        }
      ]
    },
    reshiram: {
      level: 76,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Blue Flare", "Draco Meteor", "Dragon Tail", "Earth Power", "Will-O-Wisp"],
          abilities: ["Turboblaze"],
          teraTypes: ["Fire", "Ground"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Dance", "Flare Blitz", "Outrage", "Stone Edge"],
          abilities: ["Turboblaze"],
          teraTypes: ["Dragon", "Fire"]
        }
      ]
    },
    zekrom: {
      level: 71,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Bolt Strike", "Dragon Dance", "Outrage", "Substitute"],
          abilities: ["Teravolt"],
          teraTypes: ["Electric", "Steel"]
        }
      ]
    },
    landorus: {
      level: 75,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Earth Power", "Focus Blast", "Nasty Plot", "Psychic", "Rock Slide", "Sludge Wave", "Stealth Rock"],
          abilities: ["Sheer Force"],
          teraTypes: ["Ground", "Poison", "Psychic"]
        }
      ]
    },
    landorustherian: {
      level: 76,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Stealth Rock", "Stone Edge", "Taunt", "U-turn"],
          abilities: ["Intimidate"],
          teraTypes: ["Ground", "Water"]
        }
      ]
    },
    kyurem: {
      level: 77,
      sets: [
        {
          role: "Tera Blast user",
          movepool: ["Dragon Dance", "Icicle Spear", "Scale Shot", "Tera Blast"],
          abilities: ["Pressure"],
          teraTypes: ["Ground"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Draco Meteor", "Earth Power", "Freeze-Dry", "Ice Beam", "Outrage"],
          abilities: ["Pressure"],
          teraTypes: ["Ground"]
        }
      ]
    },
    kyuremwhite: {
      level: 73,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Draco Meteor", "Earth Power", "Freeze-Dry", "Fusion Flare"],
          abilities: ["Turboblaze"],
          teraTypes: ["Dragon", "Fire"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Draco Meteor", "Freeze-Dry", "Fusion Flare", "Ice Beam"],
          abilities: ["Turboblaze"],
          teraTypes: ["Dragon", "Fire"]
        }
      ]
    },
    kyuremblack: {
      level: 71,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Dance", "Fusion Bolt", "Icicle Spear", "Scale Shot"],
          abilities: ["Teravolt"],
          teraTypes: ["Electric"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Dragon Dance", "Icicle Spear", "Scale Shot", "Tera Blast"],
          abilities: ["Teravolt"],
          teraTypes: ["Ground"]
        }
      ]
    },
    keldeoresolute: {
      level: 79,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Air Slash", "Calm Mind", "Flip Turn", "Hydro Pump", "Secret Sword", "Vacuum Wave"],
          abilities: ["Justified"],
          teraTypes: ["Fighting", "Water"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Hydro Pump", "Secret Sword", "Substitute", "Surf"],
          abilities: ["Justified"],
          teraTypes: ["Steel"]
        }
      ]
    },
    meloetta: {
      level: 82,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Calm Mind", "Focus Blast", "Hyper Voice", "Psyshock", "U-turn"],
          abilities: ["Serene Grace"],
          teraTypes: ["Fighting", "Normal", "Psychic"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Close Combat", "Knock Off", "Relic Song", "Triple Axel"],
          abilities: ["Serene Grace"],
          teraTypes: ["Dark", "Fighting"]
        }
      ]
    },
    chesnaught: {
      level: 84,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Body Press", "Knock Off", "Spikes", "Synthesis", "Wood Hammer"],
          abilities: ["Bulletproof"],
          teraTypes: ["Steel", "Water"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Body Press", "Iron Defense", "Synthesis", "Trailblaze"],
          abilities: ["Bulletproof"],
          teraTypes: ["Steel"]
        }
      ]
    },
    delphox: {
      level: 84,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Fire Blast", "Focus Blast", "Grass Knot", "Nasty Plot", "Psyshock"],
          abilities: ["Blaze"],
          teraTypes: ["Fighting", "Fire", "Grass", "Psychic"]
        }
      ]
    },
    greninja: {
      level: 80,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Dark Pulse", "Grass Knot", "Gunk Shot", "Hydro Pump", "Ice Beam", "Toxic Spikes", "U-turn"],
          abilities: ["Protean"],
          teraTypes: ["Dark", "Poison", "Water"]
        }
      ]
    },
    greninjabond: {
      level: 80,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Dark Pulse", "Gunk Shot", "Hydro Pump", "Ice Beam"],
          abilities: ["Battle Bond"],
          teraTypes: ["Poison", "Water"]
        }
      ]
    },
    talonflame: {
      level: 84,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Brave Bird", "Defog", "Overheat", "Roost", "Taunt", "U-turn", "Will-O-Wisp"],
          abilities: ["Flame Body"],
          teraTypes: ["Dragon", "Ground"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Brave Bird", "Flare Blitz", "Swords Dance", "Tera Blast"],
          abilities: ["Flame Body"],
          teraTypes: ["Ground"]
        }
      ]
    },
    vivillon: {
      level: 84,
      sets: [
        {
          role: "Fast Bulky Setup",
          movepool: ["Bug Buzz", "Hurricane", "Quiver Dance", "Sleep Powder"],
          abilities: ["Compound Eyes"],
          teraTypes: ["Flying"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Hurricane", "Quiver Dance", "Sleep Powder", "Tera Blast"],
          abilities: ["Compound Eyes"],
          teraTypes: ["Ground"]
        }
      ]
    },
    pyroar: {
      level: 88,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Dark Pulse", "Fire Blast", "Hyper Voice", "Will-O-Wisp", "Work Up"],
          abilities: ["Unnerve"],
          teraTypes: ["Fire"]
        }
      ]
    },
    florges: {
      level: 85,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Moonblast", "Protect", "Wish"],
          abilities: ["Flower Veil"],
          teraTypes: ["Steel"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Calm Mind", "Moonblast", "Synthesis", "Tera Blast"],
          abilities: ["Flower Veil"],
          teraTypes: ["Ground"]
        }
      ]
    },
    gogoat: {
      level: 88,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "Earthquake", "Horn Leech", "Milk Drink", "Rock Slide"],
          abilities: ["Sap Sipper"],
          teraTypes: ["Ground", "Water"]
        }
      ]
    },
    meowstic: {
      level: 89,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Alluring Voice", "Light Screen", "Psychic Noise", "Reflect", "Thunder Wave", "Yawn"],
          abilities: ["Prankster"],
          teraTypes: ["Fairy"]
        }
      ]
    },
    meowsticf: {
      level: 89,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Alluring Voice", "Dark Pulse", "Nasty Plot", "Psychic", "Psyshock", "Thunderbolt"],
          abilities: ["Competitive"],
          teraTypes: ["Dark", "Electric", "Fairy"]
        }
      ]
    },
    malamar: {
      level: 82,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Knock Off", "Rest", "Sleep Talk", "Superpower"],
          abilities: ["Contrary"],
          teraTypes: ["Fighting", "Poison", "Steel"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Knock Off", "Psycho Cut", "Rest", "Superpower"],
          abilities: ["Contrary"],
          teraTypes: ["Fighting", "Poison", "Steel"]
        }
      ]
    },
    dragalge: {
      level: 88,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Draco Meteor", "Dragon Tail", "Flip Turn", "Focus Blast", "Sludge Wave", "Toxic", "Toxic Spikes"],
          abilities: ["Adaptability"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    clawitzer: {
      level: 87,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Aura Sphere", "Dark Pulse", "Dragon Pulse", "U-turn", "Water Pulse"],
          abilities: ["Mega Launcher"],
          teraTypes: ["Dark", "Dragon", "Fighting"]
        },
        {
          role: "AV Pivot",
          movepool: ["Aura Sphere", "Dark Pulse", "Dragon Pulse", "U-turn", "Water Pulse"],
          abilities: ["Mega Launcher"],
          teraTypes: ["Dragon"]
        }
      ]
    },
    sylveon: {
      level: 85,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Hyper Voice", "Protect", "Wish"],
          abilities: ["Pixilate"],
          teraTypes: ["Steel"]
        }
      ]
    },
    hawlucha: {
      level: 80,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Acrobatics", "Brave Bird", "Close Combat", "Encore", "Stone Edge", "Swords Dance", "Throat Chop"],
          abilities: ["Unburden"],
          teraTypes: ["Fighting", "Flying"]
        }
      ]
    },
    dedenne: {
      level: 88,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Dazzling Gleam", "Nuzzle", "Super Fang", "Thunderbolt", "U-turn"],
          abilities: ["Cheek Pouch"],
          teraTypes: ["Electric", "Flying"]
        }
      ]
    },
    carbink: {
      level: 90,
      sets: [
        {
          role: "Fast Bulky Setup",
          movepool: ["Body Press", "Iron Defense", "Moonblast", "Rest", "Rock Polish"],
          abilities: ["Clear Body", "Sturdy"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    goodra: {
      level: 85,
      sets: [
        {
          role: "AV Pivot",
          movepool: ["Draco Meteor", "Earthquake", "Fire Blast", "Knock Off", "Power Whip", "Scald", "Sludge Bomb"],
          abilities: ["Sap Sipper"],
          teraTypes: ["Fire", "Grass", "Ground", "Poison", "Water"]
        }
      ]
    },
    goodrahisui: {
      level: 82,
      sets: [
        {
          role: "AV Pivot",
          movepool: ["Draco Meteor", "Dragon Tail", "Earthquake", "Fire Blast", "Heavy Slam", "Hydro Pump", "Knock Off", "Thunderbolt"],
          abilities: ["Sap Sipper"],
          teraTypes: ["Dragon", "Flying", "Ground", "Water"]
        }
      ]
    },
    klefki: {
      level: 84,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Magnet Rise", "Play Rough", "Spikes", "Thunder Wave"],
          abilities: ["Prankster"],
          teraTypes: ["Water"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Dazzling Gleam", "Foul Play", "Spikes", "Thunder Wave"],
          abilities: ["Prankster"],
          teraTypes: ["Flying", "Water"]
        }
      ]
    },
    trevenant: {
      level: 88,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Drain Punch", "Horn Leech", "Poltergeist", "Rest", "Trick Room", "Will-O-Wisp", "Wood Hammer"],
          abilities: ["Natural Cure"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Bulky Support",
          movepool: ["Drain Punch", "Poltergeist", "Protect", "Toxic"],
          abilities: ["Harvest"],
          teraTypes: ["Dark", "Fairy", "Fighting", "Steel"]
        }
      ]
    },
    avalugg: {
      level: 88,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Avalanche", "Body Press", "Curse", "Rapid Spin", "Recover"],
          abilities: ["Sturdy"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    avalugghisui: {
      level: 90,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Avalanche", "Body Press", "Rapid Spin", "Recover", "Stone Edge"],
          abilities: ["Sturdy"],
          teraTypes: ["Flying", "Ghost", "Poison"]
        }
      ]
    },
    noivern: {
      level: 82,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Boomburst", "Draco Meteor", "Flamethrower", "Hurricane", "Roost", "U-turn"],
          abilities: ["Infiltrator"],
          teraTypes: ["Normal"]
        },
        {
          role: "Fast Support",
          movepool: ["Defog", "Draco Meteor", "Flamethrower", "Hurricane", "Roost", "U-turn"],
          abilities: ["Infiltrator"],
          teraTypes: ["Fire"]
        }
      ]
    },
    diancie: {
      level: 82,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Body Press", "Diamond Storm", "Earth Power", "Moonblast", "Rock Polish", "Stealth Rock"],
          abilities: ["Clear Body"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Diamond Storm", "Draining Kiss", "Earth Power"],
          abilities: ["Clear Body"],
          teraTypes: ["Fairy", "Water"]
        }
      ]
    },
    hoopa: {
      level: 85,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Focus Blast", "Nasty Plot", "Psychic", "Psyshock", "Shadow Ball", "Trick"],
          abilities: ["Magician"],
          teraTypes: ["Fighting", "Ghost", "Psychic"]
        }
      ]
    },
    hoopaunbound: {
      level: 80,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Drain Punch", "Gunk Shot", "Hyperspace Fury", "Trick", "Zen Headbutt"],
          abilities: ["Magician"],
          teraTypes: ["Dark", "Fighting", "Poison"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Focus Blast", "Gunk Shot", "Hyperspace Fury", "Psychic", "Trick"],
          abilities: ["Magician"],
          teraTypes: ["Fighting", "Poison"]
        }
      ]
    },
    volcanion: {
      level: 79,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Earth Power", "Flame Charge", "Flamethrower", "Haze", "Sludge Bomb", "Steam Eruption"],
          abilities: ["Water Absorb"],
          teraTypes: ["Fire", "Ground", "Water"]
        }
      ]
    },
    decidueye: {
      level: 88,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Defog", "Knock Off", "Leaf Storm", "Roost", "Spirit Shackle", "U-turn"],
          abilities: ["Overgrow"],
          teraTypes: ["Dark", "Ghost", "Grass"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Leaf Blade", "Poltergeist", "Shadow Sneak", "Swords Dance"],
          abilities: ["Overgrow"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    decidueyehisui: {
      level: 87,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Defog", "Knock Off", "Leaf Blade", "Roost", "Sucker Punch", "Swords Dance", "Triple Arrows", "U-turn"],
          abilities: ["Scrappy"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    incineroar: {
      level: 83,
      sets: [
        {
          role: "AV Pivot",
          movepool: ["Close Combat", "Fake Out", "Knock Off", "Overheat", "U-turn"],
          abilities: ["Intimidate"],
          teraTypes: ["Fighting", "Water"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Close Combat", "Earthquake", "Flare Blitz", "Knock Off", "Parting Shot", "Will-O-Wisp"],
          abilities: ["Intimidate"],
          teraTypes: ["Fighting", "Water"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Flare Blitz", "Knock Off", "Swords Dance", "Trailblaze"],
          abilities: ["Intimidate"],
          teraTypes: ["Grass"]
        }
      ]
    },
    primarina: {
      level: 83,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Flip Turn", "Hydro Pump", "Moonblast", "Psychic"],
          abilities: ["Torrent"],
          teraTypes: ["Water"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Draining Kiss", "Moonblast", "Sparkling Aria"],
          abilities: ["Torrent"],
          teraTypes: ["Fairy", "Poison", "Steel"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Calm Mind", "Draining Kiss", "Psychic", "Sparkling Aria"],
          abilities: ["Torrent"],
          teraTypes: ["Fairy", "Poison", "Steel"]
        }
      ]
    },
    toucannon: {
      level: 88,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Beak Blast", "Boomburst", "Bullet Seed", "Knock Off", "Roost", "U-turn"],
          abilities: ["Keen Eye", "Skill Link"],
          teraTypes: ["Steel"]
        }
      ]
    },
    gumshoos: {
      level: 95,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Double-Edge", "Earthquake", "Knock Off", "U-turn"],
          abilities: ["Stakeout"],
          teraTypes: ["Normal"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Double-Edge", "Earthquake", "Knock Off", "U-turn"],
          abilities: ["Adaptability", "Stakeout"],
          teraTypes: ["Ground"]
        }
      ]
    },
    vikavolt: {
      level: 83,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Bug Buzz", "Discharge", "Energy Ball", "Sticky Web", "Thunderbolt", "Volt Switch"],
          abilities: ["Levitate"],
          teraTypes: ["Electric"]
        }
      ]
    },
    crabominable: {
      level: 90,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Close Combat", "Drain Punch", "Earthquake", "Gunk Shot", "Ice Hammer", "Knock Off"],
          abilities: ["Iron Fist"],
          teraTypes: ["Fighting", "Ground"]
        },
        {
          role: "AV Pivot",
          movepool: ["Drain Punch", "Earthquake", "Ice Hammer", "Knock Off"],
          abilities: ["Iron Fist"],
          teraTypes: ["Fighting", "Ground", "Water"]
        }
      ]
    },
    oricorio: {
      level: 84,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Hurricane", "Quiver Dance", "Revelation Dance", "Roost"],
          abilities: ["Dancer"],
          teraTypes: ["Ground"]
        }
      ]
    },
    oricoriopompom: {
      level: 82,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Hurricane", "Quiver Dance", "Revelation Dance", "Roost"],
          abilities: ["Dancer"],
          teraTypes: ["Ground"]
        }
      ]
    },
    oricoriopau: {
      level: 87,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Hurricane", "Quiver Dance", "Revelation Dance", "Roost"],
          abilities: ["Dancer"],
          teraTypes: ["Fighting", "Ground"]
        }
      ]
    },
    oricoriosensu: {
      level: 85,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Hurricane", "Quiver Dance", "Revelation Dance", "Roost"],
          abilities: ["Dancer"],
          teraTypes: ["Fighting", "Ghost"]
        }
      ]
    },
    ribombee: {
      level: 82,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Bug Buzz", "Moonblast", "Sticky Web", "Stun Spore", "U-turn"],
          abilities: ["Shield Dust"],
          teraTypes: ["Ghost"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Draining Kiss", "Moonblast", "Quiver Dance", "Tera Blast"],
          abilities: ["Shield Dust"],
          teraTypes: ["Ground"]
        }
      ]
    },
    lycanroc: {
      level: 86,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Accelerock", "Close Combat", "Crunch", "Psychic Fangs", "Stealth Rock", "Stone Edge", "Swords Dance", "Taunt"],
          abilities: ["Sand Rush"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    lycanrocmidnight: {
      level: 89,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Close Combat", "Knock Off", "Stealth Rock", "Stone Edge", "Sucker Punch", "Swords Dance"],
          abilities: ["No Guard"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    lycanrocdusk: {
      level: 80,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Accelerock", "Close Combat", "Psychic Fangs", "Stone Edge", "Swords Dance", "Throat Chop"],
          abilities: ["Tough Claws"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    toxapex: {
      level: 82,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Haze", "Liquidation", "Recover", "Toxic", "Toxic Spikes"],
          abilities: ["Regenerator"],
          teraTypes: ["Fairy", "Flying", "Grass", "Steel"]
        }
      ]
    },
    mudsdale: {
      level: 84,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Body Press", "Earthquake", "Heavy Slam", "Stealth Rock", "Stone Edge"],
          abilities: ["Stamina"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    araquanid: {
      level: 82,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Hydro Pump", "Leech Life", "Liquidation", "Mirror Coat", "Sticky Web"],
          abilities: ["Water Bubble"],
          teraTypes: ["Ground", "Steel", "Water"]
        }
      ]
    },
    lurantis: {
      level: 87,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Defog", "Knock Off", "Leaf Storm", "Superpower", "Synthesis"],
          abilities: ["Contrary"],
          teraTypes: ["Fighting"]
        },
        {
          role: "AV Pivot",
          movepool: ["Knock Off", "Leaf Storm", "Leech Life", "Superpower"],
          abilities: ["Contrary"],
          teraTypes: ["Fighting", "Steel", "Water"]
        }
      ]
    },
    salazzle: {
      level: 83,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Flamethrower", "Protect", "Substitute", "Toxic"],
          abilities: ["Corrosion"],
          teraTypes: ["Flying", "Grass"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Fire Blast", "Nasty Plot", "Sludge Wave", "Tera Blast"],
          abilities: ["Corrosion"],
          teraTypes: ["Grass"]
        }
      ]
    },
    tsareena: {
      level: 87,
      sets: [
        {
          role: "Fast Support",
          movepool: ["High Jump Kick", "Knock Off", "Power Whip", "Rapid Spin", "Synthesis", "Triple Axel", "U-turn"],
          abilities: ["Queenly Majesty"],
          teraTypes: ["Fighting", "Steel"]
        }
      ]
    },
    comfey: {
      level: 85,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Draining Kiss", "Giga Drain", "Stored Power"],
          abilities: ["Triage"],
          teraTypes: ["Fairy", "Poison", "Steel"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Calm Mind", "Draining Kiss", "Giga Drain", "Synthesis", "Tera Blast"],
          abilities: ["Triage"],
          teraTypes: ["Ground"]
        }
      ]
    },
    oranguru: {
      level: 92,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Focus Blast", "Nasty Plot", "Psychic", "Psyshock", "Thunderbolt"],
          abilities: ["Inner Focus"],
          teraTypes: ["Electric", "Fighting", "Psychic"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Focus Blast", "Hyper Voice", "Nasty Plot", "Psyshock", "Thunderbolt", "Trick"],
          abilities: ["Inner Focus"],
          teraTypes: ["Electric", "Fighting", "Normal", "Psychic"]
        }
      ]
    },
    passimian: {
      level: 83,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Close Combat", "Earthquake", "Gunk Shot", "Knock Off", "Rock Slide", "U-turn"],
          abilities: ["Defiant"],
          teraTypes: ["Dark", "Fighting", "Poison"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "Drain Punch", "Gunk Shot", "Knock Off"],
          abilities: ["Defiant"],
          teraTypes: ["Dark", "Poison", "Steel"]
        }
      ]
    },
    palossand: {
      level: 89,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earth Power", "Shadow Ball", "Shore Up", "Sludge Bomb", "Stealth Rock"],
          abilities: ["Water Compaction"],
          teraTypes: ["Poison", "Water"]
        }
      ]
    },
    minior: {
      level: 79,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Acrobatics", "Earthquake", "Power Gem", "Shell Smash"],
          abilities: ["Shields Down"],
          teraTypes: ["Flying", "Ground", "Steel", "Water"]
        }
      ]
    },
    komala: {
      level: 89,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Double-Edge", "Earthquake", "Knock Off", "Superpower", "U-turn", "Wood Hammer"],
          abilities: ["Comatose"],
          teraTypes: ["Fighting", "Grass", "Ground"]
        },
        {
          role: "Bulky Support",
          movepool: ["Body Slam", "Earthquake", "Knock Off", "Rapid Spin", "U-turn"],
          abilities: ["Comatose"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    mimikyu: {
      level: 79,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Drain Punch", "Play Rough", "Shadow Claw", "Shadow Sneak", "Swords Dance", "Wood Hammer"],
          abilities: ["Disguise"],
          teraTypes: ["Fairy", "Fighting", "Ghost", "Grass"]
        }
      ]
    },
    bruxish: {
      level: 85,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Aqua Jet", "Crunch", "Flip Turn", "Ice Fang", "Psychic Fangs", "Swords Dance", "Wave Crash"],
          abilities: ["Strong Jaw"],
          teraTypes: ["Dark", "Psychic"]
        }
      ]
    },
    kommoo: {
      level: 78,
      sets: [
        {
          role: "Fast Bulky Setup",
          movepool: ["Boomburst", "Clanging Scales", "Clangorous Soul", "Close Combat", "Iron Head"],
          abilities: ["Soundproof"],
          teraTypes: ["Normal", "Steel"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Close Combat", "Iron Head", "Scale Shot", "Swords Dance"],
          abilities: ["Soundproof"],
          teraTypes: ["Steel"]
        }
      ]
    },
    solgaleo: {
      level: 74,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Close Combat", "Flame Charge", "Knock Off", "Psychic", "Sunsteel Strike"],
          abilities: ["Full Metal Body"],
          teraTypes: ["Dark", "Fighting"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Close Combat", "Flare Blitz", "Knock Off", "Morning Sun", "Psychic Fangs", "Sunsteel Strike"],
          abilities: ["Full Metal Body"],
          teraTypes: ["Water"]
        }
      ]
    },
    lunala: {
      level: 70,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Moonblast", "Moongeist Beam", "Moonlight"],
          abilities: ["Shadow Shield"],
          teraTypes: ["Fairy"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Calm Mind", "Moongeist Beam", "Moonlight", "Psyshock"],
          abilities: ["Shadow Shield"],
          teraTypes: ["Dark", "Fairy"]
        }
      ]
    },
    necrozma: {
      level: 81,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Dance", "Earthquake", "Knock Off", "Photon Geyser", "Swords Dance"],
          abilities: ["Prism Armor"],
          teraTypes: ["Dark", "Ground", "Steel"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Earth Power", "Heat Wave", "Moonlight", "Photon Geyser"],
          abilities: ["Prism Armor"],
          teraTypes: ["Fairy", "Ground", "Steel"]
        }
      ]
    },
    necrozmaduskmane: {
      level: 69,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Dragon Dance", "Earthquake", "Morning Sun", "Sunsteel Strike"],
          abilities: ["Prism Armor"],
          teraTypes: ["Ground", "Steel", "Water"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Dance", "Earthquake", "Photon Geyser", "Sunsteel Strike"],
          abilities: ["Prism Armor"],
          teraTypes: ["Ground", "Steel", "Water"]
        }
      ]
    },
    necrozmadawnwings: {
      level: 76,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Moongeist Beam", "Moonlight", "Photon Geyser"],
          abilities: ["Prism Armor"],
          teraTypes: ["Dark", "Fairy"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Brick Break", "Dragon Dance", "Moongeist Beam", "Photon Geyser"],
          abilities: ["Prism Armor"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    magearna: {
      level: 77,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Aura Sphere", "Flash Cannon", "Fleur Cannon", "Pain Split", "Spikes", "Thunder Wave", "Volt Switch"],
          abilities: ["Soul-Heart"],
          teraTypes: ["Fairy", "Fighting", "Water"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Flash Cannon", "Fleur Cannon", "Shift Gear"],
          abilities: ["Soul-Heart"],
          teraTypes: ["Fairy", "Flying", "Steel", "Water"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Fleur Cannon", "Iron Head", "Shift Gear", "Tera Blast"],
          abilities: ["Soul-Heart"],
          teraTypes: ["Ground"]
        }
      ]
    },
    rillaboom: {
      level: 79,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Grassy Glide", "High Horsepower", "Knock Off", "Swords Dance", "U-turn", "Wood Hammer"],
          abilities: ["Grassy Surge"],
          teraTypes: ["Grass"]
        },
        {
          role: "AV Pivot",
          movepool: ["Grassy Glide", "High Horsepower", "U-turn", "Wood Hammer"],
          abilities: ["Grassy Surge"],
          teraTypes: ["Grass", "Poison", "Steel"]
        }
      ]
    },
    cinderace: {
      level: 77,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Gunk Shot", "High Jump Kick", "Pyro Ball", "U-turn"],
          abilities: ["Libero"],
          teraTypes: ["Fire"]
        },
        {
          role: "Fast Support",
          movepool: ["Court Change", "High Jump Kick", "Pyro Ball", "Sucker Punch"],
          abilities: ["Libero"],
          teraTypes: ["Fighting", "Fire"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Court Change", "Gunk Shot", "High Jump Kick", "Pyro Ball", "U-turn"],
          abilities: ["Libero"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    inteleon: {
      level: 81,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Dark Pulse", "Hydro Pump", "Ice Beam", "U-turn"],
          abilities: ["Torrent"],
          teraTypes: ["Water"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Hydro Pump", "Ice Beam", "Scald", "U-turn"],
          abilities: ["Torrent"],
          teraTypes: ["Water"]
        }
      ]
    },
    greedent: {
      level: 86,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Body Slam", "Double-Edge", "Earthquake", "Knock Off", "Swords Dance"],
          abilities: ["Cheek Pouch"],
          teraTypes: ["Ghost", "Ground"]
        }
      ]
    },
    corviknight: {
      level: 80,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Body Press", "Brave Bird", "Defog", "Roost", "U-turn"],
          abilities: ["Mirror Armor", "Pressure"],
          teraTypes: ["Dragon"]
        }
      ]
    },
    drednaw: {
      level: 81,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Crunch", "Liquidation", "Shell Smash", "Stone Edge"],
          abilities: ["Strong Jaw"],
          teraTypes: ["Dark"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Earthquake", "Liquidation", "Shell Smash", "Stone Edge"],
          abilities: ["Shell Armor", "Swift Swim"],
          teraTypes: ["Ground", "Water"]
        }
      ]
    },
    coalossal: {
      level: 89,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Flamethrower", "Overheat", "Rapid Spin", "Spikes", "Stealth Rock", "Stone Edge", "Will-O-Wisp"],
          abilities: ["Flame Body"],
          teraTypes: ["Ghost", "Grass", "Water"]
        }
      ]
    },
    flapple: {
      level: 88,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Dragon Dance", "Grav Apple", "Outrage", "Sucker Punch", "U-turn"],
          abilities: ["Hustle"],
          teraTypes: ["Dragon", "Grass"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Dragon Dance", "Grav Apple", "Outrage", "Tera Blast"],
          abilities: ["Hustle"],
          teraTypes: ["Fire"]
        }
      ]
    },
    appletun: {
      level: 92,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Apple Acid", "Draco Meteor", "Dragon Pulse", "Leech Seed", "Recover"],
          abilities: ["Thick Fat"],
          teraTypes: ["Steel"]
        }
      ]
    },
    sandaconda: {
      level: 84,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Coil", "Earthquake", "Glare", "Rest", "Stone Edge"],
          abilities: ["Shed Skin"],
          teraTypes: ["Dragon", "Steel"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Earthquake", "Glare", "Rest", "Stealth Rock", "Stone Edge"],
          abilities: ["Shed Skin"],
          teraTypes: ["Dragon", "Water"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Coil", "Earthquake", "Rock Blast", "Scale Shot"],
          abilities: ["Shed Skin"],
          teraTypes: ["Dragon"]
        }
      ]
    },
    cramorant: {
      level: 86,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Brave Bird", "Defog", "Roost", "Surf"],
          abilities: ["Gulp Missile"],
          teraTypes: ["Ground"]
        }
      ]
    },
    barraskewda: {
      level: 81,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Close Combat", "Flip Turn", "Poison Jab", "Psychic Fangs", "Throat Chop", "Waterfall"],
          abilities: ["Swift Swim"],
          teraTypes: ["Fighting", "Water"]
        }
      ]
    },
    toxtricity: {
      level: 82,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Boomburst", "Overdrive", "Sludge Wave", "Volt Switch"],
          abilities: ["Punk Rock"],
          teraTypes: ["Normal"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Boomburst", "Gunk Shot", "Overdrive", "Shift Gear"],
          abilities: ["Punk Rock"],
          teraTypes: ["Normal"]
        }
      ]
    },
    polteageist: {
      level: 79,
      sets: [
        {
          role: "Tera Blast user",
          movepool: ["Shadow Ball", "Shell Smash", "Stored Power", "Strength Sap", "Tera Blast"],
          abilities: ["Cursed Body"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Giga Drain", "Shadow Ball", "Shell Smash", "Stored Power", "Strength Sap"],
          abilities: ["Cursed Body"],
          teraTypes: ["Psychic"]
        }
      ]
    },
    hatterene: {
      level: 85,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Draining Kiss", "Mystical Fire", "Psychic", "Psyshock"],
          abilities: ["Magic Bounce"],
          teraTypes: ["Fairy", "Steel"]
        },
        {
          role: "AV Pivot",
          movepool: ["Draining Kiss", "Mystical Fire", "Nuzzle", "Psychic", "Psychic Noise"],
          abilities: ["Magic Bounce"],
          teraTypes: ["Fairy", "Steel"]
        }
      ]
    },
    grimmsnarl: {
      level: 83,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Light Screen", "Parting Shot", "Reflect", "Spirit Break", "Thunder Wave"],
          abilities: ["Prankster"],
          teraTypes: ["Poison", "Steel"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Parting Shot", "Spirit Break", "Sucker Punch", "Taunt", "Thunder Wave"],
          abilities: ["Prankster"],
          teraTypes: ["Poison", "Steel"]
        }
      ]
    },
    perrserker: {
      level: 89,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Close Combat", "Iron Head", "Knock Off", "Stealth Rock", "U-turn"],
          abilities: ["Steely Spirit", "Tough Claws"],
          teraTypes: ["Fighting", "Steel"]
        }
      ]
    },
    alcremie: {
      level: 90,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Alluring Voice", "Calm Mind", "Psychic", "Psyshock", "Recover"],
          abilities: ["Aroma Veil"],
          teraTypes: ["Poison", "Steel"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Alluring Voice", "Calm Mind", "Recover", "Tera Blast"],
          abilities: ["Aroma Veil"],
          teraTypes: ["Ground"]
        }
      ]
    },
    falinks: {
      level: 85,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Close Combat", "Iron Head", "Knock Off", "No Retreat"],
          abilities: ["Defiant"],
          teraTypes: ["Dark", "Steel"]
        }
      ]
    },
    pincurchin: {
      level: 100,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Discharge", "Recover", "Scald", "Spikes", "Thunderbolt", "Toxic Spikes"],
          abilities: ["Electric Surge"],
          teraTypes: ["Water"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Curse", "Liquidation", "Recover", "Zing Zap"],
          abilities: ["Electric Surge"],
          teraTypes: ["Grass", "Water"]
        }
      ]
    },
    frosmoth: {
      level: 82,
      sets: [
        {
          role: "Tera Blast user",
          movepool: ["Bug Buzz", "Giga Drain", "Ice Beam", "Quiver Dance", "Tera Blast"],
          abilities: ["Ice Scales"],
          teraTypes: ["Ground"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Bug Buzz", "Giga Drain", "Hurricane", "Ice Beam", "Quiver Dance"],
          abilities: ["Ice Scales"],
          teraTypes: ["Water"]
        }
      ]
    },
    stonjourner: {
      level: 91,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Earthquake", "Heat Crash", "Rock Polish", "Stealth Rock", "Stone Edge"],
          abilities: ["Power Spot"],
          teraTypes: ["Fire", "Ground"]
        }
      ]
    },
    eiscue: {
      level: 88,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Belly Drum", "Ice Spinner", "Iron Head", "Liquidation", "Substitute", "Zen Headbutt"],
          abilities: ["Ice Face"],
          teraTypes: ["Water"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Belly Drum", "Ice Spinner", "Liquidation", "Substitute", "Tera Blast"],
          abilities: ["Ice Face"],
          teraTypes: ["Electric", "Ground"]
        }
      ]
    },
    indeedee: {
      level: 84,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Calm Mind", "Dazzling Gleam", "Expanding Force", "Healing Wish", "Hyper Voice", "Shadow Ball"],
          abilities: ["Psychic Surge"],
          teraTypes: ["Psychic"]
        }
      ]
    },
    indeedeef: {
      level: 90,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Calm Mind", "Dazzling Gleam", "Healing Wish", "Hyper Voice", "Psychic", "Psyshock", "Shadow Ball"],
          abilities: ["Psychic Surge"],
          teraTypes: ["Fairy", "Psychic"]
        }
      ]
    },
    morpeko: {
      level: 88,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Aura Wheel", "Parting Shot", "Protect", "Rapid Spin"],
          abilities: ["Hunger Switch"],
          teraTypes: ["Electric"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Aura Wheel", "Knock Off", "Protect", "Rapid Spin"],
          abilities: ["Hunger Switch"],
          teraTypes: ["Electric"]
        }
      ]
    },
    copperajah: {
      level: 86,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Earthquake", "Iron Head", "Play Rough", "Rock Slide", "Stealth Rock", "Superpower"],
          abilities: ["Sheer Force"],
          teraTypes: ["Fairy"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Earthquake", "Heat Crash", "Heavy Slam", "Knock Off", "Stone Edge", "Supercell Slam", "Superpower"],
          abilities: ["Heavy Metal"],
          teraTypes: ["Fire", "Steel"]
        }
      ]
    },
    duraludon: {
      level: 82,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Body Press", "Draco Meteor", "Flash Cannon", "Iron Defense", "Stealth Rock", "Thunder Wave"],
          abilities: ["Light Metal"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    dragapult: {
      level: 77,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Draco Meteor", "Fire Blast", "Shadow Ball", "Thunderbolt", "U-turn"],
          abilities: ["Infiltrator"],
          teraTypes: ["Dragon", "Fire", "Ghost"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Dragon Dance", "Dragon Darts", "Fire Blast", "Tera Blast"],
          abilities: ["Clear Body"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    zacian: {
      level: 69,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Close Combat", "Crunch", "Play Rough", "Psychic Fangs", "Swords Dance", "Wild Charge"],
          abilities: ["Intrepid Sword"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    zaciancrowned: {
      level: 64,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Behemoth Blade", "Close Combat", "Play Rough", "Swords Dance"],
          abilities: ["Intrepid Sword"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    zamazenta: {
      level: 71,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Close Combat", "Crunch", "Iron Head", "Psychic Fangs", "Stone Edge"],
          abilities: ["Dauntless Shield"],
          teraTypes: ["Dark", "Fighting", "Steel"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Body Press", "Crunch", "Iron Defense", "Iron Head", "Rest", "Stone Edge"],
          abilities: ["Dauntless Shield"],
          teraTypes: ["Fighting", "Steel"]
        }
      ]
    },
    zamazentacrowned: {
      level: 68,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Body Press", "Crunch", "Heavy Slam", "Iron Defense", "Stone Edge"],
          abilities: ["Dauntless Shield"],
          teraTypes: ["Fighting", "Ghost"]
        }
      ]
    },
    eternatus: {
      level: 69,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Dynamax Cannon", "Fire Blast", "Recover", "Sludge Bomb"],
          abilities: ["Pressure"],
          teraTypes: ["Dragon", "Fire"]
        },
        {
          role: "Bulky Support",
          movepool: ["Dynamax Cannon", "Flamethrower", "Recover", "Toxic", "Toxic Spikes"],
          abilities: ["Pressure"],
          teraTypes: ["Dragon", "Water"]
        }
      ]
    },
    urshifu: {
      level: 74,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Close Combat", "Poison Jab", "Sucker Punch", "Swords Dance", "U-turn", "Wicked Blow"],
          abilities: ["Unseen Fist"],
          teraTypes: ["Dark", "Fighting", "Poison"]
        }
      ]
    },
    urshifurapidstrike: {
      level: 75,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Aqua Jet", "Close Combat", "Ice Spinner", "Surging Strikes", "Swords Dance", "U-turn"],
          abilities: ["Unseen Fist"],
          teraTypes: ["Water"]
        }
      ]
    },
    zarude: {
      level: 78,
      sets: [
        {
          role: "Fast Bulky Setup",
          movepool: ["Close Combat", "Knock Off", "Power Whip", "Swords Dance", "Synthesis"],
          abilities: ["Leaf Guard"],
          teraTypes: ["Dark", "Fighting", "Grass"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Close Combat", "Knock Off", "Power Whip", "U-turn"],
          abilities: ["Leaf Guard"],
          teraTypes: ["Dark", "Fighting", "Grass"]
        }
      ]
    },
    regieleki: {
      level: 79,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Explosion", "Rapid Spin", "Thunderbolt", "Volt Switch"],
          abilities: ["Transistor"],
          teraTypes: ["Electric"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Rapid Spin", "Tera Blast", "Thunderbolt", "Volt Switch"],
          abilities: ["Transistor"],
          teraTypes: ["Ice"]
        }
      ]
    },
    regidrago: {
      level: 77,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Draco Meteor", "Dragon Dance", "Earthquake", "Outrage"],
          abilities: ["Dragon's Maw"],
          teraTypes: ["Dragon"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Dragon Claw", "Dragon Dance", "Earthquake", "Tera Blast"],
          abilities: ["Dragon's Maw"],
          teraTypes: ["Steel"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Draco Meteor", "Dragon Energy", "Earthquake", "Outrage"],
          abilities: ["Dragon's Maw"],
          teraTypes: ["Dragon"]
        }
      ]
    },
    glastrier: {
      level: 86,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Close Combat", "Heavy Slam", "High Horsepower", "Icicle Crash", "Swords Dance"],
          abilities: ["Chilling Neigh"],
          teraTypes: ["Fighting", "Ground", "Steel"]
        }
      ]
    },
    spectrier: {
      level: 75,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dark Pulse", "Draining Kiss", "Nasty Plot", "Shadow Ball", "Substitute", "Will-O-Wisp"],
          abilities: ["Grim Neigh"],
          teraTypes: ["Dark", "Fairy"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Nasty Plot", "Shadow Ball", "Substitute", "Tera Blast", "Will-O-Wisp"],
          abilities: ["Grim Neigh"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    calyrex: {
      level: 93,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Encore", "Giga Drain", "Leech Seed", "Psychic", "Psyshock"],
          abilities: ["Unnerve"],
          teraTypes: ["Steel"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Body Press", "Encore", "Giga Drain", "Leech Seed", "Psychic", "Psyshock"],
          abilities: ["Unnerve"],
          teraTypes: ["Fighting", "Steel"]
        }
      ]
    },
    calyrexice: {
      level: 72,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Agility", "Close Combat", "Glacial Lance", "High Horsepower"],
          abilities: ["As One (Glastrier)"],
          teraTypes: ["Fighting", "Ground"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Close Combat", "Glacial Lance", "High Horsepower", "Trick Room"],
          abilities: ["As One (Glastrier)"],
          teraTypes: ["Fighting", "Ground"]
        }
      ]
    },
    calyrexshadow: {
      level: 64,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Astral Barrage", "Nasty Plot", "Pollen Puff", "Psyshock", "Trick"],
          abilities: ["As One (Spectrier)"],
          teraTypes: ["Dark", "Ghost"]
        }
      ]
    },
    wyrdeer: {
      level: 87,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Body Slam", "Earthquake", "Megahorn", "Psychic Noise", "Thunder Wave", "Thunderbolt"],
          abilities: ["Intimidate"],
          teraTypes: ["Ground"]
        }
      ]
    },
    kleavor: {
      level: 78,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Close Combat", "Defog", "Stone Axe", "Swords Dance", "U-turn", "X-Scissor"],
          abilities: ["Sharpness"],
          teraTypes: ["Bug", "Fighting", "Rock"]
        }
      ]
    },
    ursaluna: {
      level: 79,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Crunch", "Facade", "Headlong Rush", "Swords Dance", "Throat Chop", "Trailblaze"],
          abilities: ["Guts"],
          teraTypes: ["Normal"]
        }
      ]
    },
    ursalunabloodmoon: {
      level: 79,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Blood Moon", "Calm Mind", "Earth Power", "Moonlight"],
          abilities: ["Mind's Eye"],
          teraTypes: ["Ghost", "Normal", "Poison"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Blood Moon", "Calm Mind", "Moonlight", "Vacuum Wave"],
          abilities: ["Mind's Eye"],
          teraTypes: ["Fighting", "Ghost", "Normal", "Poison"]
        }
      ]
    },
    enamorus: {
      level: 79,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Play Rough", "Substitute", "Superpower", "Taunt", "Zen Headbutt"],
          abilities: ["Contrary"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Calm Mind", "Earth Power", "Moonblast", "Mystical Fire", "Substitute"],
          abilities: ["Cute Charm"],
          teraTypes: ["Ground"]
        }
      ]
    },
    enamorustherian: {
      level: 83,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Earth Power", "Moonblast", "Mystical Fire", "Psychic", "Superpower"],
          abilities: ["Overcoat"],
          teraTypes: ["Fairy", "Ground"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Agility", "Earth Power", "Moonblast", "Mystical Fire", "Superpower"],
          abilities: ["Overcoat"],
          teraTypes: ["Ground"]
        }
      ]
    },
    meowscarada: {
      level: 78,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Flower Trick", "Knock Off", "Toxic Spikes", "Triple Axel", "U-turn"],
          abilities: ["Protean"],
          teraTypes: ["Dark", "Grass"]
        }
      ]
    },
    skeledirge: {
      level: 79,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Flame Charge", "Shadow Ball", "Slack Off", "Torch Song"],
          abilities: ["Unaware"],
          teraTypes: ["Fairy", "Water"]
        },
        {
          role: "Bulky Support",
          movepool: ["Hex", "Slack Off", "Torch Song", "Will-O-Wisp"],
          abilities: ["Unaware"],
          teraTypes: ["Fairy", "Water"]
        }
      ]
    },
    quaquaval: {
      level: 79,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Aqua Step", "Close Combat", "Knock Off", "Rapid Spin", "Roost", "Triple Axel", "U-turn"],
          abilities: ["Moxie"],
          teraTypes: ["Fighting", "Water"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Aqua Step", "Close Combat", "Knock Off", "Roost", "Swords Dance", "Triple Axel"],
          abilities: ["Moxie"],
          teraTypes: ["Fighting", "Water"]
        }
      ]
    },
    oinkologne: {
      level: 92,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Body Slam", "Curse", "Double-Edge", "High Horsepower", "Lash Out"],
          abilities: ["Thick Fat"],
          teraTypes: ["Ground"]
        }
      ]
    },
    oinkolognef: {
      level: 92,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Body Slam", "Curse", "Double-Edge", "High Horsepower", "Lash Out"],
          abilities: ["Thick Fat"],
          teraTypes: ["Ground"]
        }
      ]
    },
    spidops: {
      level: 96,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Circle Throw", "Knock Off", "Spikes", "Sticky Web", "Toxic Spikes", "U-turn"],
          abilities: ["Stakeout"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    lokix: {
      level: 82,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["First Impression", "Knock Off", "Leech Life", "Sucker Punch"],
          abilities: ["Tinted Lens"],
          teraTypes: ["Bug"]
        },
        {
          role: "Fast Attacker",
          movepool: ["First Impression", "Knock Off", "Sucker Punch", "U-turn"],
          abilities: ["Tinted Lens"],
          teraTypes: ["Bug"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Knock Off", "Leech Life", "Sucker Punch", "Swords Dance"],
          abilities: ["Tinted Lens"],
          teraTypes: ["Dark"]
        }
      ]
    },
    pawmot: {
      level: 80,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Close Combat", "Double Shock", "Knock Off", "Nuzzle", "Revival Blessing"],
          abilities: ["Natural Cure", "Volt Absorb"],
          teraTypes: ["Electric"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Close Combat", "Double Shock", "Ice Punch", "Revival Blessing"],
          abilities: ["Iron Fist"],
          teraTypes: ["Electric"]
        }
      ]
    },
    maushold: {
      level: 76,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Bite", "Encore", "Population Bomb", "Tidy Up"],
          abilities: ["Technician"],
          teraTypes: ["Ghost", "Normal"]
        }
      ]
    },
    dachsbun: {
      level: 91,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Body Press", "Play Rough", "Protect", "Stomping Tantrum", "Wish"],
          abilities: ["Well-Baked Body"],
          teraTypes: ["Steel"]
        }
      ]
    },
    arboliva: {
      level: 91,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Earth Power", "Energy Ball", "Hyper Voice", "Strength Sap"],
          abilities: ["Seed Sower"],
          teraTypes: ["Grass", "Ground", "Poison"]
        },
        {
          role: "Bulky Support",
          movepool: ["Hyper Voice", "Leech Seed", "Protect", "Substitute"],
          abilities: ["Harvest"],
          teraTypes: ["Poison", "Water"]
        }
      ]
    },
    squawkabilly: {
      level: 85,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Brave Bird", "Facade", "Protect", "Quick Attack", "U-turn"],
          abilities: ["Guts"],
          teraTypes: ["Normal"]
        }
      ]
    },
    squawkabillywhite: {
      level: 89,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Brave Bird", "Double-Edge", "Foul Play", "Parting Shot", "Quick Attack"],
          abilities: ["Hustle"],
          teraTypes: ["Flying", "Normal"]
        }
      ]
    },
    squawkabillyblue: {
      level: 85,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Brave Bird", "Facade", "Protect", "Quick Attack", "U-turn"],
          abilities: ["Guts"],
          teraTypes: ["Normal"]
        }
      ]
    },
    squawkabillyyellow: {
      level: 89,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Brave Bird", "Double-Edge", "Foul Play", "Parting Shot", "Quick Attack"],
          abilities: ["Hustle"],
          teraTypes: ["Flying", "Normal"]
        }
      ]
    },
    garganacl: {
      level: 80,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Earthquake", "Protect", "Recover", "Salt Cure", "Stealth Rock"],
          abilities: ["Purifying Salt"],
          teraTypes: ["Dragon", "Ghost"]
        },
        {
          role: "Bulky Support",
          movepool: ["Body Press", "Protect", "Recover", "Salt Cure", "Stealth Rock"],
          abilities: ["Purifying Salt"],
          teraTypes: ["Dragon", "Ghost"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Body Press", "Iron Defense", "Recover", "Salt Cure"],
          abilities: ["Purifying Salt"],
          teraTypes: ["Dragon", "Ghost"]
        }
      ]
    },
    armarouge: {
      level: 80,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Armor Cannon", "Aura Sphere", "Energy Ball", "Focus Blast", "Psyshock"],
          abilities: ["Weak Armor"],
          teraTypes: ["Fighting", "Fire", "Grass", "Psychic"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Armor Cannon", "Energy Ball", "Meteor Beam", "Psyshock"],
          abilities: ["Weak Armor"],
          teraTypes: ["Fire", "Grass"]
        }
      ]
    },
    ceruledge: {
      level: 78,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Bitter Blade", "Close Combat", "Poltergeist", "Shadow Sneak", "Swords Dance"],
          abilities: ["Weak Armor"],
          teraTypes: ["Fighting", "Fire", "Ghost"]
        }
      ]
    },
    bellibolt: {
      level: 84,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Muddy Water", "Slack Off", "Thunderbolt", "Toxic", "Volt Switch"],
          abilities: ["Electromorphosis"],
          teraTypes: ["Electric", "Water"]
        }
      ]
    },
    kilowattrel: {
      level: 83,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Hurricane", "Roost", "Thunder Wave", "Thunderbolt", "U-turn"],
          abilities: ["Volt Absorb"],
          teraTypes: ["Electric", "Flying", "Steel", "Water"]
        }
      ]
    },
    mabosstiff: {
      level: 86,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Crunch", "Play Rough", "Psychic Fangs", "Retaliate", "Wild Charge"],
          abilities: ["Stakeout"],
          teraTypes: ["Dark", "Fairy"]
        }
      ]
    },
    grafaiai: {
      level: 86,
      sets: [
        {
          role: "AV Pivot",
          movepool: ["Gunk Shot", "Knock Off", "Super Fang", "U-turn"],
          abilities: ["Poison Touch"],
          teraTypes: ["Dark"]
        },
        {
          role: "Fast Support",
          movepool: ["Encore", "Gunk Shot", "Knock Off", "Parting Shot"],
          abilities: ["Prankster"],
          teraTypes: ["Dark"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Gunk Shot", "Knock Off", "Low Kick", "Swords Dance"],
          abilities: ["Poison Touch"],
          teraTypes: ["Dark"]
        }
      ]
    },
    brambleghast: {
      level: 88,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Leech Seed", "Poltergeist", "Power Whip", "Rapid Spin", "Spikes", "Strength Sap", "Substitute"],
          abilities: ["Wind Rider"],
          teraTypes: ["Fairy", "Steel", "Water"]
        }
      ]
    },
    toedscruel: {
      level: 87,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earth Power", "Giga Drain", "Knock Off", "Leaf Storm", "Rapid Spin", "Spore", "Toxic"],
          abilities: ["Mycelium Might"],
          teraTypes: ["Water"]
        }
      ]
    },
    klawf: {
      level: 90,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Crabhammer", "High Horsepower", "Knock Off", "Stealth Rock", "Stone Edge"],
          abilities: ["Regenerator"],
          teraTypes: ["Dark", "Ground", "Rock", "Water"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Crabhammer", "High Horsepower", "Knock Off", "Stone Edge", "Swords Dance"],
          abilities: ["Anger Shell"],
          teraTypes: ["Dark", "Ground", "Rock", "Water"]
        }
      ]
    },
    scovillain: {
      level: 91,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Flamethrower", "Leech Seed", "Protect", "Substitute"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Steel"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Energy Ball", "Flamethrower", "Leaf Storm", "Overheat"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Fire", "Grass"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Energy Ball", "Fire Blast", "Stomping Tantrum", "Sunny Day"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Fire", "Grass", "Ground"]
        }
      ]
    },
    rabsca: {
      level: 91,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Bug Buzz", "Earth Power", "Psychic", "Revival Blessing", "Trick Room"],
          abilities: ["Synchronize"],
          teraTypes: ["Steel"]
        }
      ]
    },
    espathra: {
      level: 80,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Dazzling Gleam", "Lumina Crash", "Shadow Ball", "U-turn"],
          abilities: ["Speed Boost"],
          teraTypes: ["Fairy", "Psychic"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Calm Mind", "Dazzling Gleam", "Protect", "Roost", "Stored Power", "Substitute"],
          abilities: ["Speed Boost"],
          teraTypes: ["Fairy"]
        }
      ]
    },
    tinkaton: {
      level: 82,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Encore", "Gigaton Hammer", "Knock Off", "Play Rough", "Stealth Rock", "Thunder Wave"],
          abilities: ["Mold Breaker"],
          teraTypes: ["Water"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Gigaton Hammer", "Knock Off", "Play Rough", "Swords Dance"],
          abilities: ["Mold Breaker"],
          teraTypes: ["Steel"]
        }
      ]
    },
    wugtrio: {
      level: 91,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Aqua Jet", "Liquidation", "Stomping Tantrum", "Throat Chop"],
          abilities: ["Gooey"],
          teraTypes: ["Dark", "Ground", "Water"]
        }
      ]
    },
    bombirdier: {
      level: 85,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Brave Bird", "Knock Off", "Roost", "Stone Edge", "Sucker Punch", "U-turn"],
          abilities: ["Rocky Payload"],
          teraTypes: ["Rock"]
        },
        {
          role: "Bulky Support",
          movepool: ["Brave Bird", "Knock Off", "Roost", "Stealth Rock", "Sucker Punch", "U-turn"],
          abilities: ["Big Pecks"],
          teraTypes: ["Dark", "Steel"]
        }
      ]
    },
    palafin: {
      level: 77,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Bulk Up", "Close Combat", "Flip Turn", "Ice Punch", "Jet Punch", "Wave Crash"],
          abilities: ["Zero to Hero"],
          teraTypes: ["Fighting", "Water"]
        }
      ]
    },
    revavroom: {
      level: 79,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Gunk Shot", "High Horsepower", "Iron Head", "Shift Gear"],
          abilities: ["Filter"],
          teraTypes: ["Ground"]
        }
      ]
    },
    cyclizar: {
      level: 83,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Draco Meteor", "Knock Off", "Rapid Spin", "Shed Tail", "Taunt"],
          abilities: ["Regenerator"],
          teraTypes: ["Dragon", "Fairy", "Ghost", "Steel"]
        }
      ]
    },
    orthworm: {
      level: 88,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Body Press", "Coil", "Iron Tail", "Rest"],
          abilities: ["Earth Eater"],
          teraTypes: ["Electric", "Fighting"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Body Press", "Heavy Slam", "Rest", "Shed Tail", "Spikes", "Stealth Rock"],
          abilities: ["Earth Eater"],
          teraTypes: ["Electric", "Fighting", "Ghost", "Poison"]
        }
      ]
    },
    glimmora: {
      level: 75,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Earth Power", "Mortal Spin", "Power Gem", "Sludge Wave", "Spikes", "Stealth Rock"],
          abilities: ["Toxic Debris"],
          teraTypes: ["Ground"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Earth Power", "Energy Ball", "Meteor Beam", "Sludge Wave"],
          abilities: ["Toxic Debris"],
          teraTypes: ["Grass"]
        }
      ]
    },
    houndstone: {
      level: 86,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Body Press", "Play Rough", "Poltergeist", "Roar", "Shadow Sneak", "Trick", "Will-O-Wisp"],
          abilities: ["Fluffy"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Bulky Support",
          movepool: ["Body Press", "Poltergeist", "Rest", "Sleep Talk"],
          abilities: ["Fluffy"],
          teraTypes: ["Fighting"]
        },
        {
          role: "AV Pivot",
          movepool: ["Body Press", "Play Rough", "Poltergeist", "Shadow Sneak"],
          abilities: ["Fluffy"],
          teraTypes: ["Fairy", "Fighting"]
        }
      ]
    },
    flamigo: {
      level: 82,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Brave Bird", "Close Combat", "Throat Chop", "U-turn"],
          abilities: ["Scrappy"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Brave Bird", "Close Combat", "Roost", "Swords Dance", "Throat Chop"],
          abilities: ["Scrappy"],
          teraTypes: ["Fighting", "Steel"]
        }
      ]
    },
    cetitan: {
      level: 82,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Earthquake", "Ice Shard", "Icicle Crash", "Liquidation", "Superpower"],
          abilities: ["Sheer Force"],
          teraTypes: ["Water"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Belly Drum", "Earthquake", "Ice Shard", "Ice Spinner"],
          abilities: ["Slush Rush", "Thick Fat"],
          teraTypes: ["Ice"]
        }
      ]
    },
    veluza: {
      level: 85,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Aqua Cutter", "Aqua Jet", "Flip Turn", "Night Slash", "Psycho Cut"],
          abilities: ["Sharpness"],
          teraTypes: ["Dark", "Water"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Aqua Cutter", "Fillet Away", "Night Slash", "Psycho Cut"],
          abilities: ["Sharpness"],
          teraTypes: ["Dark", "Psychic", "Water"]
        }
      ]
    },
    dondozo: {
      level: 78,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Curse", "Rest", "Sleep Talk", "Wave Crash"],
          abilities: ["Unaware"],
          teraTypes: ["Dragon", "Fairy"]
        }
      ]
    },
    tatsugiri: {
      level: 86,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Draco Meteor", "Hydro Pump", "Nasty Plot", "Rapid Spin", "Surf"],
          abilities: ["Storm Drain"],
          teraTypes: ["Water"]
        }
      ]
    },
    farigiraf: {
      level: 91,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Body Slam", "Protect", "Psychic Noise", "Wish"],
          abilities: ["Sap Sipper"],
          teraTypes: ["Fairy", "Ground", "Water"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Future Sight", "Hyper Voice", "Protect", "Wish"],
          abilities: ["Sap Sipper"],
          teraTypes: ["Fairy", "Ground", "Water"]
        }
      ]
    },
    dudunsparce: {
      level: 82,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Glare", "Headbutt", "Roost"],
          abilities: ["Serene Grace"],
          teraTypes: ["Ghost", "Ground"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Boomburst", "Calm Mind", "Earth Power", "Roost"],
          abilities: ["Rattled"],
          teraTypes: ["Fairy", "Ghost"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Boomburst", "Calm Mind", "Roost", "Shadow Ball"],
          abilities: ["Rattled"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    kingambit: {
      level: 74,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Iron Head", "Kowtow Cleave", "Sucker Punch", "Swords Dance"],
          abilities: ["Supreme Overlord"],
          teraTypes: ["Dark", "Flying"]
        }
      ]
    },
    greattusk: {
      level: 77,
      sets: [
        {
          role: "Fast Bulky Setup",
          movepool: ["Bulk Up", "Close Combat", "Earthquake", "Rapid Spin", "Stone Edge"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Ground", "Steel"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "Close Combat", "Earthquake", "Rapid Spin", "Stone Edge"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Ground", "Steel"]
        },
        {
          role: "Bulky Support",
          movepool: ["Close Combat", "Headlong Rush", "Ice Spinner", "Knock Off", "Rapid Spin", "Stealth Rock", "Stone Edge"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Ground", "Steel"]
        }
      ]
    },
    brutebonnet: {
      level: 81,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Close Combat", "Seed Bomb", "Spore", "Sucker Punch"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Fighting", "Poison"]
        },
        {
          role: "Bulky Support",
          movepool: ["Crunch", "Seed Bomb", "Spore", "Sucker Punch"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Dark", "Poison"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Close Combat", "Crunch", "Seed Bomb", "Sucker Punch"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Dark", "Fighting", "Poison"]
        }
      ]
    },
    sandyshocks: {
      level: 80,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Earth Power", "Spikes", "Stealth Rock", "Thunder Wave", "Thunderbolt", "Volt Switch"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Electric", "Grass", "Ground"]
        }
      ]
    },
    screamtail: {
      level: 84,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Encore", "Play Rough", "Protect", "Thunder Wave", "Wish"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Poison", "Steel"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Dazzling Gleam", "Encore", "Protect", "Thunder Wave", "Wish"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Poison", "Steel"]
        }
      ]
    },
    fluttermane: {
      level: 74,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Calm Mind", "Moonblast", "Mystical Fire", "Psyshock", "Shadow Ball", "Thunderbolt"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Electric", "Fairy", "Fire", "Ghost", "Psychic"]
        }
      ]
    },
    slitherwing: {
      level: 81,
      sets: [
        {
          role: "Fast Bulky Setup",
          movepool: ["Bulk Up", "Close Combat", "Earthquake", "Flame Charge", "Leech Life", "Wild Charge"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Electric", "Fighting"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Close Combat", "Earthquake", "First Impression", "Flare Blitz", "U-turn", "Wild Charge"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Bug", "Electric", "Fighting", "Fire"]
        }
      ]
    },
    roaringmoon: {
      level: 72,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Dance", "Earthquake", "Iron Head", "Knock Off", "Outrage", "Roost"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Dark", "Dragon", "Ground", "Poison", "Steel"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Acrobatics", "Dragon Dance", "Iron Head", "Knock Off", "Outrage"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Flying", "Steel"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Iron Head", "Knock Off", "Outrage", "U-turn"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Dark", "Dragon", "Steel"]
        }
      ]
    },
    walkingwake: {
      level: 79,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Draco Meteor", "Flamethrower", "Flip Turn", "Hydro Pump"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Fire", "Water"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Draco Meteor", "Flamethrower", "Hydro Steam", "Sunny Day"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Fire"]
        }
      ]
    },
    irontreads: {
      level: 77,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Iron Head", "Knock Off", "Rapid Spin", "Stealth Rock", "Volt Switch"],
          abilities: ["Quark Drive"],
          teraTypes: ["Ground", "Steel"]
        }
      ]
    },
    ironmoth: {
      level: 78,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Energy Ball", "Fiery Dance", "Fire Blast", "Morning Sun", "Sludge Wave", "Toxic Spikes", "U-turn"],
          abilities: ["Quark Drive"],
          teraTypes: ["Fire", "Grass"]
        }
      ]
    },
    ironhands: {
      level: 79,
      sets: [
        {
          role: "AV Pivot",
          movepool: ["Close Combat", "Drain Punch", "Fake Out", "Heavy Slam", "Ice Punch", "Thunder Punch", "Volt Switch", "Wild Charge"],
          abilities: ["Quark Drive"],
          teraTypes: ["Electric", "Fighting"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Drain Punch", "Ice Punch", "Swords Dance", "Thunder Punch", "Wild Charge"],
          abilities: ["Quark Drive"],
          teraTypes: ["Fighting", "Flying", "Steel"]
        }
      ]
    },
    ironjugulis: {
      level: 78,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Dark Pulse", "Earth Power", "Fire Blast", "Hurricane", "Hydro Pump", "U-turn"],
          abilities: ["Quark Drive"],
          teraTypes: ["Dark", "Flying", "Ground"]
        }
      ]
    },
    ironthorns: {
      level: 83,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Earthquake", "Spikes", "Stealth Rock", "Stone Edge", "Thunder Punch", "Volt Switch"],
          abilities: ["Quark Drive"],
          teraTypes: ["Grass", "Water"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Dragon Dance", "Earthquake", "Ice Punch", "Stone Edge", "Wild Charge"],
          abilities: ["Quark Drive"],
          teraTypes: ["Grass", "Ground", "Rock"]
        }
      ]
    },
    ironbundle: {
      level: 77,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Encore", "Flip Turn", "Freeze-Dry", "Hydro Pump", "Ice Beam", "Substitute"],
          abilities: ["Quark Drive"],
          teraTypes: ["Ice", "Water"]
        }
      ]
    },
    ironvaliant: {
      level: 79,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Close Combat", "Knock Off", "Spirit Break", "Swords Dance"],
          abilities: ["Quark Drive"],
          teraTypes: ["Dark", "Fighting"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Calm Mind", "Close Combat", "Moonblast", "Psychic"],
          abilities: ["Quark Drive"],
          teraTypes: ["Fairy", "Fighting", "Steel"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Close Combat", "Encore", "Knock Off", "Moonblast"],
          abilities: ["Quark Drive"],
          teraTypes: ["Dark", "Fairy", "Fighting", "Steel"]
        }
      ]
    },
    ironleaves: {
      level: 80,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Close Combat", "Leaf Blade", "Megahorn", "Psyblade", "Swords Dance"],
          abilities: ["Quark Drive"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    baxcalibur: {
      level: 75,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Earthquake", "Glaive Rush", "Ice Shard", "Icicle Crash"],
          abilities: ["Thermal Exchange"],
          teraTypes: ["Dragon", "Ground"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Dance", "Earthquake", "Glaive Rush", "Icicle Crash"],
          abilities: ["Thermal Exchange"],
          teraTypes: ["Dragon", "Ground"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Earthquake", "Icicle Spear", "Scale Shot", "Swords Dance"],
          abilities: ["Thermal Exchange"],
          teraTypes: ["Dragon", "Ground"]
        }
      ]
    },
    gholdengo: {
      level: 77,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Focus Blast", "Make It Rain", "Nasty Plot", "Shadow Ball", "Trick"],
          abilities: ["Good as Gold"],
          teraTypes: ["Fighting", "Ghost", "Steel"]
        },
        {
          role: "Bulky Support",
          movepool: ["Make It Rain", "Nasty Plot", "Recover", "Shadow Ball", "Thunder Wave"],
          abilities: ["Good as Gold"],
          teraTypes: ["Dark", "Steel", "Water"]
        }
      ]
    },
    tinglu: {
      level: 78,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Spikes", "Stealth Rock", "Throat Chop", "Whirlwind"],
          abilities: ["Vessel of Ruin"],
          teraTypes: ["Ghost", "Poison"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Earthquake", "Heavy Slam", "Payback", "Ruination", "Spikes", "Stealth Rock"],
          abilities: ["Vessel of Ruin"],
          teraTypes: ["Ghost", "Poison", "Steel"]
        }
      ]
    },
    chienpao: {
      level: 72,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Crunch", "Ice Shard", "Icicle Crash", "Sacred Sword", "Throat Chop"],
          abilities: ["Sword of Ruin"],
          teraTypes: ["Dark", "Fighting", "Ice"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Ice Shard", "Icicle Crash", "Sacred Sword", "Sucker Punch", "Swords Dance", "Throat Chop"],
          abilities: ["Sword of Ruin"],
          teraTypes: ["Dark", "Fighting", "Ice"]
        }
      ]
    },
    wochien: {
      level: 83,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Giga Drain", "Knock Off", "Leech Seed", "Protect", "Ruination", "Stun Spore"],
          abilities: ["Tablets of Ruin"],
          teraTypes: ["Poison"]
        }
      ]
    },
    chiyu: {
      level: 77,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dark Pulse", "Fire Blast", "Nasty Plot", "Psychic", "Will-O-Wisp"],
          abilities: ["Beads of Ruin"],
          teraTypes: ["Dark", "Fire"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Dark Pulse", "Flamethrower", "Overheat", "Psychic"],
          abilities: ["Beads of Ruin"],
          teraTypes: ["Dark", "Fire"]
        }
      ]
    },
    koraidon: {
      level: 64,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Close Combat", "Flare Blitz", "Outrage", "U-turn"],
          abilities: ["Orichalcum Pulse"],
          teraTypes: ["Fire"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Collision Course", "Flare Blitz", "Scale Shot", "Swords Dance"],
          abilities: ["Orichalcum Pulse"],
          teraTypes: ["Fire"]
        }
      ]
    },
    miraidon: {
      level: 65,
      sets: [
        {
          role: "Fast Bulky Setup",
          movepool: ["Calm Mind", "Draco Meteor", "Electro Drift", "Substitute"],
          abilities: ["Hadron Engine"],
          teraTypes: ["Electric"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Draco Meteor", "Electro Drift", "Overheat", "Volt Switch"],
          abilities: ["Hadron Engine"],
          teraTypes: ["Electric"]
        }
      ]
    },
    dipplin: {
      level: 88,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Dragon Pulse", "Dragon Tail", "Giga Drain", "Recover", "Sucker Punch"],
          abilities: ["Sticky Hold"],
          teraTypes: ["Steel"]
        }
      ]
    },
    sinistcha: {
      level: 83,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Matcha Gotcha", "Shadow Ball", "Strength Sap"],
          abilities: ["Heatproof"],
          teraTypes: ["Steel"]
        }
      ]
    },
    okidogi: {
      level: 77,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "Drain Punch", "Gunk Shot", "Knock Off"],
          abilities: ["Toxic Chain"],
          teraTypes: ["Dark"]
        },
        {
          role: "AV Pivot",
          movepool: ["Drain Punch", "Gunk Shot", "High Horsepower", "Knock Off", "Psychic Fangs"],
          abilities: ["Toxic Chain"],
          teraTypes: ["Dark"]
        }
      ]
    },
    munkidori: {
      level: 79,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Focus Blast", "Nasty Plot", "Psyshock", "Sludge Wave", "U-turn"],
          abilities: ["Toxic Chain"],
          teraTypes: ["Fighting", "Poison"]
        },
        {
          role: "AV Pivot",
          movepool: ["Fake Out", "Psychic Noise", "Sludge Wave", "U-turn"],
          abilities: ["Toxic Chain"],
          teraTypes: ["Dark"]
        }
      ]
    },
    fezandipiti: {
      level: 82,
      sets: [
        {
          role: "AV Pivot",
          movepool: ["Beat Up", "Gunk Shot", "Heat Wave", "Play Rough", "U-turn"],
          abilities: ["Toxic Chain"],
          teraTypes: ["Dark", "Steel", "Water"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Beat Up", "Gunk Shot", "Play Rough", "Roost", "U-turn"],
          abilities: ["Toxic Chain"],
          teraTypes: ["Dark", "Steel", "Water"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Gunk Shot", "Play Rough", "Swords Dance", "Tera Blast"],
          abilities: ["Toxic Chain"],
          teraTypes: ["Ground"]
        }
      ]
    },
    ogerpon: {
      level: 80,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Encore", "Ivy Cudgel", "Knock Off", "Spikes", "Superpower", "Synthesis", "U-turn"],
          abilities: ["Defiant"],
          teraTypes: ["Grass"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Ivy Cudgel", "Knock Off", "Superpower", "Swords Dance"],
          abilities: ["Defiant"],
          teraTypes: ["Grass"]
        }
      ]
    },
    ogerponwellspring: {
      level: 76,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Encore", "Ivy Cudgel", "Spikes", "Synthesis", "U-turn", "Wood Hammer"],
          abilities: ["Water Absorb"],
          teraTypes: ["Water"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Horn Leech", "Ivy Cudgel", "Knock Off", "Play Rough", "Power Whip", "Swords Dance"],
          abilities: ["Water Absorb"],
          teraTypes: ["Water"]
        }
      ]
    },
    ogerponhearthflame: {
      level: 74,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Horn Leech", "Ivy Cudgel", "Knock Off", "Power Whip", "Stomping Tantrum", "Swords Dance"],
          abilities: ["Mold Breaker"],
          teraTypes: ["Fire"]
        }
      ]
    },
    ogerponcornerstone: {
      level: 76,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Encore", "Ivy Cudgel", "Power Whip", "Spikes", "Superpower", "Synthesis"],
          abilities: ["Sturdy"],
          teraTypes: ["Rock"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Horn Leech", "Ivy Cudgel", "Power Whip", "Superpower", "Swords Dance"],
          abilities: ["Sturdy"],
          teraTypes: ["Rock"]
        }
      ]
    },
    archaludon: {
      level: 78,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Earthquake", "Iron Head", "Outrage", "Swords Dance"],
          abilities: ["Stamina"],
          teraTypes: ["Ground"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Body Press", "Draco Meteor", "Dragon Tail", "Flash Cannon", "Stealth Rock", "Thunder Wave", "Thunderbolt"],
          abilities: ["Stamina"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    hydrapple: {
      level: 83,
      sets: [
        {
          role: "AV Pivot",
          movepool: ["Dragon Tail", "Earth Power", "Fickle Beam", "Giga Drain", "Leaf Storm"],
          abilities: ["Regenerator"],
          teraTypes: ["Steel"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Earth Power", "Fickle Beam", "Giga Drain", "Nasty Plot", "Recover"],
          abilities: ["Regenerator"],
          teraTypes: ["Steel"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Draco Meteor", "Earth Power", "Fickle Beam", "Leaf Storm"],
          abilities: ["Regenerator"],
          teraTypes: ["Dragon", "Steel"]
        }
      ]
    },
    gougingfire: {
      level: 74,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Dance", "Earthquake", "Heat Crash", "Outrage"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Ground"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Dragon Dance", "Heat Crash", "Morning Sun", "Outrage"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Fairy"]
        }
      ]
    },
    ragingbolt: {
      level: 78,
      sets: [
        {
          role: "AV Pivot",
          movepool: ["Discharge", "Draco Meteor", "Thunderbolt", "Thunderclap", "Volt Switch"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Electric"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Dragon Pulse", "Thunderbolt", "Thunderclap"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Electric", "Fairy"]
        }
      ]
    },
    ironboulder: {
      level: 77,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Close Combat", "Mighty Cleave", "Swords Dance", "Zen Headbutt"],
          abilities: ["Quark Drive"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Close Combat", "Mighty Cleave", "Swords Dance", "Zen Headbutt"],
          abilities: ["Quark Drive"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    ironcrown: {
      level: 79,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Calm Mind", "Focus Blast", "Psyshock", "Tachyon Cutter", "Volt Switch"],
          abilities: ["Quark Drive"],
          teraTypes: ["Fighting", "Steel"]
        }
      ]
    },
    terapagos: {
      level: 76,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Calm Mind", "Dark Pulse", "Rapid Spin", "Rest", "Tera Starstorm"],
          abilities: ["Tera Shift"],
          teraTypes: ["Stellar"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Calm Mind", "Earth Power", "Rapid Spin", "Rest", "Tera Starstorm"],
          abilities: ["Tera Shift"],
          teraTypes: ["Stellar"]
        }
      ]
    },
    pecharunt: {
      level: 77,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Malignant Chain", "Nasty Plot", "Parting Shot", "Recover", "Shadow Ball"],
          abilities: ["Poison Puppeteer"],
          teraTypes: ["Dark"]
        }
      ]
    }
  };
});

// ../pokemon-showdown/dist/data/random-battles/gen9/doubles-sets.json
var require_doubles_sets = __commonJS((exports, module) => {
  module.exports = {
    venusaur: {
      level: 86,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Earth Power", "Giga Drain", "Knock Off", "Leaf Storm", "Protect", "Sludge Bomb"],
          abilities: ["Chlorophyll", "Overgrow"],
          teraTypes: ["Dark", "Water"]
        }
      ]
    },
    charizard: {
      level: 82,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Heat Wave", "Hurricane", "Protect", "Scorching Sands", "Will-O-Wisp"],
          abilities: ["Blaze", "Solar Power"],
          teraTypes: ["Dragon", "Fire", "Ground"]
        }
      ]
    },
    blastoise: {
      level: 83,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Fake Out", "Flip Turn", "Icy Wind", "Life Dew", "Wave Crash", "Yawn"],
          abilities: ["Torrent"],
          teraTypes: ["Dragon", "Grass"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Dragon Pulse", "Muddy Water", "Protect", "Shell Smash"],
          abilities: ["Torrent"],
          teraTypes: ["Dragon", "Water"]
        }
      ]
    },
    arbok: {
      level: 88,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Coil", "Gunk Shot", "Knock Off", "Protect", "Stomping Tantrum"],
          abilities: ["Intimidate"],
          teraTypes: ["Dark", "Ground"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Dragon Tail", "Glare", "Gunk Shot", "Knock Off", "Toxic Spikes"],
          abilities: ["Intimidate"],
          teraTypes: ["Dark"]
        }
      ]
    },
    pikachu: {
      level: 94,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Encore", "Fake Out", "Grass Knot", "Knock Off", "Protect", "Volt Tackle"],
          abilities: ["Lightning Rod"],
          teraTypes: ["Electric", "Grass"]
        }
      ]
    },
    raichu: {
      level: 87,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Encore", "Fake Out", "Grass Knot", "Knock Off", "Nuzzle", "Thunderbolt"],
          abilities: ["Lightning Rod"],
          teraTypes: ["Electric", "Grass"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Nasty Plot", "Protect", "Tera Blast", "Thunderbolt"],
          abilities: ["Lightning Rod"],
          teraTypes: ["Ice"]
        }
      ]
    },
    raichualola: {
      level: 89,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Alluring Voice", "Focus Blast", "Grass Knot", "Psychic", "Psyshock", "Thunderbolt", "Volt Switch"],
          abilities: ["Surge Surfer"],
          teraTypes: ["Electric", "Fairy", "Fighting", "Grass"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Nasty Plot", "Protect", "Psychic", "Psyshock", "Thunderbolt"],
          abilities: ["Surge Surfer"],
          teraTypes: ["Dark", "Electric", "Flying"]
        }
      ]
    },
    sandslash: {
      level: 92,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Gunk Shot", "High Horsepower", "Knock Off", "Protect", "Rapid Spin", "Stone Edge", "Swords Dance"],
          abilities: ["Sand Rush"],
          teraTypes: ["Poison", "Rock"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["High Horsepower", "Knock Off", "Rapid Spin", "Rock Slide", "Super Fang"],
          abilities: ["Sand Rush"],
          teraTypes: ["Grass", "Water"]
        }
      ]
    },
    sandslashalola: {
      level: 90,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Drill Run", "Ice Shard", "Iron Head", "Knock Off", "Triple Axel"],
          abilities: ["Slush Rush"],
          teraTypes: ["Flying", "Water"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Drill Run", "Ice Shard", "Iron Head", "Triple Axel"],
          abilities: ["Slush Rush"],
          teraTypes: ["Flying", "Water"]
        }
      ]
    },
    clefairy: {
      level: 97,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Follow Me", "Heal Pulse", "Helping Hand", "Life Dew", "Moonblast"],
          abilities: ["Friend Guard"],
          teraTypes: ["Fire", "Steel", "Water"]
        }
      ]
    },
    clefable: {
      level: 86,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Heal Pulse", "Icy Wind", "Knock Off", "Life Dew", "Moonblast", "Thunder Wave"],
          abilities: ["Magic Guard", "Unaware"],
          teraTypes: ["Fire", "Steel", "Water"]
        },
        {
          role: "Doubles Support",
          movepool: ["Encore", "Fire Blast", "Follow Me", "Heal Pulse", "Helping Hand", "Life Dew", "Moonblast"],
          abilities: ["Unaware"],
          teraTypes: ["Fire", "Steel", "Water"]
        }
      ]
    },
    ninetales: {
      level: 80,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Flamethrower", "Heat Wave", "Overheat", "Protect", "Scorching Sands", "Solar Beam"],
          abilities: ["Drought"],
          teraTypes: ["Fire", "Grass"]
        }
      ]
    },
    ninetalesalola: {
      level: 75,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Aurora Veil", "Blizzard", "Moonblast", "Protect"],
          abilities: ["Snow Warning"],
          teraTypes: ["Ice", "Steel", "Water"]
        }
      ]
    },
    wigglytuff: {
      level: 91,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Dazzling Gleam", "Disable", "Encore", "Fire Blast", "Heal Pulse", "Helping Hand", "Icy Wind", "Thunder Wave"],
          abilities: ["Competitive"],
          teraTypes: ["Fire", "Steel"]
        }
      ]
    },
    vileplume: {
      level: 89,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Pollen Puff", "Sludge Bomb", "Strength Sap", "Stun Spore"],
          abilities: ["Effect Spore"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    venomoth: {
      level: 90,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Bug Buzz", "Protect", "Quiver Dance", "Sleep Powder", "Sludge Bomb"],
          abilities: ["Tinted Lens"],
          teraTypes: ["Bug", "Steel", "Water"]
        }
      ]
    },
    dugtrio: {
      level: 90,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Helping Hand", "Protect", "Rock Slide", "Stomping Tantrum", "Sucker Punch"],
          abilities: ["Arena Trap"],
          teraTypes: ["Fire", "Ghost", "Ground"]
        }
      ]
    },
    dugtrioalola: {
      level: 89,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Iron Head", "Protect", "Rock Slide", "Stomping Tantrum", "Sucker Punch"],
          abilities: ["Sand Force", "Tangling Hair"],
          teraTypes: ["Fire", "Steel", "Water"]
        }
      ]
    },
    persian: {
      level: 93,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Double-Edge", "Fake Out", "Helping Hand", "Icy Wind", "Knock Off", "Taunt", "U-turn"],
          abilities: ["Technician"],
          teraTypes: ["Ghost", "Normal"]
        }
      ]
    },
    persianalola: {
      level: 88,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Fake Out", "Foul Play", "Helping Hand", "Icy Wind", "Knock Off", "Parting Shot", "Snarl", "Taunt", "Thunder Wave"],
          abilities: ["Fur Coat"],
          teraTypes: ["Poison"]
        }
      ]
    },
    golduck: {
      level: 91,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Encore", "Grass Knot", "Hydro Pump", "Ice Beam", "Icy Wind", "Protect", "Psyshock"],
          abilities: ["Cloud Nine", "Swift Swim"],
          teraTypes: ["Grass", "Water"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Grass Knot", "Hydro Pump", "Ice Beam", "Protect", "Psyshock"],
          abilities: ["Cloud Nine", "Swift Swim"],
          teraTypes: ["Grass", "Water"]
        }
      ]
    },
    annihilape: {
      level: 77,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Bulk Up", "Drain Punch", "Protect", "Rage Fist"],
          abilities: ["Defiant"],
          teraTypes: ["Fire", "Steel", "Water"]
        },
        {
          role: "Choice Item user",
          movepool: ["Close Combat", "Final Gambit", "Rage Fist", "U-turn"],
          abilities: ["Defiant"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    arcanine: {
      level: 81,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Close Combat", "Extreme Speed", "Flare Blitz", "Howl", "Morning Sun", "Snarl", "Will-O-Wisp"],
          abilities: ["Intimidate"],
          teraTypes: ["Fighting", "Normal", "Steel", "Water"]
        }
      ]
    },
    arcaninehisui: {
      level: 79,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Extreme Speed", "Flare Blitz", "Rock Slide", "Stone Edge"],
          abilities: ["Intimidate"],
          teraTypes: ["Normal", "Rock"]
        },
        {
          role: "Bulky Protect",
          movepool: ["Flare Blitz", "Morning Sun", "Protect", "Rock Slide", "Will-O-Wisp"],
          abilities: ["Intimidate"],
          teraTypes: ["Fairy", "Grass"]
        }
      ]
    },
    poliwrath: {
      level: 90,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Circle Throw", "Close Combat", "Coaching", "Icy Wind", "Knock Off", "Liquidation"],
          abilities: ["Water Absorb"],
          teraTypes: ["Dragon", "Fire", "Ground", "Steel"]
        }
      ]
    },
    victreebel: {
      level: 90,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Knock Off", "Power Whip", "Protect", "Sludge Bomb", "Sucker Punch"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Dark", "Grass"]
        }
      ]
    },
    tentacruel: {
      level: 85,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Acid Spray", "Hydro Pump", "Icy Wind", "Knock Off", "Muddy Water", "Sludge Bomb", "Toxic Spikes"],
          abilities: ["Clear Body"],
          teraTypes: ["Grass"]
        }
      ]
    },
    golem: {
      level: 87,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Fire Punch", "High Horsepower", "Rock Slide", "Stone Edge"],
          abilities: ["Sturdy"],
          teraTypes: ["Grass"]
        }
      ]
    },
    golemalola: {
      level: 88,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Double-Edge", "High Horsepower", "Protect", "Rock Slide", "Thunder Wave"],
          abilities: ["Galvanize"],
          teraTypes: ["Grass", "Ground"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Double-Edge", "Explosion", "High Horsepower", "Rock Slide"],
          abilities: ["Galvanize"],
          teraTypes: ["Grass", "Ground"]
        }
      ]
    },
    slowbro: {
      level: 88,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Fire Blast", "Heal Pulse", "Helping Hand", "Psyshock", "Scald", "Trick Room"],
          abilities: ["Regenerator"],
          teraTypes: ["Dark", "Grass"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Fire Blast", "Hydro Pump", "Ice Beam", "Psyshock", "Scald", "Trick Room"],
          abilities: ["Regenerator"],
          teraTypes: ["Dark", "Fire", "Water"]
        }
      ]
    },
    slowbrogalar: {
      level: 86,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Fire Blast", "Psychic", "Shell Side Arm", "Trick Room"],
          abilities: ["Regenerator"],
          teraTypes: ["Dark", "Fire", "Poison"]
        }
      ]
    },
    dodrio: {
      level: 85,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Brave Bird", "Double-Edge", "Drill Run", "Knock Off", "Quick Attack"],
          abilities: ["Early Bird"],
          teraTypes: ["Ground", "Normal"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Brave Bird", "Drill Run", "Protect", "Quick Attack", "Swords Dance"],
          abilities: ["Early Bird"],
          teraTypes: ["Ground"]
        }
      ]
    },
    dewgong: {
      level: 91,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Encore", "Fake Out", "Hydro Pump", "Icy Wind"],
          abilities: ["Thick Fat"],
          teraTypes: ["Grass"]
        }
      ]
    },
    muk: {
      level: 86,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Drain Punch", "Gunk Shot", "Haze", "Helping Hand", "Ice Punch", "Knock Off", "Poison Gas", "Poison Jab", "Shadow Sneak"],
          abilities: ["Poison Touch"],
          teraTypes: ["Dark"]
        }
      ]
    },
    mukalola: {
      level: 82,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Drain Punch", "Gunk Shot", "Helping Hand", "Ice Punch", "Knock Off", "Poison Jab", "Protect", "Snarl"],
          abilities: ["Poison Touch"],
          teraTypes: ["Flying"]
        }
      ]
    },
    cloyster: {
      level: 87,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Hydro Pump", "Icicle Spear", "Protect", "Rock Blast", "Shell Smash"],
          abilities: ["Skill Link"],
          teraTypes: ["Fire", "Ice", "Rock", "Water"]
        }
      ]
    },
    gengar: {
      level: 84,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Encore", "Protect", "Shadow Ball", "Sludge Bomb"],
          abilities: ["Cursed Body"],
          teraTypes: ["Ghost"]
        },
        {
          role: "Doubles Fast Attacker",
          movepool: ["Focus Blast", "Protect", "Shadow Ball", "Sludge Bomb", "Trick"],
          abilities: ["Cursed Body"],
          teraTypes: ["Fighting", "Ghost"]
        }
      ]
    },
    hypno: {
      level: 95,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Encore", "Helping Hand", "Knock Off", "Low Sweep", "Poison Gas", "Psychic"],
          abilities: ["Inner Focus"],
          teraTypes: ["Dark"]
        }
      ]
    },
    electrode: {
      level: 89,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Electroweb", "Foul Play", "Helping Hand", "Taunt", "Thunderbolt", "Volt Switch"],
          abilities: ["Aftermath", "Soundproof", "Static"],
          teraTypes: ["Flying"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Protect", "Tera Blast", "Thunderbolt", "Volt Switch"],
          abilities: ["Aftermath", "Soundproof", "Static"],
          teraTypes: ["Ice"]
        }
      ]
    },
    electrodehisui: {
      level: 88,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Electroweb", "Energy Ball", "Leaf Storm", "Taunt", "Thunderbolt", "Volt Switch"],
          abilities: ["Aftermath", "Soundproof", "Static"],
          teraTypes: ["Steel"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Foul Play", "Leaf Storm", "Protect", "Thunderbolt", "Volt Switch"],
          abilities: ["Aftermath", "Soundproof", "Static"],
          teraTypes: ["Dark", "Electric", "Grass", "Steel"]
        }
      ]
    },
    exeggutor: {
      level: 88,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Energy Ball", "Leaf Storm", "Protect", "Psychic", "Trick Room"],
          abilities: ["Harvest"],
          teraTypes: ["Fire", "Poison", "Steel"]
        }
      ]
    },
    exeggutoralola: {
      level: 88,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Draco Meteor", "Flamethrower", "Protect", "Trick Room", "Wood Hammer"],
          abilities: ["Harvest"],
          teraTypes: ["Fire"]
        }
      ]
    },
    hitmonlee: {
      level: 86,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Close Combat", "Fake Out", "Knock Off", "Poison Jab", "Protect"],
          abilities: ["Unburden"],
          teraTypes: ["Dark", "Poison"]
        }
      ]
    },
    hitmonchan: {
      level: 90,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Close Combat", "Coaching", "Fake Out", "Knock Off", "Poison Jab"],
          abilities: ["Inner Focus"],
          teraTypes: ["Dark", "Poison"]
        }
      ]
    },
    weezing: {
      level: 90,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Clear Smog", "Fire Blast", "Gunk Shot", "Poison Gas", "Protect", "Taunt", "Will-O-Wisp"],
          abilities: ["Levitate", "Neutralizing Gas"],
          teraTypes: ["Dark"]
        }
      ]
    },
    weezinggalar: {
      level: 88,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Fire Blast", "Gunk Shot", "Haze", "Poison Gas", "Protect", "Strange Steam", "Taunt", "Will-O-Wisp"],
          abilities: ["Levitate", "Neutralizing Gas"],
          teraTypes: ["Dark", "Steel"]
        }
      ]
    },
    rhydon: {
      level: 86,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Helping Hand", "High Horsepower", "Protect", "Rock Slide", "Stealth Rock", "Stone Edge"],
          abilities: ["Lightning Rod"],
          teraTypes: ["Flying", "Grass", "Water"]
        }
      ]
    },
    scyther: {
      level: 81,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Bug Bite", "Dual Wingbeat", "Protect", "Tailwind"],
          abilities: ["Technician"],
          teraTypes: ["Flying", "Steel"]
        }
      ]
    },
    electabuzz: {
      level: 84,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Electroweb", "Follow Me", "Knock Off", "Protect", "Thunderbolt"],
          abilities: ["Static"],
          teraTypes: ["Flying", "Grass"]
        }
      ]
    },
    magmar: {
      level: 84,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Follow Me", "Heat Wave", "Knock Off", "Protect", "Will-O-Wisp"],
          abilities: ["Flame Body"],
          teraTypes: ["Grass"]
        }
      ]
    },
    tauros: {
      level: 82,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Close Combat", "Double-Edge", "High Horsepower", "Lash Out", "Stone Edge", "Throat Chop"],
          abilities: ["Intimidate"],
          teraTypes: ["Fighting", "Normal"]
        }
      ]
    },
    taurospaldeacombat: {
      level: 82,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Bulk Up", "Protect", "Raging Bull", "Stone Edge"],
          abilities: ["Intimidate"],
          teraTypes: ["Steel"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Close Combat", "High Horsepower", "Iron Head", "Rock Slide", "Stone Edge", "Throat Chop"],
          abilities: ["Intimidate"],
          teraTypes: ["Dark", "Fighting", "Steel"]
        }
      ]
    },
    taurospaldeablaze: {
      level: 79,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Bulk Up", "Close Combat", "Protect", "Raging Bull", "Will-O-Wisp"],
          abilities: ["Intimidate"],
          teraTypes: ["Fighting", "Fire", "Water"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Close Combat", "Flare Blitz", "Rock Slide", "Stone Edge", "Wild Charge"],
          abilities: ["Intimidate"],
          teraTypes: ["Fighting", "Fire", "Water"]
        }
      ]
    },
    taurospaldeaaqua: {
      level: 81,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Aqua Jet", "Bulk Up", "Close Combat", "Liquidation", "Protect"],
          abilities: ["Intimidate"],
          teraTypes: ["Fire", "Steel", "Water"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Aqua Jet", "Close Combat", "Wave Crash", "Wild Charge", "Zen Headbutt"],
          abilities: ["Intimidate"],
          teraTypes: ["Fire", "Steel", "Water"]
        }
      ]
    },
    gyarados: {
      level: 81,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Dragon Dance", "Earthquake", "Protect", "Temper Flare", "Waterfall"],
          abilities: ["Intimidate"],
          teraTypes: ["Ground"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Dragon Dance", "Protect", "Tera Blast", "Waterfall"],
          abilities: ["Intimidate"],
          teraTypes: ["Flying"]
        },
        {
          role: "Doubles Support",
          movepool: ["Helping Hand", "Icy Wind", "Taunt", "Thunder Wave", "Waterfall"],
          abilities: ["Intimidate"],
          teraTypes: ["Ground", "Water"]
        }
      ]
    },
    lapras: {
      level: 83,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Freeze-Dry", "Icy Wind", "Life Dew", "Muddy Water", "Protect"],
          abilities: ["Water Absorb"],
          teraTypes: ["Ground"]
        }
      ]
    },
    ditto: {
      level: 97,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Transform"],
          abilities: ["Imposter"],
          teraTypes: ["Bug", "Dark", "Dragon", "Electric", "Fairy", "Fighting", "Fire", "Flying", "Ghost", "Grass", "Ground", "Ice", "Normal", "Poison", "Psychic", "Rock", "Steel", "Water"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Transform"],
          abilities: ["Imposter"],
          teraTypes: ["Bug", "Dark", "Dragon", "Electric", "Fairy", "Fighting", "Fire", "Flying", "Ghost", "Grass", "Ground", "Ice", "Normal", "Poison", "Psychic", "Rock", "Steel", "Water"]
        }
      ]
    },
    vaporeon: {
      level: 84,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Helping Hand", "Icy Wind", "Muddy Water", "Protect", "Scald", "Wish", "Yawn"],
          abilities: ["Water Absorb"],
          teraTypes: ["Dragon", "Fire", "Ground"]
        }
      ]
    },
    jolteon: {
      level: 84,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Alluring Voice", "Helping Hand", "Protect", "Thunder Wave", "Thunderbolt"],
          abilities: ["Volt Absorb"],
          teraTypes: ["Fairy"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Calm Mind", "Protect", "Tera Blast", "Thunderbolt"],
          abilities: ["Volt Absorb"],
          teraTypes: ["Ice"]
        }
      ]
    },
    flareon: {
      level: 89,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Facade", "Flare Blitz", "Protect", "Quick Attack"],
          abilities: ["Guts"],
          teraTypes: ["Normal"]
        }
      ]
    },
    snorlax: {
      level: 84,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Crunch", "Double-Edge", "Hammer Arm", "Heat Crash", "High Horsepower"],
          abilities: ["Thick Fat"],
          teraTypes: ["Fire", "Ghost", "Ground"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Body Slam", "Encore", "Helping Hand", "High Horsepower", "Icy Wind", "Recycle", "Yawn"],
          abilities: ["Gluttony"],
          teraTypes: ["Ghost", "Ground"]
        },
        {
          role: "Doubles Bulky Setup",
          movepool: ["Body Slam", "Crunch", "Curse", "High Horsepower", "Protect", "Recycle"],
          abilities: ["Gluttony"],
          teraTypes: ["Ground", "Poison"]
        }
      ]
    },
    articuno: {
      level: 83,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Brave Bird", "Freeze-Dry", "Ice Beam", "Icy Wind", "Protect", "Roost", "Tailwind"],
          abilities: ["Pressure"],
          teraTypes: ["Ground", "Steel"]
        }
      ]
    },
    articunogalar: {
      level: 83,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Freezing Glare", "Hurricane", "Protect", "Recover", "Tailwind"],
          abilities: ["Competitive"],
          teraTypes: ["Flying", "Ground", "Steel"]
        }
      ]
    },
    zapdos: {
      level: 77,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Hurricane", "Protect", "Roost", "Tailwind", "Thunderbolt"],
          abilities: ["Static"],
          teraTypes: ["Electric", "Steel"]
        },
        {
          role: "Doubles Fast Attacker",
          movepool: ["Heat Wave", "Hurricane", "Protect", "Tailwind", "Thunderbolt"],
          abilities: ["Static"],
          teraTypes: ["Electric", "Fire"]
        }
      ]
    },
    zapdosgalar: {
      level: 77,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Brave Bird", "Close Combat", "Knock Off", "Protect", "Tailwind", "Thunderous Kick", "U-turn"],
          abilities: ["Defiant"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    moltres: {
      level: 79,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Brave Bird", "Fire Blast", "Heat Wave", "Protect", "Scorching Sands", "Tailwind"],
          abilities: ["Flame Body"],
          teraTypes: ["Fire", "Ground"]
        }
      ]
    },
    moltresgalar: {
      level: 75,
      sets: [
        {
          role: "Doubles Bulky Setup",
          movepool: ["Fiery Wrath", "Hurricane", "Nasty Plot", "Protect", "Tailwind"],
          abilities: ["Berserk"],
          teraTypes: ["Dark"]
        }
      ]
    },
    dragonite: {
      level: 82,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Dragon Claw", "Extreme Speed", "Fire Punch", "Iron Head", "Low Kick", "Stomping Tantrum"],
          abilities: ["Inner Focus"],
          teraTypes: ["Normal"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Draco Meteor", "Fire Punch", "Low Kick", "Tailwind", "Tera Blast"],
          abilities: ["Inner Focus"],
          teraTypes: ["Flying"]
        }
      ]
    },
    mewtwo: {
      level: 73,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Aura Sphere", "Dark Pulse", "Fire Blast", "Protect", "Psystrike"],
          abilities: ["Unnerve"],
          teraTypes: ["Dark", "Fighting", "Fire", "Psychic"]
        },
        {
          role: "Doubles Bulky Setup",
          movepool: ["Aura Sphere", "Nasty Plot", "Psystrike", "Recover"],
          abilities: ["Unnerve"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    mew: {
      level: 84,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Coaching", "Encore", "Pollen Puff", "Tailwind", "Thunder Wave", "Will-O-Wisp"],
          abilities: ["Synchronize"],
          teraTypes: ["Fairy", "Steel"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Baton Pass", "Fire Blast", "Nasty Plot", "Pollen Puff", "Psychic"],
          abilities: ["Synchronize"],
          teraTypes: ["Fairy", "Steel"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Coaching", "Imprison", "Pollen Puff", "Transform"],
          abilities: ["Synchronize"],
          teraTypes: ["Fairy", "Steel"]
        }
      ]
    },
    meganium: {
      level: 91,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Encore", "Energy Ball", "Heal Pulse", "Knock Off", "Leech Seed"],
          abilities: ["Overgrow"],
          teraTypes: ["Poison", "Steel", "Water"]
        }
      ]
    },
    typhlosion: {
      level: 79,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Eruption", "Fire Blast", "Heat Wave", "Scorching Sands"],
          abilities: ["Flash Fire"],
          teraTypes: ["Fire"]
        }
      ]
    },
    typhlosionhisui: {
      level: 78,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Eruption", "Focus Blast", "Heat Wave", "Shadow Ball"],
          abilities: ["Blaze", "Frisk"],
          teraTypes: ["Fire"]
        }
      ]
    },
    feraligatr: {
      level: 82,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Dragon Dance", "Ice Punch", "Liquidation", "Protect"],
          abilities: ["Sheer Force"],
          teraTypes: ["Fire", "Water"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Aqua Jet", "Ice Punch", "Liquidation", "Swords Dance"],
          abilities: ["Sheer Force"],
          teraTypes: ["Dragon", "Water"]
        }
      ]
    },
    furret: {
      level: 98,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Double-Edge", "Knock Off", "Protect", "Tidy Up"],
          abilities: ["Frisk"],
          teraTypes: ["Normal"]
        },
        {
          role: "Doubles Support",
          movepool: ["Body Slam", "Follow Me", "Helping Hand", "Knock Off", "Protect", "U-turn"],
          abilities: ["Frisk"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    noctowl: {
      level: 91,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Hurricane", "Hyper Voice", "Protect", "Tailwind"],
          abilities: ["Tinted Lens"],
          teraTypes: ["Flying"]
        }
      ]
    },
    ariados: {
      level: 100,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Megahorn", "Protect", "Rage Powder", "Sticky Web"],
          abilities: ["Insomnia", "Swarm"],
          teraTypes: ["Dark", "Steel", "Water"]
        }
      ]
    },
    lanturn: {
      level: 87,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Electroweb", "Protect", "Scald", "Thunderbolt"],
          abilities: ["Volt Absorb"],
          teraTypes: ["Flying"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Electroweb", "Ice Beam", "Scald", "Volt Switch"],
          abilities: ["Volt Absorb"],
          teraTypes: ["Flying"]
        }
      ]
    },
    ampharos: {
      level: 86,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Dragon Tail", "Electroweb", "Focus Blast", "Helping Hand", "Thunder Wave", "Thunderbolt"],
          abilities: ["Static"],
          teraTypes: ["Flying"]
        }
      ]
    },
    bellossom: {
      level: 86,
      sets: [
        {
          role: "Doubles Bulky Setup",
          movepool: ["Baton Pass", "Giga Drain", "Protect", "Quiver Dance", "Strength Sap"],
          abilities: ["Healer"],
          teraTypes: ["Poison", "Water"]
        }
      ]
    },
    azumarill: {
      level: 82,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Aqua Jet", "Ice Spinner", "Knock Off", "Liquidation", "Play Rough", "Superpower"],
          abilities: ["Huge Power"],
          teraTypes: ["Water"]
        }
      ]
    },
    sudowoodo: {
      level: 94,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Head Smash", "High Horsepower", "Protect", "Sucker Punch", "Wood Hammer"],
          abilities: ["Rock Head"],
          teraTypes: ["Grass"]
        }
      ]
    },
    politoed: {
      level: 82,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Hydro Pump", "Ice Beam", "Muddy Water", "Weather Ball"],
          abilities: ["Drizzle"],
          teraTypes: ["Water"]
        },
        {
          role: "Doubles Support",
          movepool: ["Encore", "Helping Hand", "Hypnosis", "Icy Wind", "Muddy Water"],
          abilities: ["Drizzle"],
          teraTypes: ["Grass", "Steel"]
        }
      ]
    },
    jumpluff: {
      level: 93,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Acrobatics", "Encore", "Helping Hand", "Pollen Puff", "Rage Powder", "Sleep Powder", "Strength Sap", "Tailwind"],
          abilities: ["Infiltrator"],
          teraTypes: ["Steel"]
        }
      ]
    },
    sunflora: {
      level: 100,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Dazzling Gleam", "Earth Power", "Leaf Storm", "Protect", "Sludge Bomb"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Fairy", "Ground", "Poison"]
        }
      ]
    },
    quagsire: {
      level: 91,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Helping Hand", "High Horsepower", "Icy Wind", "Liquidation", "Recover", "Yawn"],
          abilities: ["Unaware"],
          teraTypes: ["Fire", "Poison", "Steel"]
        }
      ]
    },
    clodsire: {
      level: 87,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Gunk Shot", "Helping Hand", "High Horsepower", "Recover", "Toxic Spikes"],
          abilities: ["Unaware", "Water Absorb"],
          teraTypes: ["Flying", "Ground", "Steel"]
        }
      ]
    },
    espeon: {
      level: 84,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Alluring Voice", "Dazzling Gleam", "Protect", "Psychic", "Shadow Ball"],
          abilities: ["Magic Bounce"],
          teraTypes: ["Fairy"]
        }
      ]
    },
    umbreon: {
      level: 86,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Foul Play", "Helping Hand", "Moonlight", "Snarl", "Thunder Wave"],
          abilities: ["Synchronize"],
          teraTypes: ["Poison"]
        }
      ]
    },
    murkrow: {
      level: 89,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Brave Bird", "Haze", "Protect", "Tailwind", "Taunt"],
          abilities: ["Prankster"],
          teraTypes: ["Ghost", "Steel"]
        }
      ]
    },
    slowking: {
      level: 89,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Fire Blast", "Heal Pulse", "Helping Hand", "Psyshock", "Scald", "Trick Room"],
          abilities: ["Regenerator"],
          teraTypes: ["Dark", "Grass", "Steel"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Fire Blast", "Hydro Pump", "Ice Beam", "Psyshock", "Scald", "Trick Room"],
          abilities: ["Regenerator"],
          teraTypes: ["Fire", "Water"]
        }
      ]
    },
    slowkinggalar: {
      level: 85,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Fire Blast", "Protect", "Psyshock", "Sludge Bomb", "Trick Room"],
          abilities: ["Regenerator"],
          teraTypes: ["Dark", "Poison"]
        }
      ]
    },
    forretress: {
      level: 90,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Body Press", "Explosion", "Iron Head", "Lunge"],
          abilities: ["Sturdy"],
          teraTypes: ["Fighting", "Fire"]
        },
        {
          role: "Doubles Bulky Setup",
          movepool: ["Body Press", "Iron Defense", "Iron Head", "Rest", "Thunder Wave"],
          abilities: ["Sturdy"],
          teraTypes: ["Fighting", "Fire"]
        }
      ]
    },
    granbull: {
      level: 88,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Close Combat", "Play Rough", "Stomping Tantrum", "Super Fang"],
          abilities: ["Intimidate"],
          teraTypes: ["Steel"]
        }
      ]
    },
    qwilfish: {
      level: 87,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Flip Turn", "Gunk Shot", "Icy Wind", "Taunt", "Thunder Wave", "Toxic Spikes"],
          abilities: ["Intimidate"],
          teraTypes: ["Grass"]
        }
      ]
    },
    qwilfishhisui: {
      level: 83,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Crunch", "Gunk Shot", "Icy Wind", "Throat Chop", "Toxic Spikes"],
          abilities: ["Intimidate"],
          teraTypes: ["Flying"]
        }
      ]
    },
    overqwil: {
      level: 82,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Crunch", "Gunk Shot", "Liquidation", "Protect", "Swords Dance", "Throat Chop"],
          abilities: ["Intimidate"],
          teraTypes: ["Dark", "Flying", "Poison", "Water"]
        }
      ]
    },
    scizor: {
      level: 80,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Bullet Punch", "Close Combat", "Tailwind", "U-turn"],
          abilities: ["Technician"],
          teraTypes: ["Fire", "Water"]
        },
        {
          role: "Doubles Bulky Setup",
          movepool: ["Bug Bite", "Bullet Punch", "Close Combat", "Protect", "Swords Dance"],
          abilities: ["Technician"],
          teraTypes: ["Steel"]
        },
        {
          role: "Choice Item user",
          movepool: ["Bug Bite", "Bullet Punch", "Close Combat", "Knock Off"],
          abilities: ["Technician"],
          teraTypes: ["Fighting", "Steel", "Water"]
        }
      ]
    },
    heracross: {
      level: 82,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Close Combat", "Facade", "Knock Off", "Protect"],
          abilities: ["Guts"],
          teraTypes: ["Normal"]
        },
        {
          role: "Choice Item user",
          movepool: ["Close Combat", "Knock Off", "Megahorn", "Rock Slide"],
          abilities: ["Moxie"],
          teraTypes: ["Bug", "Fighting", "Rock"]
        }
      ]
    },
    magcargo: {
      level: 93,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Heat Wave", "Power Gem", "Protect", "Shell Smash"],
          abilities: ["Weak Armor"],
          teraTypes: ["Fairy", "Fire", "Grass"]
        }
      ]
    },
    delibird: {
      level: 100,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Brave Bird", "Fake Out", "Helping Hand", "Icy Wind", "Tailwind"],
          abilities: ["Insomnia", "Vital Spirit"],
          teraTypes: ["Ground", "Steel"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Brave Bird", "Drill Run", "Foul Play", "Ice Shard", "Ice Spinner"],
          abilities: ["Hustle"],
          teraTypes: ["Dark", "Flying", "Ground", "Ice"]
        }
      ]
    },
    skarmory: {
      level: 85,
      sets: [
        {
          role: "Doubles Bulky Setup",
          movepool: ["Body Press", "Brave Bird", "Iron Defense", "Protect", "Roost", "Tailwind"],
          abilities: ["Sturdy"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    houndoom: {
      level: 86,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Dark Pulse", "Heat Wave", "Nasty Plot", "Protect", "Sucker Punch"],
          abilities: ["Flash Fire"],
          teraTypes: ["Dark", "Fire", "Ghost", "Grass"]
        }
      ]
    },
    kingdra: {
      level: 85,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Draco Meteor", "Muddy Water", "Protect", "Rain Dance"],
          abilities: ["Swift Swim"],
          teraTypes: ["Water"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Draco Meteor", "Protect", "Rain Dance", "Wave Crash"],
          abilities: ["Swift Swim"],
          teraTypes: ["Water"]
        }
      ]
    },
    donphan: {
      level: 86,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["High Horsepower", "Ice Shard", "Knock Off", "Rapid Spin", "Stone Edge"],
          abilities: ["Sturdy"],
          teraTypes: ["Dragon", "Water"]
        }
      ]
    },
    porygon2: {
      level: 82,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Ice Beam", "Recover", "Thunderbolt", "Trick Room"],
          abilities: ["Download"],
          teraTypes: ["Electric", "Ghost"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Icy Wind", "Recover", "Thunderbolt", "Tri Attack"],
          abilities: ["Download"],
          teraTypes: ["Electric", "Ghost"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Recover", "Shadow Ball", "Tera Blast", "Trick Room"],
          abilities: ["Download"],
          teraTypes: ["Fairy", "Fighting"]
        }
      ]
    },
    smeargle: {
      level: 100,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Baton Pass", "No Retreat", "Population Bomb", "Spiky Shield"],
          abilities: ["Technician"],
          teraTypes: ["Ghost"]
        },
        {
          role: "Doubles Support",
          movepool: ["Decorate", "Fake Out", "Follow Me", "Tailwind"],
          abilities: ["Technician"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    hitmontop: {
      level: 88,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Close Combat", "Coaching", "Fake Out", "Helping Hand", "Sucker Punch", "Triple Axel", "Wide Guard"],
          abilities: ["Intimidate"],
          teraTypes: ["Steel"]
        }
      ]
    },
    blissey: {
      level: 96,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Heal Pulse", "Helping Hand", "Hyper Voice", "Protect", "Seismic Toss", "Soft-Boiled", "Thunder Wave"],
          abilities: ["Healer"],
          teraTypes: ["Fairy", "Ghost", "Poison"]
        }
      ]
    },
    raikou: {
      level: 81,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Calm Mind", "Protect", "Scald", "Shadow Ball", "Thunderbolt", "Volt Switch"],
          abilities: ["Inner Focus"],
          teraTypes: ["Water"]
        },
        {
          role: "Bulky Protect",
          movepool: ["Electroweb", "Protect", "Scald", "Snarl", "Thunder Wave", "Thunderbolt", "Volt Switch"],
          abilities: ["Inner Focus"],
          teraTypes: ["Water"]
        }
      ]
    },
    entei: {
      level: 77,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Extreme Speed", "Flare Blitz", "Sacred Fire", "Stomping Tantrum"],
          abilities: ["Inner Focus"],
          teraTypes: ["Normal"]
        }
      ]
    },
    suicune: {
      level: 80,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Ice Beam", "Protect", "Scald", "Snarl", "Tailwind"],
          abilities: ["Inner Focus"],
          teraTypes: ["Dragon", "Grass"]
        },
        {
          role: "Bulky Protect",
          movepool: ["Calm Mind", "Ice Beam", "Protect", "Scald"],
          abilities: ["Inner Focus"],
          teraTypes: ["Dragon", "Grass"]
        }
      ]
    },
    tyranitar: {
      level: 81,
      sets: [
        {
          role: "Doubles Bulky Setup",
          movepool: ["Dragon Dance", "High Horsepower", "Knock Off", "Protect", "Rock Slide", "Stone Edge"],
          abilities: ["Sand Stream"],
          teraTypes: ["Ghost", "Rock", "Steel"]
        },
        {
          role: "Doubles Support",
          movepool: ["Fire Blast", "High Horsepower", "Icy Wind", "Knock Off", "Protect", "Rock Slide", "Stone Edge", "Thunder Wave"],
          abilities: ["Sand Stream"],
          teraTypes: ["Flying", "Steel"]
        }
      ]
    },
    lugia: {
      level: 72,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Aeroblast", "Calm Mind", "Earth Power", "Recover"],
          abilities: ["Multiscale"],
          teraTypes: ["Ground"]
        }
      ]
    },
    hooh: {
      level: 72,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Brave Bird", "Earth Power", "Protect", "Recover", "Sacred Fire", "Tailwind"],
          abilities: ["Regenerator"],
          teraTypes: ["Ground"]
        }
      ]
    },
    sceptile: {
      level: 88,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Focus Blast", "Leaf Storm", "Protect", "Shed Tail"],
          abilities: ["Overgrow"],
          teraTypes: ["Steel", "Water"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Breaking Swipe", "Focus Blast", "Leaf Storm", "Protect"],
          abilities: ["Unburden"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    blaziken: {
      level: 79,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Close Combat", "Knock Off", "Overheat", "Protect", "Stone Edge"],
          abilities: ["Speed Boost"],
          teraTypes: ["Stellar"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Close Combat", "Heat Wave", "Protect", "Vacuum Wave"],
          abilities: ["Speed Boost"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    swampert: {
      level: 83,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Flip Turn", "High Horsepower", "Ice Beam", "Icy Wind", "Knock Off", "Muddy Water"],
          abilities: ["Torrent"],
          teraTypes: ["Fire", "Steel"]
        }
      ]
    },
    mightyena: {
      level: 93,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Crunch", "Howl", "Play Rough", "Sucker Punch", "Throat Chop"],
          abilities: ["Intimidate"],
          teraTypes: ["Dark", "Fairy"]
        }
      ]
    },
    ludicolo: {
      level: 89,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Energy Ball", "Muddy Water", "Protect", "Rain Dance"],
          abilities: ["Swift Swim"],
          teraTypes: ["Water"]
        },
        {
          role: "Doubles Support",
          movepool: ["Fake Out", "Hydro Pump", "Ice Beam", "Icy Wind", "Leaf Storm"],
          abilities: ["Swift Swim"],
          teraTypes: ["Poison", "Steel"]
        }
      ]
    },
    shiftry: {
      level: 84,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Fake Out", "Knock Off", "Leaf Blade", "Tailwind"],
          abilities: ["Wind Rider"],
          teraTypes: ["Ghost"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Knock Off", "Leaf Blade", "Protect", "Tailwind"],
          abilities: ["Wind Rider"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    pelipper: {
      level: 82,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Hurricane", "Hydro Pump", "Muddy Water", "Protect", "Tailwind", "Wide Guard"],
          abilities: ["Drizzle"],
          teraTypes: ["Ground", "Steel"]
        }
      ]
    },
    gardevoir: {
      level: 83,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Dazzling Gleam", "Moonblast", "Mystical Fire", "Psychic", "Psyshock", "Trick"],
          abilities: ["Trace"],
          teraTypes: ["Fairy", "Fire", "Steel"]
        }
      ]
    },
    masquerain: {
      level: 90,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Baton Pass", "Bug Buzz", "Hurricane", "Hydro Pump", "Quiver Dance"],
          abilities: ["Intimidate"],
          teraTypes: ["Water"]
        },
        {
          role: "Doubles Support",
          movepool: ["Bug Buzz", "Hurricane", "Protect", "Tailwind"],
          abilities: ["Intimidate"],
          teraTypes: ["Ground"]
        }
      ]
    },
    breloom: {
      level: 84,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Bullet Seed", "Close Combat", "Mach Punch", "Protect", "Rock Tomb", "Spore"],
          abilities: ["Technician"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    vigoroth: {
      level: 91,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["After You", "Double-Edge", "Encore", "Icy Wind", "Knock Off", "Slack Off", "Thunder Wave"],
          abilities: ["Vital Spirit"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    slaking: {
      level: 88,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Double-Edge", "Giga Impact", "High Horsepower", "Knock Off"],
          abilities: ["Truant"],
          teraTypes: ["Ghost", "Normal"]
        }
      ]
    },
    hariyama: {
      level: 85,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Bullet Punch", "Close Combat", "Facade", "Fake Out", "Headlong Rush", "Knock Off"],
          abilities: ["Guts"],
          teraTypes: ["Normal"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Bullet Punch", "Close Combat", "Fake Out", "Feint", "Heavy Slam", "Knock Off"],
          abilities: ["Thick Fat"],
          teraTypes: ["Steel"]
        }
      ]
    },
    sableye: {
      level: 93,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Disable", "Encore", "Fake Out", "Foul Play", "Knock Off", "Quash", "Recover", "Will-O-Wisp"],
          abilities: ["Prankster"],
          teraTypes: ["Steel"]
        }
      ]
    },
    medicham: {
      level: 86,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Bullet Punch", "Close Combat", "Ice Punch", "Poison Jab", "Zen Headbutt"],
          abilities: ["Pure Power"],
          teraTypes: ["Fighting", "Fire"]
        },
        {
          role: "Doubles Fast Attacker",
          movepool: ["Bullet Punch", "Close Combat", "Ice Punch", "Protect", "Zen Headbutt"],
          abilities: ["Pure Power"],
          teraTypes: ["Fighting", "Fire"]
        }
      ]
    },
    plusle: {
      level: 92,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Alluring Voice", "Nasty Plot", "Protect", "Thunderbolt"],
          abilities: ["Lightning Rod"],
          teraTypes: ["Flying"]
        },
        {
          role: "Doubles Support",
          movepool: ["Encore", "Nuzzle", "Super Fang", "Thunderbolt"],
          abilities: ["Lightning Rod"],
          teraTypes: ["Flying"]
        }
      ]
    },
    minun: {
      level: 91,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Encore", "Nuzzle", "Super Fang", "Thunderbolt"],
          abilities: ["Volt Absorb"],
          teraTypes: ["Flying"]
        }
      ]
    },
    volbeat: {
      level: 83,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Encore", "Lunge", "Tailwind", "Thunder Wave"],
          abilities: ["Prankster"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    illumise: {
      level: 85,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Bug Buzz", "Encore", "Tailwind", "Thunder Wave"],
          abilities: ["Prankster"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    swalot: {
      level: 90,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Encore", "Gunk Shot", "Helping Hand", "Knock Off", "Poison Gas", "Thunder Wave", "Toxic Spikes"],
          abilities: ["Gluttony"],
          teraTypes: ["Dark"]
        }
      ]
    },
    camerupt: {
      level: 88,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Earth Power", "Heat Wave", "Helping Hand", "Protect", "Stealth Rock"],
          abilities: ["Solid Rock"],
          teraTypes: ["Water"]
        }
      ]
    },
    torkoal: {
      level: 86,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Body Press", "Fire Blast", "Heat Wave", "Protect", "Solar Beam", "Will-O-Wisp"],
          abilities: ["Drought"],
          teraTypes: ["Dragon", "Grass"]
        }
      ]
    },
    grumpig: {
      level: 91,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Dazzling Gleam", "Earth Power", "Nasty Plot", "Psychic", "Psyshock"],
          abilities: ["Thick Fat"],
          teraTypes: ["Fairy", "Ground"]
        }
      ]
    },
    flygon: {
      level: 83,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Breaking Swipe", "Earth Power", "Protect", "Tailwind"],
          abilities: ["Levitate"],
          teraTypes: ["Steel"]
        }
      ]
    },
    cacturne: {
      level: 91,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Knock Off", "Leaf Storm", "Spiky Shield", "Sucker Punch"],
          abilities: ["Water Absorb"],
          teraTypes: ["Dark", "Poison"]
        }
      ]
    },
    altaria: {
      level: 90,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Brave Bird", "Draco Meteor", "Fire Blast", "Helping Hand", "Roost", "Tailwind", "Will-O-Wisp"],
          abilities: ["Cloud Nine"],
          teraTypes: ["Steel"]
        },
        {
          role: "Bulky Protect",
          movepool: ["Brave Bird", "Protect", "Roost", "Will-O-Wisp"],
          abilities: ["Cloud Nine"],
          teraTypes: ["Steel"]
        }
      ]
    },
    zangoose: {
      level: 86,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Close Combat", "Facade", "Knock Off", "Protect", "Quick Attack"],
          abilities: ["Toxic Boost"],
          teraTypes: ["Normal"]
        }
      ]
    },
    seviper: {
      level: 95,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Flamethrower", "Glare", "Gunk Shot", "Knock Off", "Protect"],
          abilities: ["Infiltrator"],
          teraTypes: ["Dark", "Fire", "Poison"]
        }
      ]
    },
    whiscash: {
      level: 87,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Helping Hand", "High Horsepower", "Icy Wind", "Muddy Water", "Protect"],
          abilities: ["Oblivious"],
          teraTypes: ["Fire", "Steel"]
        }
      ]
    },
    crawdaunt: {
      level: 86,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Aqua Jet", "Close Combat", "Crabhammer", "Knock Off"],
          abilities: ["Adaptability"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Aqua Jet", "Crabhammer", "Knock Off", "Protect"],
          abilities: ["Adaptability"],
          teraTypes: ["Water"]
        }
      ]
    },
    milotic: {
      level: 82,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Dragon Tail", "Icy Wind", "Protect", "Recover", "Scald"],
          abilities: ["Competitive"],
          teraTypes: ["Dragon", "Grass", "Steel"]
        }
      ]
    },
    banette: {
      level: 93,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Gunk Shot", "Poltergeist", "Protect", "Shadow Sneak"],
          abilities: ["Frisk"],
          teraTypes: ["Ghost", "Poison"]
        }
      ]
    },
    tropius: {
      level: 94,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Helping Hand", "Hurricane", "Leaf Storm", "Protect", "Tailwind", "Wide Guard"],
          abilities: ["Harvest"],
          teraTypes: ["Steel"]
        }
      ]
    },
    chimecho: {
      level: 95,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Encore", "Heal Pulse", "Helping Hand", "Icy Wind", "Protect", "Psychic", "Snarl", "Thunder Wave"],
          abilities: ["Levitate"],
          teraTypes: ["Dark", "Steel"]
        }
      ]
    },
    glalie: {
      level: 94,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Disable", "Foul Play", "Freeze-Dry", "Helping Hand", "Icy Wind", "Protect"],
          abilities: ["Inner Focus"],
          teraTypes: ["Poison", "Steel"]
        }
      ]
    },
    luvdisc: {
      level: 100,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Charm", "Endeavor", "Hydro Pump", "Icy Wind"],
          abilities: ["Swift Swim"],
          teraTypes: ["Dragon"]
        }
      ]
    },
    salamence: {
      level: 80,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Draco Meteor", "Dual Wingbeat", "Fire Blast", "Protect", "Tailwind"],
          abilities: ["Intimidate"],
          teraTypes: ["Dragon", "Fire", "Flying", "Steel"]
        }
      ]
    },
    metagross: {
      level: 81,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Bullet Punch", "Hammer Arm", "Heavy Slam", "Knock Off", "Psychic Fangs", "Stomping Tantrum"],
          abilities: ["Clear Body"],
          teraTypes: ["Dark", "Steel", "Water"]
        },
        {
          role: "Doubles Bulky Setup",
          movepool: ["Agility", "Brick Break", "Heavy Slam", "Knock Off", "Protect", "Psychic Fangs"],
          abilities: ["Clear Body"],
          teraTypes: ["Dragon"]
        }
      ]
    },
    regirock: {
      level: 83,
      sets: [
        {
          role: "Doubles Bulky Setup",
          movepool: ["Body Press", "Curse", "Iron Defense", "Rest", "Rock Slide", "Stone Edge"],
          abilities: ["Clear Body"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Body Press", "Iron Defense", "Rock Slide", "Stone Edge", "Thunder Wave"],
          abilities: ["Clear Body"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    regice: {
      level: 84,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Blizzard", "Icy Wind", "Protect", "Thunderbolt"],
          abilities: ["Clear Body"],
          teraTypes: ["Electric", "Water"]
        }
      ]
    },
    registeel: {
      level: 78,
      sets: [
        {
          role: "Doubles Bulky Setup",
          movepool: ["Body Press", "Iron Defense", "Iron Head", "Thunder Wave"],
          abilities: ["Clear Body"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    latias: {
      level: 81,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Draco Meteor", "Mist Ball", "Protect", "Recover", "Tailwind"],
          abilities: ["Levitate"],
          teraTypes: ["Steel"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Aura Sphere", "Calm Mind", "Dragon Pulse", "Mist Ball", "Protect"],
          abilities: ["Levitate"],
          teraTypes: ["Steel"]
        }
      ]
    },
    latios: {
      level: 79,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Draco Meteor", "Luster Purge", "Protect", "Tailwind"],
          abilities: ["Levitate"],
          teraTypes: ["Steel"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Aura Sphere", "Draco Meteor", "Luster Purge", "Protect", "Trick"],
          abilities: ["Levitate"],
          teraTypes: ["Dragon", "Steel"]
        }
      ]
    },
    kyogre: {
      level: 65,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Ice Beam", "Origin Pulse", "Thunder", "Water Spout"],
          abilities: ["Drizzle"],
          teraTypes: ["Water"]
        }
      ]
    },
    groudon: {
      level: 69,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Heat Crash", "Precipice Blades", "Protect", "Stone Edge", "Thunder Wave"],
          abilities: ["Drought"],
          teraTypes: ["Fire"]
        },
        {
          role: "Doubles Bulky Setup",
          movepool: ["Heat Crash", "Precipice Blades", "Protect", "Stone Edge", "Swords Dance"],
          abilities: ["Drought"],
          teraTypes: ["Fire"]
        }
      ]
    },
    rayquaza: {
      level: 75,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Dragon Ascent", "Dragon Dance", "Earthquake", "Extreme Speed", "Swords Dance"],
          abilities: ["Air Lock"],
          teraTypes: ["Normal"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Draco Meteor", "Dragon Ascent", "Earth Power", "Fire Blast", "Protect"],
          abilities: ["Air Lock"],
          teraTypes: ["Fire", "Flying", "Ground"]
        }
      ]
    },
    jirachi: {
      level: 80,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Iron Head", "Life Dew", "Protect", "Thunder Wave", "U-turn"],
          abilities: ["Serene Grace"],
          teraTypes: ["Dark", "Water"]
        },
        {
          role: "Choice Item user",
          movepool: ["Iron Head", "Psychic", "Thunderbolt", "Trick", "U-turn"],
          abilities: ["Serene Grace"],
          teraTypes: ["Steel"]
        }
      ]
    },
    deoxys: {
      level: 79,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Extreme Speed", "Knock Off", "Protect", "Psycho Boost", "Superpower"],
          abilities: ["Pressure"],
          teraTypes: ["Ghost", "Stellar"]
        }
      ]
    },
    deoxysattack: {
      level: 78,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Extreme Speed", "Knock Off", "Protect", "Psycho Boost", "Superpower"],
          abilities: ["Pressure"],
          teraTypes: ["Ghost", "Stellar"]
        }
      ]
    },
    deoxysdefense: {
      level: 87,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Icy Wind", "Knock Off", "Night Shade", "Spikes", "Thunder Wave"],
          abilities: ["Pressure"],
          teraTypes: ["Fairy", "Steel"]
        }
      ]
    },
    deoxysspeed: {
      level: 84,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Icy Wind", "Psycho Boost", "Superpower", "Taunt"],
          abilities: ["Pressure"],
          teraTypes: ["Fighting", "Ghost", "Psychic"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Psycho Boost", "Superpower", "Taunt", "Thunder Wave"],
          abilities: ["Pressure"],
          teraTypes: ["Fighting", "Psychic"]
        }
      ]
    },
    torterra: {
      level: 81,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Headlong Rush", "Protect", "Shell Smash", "Wood Hammer"],
          abilities: ["Overgrow"],
          teraTypes: ["Fire", "Ground"]
        }
      ]
    },
    infernape: {
      level: 83,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Close Combat", "Fake Out", "Knock Off", "Overheat", "Protect"],
          abilities: ["Blaze"],
          teraTypes: ["Dark", "Fighting", "Fire"]
        }
      ]
    },
    empoleon: {
      level: 82,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Flash Cannon", "Hydro Pump", "Ice Beam", "Icy Wind", "Protect", "Yawn"],
          abilities: ["Competitive"],
          teraTypes: ["Flying", "Grass"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Flash Cannon", "Hydro Pump", "Ice Beam", "Icy Wind", "Knock Off"],
          abilities: ["Competitive"],
          teraTypes: ["Flying", "Grass"]
        }
      ]
    },
    staraptor: {
      level: 81,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Brave Bird", "Close Combat", "Double-Edge", "Protect", "Quick Attack"],
          abilities: ["Intimidate"],
          teraTypes: ["Fighting", "Flying"]
        },
        {
          role: "Choice Item user",
          movepool: ["Brave Bird", "Close Combat", "Double-Edge", "Final Gambit"],
          abilities: ["Intimidate"],
          teraTypes: ["Fighting", "Flying", "Normal"]
        }
      ]
    },
    kricketune: {
      level: 100,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Bug Bite", "Helping Hand", "Knock Off", "Sticky Web", "Taunt"],
          abilities: ["Technician"],
          teraTypes: ["Bug", "Steel"]
        }
      ]
    },
    luxray: {
      level: 86,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Crunch", "Play Rough", "Snarl", "Throat Chop", "Volt Switch", "Wild Charge"],
          abilities: ["Intimidate"],
          teraTypes: ["Dark", "Fairy", "Flying"]
        }
      ]
    },
    rampardos: {
      level: 87,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Fire Punch", "Head Smash", "Rock Slide", "Stomping Tantrum"],
          abilities: ["Sheer Force"],
          teraTypes: ["Rock"]
        }
      ]
    },
    bastiodon: {
      level: 89,
      sets: [
        {
          role: "Doubles Bulky Setup",
          movepool: ["Body Press", "Foul Play", "Iron Defense", "Rest", "Wide Guard"],
          abilities: ["Sturdy"],
          teraTypes: ["Fighting", "Flying"]
        }
      ]
    },
    vespiquen: {
      level: 100,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Helping Hand", "Hurricane", "Pollen Puff", "Roost", "Toxic Spikes"],
          abilities: ["Unnerve"],
          teraTypes: ["Steel"]
        }
      ]
    },
    pachirisu: {
      level: 94,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Encore", "Follow Me", "Helping Hand", "Nuzzle", "Super Fang", "Thunderbolt"],
          abilities: ["Volt Absorb"],
          teraTypes: ["Flying", "Water"]
        }
      ]
    },
    floatzel: {
      level: 86,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Aqua Jet", "Crunch", "Ice Spinner", "Protect", "Wave Crash"],
          abilities: ["Water Veil"],
          teraTypes: ["Water"]
        }
      ]
    },
    gastrodon: {
      level: 82,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Clear Smog", "Earth Power", "Helping Hand", "Icy Wind", "Muddy Water", "Recover"],
          abilities: ["Storm Drain"],
          teraTypes: ["Fire"]
        }
      ]
    },
    ambipom: {
      level: 87,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Double-Edge", "Fake Out", "Knock Off", "Protect"],
          abilities: ["Technician"],
          teraTypes: ["Normal"]
        }
      ]
    },
    drifblim: {
      level: 85,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Shadow Ball", "Strength Sap", "Tailwind", "Will-O-Wisp"],
          abilities: ["Unburden"],
          teraTypes: ["Fairy", "Ghost", "Ground"]
        }
      ]
    },
    mismagius: {
      level: 88,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Dazzling Gleam", "Mystical Fire", "Protect", "Shadow Ball", "Taunt", "Thunderbolt", "Trick", "Will-O-Wisp"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Fairy"]
        }
      ]
    },
    honchkrow: {
      level: 86,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Brave Bird", "Heat Wave", "Protect", "Sucker Punch", "Tailwind"],
          abilities: ["Moxie"],
          teraTypes: ["Dark", "Fire", "Flying"]
        }
      ]
    },
    skuntank: {
      level: 85,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Fire Blast", "Gunk Shot", "Knock Off", "Poison Gas", "Protect", "Sucker Punch", "Taunt", "Toxic Spikes"],
          abilities: ["Aftermath"],
          teraTypes: ["Dark", "Flying"]
        }
      ]
    },
    bronzong: {
      level: 87,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Body Press", "Iron Defense", "Iron Head", "Trick Room"],
          abilities: ["Levitate"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Doubles Bulky Setup",
          movepool: ["Body Press", "Iron Defense", "Psychic Noise", "Trick Room"],
          abilities: ["Levitate"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    spiritomb: {
      level: 89,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Foul Play", "Helping Hand", "Icy Wind", "Shadow Sneak", "Will-O-Wisp"],
          abilities: ["Infiltrator"],
          teraTypes: ["Steel"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Foul Play", "Snarl", "Trick Room", "Will-O-Wisp"],
          abilities: ["Infiltrator"],
          teraTypes: ["Steel"]
        }
      ]
    },
    garchomp: {
      level: 77,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Earthquake", "Protect", "Scale Shot", "Swords Dance"],
          abilities: ["Rough Skin"],
          teraTypes: ["Dragon", "Fire"]
        }
      ]
    },
    lucario: {
      level: 87,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Close Combat", "Extreme Speed", "Flash Cannon", "Protect"],
          abilities: ["Inner Focus"],
          teraTypes: ["Normal"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Close Combat", "Extreme Speed", "Meteor Mash", "Rock Slide"],
          abilities: ["Inner Focus"],
          teraTypes: ["Normal"]
        }
      ]
    },
    hippowdon: {
      level: 85,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Helping Hand", "High Horsepower", "Slack Off", "Stealth Rock", "Stone Edge", "Whirlwind"],
          abilities: ["Sand Stream"],
          teraTypes: ["Dragon", "Rock", "Steel", "Water"]
        }
      ]
    },
    toxicroak: {
      level: 85,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Close Combat", "Fake Out", "Gunk Shot", "Protect", "Sucker Punch", "Swords Dance"],
          abilities: ["Dry Skin"],
          teraTypes: ["Dark", "Fighting", "Poison"]
        }
      ]
    },
    lumineon: {
      level: 92,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Encore", "Helping Hand", "Hydro Pump", "Icy Wind", "Tailwind", "Tickle"],
          abilities: ["Storm Drain"],
          teraTypes: ["Fire", "Ground"]
        }
      ]
    },
    abomasnow: {
      level: 81,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Aurora Veil", "Blizzard", "Ice Shard", "Protect", "Wood Hammer"],
          abilities: ["Snow Warning"],
          teraTypes: ["Ice", "Water"]
        }
      ]
    },
    weavile: {
      level: 82,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Fake Out", "Ice Shard", "Knock Off", "Low Kick", "Protect", "Triple Axel"],
          abilities: ["Pickpocket"],
          teraTypes: ["Dark", "Fighting", "Ghost", "Ice"]
        }
      ]
    },
    sneasler: {
      level: 77,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Close Combat", "Dire Claw", "Fake Out", "Gunk Shot", "Switcheroo", "U-turn"],
          abilities: ["Poison Touch"],
          teraTypes: ["Dark", "Fighting", "Poison"]
        }
      ]
    },
    magnezone: {
      level: 84,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Body Press", "Electroweb", "Flash Cannon", "Protect", "Thunderbolt", "Volt Switch"],
          abilities: ["Sturdy"],
          teraTypes: ["Flying"]
        }
      ]
    },
    rhyperior: {
      level: 82,
      sets: [
        {
          role: "Doubles Bulky Setup",
          movepool: ["High Horsepower", "Protect", "Rock Polish", "Rock Slide"],
          abilities: ["Solid Rock"],
          teraTypes: ["Dragon", "Flying", "Ghost", "Ground"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Dragon Tail", "Heat Crash", "High Horsepower", "Ice Punch", "Megahorn", "Protect", "Rock Slide"],
          abilities: ["Solid Rock"],
          teraTypes: ["Dragon", "Flying", "Water"]
        }
      ]
    },
    electivire: {
      level: 85,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Cross Chop", "Flamethrower", "Ice Punch", "Protect", "Volt Switch", "Wild Charge"],
          abilities: ["Motor Drive"],
          teraTypes: ["Flying"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Cross Chop", "Flamethrower", "Ice Punch", "Knock Off", "Volt Switch", "Wild Charge"],
          abilities: ["Motor Drive"],
          teraTypes: ["Flying"]
        }
      ]
    },
    magmortar: {
      level: 84,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Fire Blast", "Heat Wave", "Knock Off", "Protect", "Thunderbolt"],
          abilities: ["Flame Body"],
          teraTypes: ["Fire", "Grass"]
        }
      ]
    },
    yanmega: {
      level: 84,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Air Slash", "Bug Buzz", "Giga Drain", "U-turn"],
          abilities: ["Tinted Lens"],
          teraTypes: ["Bug"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Air Slash", "Bug Buzz", "Protect", "Tera Blast"],
          abilities: ["Speed Boost"],
          teraTypes: ["Ground"]
        }
      ]
    },
    leafeon: {
      level: 90,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Double-Edge", "Knock Off", "Leaf Blade", "Protect", "Swords Dance", "Synthesis"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Normal"]
        }
      ]
    },
    glaceon: {
      level: 87,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Blizzard", "Freeze-Dry", "Mud Shot", "Protect"],
          abilities: ["Ice Body"],
          teraTypes: ["Ground"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Blizzard", "Calm Mind", "Freeze-Dry", "Mud Shot"],
          abilities: ["Ice Body"],
          teraTypes: ["Ground"]
        }
      ]
    },
    gliscor: {
      level: 81,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Dual Wingbeat", "High Horsepower", "Knock Off", "Protect", "Tailwind", "Toxic", "Toxic Spikes"],
          abilities: ["Poison Heal"],
          teraTypes: ["Water"]
        },
        {
          role: "Doubles Bulky Setup",
          movepool: ["Earthquake", "Facade", "Protect", "Swords Dance"],
          abilities: ["Poison Heal"],
          teraTypes: ["Normal"]
        }
      ]
    },
    mamoswine: {
      level: 82,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["High Horsepower", "Ice Shard", "Icicle Crash", "Protect"],
          abilities: ["Thick Fat"],
          teraTypes: ["Ground", "Ice", "Water"]
        }
      ]
    },
    porygonz: {
      level: 84,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Shadow Ball", "Swift", "Tri Attack", "Trick"],
          abilities: ["Adaptability"],
          teraTypes: ["Ghost"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Nasty Plot", "Protect", "Shadow Ball", "Tera Blast"],
          abilities: ["Adaptability"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    gallade: {
      level: 80,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Leaf Blade", "Night Slash", "Protect", "Psycho Cut", "Sacred Sword", "Swords Dance"],
          abilities: ["Sharpness"],
          teraTypes: ["Dark", "Fighting", "Grass"]
        },
        {
          role: "Choice Item user",
          movepool: ["Night Slash", "Psycho Cut", "Sacred Sword", "Trick"],
          abilities: ["Sharpness"],
          teraTypes: ["Dark", "Fighting"]
        }
      ]
    },
    probopass: {
      level: 90,
      sets: [
        {
          role: "Doubles Bulky Setup",
          movepool: ["Body Press", "Flash Cannon", "Iron Defense", "Rest", "Thunder Wave"],
          abilities: ["Magnet Pull"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Body Press", "Iron Defense", "Power Gem", "Rest", "Thunder Wave"],
          abilities: ["Magnet Pull"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    dusknoir: {
      level: 89,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Leech Life", "Poltergeist", "Shadow Sneak", "Will-O-Wisp"],
          abilities: ["Frisk"],
          teraTypes: ["Dark"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Leech Life", "Poltergeist", "Protect", "Trick Room"],
          abilities: ["Frisk"],
          teraTypes: ["Dark"]
        }
      ]
    },
    froslass: {
      level: 88,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Icy Wind", "Poltergeist", "Protect", "Spikes", "Taunt", "Triple Axel", "Will-O-Wisp"],
          abilities: ["Cursed Body"],
          teraTypes: ["Ghost", "Water"]
        }
      ]
    },
    rotom: {
      level: 89,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Nasty Plot", "Protect", "Shadow Ball", "Thunderbolt", "Volt Switch", "Will-O-Wisp"],
          abilities: ["Levitate"],
          teraTypes: ["Electric"]
        }
      ]
    },
    rotomwash: {
      level: 83,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Electroweb", "Hydro Pump", "Protect", "Thunderbolt", "Volt Switch", "Will-O-Wisp"],
          abilities: ["Levitate"],
          teraTypes: ["Electric"]
        }
      ]
    },
    rotomheat: {
      level: 83,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Electroweb", "Overheat", "Protect", "Thunderbolt", "Volt Switch", "Will-O-Wisp"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Steel"]
        }
      ]
    },
    rotomfrost: {
      level: 84,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Blizzard", "Nasty Plot", "Protect", "Thunderbolt", "Will-O-Wisp"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Ice"]
        }
      ]
    },
    rotomfan: {
      level: 84,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Air Slash", "Electroweb", "Protect", "Thunderbolt", "Volt Switch", "Will-O-Wisp"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Steel"]
        }
      ]
    },
    rotommow: {
      level: 85,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Electroweb", "Leaf Storm", "Protect", "Thunderbolt", "Volt Switch", "Will-O-Wisp"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Poison", "Steel"]
        }
      ]
    },
    uxie: {
      level: 87,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Encore", "Helping Hand", "Knock Off", "Mystical Power", "Stealth Rock", "Thunder Wave"],
          abilities: ["Levitate"],
          teraTypes: ["Dark", "Poison", "Steel"]
        }
      ]
    },
    mesprit: {
      level: 86,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Dazzling Gleam", "Nasty Plot", "Protect", "Psychic", "Thunderbolt"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Fairy", "Psychic"]
        },
        {
          role: "Choice Item user",
          movepool: ["Ice Beam", "Psychic", "Thunderbolt", "U-turn"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Psychic"]
        }
      ]
    },
    azelf: {
      level: 83,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Dazzling Gleam", "Energy Ball", "Fire Blast", "Nasty Plot", "Psychic", "Psyshock", "U-turn"],
          abilities: ["Levitate"],
          teraTypes: ["Fairy", "Fire"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Dazzling Gleam", "Fire Blast", "Nasty Plot", "Protect", "Psychic", "Psyshock", "Thunderbolt"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Fairy", "Fire"]
        }
      ]
    },
    dialga: {
      level: 74,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Draco Meteor", "Fire Blast", "Heavy Slam", "Protect", "Thunder Wave"],
          abilities: ["Telepathy"],
          teraTypes: ["Dragon", "Fire", "Flying", "Steel"]
        }
      ]
    },
    dialgaorigin: {
      level: 74,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Draco Meteor", "Fire Blast", "Flash Cannon", "Protect", "Thunder Wave"],
          abilities: ["Telepathy"],
          teraTypes: ["Dragon", "Fire", "Flying"]
        }
      ]
    },
    palkia: {
      level: 74,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Draco Meteor", "Fire Blast", "Hydro Pump", "Spacial Rend"],
          abilities: ["Telepathy"],
          teraTypes: ["Dragon", "Fire", "Steel", "Water"]
        },
        {
          role: "Doubles Fast Attacker",
          movepool: ["Fire Blast", "Hydro Pump", "Protect", "Spacial Rend", "Thunder Wave"],
          abilities: ["Telepathy"],
          teraTypes: ["Dragon", "Fire", "Steel", "Water"]
        }
      ]
    },
    palkiaorigin: {
      level: 72,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Fire Blast", "Hydro Pump", "Protect", "Spacial Rend", "Thunder Wave"],
          abilities: ["Telepathy"],
          teraTypes: ["Dragon", "Fire", "Steel", "Water"]
        }
      ]
    },
    heatran: {
      level: 78,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Earth Power", "Magma Storm", "Protect", "Will-O-Wisp"],
          abilities: ["Flash Fire"],
          teraTypes: ["Fairy", "Grass"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Earth Power", "Flash Cannon", "Heat Wave", "Protect", "Tera Blast"],
          abilities: ["Flash Fire"],
          teraTypes: ["Grass"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Earth Power", "Flash Cannon", "Heat Wave", "Protect"],
          abilities: ["Flash Fire"],
          teraTypes: ["Fairy", "Grass"]
        }
      ]
    },
    regigigas: {
      level: 86,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Body Slam", "Knock Off", "Protect", "Substitute"],
          abilities: ["Slow Start"],
          teraTypes: ["Fairy", "Ghost"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Double-Edge", "Knock Off", "Protect", "Thunder Wave"],
          abilities: ["Slow Start"],
          teraTypes: ["Fairy"]
        }
      ]
    },
    giratina: {
      level: 76,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Aura Sphere", "Calm Mind", "Protect", "Shadow Ball"],
          abilities: ["Telepathy"],
          teraTypes: ["Fairy", "Fighting"]
        },
        {
          role: "Doubles Support",
          movepool: ["Breaking Swipe", "Icy Wind", "Rest", "Shadow Ball", "Thunder Wave", "Will-O-Wisp"],
          abilities: ["Telepathy"],
          teraTypes: ["Fairy"]
        }
      ]
    },
    giratinaorigin: {
      level: 76,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Draco Meteor", "Poltergeist", "Shadow Force", "Shadow Sneak", "Will-O-Wisp"],
          abilities: ["Levitate"],
          teraTypes: ["Dragon", "Fairy", "Ghost", "Poison", "Steel"]
        }
      ]
    },
    cresselia: {
      level: 80,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Helping Hand", "Icy Wind", "Lunar Blessing", "Psychic", "Thunder Wave"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Fire", "Poison", "Steel"]
        }
      ]
    },
    phione: {
      level: 90,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Ice Beam", "Protect", "Scald", "Take Heart"],
          abilities: ["Hydration"],
          teraTypes: ["Dragon", "Grass", "Steel"]
        }
      ]
    },
    manaphy: {
      level: 78,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Ice Beam", "Protect", "Scald", "Tail Glow"],
          abilities: ["Hydration"],
          teraTypes: ["Grass", "Steel", "Water"]
        },
        {
          role: "Doubles Bulky Setup",
          movepool: ["Energy Ball", "Hydro Pump", "Ice Beam", "Protect", "Scald", "Tail Glow"],
          abilities: ["Hydration"],
          teraTypes: ["Grass"]
        }
      ]
    },
    darkrai: {
      level: 80,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Dark Pulse", "Focus Blast", "Protect", "Sludge Bomb"],
          abilities: ["Bad Dreams"],
          teraTypes: ["Poison"]
        }
      ]
    },
    shaymin: {
      level: 81,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Earth Power", "Protect", "Seed Flare", "Synthesis", "Tailwind"],
          abilities: ["Natural Cure"],
          teraTypes: ["Grass", "Ground", "Steel"]
        }
      ]
    },
    shayminsky: {
      level: 77,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Air Slash", "Earth Power", "Protect", "Seed Flare", "Tailwind"],
          abilities: ["Serene Grace"],
          teraTypes: ["Flying", "Steel", "Water"]
        }
      ]
    },
    arceus: {
      level: 72,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Extreme Speed", "Flare Blitz", "Phantom Force", "Swords Dance"],
          abilities: ["Multitype"],
          teraTypes: ["Ghost", "Normal"]
        }
      ]
    },
    arceusbug: {
      level: 73,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Extreme Speed", "Stomping Tantrum", "Swords Dance", "X-Scissor"],
          abilities: ["Multitype"],
          teraTypes: ["Normal"]
        }
      ]
    },
    arceusdark: {
      level: 72,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Gunk Shot", "Judgment", "Recover", "Tailwind"],
          abilities: ["Multitype"],
          teraTypes: ["Poison"]
        }
      ]
    },
    arceusdragon: {
      level: 73,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Calm Mind", "Fire Blast", "Judgment", "Recover", "Sludge Bomb"],
          abilities: ["Multitype"],
          teraTypes: ["Fire", "Poison"]
        }
      ]
    },
    arceuselectric: {
      level: 70,
      sets: [
        {
          role: "Doubles Bulky Setup",
          movepool: ["Calm Mind", "Ice Beam", "Judgment", "Recover"],
          abilities: ["Multitype"],
          teraTypes: ["Electric", "Ice"]
        }
      ]
    },
    arceusfairy: {
      level: 71,
      sets: [
        {
          role: "Doubles Bulky Setup",
          movepool: ["Calm Mind", "Dazzling Gleam", "Earth Power", "Fire Blast", "Recover"],
          abilities: ["Multitype"],
          teraTypes: ["Fairy", "Fire", "Ground"]
        },
        {
          role: "Doubles Support",
          movepool: ["Icy Wind", "Judgment", "Recover", "Snarl", "Tailwind", "Taunt", "Will-O-Wisp"],
          abilities: ["Multitype"],
          teraTypes: ["Steel"]
        }
      ]
    },
    arceusfighting: {
      level: 71,
      sets: [
        {
          role: "Doubles Bulky Setup",
          movepool: ["Body Press", "Iron Defense", "Recover", "Snarl"],
          abilities: ["Multitype"],
          teraTypes: ["Steel"]
        }
      ]
    },
    arceusfire: {
      level: 72,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Extreme Speed", "Flare Blitz", "Liquidation", "Protect", "Swords Dance"],
          abilities: ["Multitype"],
          teraTypes: ["Fire", "Normal", "Water"]
        }
      ]
    },
    arceusflying: {
      level: 70,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Calm Mind", "Earth Power", "Fire Blast", "Judgment", "Recover"],
          abilities: ["Multitype"],
          teraTypes: ["Flying", "Ground"]
        }
      ]
    },
    arceusghost: {
      level: 72,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Brick Break", "Extreme Speed", "Phantom Force", "Swords Dance"],
          abilities: ["Multitype"],
          teraTypes: ["Ghost", "Normal"]
        },
        {
          role: "Doubles Bulky Setup",
          movepool: ["Calm Mind", "Dazzling Gleam", "Focus Blast", "Judgment", "Recover"],
          abilities: ["Multitype"],
          teraTypes: ["Fairy", "Fighting"]
        }
      ]
    },
    arceusgrass: {
      level: 74,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Icy Wind", "Judgment", "Recover", "Snarl", "Tailwind", "Taunt", "Will-O-Wisp"],
          abilities: ["Multitype"],
          teraTypes: ["Fire", "Steel"]
        }
      ]
    },
    arceusground: {
      level: 72,
      sets: [
        {
          role: "Doubles Bulky Setup",
          movepool: ["Calm Mind", "Fire Blast", "Ice Beam", "Judgment", "Recover"],
          abilities: ["Multitype"],
          teraTypes: ["Ground", "Ice"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Earthquake", "Extreme Speed", "Stone Edge", "Swords Dance"],
          abilities: ["Multitype"],
          teraTypes: ["Normal"]
        }
      ]
    },
    arceusice: {
      level: 72,
      sets: [
        {
          role: "Doubles Bulky Setup",
          movepool: ["Calm Mind", "Earth Power", "Judgment", "Recover", "Thunderbolt"],
          abilities: ["Multitype"],
          teraTypes: ["Electric", "Ground"]
        }
      ]
    },
    arceuspoison: {
      level: 72,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Extreme Speed", "Flare Blitz", "Gunk Shot", "Liquidation", "Swords Dance"],
          abilities: ["Multitype"],
          teraTypes: ["Fire", "Normal", "Poison"]
        }
      ]
    },
    arceuspsychic: {
      level: 72,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Icy Wind", "Judgment", "Recover", "Snarl", "Tailwind", "Taunt", "Will-O-Wisp"],
          abilities: ["Multitype"],
          teraTypes: ["Steel"]
        }
      ]
    },
    arceusrock: {
      level: 73,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Calm Mind", "Earth Power", "Fire Blast", "Judgment", "Recover"],
          abilities: ["Multitype"],
          teraTypes: ["Ground"]
        }
      ]
    },
    arceussteel: {
      level: 72,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Icy Wind", "Judgment", "Recover", "Snarl", "Tailwind", "Taunt", "Will-O-Wisp"],
          abilities: ["Multitype"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    arceuswater: {
      level: 73,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Icy Wind", "Judgment", "Recover", "Snarl", "Tailwind", "Taunt", "Will-O-Wisp"],
          abilities: ["Multitype"],
          teraTypes: ["Steel"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Extreme Speed", "Flare Blitz", "Liquidation", "Swords Dance"],
          abilities: ["Multitype"],
          teraTypes: ["Fire", "Normal"]
        }
      ]
    },
    serperior: {
      level: 80,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Dragon Pulse", "Glare", "Knock Off", "Leaf Storm", "Protect"],
          abilities: ["Contrary"],
          teraTypes: ["Dragon", "Grass"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Glare", "Leaf Storm", "Protect", "Tera Blast"],
          abilities: ["Contrary"],
          teraTypes: ["Fire", "Rock"]
        }
      ]
    },
    emboar: {
      level: 85,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Close Combat", "Flare Blitz", "Head Smash", "Knock Off", "Wild Charge"],
          abilities: ["Reckless"],
          teraTypes: ["Dark", "Electric", "Rock"]
        }
      ]
    },
    samurott: {
      level: 89,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Aqua Jet", "Flip Turn", "Hydro Pump", "Ice Beam", "Knock Off", "Megahorn", "Sacred Sword"],
          abilities: ["Torrent"],
          teraTypes: ["Dark", "Fire", "Water"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Aqua Jet", "Knock Off", "Liquidation", "Protect", "Sacred Sword", "Swords Dance"],
          abilities: ["Torrent"],
          teraTypes: ["Dark", "Fire", "Water"]
        }
      ]
    },
    samurotthisui: {
      level: 83,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Aqua Jet", "Ceaseless Edge", "Protect", "Razor Shell", "Sacred Sword", "Sucker Punch"],
          abilities: ["Sharpness"],
          teraTypes: ["Dark", "Fire", "Water"]
        },
        {
          role: "Choice Item user",
          movepool: ["Ceaseless Edge", "Flip Turn", "Razor Shell", "Sacred Sword", "Sucker Punch"],
          abilities: ["Sharpness"],
          teraTypes: ["Dark", "Fire", "Water"]
        }
      ]
    },
    zebstrika: {
      level: 87,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["High Horsepower", "Overheat", "Protect", "Wild Charge"],
          abilities: ["Sap Sipper"],
          teraTypes: ["Ground"]
        },
        {
          role: "Doubles Fast Attacker",
          movepool: ["High Horsepower", "Overheat", "Protect", "Thunderbolt"],
          abilities: ["Lightning Rod"],
          teraTypes: ["Flying", "Water"]
        }
      ]
    },
    excadrill: {
      level: 82,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["High Horsepower", "Iron Head", "Rapid Spin", "Rock Slide"],
          abilities: ["Mold Breaker", "Sand Rush"],
          teraTypes: ["Flying", "Water"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["High Horsepower", "Iron Head", "Protect", "Swords Dance"],
          abilities: ["Mold Breaker", "Sand Rush"],
          teraTypes: ["Flying", "Ground", "Water"]
        }
      ]
    },
    conkeldurr: {
      level: 81,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Close Combat", "Knock Off", "Mach Punch", "Protect"],
          abilities: ["Guts"],
          teraTypes: ["Dark", "Fighting"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Drain Punch", "Ice Punch", "Knock Off", "Mach Punch"],
          abilities: ["Iron Fist"],
          teraTypes: ["Dark", "Fighting", "Steel"]
        }
      ]
    },
    leavanny: {
      level: 90,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Knock Off", "Leaf Blade", "Pollen Puff", "Sticky Web"],
          abilities: ["Chlorophyll", "Swarm"],
          teraTypes: ["Rock", "Water"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Leaf Blade", "Lunge", "Protect", "Sticky Web"],
          abilities: ["Chlorophyll", "Swarm"],
          teraTypes: ["Rock", "Water"]
        }
      ]
    },
    whimsicott: {
      level: 80,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Encore", "Moonblast", "Stun Spore", "Tailwind"],
          abilities: ["Prankster"],
          teraTypes: ["Fire", "Ghost", "Steel"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Encore", "Moonblast", "Tailwind", "Taunt"],
          abilities: ["Prankster"],
          teraTypes: ["Fire", "Ghost", "Steel"]
        },
        {
          role: "Doubles Bulky Setup",
          movepool: ["Encore", "Helping Hand", "Moonblast", "Tailwind"],
          abilities: ["Prankster"],
          teraTypes: ["Fire", "Ghost", "Steel"]
        }
      ]
    },
    lilligant: {
      level: 87,
      sets: [
        {
          role: "Tera Blast user",
          movepool: ["Giga Drain", "Protect", "Quiver Dance", "Tera Blast"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Fire", "Rock"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Alluring Voice", "Energy Ball", "Pollen Puff", "Quiver Dance", "Sleep Powder"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Steel"]
        }
      ]
    },
    lilliganthisui: {
      level: 84,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Close Combat", "Leaf Blade", "Protect", "Sleep Powder", "Victory Dance"],
          abilities: ["Hustle"],
          teraTypes: ["Fighting", "Steel"]
        }
      ]
    },
    basculin: {
      level: 87,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Aqua Jet", "Flip Turn", "Psychic Fangs", "Wave Crash"],
          abilities: ["Adaptability"],
          teraTypes: ["Water"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Aqua Jet", "Flip Turn", "Protect", "Wave Crash"],
          abilities: ["Adaptability"],
          teraTypes: ["Water"]
        }
      ]
    },
    basculegion: {
      level: 70,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Aqua Jet", "Flip Turn", "Last Respects", "Wave Crash"],
          abilities: ["Adaptability"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    basculegionf: {
      level: 72,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Flip Turn", "Last Respects", "Muddy Water", "Wave Crash"],
          abilities: ["Adaptability"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    krookodile: {
      level: 80,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Gunk Shot", "High Horsepower", "Knock Off", "Protect", "Stone Edge", "Taunt"],
          abilities: ["Intimidate"],
          teraTypes: ["Dark", "Ground", "Poison"]
        },
        {
          role: "Choice Item user",
          movepool: ["Gunk Shot", "High Horsepower", "Knock Off", "Rock Slide"],
          abilities: ["Intimidate"],
          teraTypes: ["Dark", "Ground", "Poison"]
        }
      ]
    },
    scrafty: {
      level: 83,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Close Combat", "Coaching", "Fake Out", "Knock Off", "Poison Jab", "Snarl"],
          abilities: ["Intimidate"],
          teraTypes: ["Poison"]
        }
      ]
    },
    zoroark: {
      level: 84,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Dark Pulse", "Flamethrower", "Focus Blast", "Protect", "Sludge Bomb"],
          abilities: ["Illusion"],
          teraTypes: ["Poison"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Flamethrower", "Focus Blast", "Knock Off", "Protect", "Sludge Bomb"],
          abilities: ["Illusion"],
          teraTypes: ["Poison"]
        }
      ]
    },
    zoroarkhisui: {
      level: 80,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Bitter Malice", "Flamethrower", "Focus Blast", "Hyper Voice", "Nasty Plot", "Protect"],
          abilities: ["Illusion"],
          teraTypes: ["Normal"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Bitter Malice", "Hyper Voice", "Protect", "Tera Blast"],
          abilities: ["Illusion"],
          teraTypes: ["Fairy"]
        }
      ]
    },
    cinccino: {
      level: 85,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Bullet Seed", "Knock Off", "Protect", "Tail Slap", "Triple Axel"],
          abilities: ["Technician"],
          teraTypes: ["Grass", "Ice", "Normal"]
        }
      ]
    },
    gothitelle: {
      level: 90,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Fake Out", "Heal Pulse", "Helping Hand", "Protect", "Psychic", "Trick Room"],
          abilities: ["Shadow Tag"],
          teraTypes: ["Dark", "Steel"]
        }
      ]
    },
    reuniclus: {
      level: 84,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Focus Blast", "Protect", "Psychic", "Shadow Ball", "Trick Room"],
          abilities: ["Magic Guard"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    swanna: {
      level: 87,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Brave Bird", "Hydro Pump", "Knock Off", "Protect", "Tailwind"],
          abilities: ["Hydration"],
          teraTypes: ["Ground"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Brave Bird", "Hydro Pump", "Protect", "Tailwind"],
          abilities: ["Hydration"],
          teraTypes: ["Ground"]
        }
      ]
    },
    sawsbuck: {
      level: 91,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Double-Edge", "High Horsepower", "Horn Leech", "Protect", "Swords Dance"],
          abilities: ["Sap Sipper"],
          teraTypes: ["Normal"]
        }
      ]
    },
    amoonguss: {
      level: 86,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Clear Smog", "Pollen Puff", "Protect", "Rage Powder", "Spore"],
          abilities: ["Regenerator"],
          teraTypes: ["Steel", "Water"]
        },
        {
          role: "Doubles Support",
          movepool: ["Pollen Puff", "Rage Powder", "Sludge Bomb", "Spore"],
          abilities: ["Regenerator"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    alomomola: {
      level: 95,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Helping Hand", "Icy Wind", "Scald", "Wide Guard"],
          abilities: ["Regenerator"],
          teraTypes: ["Steel"]
        }
      ]
    },
    galvantula: {
      level: 85,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Bug Buzz", "Protect", "Sticky Web", "Thunder", "Volt Switch"],
          abilities: ["Compound Eyes"],
          teraTypes: ["Electric"]
        }
      ]
    },
    eelektross: {
      level: 86,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Close Combat", "Electroweb", "Flamethrower", "Giga Drain", "Knock Off", "Thunderbolt", "U-turn"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Poison"]
        }
      ]
    },
    chandelure: {
      level: 81,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Energy Ball", "Heat Wave", "Protect", "Shadow Ball", "Trick"],
          abilities: ["Flash Fire"],
          teraTypes: ["Fire", "Grass"]
        }
      ]
    },
    haxorus: {
      level: 84,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Close Combat", "Iron Head", "Protect", "Scale Shot", "Swords Dance"],
          abilities: ["Unnerve"],
          teraTypes: ["Dragon", "Fighting", "Steel"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Close Combat", "Dragon Claw", "First Impression", "Iron Head", "Protect"],
          abilities: ["Unnerve"],
          teraTypes: ["Fighting", "Steel"]
        }
      ]
    },
    beartic: {
      level: 91,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Aqua Jet", "Close Combat", "Icicle Crash", "Protect"],
          abilities: ["Slush Rush", "Swift Swim"],
          teraTypes: ["Fighting", "Water"]
        }
      ]
    },
    cryogonal: {
      level: 88,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Flash Cannon", "Freeze-Dry", "Haze", "Icy Wind", "Rapid Spin", "Recover"],
          abilities: ["Levitate"],
          teraTypes: ["Steel"]
        }
      ]
    },
    mienshao: {
      level: 85,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Close Combat", "Fake Out", "Knock Off", "Triple Axel", "U-turn"],
          abilities: ["Regenerator"],
          teraTypes: ["Dark"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Close Combat", "Fake Out", "Knock Off", "U-turn"],
          abilities: ["Regenerator"],
          teraTypes: ["Dark", "Steel"]
        }
      ]
    },
    golurk: {
      level: 86,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Dynamic Punch", "High Horsepower", "Poltergeist", "Protect"],
          abilities: ["No Guard"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Dynamic Punch", "High Horsepower", "Poltergeist", "Stone Edge"],
          abilities: ["No Guard"],
          teraTypes: ["Dragon", "Fairy", "Fighting"]
        }
      ]
    },
    braviary: {
      level: 82,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Brave Bird", "Close Combat", "Protect", "Tailwind"],
          abilities: ["Defiant"],
          teraTypes: ["Fighting", "Flying"]
        }
      ]
    },
    braviaryhisui: {
      level: 84,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Heat Wave", "Hurricane", "Psychic", "Tailwind"],
          abilities: ["Sheer Force"],
          teraTypes: ["Fire", "Psychic", "Steel"]
        },
        {
          role: "Bulky Protect",
          movepool: ["Calm Mind", "Esper Wing", "Hurricane", "Protect"],
          abilities: ["Tinted Lens"],
          teraTypes: ["Psychic", "Steel"]
        }
      ]
    },
    mandibuzz: {
      level: 88,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Foul Play", "Knock Off", "Roost", "Snarl", "Tailwind", "Taunt", "Toxic", "U-turn"],
          abilities: ["Overcoat"],
          teraTypes: ["Steel"]
        }
      ]
    },
    hydreigon: {
      level: 82,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Dark Pulse", "Draco Meteor", "Protect", "Snarl", "Tailwind"],
          abilities: ["Levitate"],
          teraTypes: ["Dragon", "Poison"]
        },
        {
          role: "Doubles Fast Attacker",
          movepool: ["Dark Pulse", "Draco Meteor", "Heat Wave", "Protect"],
          abilities: ["Levitate"],
          teraTypes: ["Fire"]
        }
      ]
    },
    volcarona: {
      level: 79,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Bug Buzz", "Heat Wave", "Protect", "Quiver Dance"],
          abilities: ["Flame Body", "Swarm"],
          teraTypes: ["Fire", "Ground", "Water"]
        },
        {
          role: "Doubles Support",
          movepool: ["Heat Wave", "Rage Powder", "Struggle Bug", "Tailwind"],
          abilities: ["Flame Body"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    cobalion: {
      level: 79,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Body Press", "Coaching", "Iron Head", "Thunder Wave", "Volt Switch"],
          abilities: ["Justified"],
          teraTypes: ["Flying", "Water"]
        },
        {
          role: "Bulky Protect",
          movepool: ["Body Press", "Iron Defense", "Iron Head", "Protect"],
          abilities: ["Justified"],
          teraTypes: ["Flying", "Water"]
        }
      ]
    },
    terrakion: {
      level: 79,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Close Combat", "High Horsepower", "Rock Slide", "Stone Edge"],
          abilities: ["Justified"],
          teraTypes: ["Fighting", "Ghost", "Rock"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Close Combat", "High Horsepower", "Protect", "Rock Slide"],
          abilities: ["Justified"],
          teraTypes: ["Fighting", "Ghost", "Rock"]
        }
      ]
    },
    virizion: {
      level: 86,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Close Combat", "Coaching", "Leaf Storm", "Protect", "Stone Edge"],
          abilities: ["Justified"],
          teraTypes: ["Fire", "Rock", "Steel"]
        }
      ]
    },
    tornadus: {
      level: 77,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Bleakwind Storm", "Heat Wave", "Knock Off", "Protect", "Tailwind", "Taunt"],
          abilities: ["Prankster"],
          teraTypes: ["Steel"]
        }
      ]
    },
    tornadustherian: {
      level: 77,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Bleakwind Storm", "Grass Knot", "Heat Wave", "Nasty Plot", "Protect"],
          abilities: ["Regenerator"],
          teraTypes: ["Fire", "Flying"]
        },
        {
          role: "Choice Item user",
          movepool: ["Bleakwind Storm", "Focus Blast", "Grass Knot", "Heat Wave", "U-turn"],
          abilities: ["Regenerator"],
          teraTypes: ["Fire", "Flying"]
        }
      ]
    },
    thundurus: {
      level: 79,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Grass Knot", "Knock Off", "Protect", "Snarl", "Taunt", "Thunder Wave", "Thunderbolt"],
          abilities: ["Prankster"],
          teraTypes: ["Steel"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Acrobatics", "Grass Knot", "Knock Off", "Protect", "Snarl", "Wildbolt Storm"],
          abilities: ["Defiant"],
          teraTypes: ["Electric", "Flying", "Steel"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Nasty Plot", "Protect", "Tera Blast", "Wildbolt Storm"],
          abilities: ["Defiant"],
          teraTypes: ["Flying", "Ice"]
        }
      ]
    },
    thundurustherian: {
      level: 78,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Grass Knot", "Protect", "Sludge Bomb", "Volt Switch", "Wildbolt Storm"],
          abilities: ["Volt Absorb"],
          teraTypes: ["Electric", "Poison"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Nasty Plot", "Protect", "Tera Blast", "Wildbolt Storm"],
          abilities: ["Volt Absorb"],
          teraTypes: ["Flying", "Ice"]
        }
      ]
    },
    reshiram: {
      level: 72,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Blue Flare", "Draco Meteor", "Heat Wave", "Protect", "Tailwind"],
          abilities: ["Turboblaze"],
          teraTypes: ["Fire"]
        }
      ]
    },
    zekrom: {
      level: 73,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Bolt Strike", "Dragon Claw", "Dragon Dance", "Protect"],
          abilities: ["Teravolt"],
          teraTypes: ["Dragon", "Electric", "Fire", "Grass"]
        }
      ]
    },
    landorus: {
      level: 76,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Earth Power", "Nasty Plot", "Protect", "Psychic", "Rock Slide", "Sandsear Storm", "Sludge Bomb"],
          abilities: ["Sheer Force"],
          teraTypes: ["Ground", "Poison", "Psychic"]
        }
      ]
    },
    landorustherian: {
      level: 77,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Protect", "Rock Slide", "Stomping Tantrum", "Stone Edge", "Taunt", "U-turn"],
          abilities: ["Intimidate"],
          teraTypes: ["Steel", "Water"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Rock Slide", "Stomping Tantrum", "Stone Edge", "Tera Blast", "U-turn"],
          abilities: ["Intimidate"],
          teraTypes: ["Flying"]
        }
      ]
    },
    kyurem: {
      level: 77,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Earth Power", "Icicle Spear", "Protect", "Scale Shot"],
          abilities: ["Pressure"],
          teraTypes: ["Fairy", "Steel"]
        },
        {
          role: "Doubles Fast Attacker",
          movepool: ["Draco Meteor", "Earth Power", "Glaciate", "Protect"],
          abilities: ["Pressure"],
          teraTypes: ["Fairy", "Steel"]
        }
      ]
    },
    kyuremwhite: {
      level: 72,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Draco Meteor", "Earth Power", "Fusion Flare", "Ice Beam", "Protect"],
          abilities: ["Turboblaze"],
          teraTypes: ["Fire"]
        },
        {
          role: "Doubles Fast Attacker",
          movepool: ["Blizzard", "Earth Power", "Freeze-Dry", "Fusion Flare", "Protect"],
          abilities: ["Turboblaze"],
          teraTypes: ["Fire", "Ground"]
        }
      ]
    },
    kyuremblack: {
      level: 75,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Dragon Dance", "Fusion Bolt", "Icicle Spear", "Protect"],
          abilities: ["Teravolt"],
          teraTypes: ["Electric"]
        }
      ]
    },
    keldeoresolute: {
      level: 78,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Hydro Pump", "Muddy Water", "Secret Sword", "Vacuum Wave"],
          abilities: ["Justified"],
          teraTypes: ["Fighting", "Steel", "Water"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Hydro Pump", "Muddy Water", "Protect", "Secret Sword", "Vacuum Wave"],
          abilities: ["Justified"],
          teraTypes: ["Fighting", "Steel", "Water"]
        }
      ]
    },
    meloetta: {
      level: 80,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Calm Mind", "Focus Blast", "Hyper Voice", "Protect", "Psychic", "U-turn"],
          abilities: ["Serene Grace"],
          teraTypes: ["Fighting", "Normal", "Psychic"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Close Combat", "Psychic", "Relic Song", "Tera Blast"],
          abilities: ["Serene Grace"],
          teraTypes: ["Normal"]
        }
      ]
    },
    chesnaught: {
      level: 86,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Body Press", "Coaching", "Knock Off", "Leech Seed", "Spiky Shield", "Wood Hammer"],
          abilities: ["Bulletproof"],
          teraTypes: ["Fire", "Rock", "Steel", "Water"]
        },
        {
          role: "Doubles Bulky Setup",
          movepool: ["Body Press", "Iron Defense", "Leech Seed", "Spiky Shield"],
          abilities: ["Bulletproof"],
          teraTypes: ["Fire", "Rock", "Steel", "Water"]
        }
      ]
    },
    delphox: {
      level: 83,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Fire Blast", "Heat Wave", "Nasty Plot", "Protect", "Psyshock"],
          abilities: ["Blaze"],
          teraTypes: ["Fire"]
        }
      ]
    },
    greninjabond: {
      level: 83,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Dark Pulse", "Gunk Shot", "Hydro Pump", "Ice Beam", "Protect", "Taunt"],
          abilities: ["Battle Bond"],
          teraTypes: ["Dark", "Poison", "Water"]
        }
      ]
    },
    talonflame: {
      level: 82,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Brave Bird", "Overheat", "Protect", "Tailwind", "U-turn", "Will-O-Wisp"],
          abilities: ["Gale Wings"],
          teraTypes: ["Flying", "Ground"]
        }
      ]
    },
    vivillon: {
      level: 88,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Hurricane", "Pollen Puff", "Protect", "Sleep Powder"],
          abilities: ["Compound Eyes"],
          teraTypes: ["Flying", "Steel"]
        }
      ]
    },
    pyroar: {
      level: 83,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Fire Blast", "Heat Wave", "Hyper Voice", "Protect", "Taunt", "Will-O-Wisp"],
          abilities: ["Unnerve"],
          teraTypes: ["Fire", "Normal", "Water"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Fire Blast", "Hyper Voice", "Protect", "Tera Blast"],
          abilities: ["Unnerve"],
          teraTypes: ["Grass"]
        }
      ]
    },
    florges: {
      level: 84,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Calm Mind", "Dazzling Gleam", "Moonblast", "Protect", "Synthesis"],
          abilities: ["Flower Veil"],
          teraTypes: ["Steel"]
        }
      ]
    },
    gogoat: {
      level: 89,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Double-Edge", "High Horsepower", "Horn Leech", "Leaf Storm"],
          abilities: ["Sap Sipper"],
          teraTypes: ["Ground", "Normal"]
        }
      ]
    },
    meowstic: {
      level: 87,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Fake Out", "Fake Tears", "Helping Hand", "Light Screen", "Psychic", "Reflect"],
          abilities: ["Prankster"],
          teraTypes: ["Dark", "Steel"]
        },
        {
          role: "Doubles Support",
          movepool: ["Fake Out", "Helping Hand", "Psychic", "Thunder Wave"],
          abilities: ["Prankster"],
          teraTypes: ["Dark", "Steel"]
        }
      ]
    },
    meowsticf: {
      level: 88,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Alluring Voice", "Dark Pulse", "Protect", "Psychic", "Thunderbolt"],
          abilities: ["Competitive"],
          teraTypes: ["Dark", "Electric", "Fairy"]
        }
      ]
    },
    malamar: {
      level: 80,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Knock Off", "Protect", "Psycho Cut", "Superpower", "Trick Room"],
          abilities: ["Contrary"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    dragalge: {
      level: 88,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Draco Meteor", "Hydro Pump", "Protect", "Sludge Bomb"],
          abilities: ["Adaptability"],
          teraTypes: ["Water"]
        }
      ]
    },
    clawitzer: {
      level: 84,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Aura Sphere", "Dark Pulse", "Dragon Pulse", "Muddy Water", "U-turn"],
          abilities: ["Mega Launcher"],
          teraTypes: ["Dark", "Dragon", "Fighting"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Aura Sphere", "Dark Pulse", "Heal Pulse", "Muddy Water", "Protect"],
          abilities: ["Mega Launcher"],
          teraTypes: ["Dark", "Fighting"]
        }
      ]
    },
    sylveon: {
      level: 79,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Calm Mind", "Hyper Voice", "Protect", "Substitute"],
          abilities: ["Pixilate"],
          teraTypes: ["Steel"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Hyper Voice", "Protect", "Quick Attack", "Tera Blast"],
          abilities: ["Pixilate"],
          teraTypes: ["Fire", "Ground"]
        }
      ]
    },
    hawlucha: {
      level: 84,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Brave Bird", "Close Combat", "Protect", "Swords Dance"],
          abilities: ["Unburden"],
          teraTypes: ["Fighting", "Fire", "Flying"]
        }
      ]
    },
    dedenne: {
      level: 86,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Dazzling Gleam", "Helping Hand", "Nuzzle", "Super Fang", "Thunderbolt"],
          abilities: ["Cheek Pouch"],
          teraTypes: ["Electric", "Flying"]
        }
      ]
    },
    carbink: {
      level: 88,
      sets: [
        {
          role: "Doubles Bulky Setup",
          movepool: ["Body Press", "Iron Defense", "Moonblast", "Trick Room"],
          abilities: ["Clear Body"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    goodra: {
      level: 86,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Breaking Swipe", "Draco Meteor", "Fire Blast", "Power Whip", "Protect", "Scald", "Sludge Bomb", "Thunderbolt"],
          abilities: ["Sap Sipper"],
          teraTypes: ["Electric", "Fire", "Grass", "Poison", "Water"]
        }
      ]
    },
    goodrahisui: {
      level: 83,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Draco Meteor", "Dragon Tail", "Fire Blast", "Heavy Slam", "Hydro Pump", "Thunderbolt"],
          abilities: ["Sap Sipper"],
          teraTypes: ["Electric", "Fire", "Water"]
        }
      ]
    },
    klefki: {
      level: 82,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Dazzling Gleam", "Foul Play", "Light Screen", "Reflect", "Spikes", "Thunder Wave"],
          abilities: ["Prankster"],
          teraTypes: ["Flying", "Water"]
        }
      ]
    },
    trevenant: {
      level: 88,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Poltergeist", "Protect", "Trick Room", "Wood Hammer"],
          abilities: ["Harvest"],
          teraTypes: ["Dark", "Water"]
        }
      ]
    },
    avalugg: {
      level: 90,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Avalanche", "Body Press", "Protect", "Recover"],
          abilities: ["Sturdy"],
          teraTypes: ["Fighting", "Poison", "Water"]
        }
      ]
    },
    avalugghisui: {
      level: 88,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Body Press", "Mountain Gale", "Protect", "Rock Slide"],
          abilities: ["Sturdy"],
          teraTypes: ["Fighting", "Flying", "Poison"]
        }
      ]
    },
    noivern: {
      level: 84,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Draco Meteor", "Flamethrower", "Hurricane", "Protect", "Tailwind"],
          abilities: ["Infiltrator"],
          teraTypes: ["Dragon", "Fire", "Steel"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Draco Meteor", "Flamethrower", "Hurricane", "Protect", "Tailwind"],
          abilities: ["Infiltrator"],
          teraTypes: ["Dragon", "Fire", "Steel"]
        }
      ]
    },
    diancie: {
      level: 78,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Body Press", "Diamond Storm", "Protect", "Trick Room"],
          abilities: ["Clear Body"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Bulky Protect",
          movepool: ["Diamond Storm", "Moonblast", "Protect", "Trick Room"],
          abilities: ["Clear Body"],
          teraTypes: ["Grass", "Steel"]
        }
      ]
    },
    hoopa: {
      level: 85,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Focus Blast", "Hyperspace Hole", "Protect", "Shadow Ball", "Trick"],
          abilities: ["Magician"],
          teraTypes: ["Dark", "Fighting", "Psychic"]
        }
      ]
    },
    hoopaunbound: {
      level: 80,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Drain Punch", "Gunk Shot", "Hyperspace Fury", "Trick", "Zen Headbutt"],
          abilities: ["Magician"],
          teraTypes: ["Dark", "Fighting", "Poison"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Focus Blast", "Gunk Shot", "Hyperspace Fury", "Protect", "Psychic", "Trick"],
          abilities: ["Magician"],
          teraTypes: ["Dark", "Fighting", "Poison"]
        }
      ]
    },
    volcanion: {
      level: 74,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Earth Power", "Heat Wave", "Protect", "Sludge Bomb", "Steam Eruption"],
          abilities: ["Water Absorb"],
          teraTypes: ["Ground"]
        }
      ]
    },
    decidueye: {
      level: 88,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Knock Off", "Leaf Storm", "Protect", "Spirit Shackle", "Tailwind"],
          abilities: ["Overgrow"],
          teraTypes: ["Dark", "Ghost", "Water"]
        }
      ]
    },
    decidueyehisui: {
      level: 86,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Knock Off", "Leaf Blade", "Protect", "Tailwind", "Triple Arrows"],
          abilities: ["Scrappy"],
          teraTypes: ["Dark", "Fighting", "Steel"]
        }
      ]
    },
    incineroar: {
      level: 78,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Fake Out", "Flare Blitz", "Knock Off", "Parting Shot"],
          abilities: ["Intimidate"],
          teraTypes: ["Water"]
        }
      ]
    },
    primarina: {
      level: 79,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Flip Turn", "Hydro Pump", "Hyper Voice", "Moonblast"],
          abilities: ["Liquid Voice"],
          teraTypes: ["Water"]
        }
      ]
    },
    toucannon: {
      level: 87,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Brave Bird", "Bullet Seed", "Protect", "Tailwind"],
          abilities: ["Skill Link"],
          teraTypes: ["Grass", "Steel"]
        },
        {
          role: "Bulky Protect",
          movepool: ["Beak Blast", "Bullet Seed", "Knock Off", "Protect"],
          abilities: ["Skill Link"],
          teraTypes: ["Grass", "Steel"]
        }
      ]
    },
    gumshoos: {
      level: 93,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Double-Edge", "Knock Off", "Stomping Tantrum", "U-turn"],
          abilities: ["Adaptability"],
          teraTypes: ["Normal"]
        }
      ]
    },
    vikavolt: {
      level: 83,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Bug Buzz", "Electroweb", "Protect", "Sticky Web", "Thunderbolt"],
          abilities: ["Levitate"],
          teraTypes: ["Electric"]
        }
      ]
    },
    crabominable: {
      level: 89,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Drain Punch", "Gunk Shot", "Ice Hammer", "Protect", "Wide Guard"],
          abilities: ["Iron Fist"],
          teraTypes: ["Fire", "Poison"]
        }
      ]
    },
    oricorio: {
      level: 84,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Hurricane", "Protect", "Quiver Dance", "Revelation Dance", "Tailwind"],
          abilities: ["Dancer"],
          teraTypes: ["Ground"]
        }
      ]
    },
    oricoriopompom: {
      level: 83,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Hurricane", "Protect", "Quiver Dance", "Revelation Dance", "Tailwind"],
          abilities: ["Dancer"],
          teraTypes: ["Ground"]
        }
      ]
    },
    oricoriopau: {
      level: 89,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Hurricane", "Protect", "Quiver Dance", "Revelation Dance", "Tailwind"],
          abilities: ["Dancer"],
          teraTypes: ["Fighting", "Ground"]
        }
      ]
    },
    oricoriosensu: {
      level: 86,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Hurricane", "Protect", "Quiver Dance", "Revelation Dance", "Tailwind"],
          abilities: ["Dancer"],
          teraTypes: ["Fighting", "Ground"]
        }
      ]
    },
    ribombee: {
      level: 86,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Moonblast", "Pollen Puff", "Protect", "Tailwind"],
          abilities: ["Shield Dust"],
          teraTypes: ["Steel"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Dazzling Gleam", "Moonblast", "Protect", "Quiver Dance", "Tera Blast"],
          abilities: ["Shield Dust"],
          teraTypes: ["Ground"]
        }
      ]
    },
    lycanroc: {
      level: 85,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Accelerock", "Close Combat", "Drill Run", "Protect", "Rock Slide", "Swords Dance"],
          abilities: ["Sand Rush"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    lycanrocmidnight: {
      level: 84,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Close Combat", "Knock Off", "Rock Slide", "Stone Edge"],
          abilities: ["No Guard"],
          teraTypes: ["Fighting", "Rock", "Water"]
        }
      ]
    },
    lycanrocdusk: {
      level: 82,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Accelerock", "Close Combat", "Protect", "Psychic Fangs", "Rock Slide", "Swords Dance"],
          abilities: ["Tough Claws"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    toxapex: {
      level: 94,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Baneful Bunker", "Infestation", "Recover", "Toxic"],
          abilities: ["Regenerator"],
          teraTypes: ["Grass", "Steel"]
        }
      ]
    },
    mudsdale: {
      level: 84,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Body Press", "Heavy Slam", "High Horsepower", "Rest", "Stone Edge"],
          abilities: ["Stamina"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    araquanid: {
      level: 85,
      sets: [
        {
          role: "Doubles Bulky Setup",
          movepool: ["Liquidation", "Lunge", "Protect", "Sticky Web", "Wide Guard"],
          abilities: ["Water Bubble"],
          teraTypes: ["Water"]
        },
        {
          role: "Doubles Support",
          movepool: ["Leech Life", "Liquidation", "Protect", "Sticky Web", "Wide Guard"],
          abilities: ["Water Bubble"],
          teraTypes: ["Water"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Hydro Pump", "Liquidation", "Protect", "Sticky Web", "Wide Guard"],
          abilities: ["Water Bubble"],
          teraTypes: ["Water"]
        }
      ]
    },
    lurantis: {
      level: 86,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Leaf Blade", "Leaf Storm", "Pollen Puff", "Superpower"],
          abilities: ["Contrary"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Bulky Protect",
          movepool: ["Knock Off", "Leaf Blade", "Pollen Puff", "Protect", "Superpower"],
          abilities: ["Contrary"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Knock Off", "Leaf Storm", "Superpower", "Tera Blast"],
          abilities: ["Contrary"],
          teraTypes: ["Stellar"]
        }
      ]
    },
    salazzle: {
      level: 86,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Encore", "Fake Out", "Fire Blast", "Heat Wave", "Incinerate", "Poison Gas", "Protect", "Sludge Bomb"],
          abilities: ["Corrosion"],
          teraTypes: ["Fire", "Flying", "Water"]
        }
      ]
    },
    tsareena: {
      level: 84,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["High Jump Kick", "Knock Off", "Power Whip", "Rapid Spin", "Triple Axel"],
          abilities: ["Queenly Majesty"],
          teraTypes: ["Fighting", "Fire"]
        }
      ]
    },
    comfey: {
      level: 89,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Draining Kiss", "Floral Healing", "Helping Hand", "Tailwind"],
          abilities: ["Triage"],
          teraTypes: ["Fairy", "Steel"]
        }
      ]
    },
    oranguru: {
      level: 91,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Hyper Voice", "Instruct", "Psyshock", "Trick Room"],
          abilities: ["Telepathy"],
          teraTypes: ["Fairy"]
        }
      ]
    },
    passimian: {
      level: 82,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Close Combat", "Gunk Shot", "Knock Off", "Rock Slide", "U-turn"],
          abilities: ["Defiant"],
          teraTypes: ["Dark", "Poison"]
        }
      ]
    },
    palossand: {
      level: 89,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Earth Power", "Protect", "Shadow Ball", "Shore Up", "Stealth Rock"],
          abilities: ["Water Compaction"],
          teraTypes: ["Grass", "Water"]
        }
      ]
    },
    minior: {
      level: 82,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Acrobatics", "Protect", "Rock Slide", "Shell Smash"],
          abilities: ["Shields Down"],
          teraTypes: ["Flying", "Rock", "Steel"]
        }
      ]
    },
    komala: {
      level: 92,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Double-Edge", "Knock Off", "Rapid Spin", "Sucker Punch", "Superpower", "U-turn", "Wood Hammer"],
          abilities: ["Comatose"],
          teraTypes: ["Fighting", "Grass"]
        }
      ]
    },
    mimikyu: {
      level: 82,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Play Rough", "Protect", "Shadow Claw", "Shadow Sneak", "Swords Dance"],
          abilities: ["Disguise"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    bruxish: {
      level: 86,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Crunch", "Protect", "Psychic Fangs", "Wave Crash"],
          abilities: ["Strong Jaw"],
          teraTypes: ["Dark", "Psychic"]
        },
        {
          role: "Choice Item user",
          movepool: ["Aqua Jet", "Crunch", "Flip Turn", "Ice Fang", "Psychic Fangs", "Wave Crash"],
          abilities: ["Strong Jaw"],
          teraTypes: ["Dark"]
        }
      ]
    },
    solgaleo: {
      level: 74,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Close Combat", "Flare Blitz", "Knock Off", "Psychic Fangs", "Sunsteel Strike"],
          abilities: ["Full Metal Body"],
          teraTypes: ["Dark", "Fighting", "Fire"]
        },
        {
          role: "Doubles Bulky Setup",
          movepool: ["Close Combat", "Flame Charge", "Protect", "Sunsteel Strike"],
          abilities: ["Full Metal Body"],
          teraTypes: ["Fighting", "Fire"]
        }
      ]
    },
    lunala: {
      level: 72,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Icy Wind", "Moongeist Beam", "Moonlight", "Tailwind", "Wide Guard", "Will-O-Wisp"],
          abilities: ["Shadow Shield"],
          teraTypes: ["Dark"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Meteor Beam", "Moonblast", "Moongeist Beam", "Protect"],
          abilities: ["Shadow Shield"],
          teraTypes: ["Fairy"]
        },
        {
          role: "Bulky Protect",
          movepool: ["Calm Mind", "Moonblast", "Moongeist Beam", "Protect"],
          abilities: ["Shadow Shield"],
          teraTypes: ["Fairy"]
        }
      ]
    },
    necrozma: {
      level: 80,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Brick Break", "Dragon Dance", "Knock Off", "Photon Geyser"],
          abilities: ["Prism Armor"],
          teraTypes: ["Dark", "Fighting"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Earth Power", "Meteor Beam", "Photon Geyser", "Protect"],
          abilities: ["Prism Armor"],
          teraTypes: ["Dark", "Steel"]
        },
        {
          role: "Bulky Protect",
          movepool: ["Calm Mind", "Earth Power", "Photon Geyser", "Protect"],
          abilities: ["Prism Armor"],
          teraTypes: ["Dark", "Steel"]
        }
      ]
    },
    necrozmaduskmane: {
      level: 72,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Dragon Dance", "Earthquake", "Photon Geyser", "Protect", "Sunsteel Strike"],
          abilities: ["Prism Armor"],
          teraTypes: ["Dark", "Steel", "Water"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Earthquake", "Photon Geyser", "Protect", "Sunsteel Strike", "Trick Room"],
          abilities: ["Prism Armor"],
          teraTypes: ["Dark", "Steel", "Water"]
        }
      ]
    },
    necrozmadawnwings: {
      level: 74,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Moongeist Beam", "Photon Geyser", "Protect", "Trick Room"],
          abilities: ["Prism Armor"],
          teraTypes: ["Dark"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Moongeist Beam", "Photon Geyser", "Tera Blast", "Trick Room"],
          abilities: ["Prism Armor"],
          teraTypes: ["Fairy", "Fighting"]
        }
      ]
    },
    kommoo: {
      level: 79,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Clanging Scales", "Clangorous Soul", "Drain Punch", "Iron Head"],
          abilities: ["Soundproof"],
          teraTypes: ["Steel"]
        },
        {
          role: "Doubles Bulky Setup",
          movepool: ["Clanging Scales", "Clangorous Soul", "Iron Head", "Protect"],
          abilities: ["Soundproof"],
          teraTypes: ["Steel"]
        }
      ]
    },
    magearna: {
      level: 71,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Dazzling Gleam", "Flash Cannon", "Fleur Cannon", "Protect", "Trick Room"],
          abilities: ["Soul-Heart"],
          teraTypes: ["Fairy", "Water"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Aura Sphere", "Dazzling Gleam", "Flash Cannon", "Fleur Cannon"],
          abilities: ["Soul-Heart"],
          teraTypes: ["Fairy", "Fighting", "Water"]
        }
      ]
    },
    rillaboom: {
      level: 82,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Fake Out", "Grassy Glide", "High Horsepower", "Wood Hammer"],
          abilities: ["Grassy Surge"],
          teraTypes: ["Fire", "Grass", "Steel"]
        },
        {
          role: "Doubles Support",
          movepool: ["Fake Out", "Grassy Glide", "U-turn", "Wood Hammer"],
          abilities: ["Grassy Surge"],
          teraTypes: ["Fire", "Grass", "Steel"]
        }
      ]
    },
    cinderace: {
      level: 82,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Court Change", "Gunk Shot", "High Jump Kick", "Protect", "Pyro Ball", "Sucker Punch", "U-turn"],
          abilities: ["Blaze"],
          teraTypes: ["Fighting", "Fire", "Poison"]
        }
      ]
    },
    inteleon: {
      level: 78,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Hydro Pump", "Ice Beam", "Muddy Water", "Scald"],
          abilities: ["Torrent"],
          teraTypes: ["Water"]
        }
      ]
    },
    greedent: {
      level: 86,
      sets: [
        {
          role: "Doubles Bulky Setup",
          movepool: ["Double-Edge", "High Horsepower", "Knock Off", "Protect", "Swords Dance"],
          abilities: ["Cheek Pouch"],
          teraTypes: ["Fairy", "Ghost", "Ground"]
        }
      ]
    },
    corviknight: {
      level: 82,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Brave Bird", "Iron Head", "Roost", "Tailwind", "U-turn"],
          abilities: ["Mirror Armor"],
          teraTypes: ["Dragon"]
        }
      ]
    },
    drednaw: {
      level: 83,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Crunch", "Liquidation", "Rock Slide", "Shell Smash"],
          abilities: ["Strong Jaw"],
          teraTypes: ["Dark"]
        },
        {
          role: "Doubles Bulky Setup",
          movepool: ["Liquidation", "Protect", "Rock Slide", "Shell Smash"],
          abilities: ["Shell Armor", "Swift Swim"],
          teraTypes: ["Water"]
        }
      ]
    },
    coalossal: {
      level: 90,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Fire Blast", "Heat Wave", "Incinerate", "Protect", "Rapid Spin", "Stealth Rock", "Stone Edge", "Will-O-Wisp"],
          abilities: ["Flame Body"],
          teraTypes: ["Water"]
        }
      ]
    },
    flapple: {
      level: 94,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Dragon Dance", "Dragon Rush", "Grav Apple", "Protect", "Sucker Punch"],
          abilities: ["Ripen"],
          teraTypes: ["Fire", "Grass", "Steel"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Dragon Dance", "Grav Apple", "Protect", "Tera Blast"],
          abilities: ["Hustle"],
          teraTypes: ["Dragon", "Fire"]
        }
      ]
    },
    appletun: {
      level: 91,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Apple Acid", "Dragon Pulse", "Leech Seed", "Protect"],
          abilities: ["Ripen", "Thick Fat"],
          teraTypes: ["Steel"]
        }
      ]
    },
    sandaconda: {
      level: 87,
      sets: [
        {
          role: "Doubles Bulky Setup",
          movepool: ["Coil", "High Horsepower", "Rest", "Stone Edge"],
          abilities: ["Shed Skin"],
          teraTypes: ["Dragon", "Steel"]
        },
        {
          role: "Doubles Support",
          movepool: ["Glare", "High Horsepower", "Rest", "Stealth Rock", "Stone Edge"],
          abilities: ["Shed Skin"],
          teraTypes: ["Dragon", "Steel"]
        }
      ]
    },
    cramorant: {
      level: 86,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Brave Bird", "Protect", "Roost", "Surf", "Tailwind"],
          abilities: ["Gulp Missile"],
          teraTypes: ["Ground"]
        }
      ]
    },
    barraskewda: {
      level: 84,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Close Combat", "Poison Jab", "Protect", "Psychic Fangs", "Waterfall"],
          abilities: ["Propeller Tail"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    toxtricity: {
      level: 82,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Overdrive", "Sludge Bomb", "Snarl", "Volt Switch"],
          abilities: ["Punk Rock"],
          teraTypes: ["Dark", "Electric", "Flying"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Overdrive", "Psychic Noise", "Sludge Bomb", "Volt Switch"],
          abilities: ["Punk Rock"],
          teraTypes: ["Electric", "Flying", "Psychic"]
        }
      ]
    },
    toxtricitylowkey: {
      level: 82,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Overdrive", "Sludge Bomb", "Snarl", "Volt Switch"],
          abilities: ["Punk Rock"],
          teraTypes: ["Dark", "Electric", "Flying"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Overdrive", "Psychic Noise", "Sludge Bomb", "Volt Switch"],
          abilities: ["Punk Rock"],
          teraTypes: ["Electric", "Flying", "Psychic"]
        }
      ]
    },
    polteageist: {
      level: 85,
      sets: [
        {
          role: "Tera Blast user",
          movepool: ["Protect", "Shadow Ball", "Shell Smash", "Tera Blast"],
          abilities: ["Cursed Body"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Baton Pass", "Protect", "Shadow Ball", "Shell Smash"],
          abilities: ["Cursed Body"],
          teraTypes: ["Dark", "Normal"]
        }
      ]
    },
    hatterene: {
      level: 84,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Dazzling Gleam", "Mystical Fire", "Protect", "Psychic", "Trick Room"],
          abilities: ["Magic Bounce"],
          teraTypes: ["Fairy", "Fire", "Psychic", "Steel"]
        }
      ]
    },
    grimmsnarl: {
      level: 82,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Fake Out", "Light Screen", "Parting Shot", "Reflect", "Spirit Break"],
          abilities: ["Prankster"],
          teraTypes: ["Steel"]
        },
        {
          role: "Doubles Support",
          movepool: ["Fake Out", "Parting Shot", "Spirit Break", "Sucker Punch", "Taunt", "Thunder Wave"],
          abilities: ["Prankster"],
          teraTypes: ["Steel"]
        }
      ]
    },
    perrserker: {
      level: 88,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Close Combat", "Fake Out", "Helping Hand", "Iron Head", "Knock Off", "U-turn"],
          abilities: ["Steely Spirit", "Tough Claws"],
          teraTypes: ["Fighting", "Steel"]
        },
        {
          role: "Choice Item user",
          movepool: ["Close Combat", "Iron Head", "Knock Off", "U-turn"],
          abilities: ["Steely Spirit", "Tough Claws"],
          teraTypes: ["Fighting", "Steel"]
        }
      ]
    },
    alcremie: {
      level: 89,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Alluring Voice", "Dazzling Gleam", "Decorate", "Encore", "Protect"],
          abilities: ["Aroma Veil"],
          teraTypes: ["Steel"]
        }
      ]
    },
    falinks: {
      level: 87,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Close Combat", "Iron Head", "Knock Off", "No Retreat", "Protect", "Rock Slide"],
          abilities: ["Defiant"],
          teraTypes: ["Dark", "Steel"]
        }
      ]
    },
    pincurchin: {
      level: 97,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Electroweb", "Recover", "Thunderbolt", "Toxic Spikes"],
          abilities: ["Electric Surge"],
          teraTypes: ["Grass"]
        }
      ]
    },
    frosmoth: {
      level: 86,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Bug Buzz", "Ice Beam", "Protect", "Quiver Dance"],
          abilities: ["Ice Scales"],
          teraTypes: ["Ground", "Water"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Ice Beam", "Protect", "Quiver Dance", "Tera Blast"],
          abilities: ["Ice Scales"],
          teraTypes: ["Ground"]
        }
      ]
    },
    stonjourner: {
      level: 88,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Heat Crash", "High Horsepower", "Protect", "Rock Polish", "Stone Edge"],
          abilities: ["Power Spot"],
          teraTypes: ["Fire", "Rock"]
        },
        {
          role: "Choice Item user",
          movepool: ["Heat Crash", "High Horsepower", "Rock Slide", "Stone Edge"],
          abilities: ["Power Spot"],
          teraTypes: ["Fire", "Rock"]
        }
      ]
    },
    eiscue: {
      level: 89,
      sets: [
        {
          role: "Doubles Bulky Setup",
          movepool: ["Belly Drum", "Ice Spinner", "Liquidation", "Protect"],
          abilities: ["Ice Face"],
          teraTypes: ["Water"]
        }
      ]
    },
    indeedee: {
      level: 79,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Encore", "Expanding Force", "Hyper Voice", "Protect", "Shadow Ball"],
          abilities: ["Psychic Surge"],
          teraTypes: ["Fairy", "Psychic"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Expanding Force", "Hyper Voice", "Psyshock", "Trick"],
          abilities: ["Psychic Surge"],
          teraTypes: ["Psychic"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Encore", "Expanding Force", "Protect", "Shadow Ball", "Tera Blast", "Trick"],
          abilities: ["Psychic Surge"],
          teraTypes: ["Fairy", "Fighting"]
        }
      ]
    },
    indeedeef: {
      level: 90,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Follow Me", "Heal Pulse", "Helping Hand", "Protect", "Psychic"],
          abilities: ["Psychic Surge"],
          teraTypes: ["Fairy"]
        }
      ]
    },
    morpeko: {
      level: 88,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Aura Wheel", "Electroweb", "Fake Out", "Knock Off", "Protect"],
          abilities: ["Hunger Switch"],
          teraTypes: ["Electric"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Aura Wheel", "Knock Off", "Parting Shot", "Protect", "Volt Switch"],
          abilities: ["Hunger Switch"],
          teraTypes: ["Electric"]
        }
      ]
    },
    copperajah: {
      level: 86,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["High Horsepower", "Iron Head", "Play Rough", "Protect", "Rock Slide"],
          abilities: ["Sheer Force"],
          teraTypes: ["Fairy", "Rock"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Heat Crash", "Heavy Slam", "High Horsepower", "Stone Edge"],
          abilities: ["Heavy Metal"],
          teraTypes: ["Fire"]
        }
      ]
    },
    duraludon: {
      level: 84,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Body Press", "Draco Meteor", "Flash Cannon", "Iron Defense"],
          abilities: ["Stalwart"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Doubles Bulky Setup",
          movepool: ["Body Press", "Flash Cannon", "Iron Defense", "Protect", "Snarl", "Thunder Wave"],
          abilities: ["Stalwart"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    dragapult: {
      level: 79,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Draco Meteor", "Dragon Darts", "Fire Blast", "Protect", "Shadow Ball"],
          abilities: ["Clear Body"],
          teraTypes: ["Dragon"]
        },
        {
          role: "Choice Item user",
          movepool: ["Dragon Claw", "Dragon Darts", "Phantom Force", "U-turn"],
          abilities: ["Clear Body"],
          teraTypes: ["Dragon"]
        }
      ]
    },
    zacian: {
      level: 70,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Close Combat", "Play Rough", "Protect", "Psychic Fangs", "Swords Dance"],
          abilities: ["Intrepid Sword"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    zaciancrowned: {
      level: 66,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Behemoth Blade", "Close Combat", "Play Rough", "Protect", "Swords Dance"],
          abilities: ["Intrepid Sword"],
          teraTypes: ["Fairy", "Fighting", "Fire", "Steel"]
        }
      ]
    },
    zamazenta: {
      level: 72,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Close Combat", "Coaching", "Crunch", "Howl", "Iron Head", "Psychic Fangs", "Stone Edge"],
          abilities: ["Dauntless Shield"],
          teraTypes: ["Dark", "Fighting", "Steel"]
        },
        {
          role: "Bulky Protect",
          movepool: ["Body Press", "Crunch", "Iron Defense", "Protect"],
          abilities: ["Dauntless Shield"],
          teraTypes: ["Fighting", "Fire", "Steel"]
        }
      ]
    },
    zamazentacrowned: {
      level: 68,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Body Press", "Coaching", "Heavy Slam", "Iron Defense", "Protect", "Snarl", "Wide Guard"],
          abilities: ["Dauntless Shield"],
          teraTypes: ["Fighting", "Fire", "Steel"]
        }
      ]
    },
    eternatus: {
      level: 70,
      sets: [
        {
          role: "Doubles Bulky Setup",
          movepool: ["Cosmic Power", "Dynamax Cannon", "Flamethrower", "Recover"],
          abilities: ["Pressure"],
          teraTypes: ["Dragon", "Water"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Dynamax Cannon", "Fire Blast", "Recover", "Sludge Bomb", "Toxic Spikes"],
          abilities: ["Pressure"],
          teraTypes: ["Dragon", "Water"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Dynamax Cannon", "Fire Blast", "Meteor Beam", "Protect"],
          abilities: ["Pressure"],
          teraTypes: ["Dragon", "Water"]
        }
      ]
    },
    urshifu: {
      level: 75,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Close Combat", "Poison Jab", "Protect", "Sucker Punch", "Wicked Blow"],
          abilities: ["Unseen Fist"],
          teraTypes: ["Dark", "Poison"]
        }
      ]
    },
    urshifurapidstrike: {
      level: 77,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Aqua Jet", "Close Combat", "Ice Spinner", "Protect", "Surging Strikes", "U-turn"],
          abilities: ["Unseen Fist"],
          teraTypes: ["Water"]
        }
      ]
    },
    zarude: {
      level: 80,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Close Combat", "Jungle Healing", "Knock Off", "Power Whip", "Protect"],
          abilities: ["Leaf Guard"],
          teraTypes: ["Poison"]
        }
      ]
    },
    regieleki: {
      level: 79,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Electroweb", "Protect", "Thunderbolt", "Volt Switch"],
          abilities: ["Transistor"],
          teraTypes: ["Electric"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Electroweb", "Protect", "Tera Blast", "Thunderbolt"],
          abilities: ["Transistor"],
          teraTypes: ["Ice"]
        }
      ]
    },
    regidrago: {
      level: 74,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Draco Meteor", "Dragon Claw", "Dragon Energy", "Earth Power"],
          abilities: ["Dragon's Maw"],
          teraTypes: ["Dragon"]
        }
      ]
    },
    glastrier: {
      level: 80,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Close Combat", "Heavy Slam", "High Horsepower", "Icicle Crash", "Protect"],
          abilities: ["Chilling Neigh"],
          teraTypes: ["Fighting", "Ground", "Steel"]
        }
      ]
    },
    spectrier: {
      level: 78,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Draining Kiss", "Nasty Plot", "Protect", "Shadow Ball"],
          abilities: ["Grim Neigh"],
          teraTypes: ["Fairy"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Dark Pulse", "Nasty Plot", "Protect", "Shadow Ball"],
          abilities: ["Grim Neigh"],
          teraTypes: ["Dark"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Nasty Plot", "Protect", "Shadow Ball", "Tera Blast"],
          abilities: ["Grim Neigh"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    calyrex: {
      level: 95,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Encore", "Giga Drain", "Helping Hand", "Leaf Storm", "Leech Seed", "Pollen Puff", "Psychic"],
          abilities: ["Unnerve"],
          teraTypes: ["Steel"]
        }
      ]
    },
    calyrexice: {
      level: 65,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Glacial Lance", "High Horsepower", "Protect", "Trick Room"],
          abilities: ["As One (Glastrier)"],
          teraTypes: ["Ground", "Ice"]
        }
      ]
    },
    calyrexshadow: {
      level: 63,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Astral Barrage", "Encore", "Nasty Plot", "Pollen Puff", "Protect", "Psyshock"],
          abilities: ["As One (Spectrier)"],
          teraTypes: ["Dark", "Ghost"]
        }
      ]
    },
    wyrdeer: {
      level: 85,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Body Slam", "Double-Edge", "Earth Power", "Protect", "Psychic", "Thunder Wave", "Thunderbolt"],
          abilities: ["Intimidate"],
          teraTypes: ["Fairy"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Double-Edge", "Earth Power", "Psychic", "Trick Room"],
          abilities: ["Intimidate"],
          teraTypes: ["Fairy", "Ground"]
        }
      ]
    },
    kleavor: {
      level: 79,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Close Combat", "Protect", "Stone Axe", "Tailwind", "U-turn", "X-Scissor"],
          abilities: ["Sharpness"],
          teraTypes: ["Bug", "Fighting", "Rock", "Steel"]
        }
      ]
    },
    ursaluna: {
      level: 77,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Crunch", "Earthquake", "Facade", "Headlong Rush", "Protect"],
          abilities: ["Guts"],
          teraTypes: ["Normal"]
        }
      ]
    },
    ursalunabloodmoon: {
      level: 78,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Blood Moon", "Earth Power", "Hyper Voice", "Protect"],
          abilities: ["Mind's Eye"],
          teraTypes: ["Ghost", "Normal", "Water"]
        }
      ]
    },
    enamorus: {
      level: 79,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Play Rough", "Protect", "Superpower", "Tailwind"],
          abilities: ["Contrary"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Earth Power", "Protect", "Springtide Storm", "Tailwind"],
          abilities: ["Contrary"],
          teraTypes: ["Ground"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Protect", "Springtide Storm", "Superpower", "Tera Blast"],
          abilities: ["Contrary"],
          teraTypes: ["Stellar"]
        }
      ]
    },
    enamorustherian: {
      level: 82,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Earth Power", "Moonblast", "Mystical Fire", "Protect", "Springtide Storm"],
          abilities: ["Overcoat"],
          teraTypes: ["Fairy", "Ground"]
        }
      ]
    },
    meowscarada: {
      level: 80,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Flower Trick", "Knock Off", "Sucker Punch", "Triple Axel", "U-turn"],
          abilities: ["Protean"],
          teraTypes: ["Dark", "Grass"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Flower Trick", "Knock Off", "Protect", "Sucker Punch", "Taunt"],
          abilities: ["Overgrow"],
          teraTypes: ["Poison"]
        }
      ]
    },
    skeledirge: {
      level: 80,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Protect", "Shadow Ball", "Slack Off", "Torch Song"],
          abilities: ["Unaware"],
          teraTypes: ["Fairy", "Water"]
        }
      ]
    },
    quaquaval: {
      level: 82,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Aqua Jet", "Aqua Step", "Close Combat", "Knock Off", "Protect", "Triple Axel"],
          abilities: ["Moxie"],
          teraTypes: ["Fire", "Steel", "Water"]
        }
      ]
    },
    oinkologne: {
      level: 91,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Double-Edge", "Helping Hand", "Lash Out", "Protect", "Yawn"],
          abilities: ["Gluttony"],
          teraTypes: ["Ghost", "Normal"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Double-Edge", "High Horsepower", "Lash Out", "Play Rough"],
          abilities: ["Thick Fat"],
          teraTypes: ["Fairy", "Ground", "Normal"]
        }
      ]
    },
    oinkolognef: {
      level: 92,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Double-Edge", "Helping Hand", "Lash Out", "Protect", "Yawn"],
          abilities: ["Gluttony"],
          teraTypes: ["Ghost", "Normal"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Double-Edge", "High Horsepower", "Lash Out", "Play Rough"],
          abilities: ["Thick Fat"],
          teraTypes: ["Fairy", "Ground", "Normal"]
        }
      ]
    },
    spidops: {
      level: 100,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Circle Throw", "Knock Off", "Lunge", "Sticky Web", "String Shot", "U-turn"],
          abilities: ["Stakeout"],
          teraTypes: ["Water"]
        }
      ]
    },
    lokix: {
      level: 87,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["First Impression", "Protect", "Sucker Punch", "U-turn"],
          abilities: ["Tinted Lens"],
          teraTypes: ["Bug"]
        },
        {
          role: "Doubles Fast Attacker",
          movepool: ["First Impression", "Leech Life", "Protect", "Sucker Punch"],
          abilities: ["Tinted Lens"],
          teraTypes: ["Bug"]
        }
      ]
    },
    pawmot: {
      level: 81,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Close Combat", "Double Shock", "Fake Out", "Protect", "Revival Blessing"],
          abilities: ["Volt Absorb"],
          teraTypes: ["Electric"]
        }
      ]
    },
    maushold: {
      level: 79,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Encore", "Population Bomb", "Protect", "Tidy Up"],
          abilities: ["Technician"],
          teraTypes: ["Normal"]
        },
        {
          role: "Doubles Support",
          movepool: ["Encore", "Follow Me", "Population Bomb", "Protect", "Taunt", "Thunder Wave", "U-turn"],
          abilities: ["Technician"],
          teraTypes: ["Ghost", "Normal"]
        }
      ]
    },
    dachsbun: {
      level: 90,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Body Press", "Helping Hand", "Howl", "Play Rough", "Snarl", "Yawn"],
          abilities: ["Well-Baked Body"],
          teraTypes: ["Steel"]
        }
      ]
    },
    arboliva: {
      level: 88,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Earth Power", "Energy Ball", "Hyper Voice", "Pollen Puff", "Protect", "Strength Sap"],
          abilities: ["Seed Sower"],
          teraTypes: ["Grass"]
        }
      ]
    },
    squawkabilly: {
      level: 89,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Brave Bird", "Double-Edge", "Parting Shot", "Protect", "Quick Attack"],
          abilities: ["Intimidate"],
          teraTypes: ["Flying", "Normal", "Steel"]
        }
      ]
    },
    squawkabillywhite: {
      level: 89,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Brave Bird", "Double-Edge", "Parting Shot", "Protect", "Quick Attack"],
          abilities: ["Intimidate"],
          teraTypes: ["Flying", "Normal", "Steel"]
        }
      ]
    },
    squawkabillyblue: {
      level: 89,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Brave Bird", "Double-Edge", "Parting Shot", "Protect", "Quick Attack"],
          abilities: ["Intimidate"],
          teraTypes: ["Flying", "Normal", "Steel"]
        }
      ]
    },
    squawkabillyyellow: {
      level: 89,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Brave Bird", "Double-Edge", "Parting Shot", "Protect", "Quick Attack"],
          abilities: ["Intimidate"],
          teraTypes: ["Flying", "Normal", "Steel"]
        }
      ]
    },
    garganacl: {
      level: 81,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Protect", "Recover", "Salt Cure", "Stealth Rock", "Wide Guard"],
          abilities: ["Purifying Salt"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    armarouge: {
      level: 81,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Armor Cannon", "Aura Sphere", "Energy Ball", "Heat Wave", "Psyshock"],
          abilities: ["Flash Fire"],
          teraTypes: ["Fighting", "Fire", "Grass"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Heat Wave", "Protect", "Psychic", "Trick Room"],
          abilities: ["Flash Fire"],
          teraTypes: ["Dark", "Grass"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Heat Wave", "Meteor Beam", "Protect", "Psychic", "Psyshock"],
          abilities: ["Weak Armor"],
          teraTypes: ["Dark", "Grass"]
        }
      ]
    },
    ceruledge: {
      level: 80,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Bitter Blade", "Poltergeist", "Protect", "Shadow Sneak", "Swords Dance"],
          abilities: ["Weak Armor"],
          teraTypes: ["Fire", "Ghost", "Grass"]
        }
      ]
    },
    bellibolt: {
      level: 81,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Electroweb", "Muddy Water", "Slack Off", "Thunder Wave", "Thunderbolt", "Volt Switch"],
          abilities: ["Electromorphosis"],
          teraTypes: ["Water"]
        }
      ]
    },
    kilowattrel: {
      level: 80,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Hurricane", "Protect", "Tailwind", "Thunderbolt"],
          abilities: ["Competitive"],
          teraTypes: ["Flying", "Steel"]
        }
      ]
    },
    mabosstiff: {
      level: 84,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Crunch", "Fire Fang", "Play Rough", "Psychic Fangs", "Wild Charge"],
          abilities: ["Intimidate"],
          teraTypes: ["Fairy"]
        }
      ]
    },
    grafaiai: {
      level: 88,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Encore", "Gunk Shot", "Knock Off", "Parting Shot", "Protect", "Taunt"],
          abilities: ["Prankster"],
          teraTypes: ["Dark"]
        },
        {
          role: "Doubles Support",
          movepool: ["Gunk Shot", "Knock Off", "Super Fang", "U-turn"],
          abilities: ["Poison Touch"],
          teraTypes: ["Dark"]
        }
      ]
    },
    brambleghast: {
      level: 86,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Poltergeist", "Power Whip", "Protect", "Shadow Sneak"],
          abilities: ["Wind Rider"],
          teraTypes: ["Fairy", "Ghost", "Grass", "Steel", "Water"]
        },
        {
          role: "Doubles Support",
          movepool: ["Disable", "Poltergeist", "Power Whip", "Protect", "Rapid Spin", "Strength Sap"],
          abilities: ["Wind Rider"],
          teraTypes: ["Fairy", "Steel", "Water"]
        }
      ]
    },
    toedscruel: {
      level: 87,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Earth Power", "Giga Drain", "Knock Off", "Rage Powder", "Spore"],
          abilities: ["Mycelium Might"],
          teraTypes: ["Water"]
        }
      ]
    },
    klawf: {
      level: 91,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Crabhammer", "High Horsepower", "Knock Off", "Protect", "Rock Slide"],
          abilities: ["Regenerator"],
          teraTypes: ["Dark", "Ground", "Water"]
        },
        {
          role: "Choice Item user",
          movepool: ["Crabhammer", "High Horsepower", "Knock Off", "Rock Slide"],
          abilities: ["Regenerator"],
          teraTypes: ["Dark", "Ground", "Water"]
        }
      ]
    },
    scovillain: {
      level: 89,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Burning Jealousy", "Energy Ball", "Fire Blast", "Leaf Storm"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Fire", "Grass", "Steel"]
        },
        {
          role: "Doubles Support",
          movepool: ["Energy Ball", "Fire Blast", "Protect", "Rage Powder", "Will-O-Wisp"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Fire", "Grass", "Steel"]
        }
      ]
    },
    rabsca: {
      level: 87,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Psychic", "Revival Blessing", "Struggle Bug", "Trick Room"],
          abilities: ["Synchronize"],
          teraTypes: ["Steel"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Bug Buzz", "Psychic", "Revival Blessing", "Trick Room"],
          abilities: ["Synchronize"],
          teraTypes: ["Steel"]
        }
      ]
    },
    espathra: {
      level: 83,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Baton Pass", "Dazzling Gleam", "Lumina Crash", "Protect", "Shadow Ball"],
          abilities: ["Speed Boost"],
          teraTypes: ["Fairy"]
        }
      ]
    },
    tinkaton: {
      level: 82,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Encore", "Fake Out", "Gigaton Hammer", "Knock Off", "Play Rough", "Stealth Rock", "Thunder Wave"],
          abilities: ["Mold Breaker"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    wugtrio: {
      level: 92,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Aqua Jet", "Liquidation", "Memento", "Stomping Tantrum", "Throat Chop"],
          abilities: ["Gooey"],
          teraTypes: ["Dark", "Ground"]
        }
      ]
    },
    bombirdier: {
      level: 84,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Brave Bird", "Knock Off", "Rock Slide", "Sucker Punch"],
          abilities: ["Rocky Payload"],
          teraTypes: ["Rock"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Brave Bird", "Knock Off", "Protect", "Rock Slide"],
          abilities: ["Rocky Payload"],
          teraTypes: ["Rock"]
        }
      ]
    },
    palafin: {
      level: 79,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Close Combat", "Flip Turn", "Jet Punch", "Wave Crash"],
          abilities: ["Zero to Hero"],
          teraTypes: ["Fighting", "Water"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Flip Turn", "Jet Punch", "Protect", "Wave Crash"],
          abilities: ["Zero to Hero"],
          teraTypes: ["Water"]
        }
      ]
    },
    revavroom: {
      level: 84,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Gunk Shot", "Iron Head", "Parting Shot", "Protect"],
          abilities: ["Filter"],
          teraTypes: ["Flying", "Water"]
        },
        {
          role: "Doubles Fast Attacker",
          movepool: ["Gunk Shot", "High Horsepower", "Iron Head", "Protect", "Shift Gear"],
          abilities: ["Filter"],
          teraTypes: ["Ground"]
        }
      ]
    },
    cyclizar: {
      level: 86,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Breaking Swipe", "Double-Edge", "Knock Off", "Shed Tail", "Taunt"],
          abilities: ["Regenerator"],
          teraTypes: ["Dragon", "Poison"]
        },
        {
          role: "Doubles Fast Attacker",
          movepool: ["Double-Edge", "Draco Meteor", "Knock Off", "Shed Tail"],
          abilities: ["Regenerator"],
          teraTypes: ["Dragon", "Fire", "Normal", "Poison"]
        }
      ]
    },
    orthworm: {
      level: 88,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Body Press", "Heavy Slam", "Iron Defense", "Protect"],
          abilities: ["Earth Eater"],
          teraTypes: ["Electric", "Fighting"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Body Press", "Heavy Slam", "Helping Hand", "Protect", "Shed Tail"],
          abilities: ["Earth Eater"],
          teraTypes: ["Electric", "Poison"]
        }
      ]
    },
    glimmora: {
      level: 77,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Earth Power", "Mortal Spin", "Power Gem", "Sludge Bomb", "Spiky Shield", "Stealth Rock"],
          abilities: ["Toxic Debris"],
          teraTypes: ["Grass", "Water"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Earth Power", "Meteor Beam", "Sludge Bomb", "Spiky Shield"],
          abilities: ["Toxic Debris"],
          teraTypes: ["Ground"]
        }
      ]
    },
    houndstone: {
      level: 73,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Body Press", "Last Respects", "Shadow Sneak", "Trick"],
          abilities: ["Fluffy"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    flamigo: {
      level: 84,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Brave Bird", "Close Combat", "Throat Chop", "U-turn"],
          abilities: ["Scrappy"],
          teraTypes: ["Fighting", "Fire", "Flying"]
        }
      ]
    },
    cetitan: {
      level: 83,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["High Horsepower", "Ice Shard", "Icicle Crash", "Liquidation", "Protect"],
          abilities: ["Sheer Force"],
          teraTypes: ["Ground", "Water"]
        }
      ]
    },
    veluza: {
      level: 88,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Aqua Cutter", "Aqua Jet", "Night Slash", "Psycho Cut"],
          abilities: ["Sharpness"],
          teraTypes: ["Dark", "Psychic", "Water"]
        }
      ]
    },
    dondozo: {
      level: 85,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Avalanche", "Body Press", "Heavy Slam", "Wave Crash"],
          abilities: ["Unaware"],
          teraTypes: ["Dragon", "Grass", "Steel"]
        }
      ]
    },
    tatsugiri: {
      level: 84,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Draco Meteor", "Icy Wind", "Muddy Water", "Rapid Spin"],
          abilities: ["Storm Drain"],
          teraTypes: ["Fire", "Steel"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Draco Meteor", "Muddy Water", "Nasty Plot", "Protect"],
          abilities: ["Storm Drain"],
          teraTypes: ["Dragon", "Fire", "Water"]
        },
        {
          role: "Choice Item user",
          movepool: ["Draco Meteor", "Hydro Pump", "Icy Wind", "Muddy Water"],
          abilities: ["Storm Drain"],
          teraTypes: ["Dragon", "Fire", "Water"]
        }
      ]
    },
    farigiraf: {
      level: 84,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Hyper Voice", "Nasty Plot", "Protect", "Psychic", "Psyshock", "Trick Room"],
          abilities: ["Armor Tail"],
          teraTypes: ["Fairy"]
        }
      ]
    },
    dudunsparce: {
      level: 86,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Earth Power", "Glare", "Hyper Drill", "Protect", "Tailwind"],
          abilities: ["Rattled"],
          teraTypes: ["Ghost", "Ground", "Normal"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Boomburst", "Earth Power", "Helping Hand", "Protect", "Tailwind"],
          abilities: ["Rattled"],
          teraTypes: ["Ghost", "Ground", "Normal"]
        }
      ]
    },
    kingambit: {
      level: 77,
      sets: [
        {
          role: "Doubles Bulky Setup",
          movepool: ["Iron Head", "Protect", "Sucker Punch", "Swords Dance"],
          abilities: ["Defiant"],
          teraTypes: ["Dark", "Fire", "Flying"]
        },
        {
          role: "Bulky Protect",
          movepool: ["Iron Head", "Kowtow Cleave", "Protect", "Sucker Punch"],
          abilities: ["Defiant"],
          teraTypes: ["Dark", "Fire", "Flying"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Iron Head", "Kowtow Cleave", "Sucker Punch", "Tera Blast"],
          abilities: ["Defiant"],
          teraTypes: ["Fairy", "Fire", "Flying"]
        }
      ]
    },
    greattusk: {
      level: 81,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Close Combat", "Headlong Rush", "Ice Spinner", "Knock Off", "Protect", "Rapid Spin", "Rock Slide"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Fire", "Ground"]
        }
      ]
    },
    brutebonnet: {
      level: 80,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Close Combat", "Crunch", "Protect", "Rage Powder", "Seed Bomb", "Spore", "Sucker Punch"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Dark", "Poison"]
        }
      ]
    },
    sandyshocks: {
      level: 79,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Earth Power", "Electroweb", "Protect", "Stealth Rock", "Thunderbolt", "Volt Switch"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Electric", "Grass", "Ground"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Earth Power", "Protect", "Tera Blast", "Volt Switch"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Flying", "Ice"]
        }
      ]
    },
    screamtail: {
      level: 84,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Disable", "Encore", "Helping Hand", "Howl", "Play Rough", "Stealth Rock", "Thunder Wave"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Steel"]
        }
      ]
    },
    fluttermane: {
      level: 73,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Dazzling Gleam", "Moonblast", "Protect", "Shadow Ball"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Fairy"]
        },
        {
          role: "Choice Item user",
          movepool: ["Dazzling Gleam", "Moonblast", "Mystical Fire", "Shadow Ball"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Fairy"]
        }
      ]
    },
    slitherwing: {
      level: 82,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Close Combat", "First Impression", "Flare Blitz", "U-turn", "Wild Charge"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Bug", "Electric", "Fighting", "Fire"]
        }
      ]
    },
    roaringmoon: {
      level: 76,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Acrobatics", "Breaking Swipe", "Knock Off", "Protect", "Tailwind"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Flying"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Dragon Claw", "Dragon Dance", "Knock Off", "Protect"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Dark", "Fire"]
        }
      ]
    },
    irontreads: {
      level: 80,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["High Horsepower", "Iron Head", "Knock Off", "Rapid Spin", "Stealth Rock", "Stone Edge"],
          abilities: ["Quark Drive"],
          teraTypes: ["Fire", "Ground", "Steel"]
        }
      ]
    },
    ironmoth: {
      level: 78,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Energy Ball", "Fiery Dance", "Heat Wave", "Protect", "Sludge Wave"],
          abilities: ["Quark Drive"],
          teraTypes: ["Fire", "Grass"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Acid Spray", "Energy Ball", "Heat Wave", "Protect"],
          abilities: ["Quark Drive"],
          teraTypes: ["Poison"]
        }
      ]
    },
    ironhands: {
      level: 77,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Close Combat", "Drain Punch", "Fake Out", "Ice Punch", "Volt Switch", "Wild Charge"],
          abilities: ["Quark Drive"],
          teraTypes: ["Electric", "Fire"]
        },
        {
          role: "Bulky Protect",
          movepool: ["Drain Punch", "Protect", "Swords Dance", "Thunder Punch"],
          abilities: ["Quark Drive"],
          teraTypes: ["Fire"]
        }
      ]
    },
    ironjugulis: {
      level: 79,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Dark Pulse", "Earth Power", "Hurricane", "Protect", "Tailwind", "Taunt"],
          abilities: ["Quark Drive"],
          teraTypes: ["Flying", "Ground", "Steel"]
        }
      ]
    },
    ironthorns: {
      level: 82,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Electroweb", "High Horsepower", "Protect", "Rock Slide", "Stealth Rock", "Thunder Punch", "Thunder Wave", "Volt Switch"],
          abilities: ["Quark Drive"],
          teraTypes: ["Flying", "Grass"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Dragon Dance", "High Horsepower", "Ice Punch", "Protect", "Rock Slide", "Wild Charge"],
          abilities: ["Quark Drive"],
          teraTypes: ["Grass", "Rock"]
        }
      ]
    },
    ironbundle: {
      level: 78,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Encore", "Freeze-Dry", "Hydro Pump", "Icy Wind", "Protect"],
          abilities: ["Quark Drive"],
          teraTypes: ["Dragon", "Water"]
        }
      ]
    },
    ironvaliant: {
      level: 79,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Close Combat", "Dazzling Gleam", "Encore", "Knock Off", "Moonblast", "Protect"],
          abilities: ["Quark Drive"],
          teraTypes: ["Dark", "Fairy", "Fighting"]
        }
      ]
    },
    baxcalibur: {
      level: 78,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Glaive Rush", "High Horsepower", "Ice Shard", "Icicle Crash"],
          abilities: ["Thermal Exchange"],
          teraTypes: ["Dragon", "Ground"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Icicle Spear", "Protect", "Scale Shot", "Swords Dance"],
          abilities: ["Thermal Exchange"],
          teraTypes: ["Dragon", "Steel"]
        }
      ]
    },
    gholdengo: {
      level: 78,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Dazzling Gleam", "Focus Blast", "Make It Rain", "Shadow Ball", "Thunderbolt", "Trick"],
          abilities: ["Good as Gold"],
          teraTypes: ["Fairy", "Steel"]
        },
        {
          role: "Doubles Bulky Setup",
          movepool: ["Make It Rain", "Nasty Plot", "Protect", "Shadow Ball"],
          abilities: ["Good as Gold"],
          teraTypes: ["Steel", "Water"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Dazzling Gleam", "Focus Blast", "Make It Rain", "Protect", "Shadow Ball"],
          abilities: ["Good as Gold"],
          teraTypes: ["Fairy", "Steel"]
        }
      ]
    },
    tinglu: {
      level: 82,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Body Press", "Protect", "Ruination", "Spikes", "Stealth Rock", "Stomping Tantrum", "Throat Chop"],
          abilities: ["Vessel of Ruin"],
          teraTypes: ["Fairy", "Water"]
        }
      ]
    },
    chienpao: {
      level: 75,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Icicle Crash", "Lash Out", "Protect", "Sucker Punch", "Throat Chop"],
          abilities: ["Sword of Ruin"],
          teraTypes: ["Dark", "Ghost"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Icicle Crash", "Protect", "Sacred Sword", "Sucker Punch"],
          abilities: ["Sword of Ruin"],
          teraTypes: ["Fighting", "Ghost"]
        }
      ]
    },
    wochien: {
      level: 85,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Knock Off", "Leech Seed", "Pollen Puff", "Protect", "Ruination"],
          abilities: ["Tablets of Ruin"],
          teraTypes: ["Poison"]
        }
      ]
    },
    chiyu: {
      level: 75,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Dark Pulse", "Heat Wave", "Nasty Plot", "Protect"],
          abilities: ["Beads of Ruin"],
          teraTypes: ["Dark", "Fire", "Water"]
        },
        {
          role: "Choice Item user",
          movepool: ["Dark Pulse", "Heat Wave", "Overheat", "Snarl"],
          abilities: ["Beads of Ruin"],
          teraTypes: ["Fire", "Water"]
        }
      ]
    },
    koraidon: {
      level: 66,
      sets: [
        {
          role: "Choice Item user",
          movepool: ["Collision Course", "Dragon Claw", "Flare Blitz", "U-turn"],
          abilities: ["Orichalcum Pulse"],
          teraTypes: ["Fire"]
        }
      ]
    },
    miraidon: {
      level: 65,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Draco Meteor", "Dragon Pulse", "Electro Drift", "Overheat", "Protect", "Volt Switch"],
          abilities: ["Hadron Engine"],
          teraTypes: ["Electric"]
        },
        {
          role: "Choice Item user",
          movepool: ["Draco Meteor", "Electro Drift", "Overheat", "Volt Switch"],
          abilities: ["Hadron Engine"],
          teraTypes: ["Electric"]
        }
      ]
    },
    walkingwake: {
      level: 77,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Draco Meteor", "Flamethrower", "Flip Turn", "Hydro Pump", "Protect"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Fire"]
        }
      ]
    },
    ironleaves: {
      level: 81,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Close Combat", "Leaf Blade", "Protect", "Swords Dance"],
          abilities: ["Quark Drive"],
          teraTypes: ["Fighting", "Fire", "Poison"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Close Combat", "Leaf Blade", "Protect", "Psyblade"],
          abilities: ["Quark Drive"],
          teraTypes: ["Fighting", "Fire", "Psychic"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Close Combat", "Leaf Blade", "Psyblade", "Wild Charge"],
          abilities: ["Quark Drive"],
          teraTypes: ["Fighting", "Fire", "Psychic"]
        }
      ]
    },
    dipplin: {
      level: 91,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Dragon Pulse", "Pollen Puff", "Recover", "Syrup Bomb"],
          abilities: ["Sticky Hold"],
          teraTypes: ["Steel"]
        }
      ]
    },
    sinistcha: {
      level: 80,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Matcha Gotcha", "Rage Powder", "Shadow Ball", "Trick Room"],
          abilities: ["Hospitality"],
          teraTypes: ["Grass", "Water"]
        },
        {
          role: "Bulky Protect",
          movepool: ["Calm Mind", "Matcha Gotcha", "Protect", "Shadow Ball"],
          abilities: ["Hospitality"],
          teraTypes: ["Grass", "Water"]
        }
      ]
    },
    okidogi: {
      level: 78,
      sets: [
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Bulk Up", "Drain Punch", "Gunk Shot", "Knock Off", "Snarl"],
          abilities: ["Toxic Chain"],
          teraTypes: ["Dark"]
        }
      ]
    },
    munkidori: {
      level: 80,
      sets: [
        {
          role: "Doubles Fast Attacker",
          movepool: ["Focus Blast", "Protect", "Psyshock", "Sludge Bomb", "U-turn"],
          abilities: ["Toxic Chain"],
          teraTypes: ["Fighting", "Poison"]
        },
        {
          role: "Doubles Support",
          movepool: ["Fake Out", "Focus Blast", "Psyshock", "Sludge Bomb", "U-turn"],
          abilities: ["Toxic Chain"],
          teraTypes: ["Fighting", "Poison"]
        }
      ]
    },
    fezandipiti: {
      level: 80,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Gunk Shot", "Icy Wind", "Play Rough", "Roost"],
          abilities: ["Toxic Chain"],
          teraTypes: ["Dark", "Steel", "Water"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Gunk Shot", "Icy Wind", "Play Rough", "U-turn"],
          abilities: ["Toxic Chain"],
          teraTypes: ["Dark", "Steel", "Water"]
        }
      ]
    },
    ogerpon: {
      level: 78,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Ivy Cudgel", "Knock Off", "Spiky Shield", "Superpower", "U-turn"],
          abilities: ["Defiant"],
          teraTypes: ["Grass"]
        },
        {
          role: "Doubles Support",
          movepool: ["Follow Me", "Horn Leech", "Knock Off", "Spiky Shield"],
          abilities: ["Defiant"],
          teraTypes: ["Grass"]
        }
      ]
    },
    ogerponwellspring: {
      level: 76,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Follow Me", "Horn Leech", "Ivy Cudgel", "Spiky Shield"],
          abilities: ["Water Absorb"],
          teraTypes: ["Water"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Horn Leech", "Ivy Cudgel", "Power Whip", "Spiky Shield", "Swords Dance"],
          abilities: ["Water Absorb"],
          teraTypes: ["Water"]
        }
      ]
    },
    ogerponhearthflame: {
      level: 74,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Follow Me", "Horn Leech", "Ivy Cudgel", "Spiky Shield"],
          abilities: ["Mold Breaker"],
          teraTypes: ["Fire"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Horn Leech", "Ivy Cudgel", "Power Whip", "Spiky Shield", "Swords Dance"],
          abilities: ["Mold Breaker"],
          teraTypes: ["Fire"]
        }
      ]
    },
    ogerponcornerstone: {
      level: 75,
      sets: [
        {
          role: "Doubles Support",
          movepool: ["Follow Me", "Horn Leech", "Ivy Cudgel", "Spiky Shield"],
          abilities: ["Sturdy"],
          teraTypes: ["Rock"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Horn Leech", "Ivy Cudgel", "Power Whip", "Spiky Shield", "Swords Dance"],
          abilities: ["Sturdy"],
          teraTypes: ["Rock"]
        }
      ]
    },
    archaludon: {
      level: 77,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Dragon Pulse", "Electro Shot", "Flash Cannon", "Protect"],
          abilities: ["Stamina"],
          teraTypes: ["Fairy", "Flying"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Body Press", "Draco Meteor", "Dragon Pulse", "Flash Cannon", "Snarl"],
          abilities: ["Stamina"],
          teraTypes: ["Fairy", "Fighting", "Flying"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Aura Sphere", "Draco Meteor", "Flash Cannon", "Thunderbolt"],
          abilities: ["Stamina"],
          teraTypes: ["Dragon", "Electric", "Fairy", "Fighting", "Flying"]
        }
      ]
    },
    hydrapple: {
      level: 85,
      sets: [
        {
          role: "Bulky Protect",
          movepool: ["Fickle Beam", "Giga Drain", "Leaf Storm", "Pollen Puff", "Protect"],
          abilities: ["Regenerator"],
          teraTypes: ["Fire", "Steel"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Draco Meteor", "Earth Power", "Giga Drain", "Leaf Storm"],
          abilities: ["Regenerator"],
          teraTypes: ["Fire", "Grass", "Steel"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Earth Power", "Fickle Beam", "Giga Drain", "Leaf Storm", "Pollen Puff"],
          abilities: ["Regenerator"],
          teraTypes: ["Steel"]
        }
      ]
    },
    gougingfire: {
      level: 75,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Burning Bulwark", "Dragon Claw", "Dragon Dance", "Heat Crash"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Fire"]
        }
      ]
    },
    ragingbolt: {
      level: 77,
      sets: [
        {
          role: "Doubles Wallbreaker",
          movepool: ["Draco Meteor", "Protect", "Thunderbolt", "Thunderclap"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Electric", "Fairy", "Grass"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Draco Meteor", "Electroweb", "Snarl", "Thunderbolt", "Thunderclap"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Electric", "Fairy", "Grass"]
        },
        {
          role: "Bulky Protect",
          movepool: ["Calm Mind", "Dragon Pulse", "Protect", "Thunderclap"],
          abilities: ["Protosynthesis"],
          teraTypes: ["Electric", "Fairy", "Grass"]
        }
      ]
    },
    ironboulder: {
      level: 77,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Close Combat", "Mighty Cleave", "Protect", "Swords Dance"],
          abilities: ["Quark Drive"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Offensive Protect",
          movepool: ["Close Combat", "Mighty Cleave", "Protect", "Zen Headbutt"],
          abilities: ["Quark Drive"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    ironcrown: {
      level: 78,
      sets: [
        {
          role: "Offensive Protect",
          movepool: ["Focus Blast", "Protect", "Psychic", "Psyshock", "Tachyon Cutter"],
          abilities: ["Quark Drive"],
          teraTypes: ["Fighting", "Water"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Focus Blast", "Psychic", "Psyshock", "Tachyon Cutter", "Volt Switch"],
          abilities: ["Quark Drive"],
          teraTypes: ["Fighting", "Water"]
        },
        {
          role: "Doubles Bulky Setup",
          movepool: ["Agility", "Focus Blast", "Protect", "Psychic", "Psyshock", "Tachyon Cutter"],
          abilities: ["Quark Drive"],
          teraTypes: ["Fighting", "Psychic", "Steel"]
        }
      ]
    },
    terapagos: {
      level: 73,
      sets: [
        {
          role: "Doubles Bulky Setup",
          movepool: ["Calm Mind", "Earth Power", "Protect", "Tera Starstorm"],
          abilities: ["Tera Shift"],
          teraTypes: ["Stellar"]
        },
        {
          role: "Doubles Wallbreaker",
          movepool: ["Dark Pulse", "Earth Power", "Tera Starstorm", "Tri Attack"],
          abilities: ["Tera Shift"],
          teraTypes: ["Stellar"]
        },
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Dark Pulse", "Meteor Beam", "Protect", "Tera Starstorm"],
          abilities: ["Tera Shift"],
          teraTypes: ["Stellar"]
        }
      ]
    },
    pecharunt: {
      level: 77,
      sets: [
        {
          role: "Doubles Setup Sweeper",
          movepool: ["Malignant Chain", "Nasty Plot", "Protect", "Recover", "Shadow Ball"],
          abilities: ["Poison Puppeteer"],
          teraTypes: ["Dark"]
        },
        {
          role: "Doubles Bulky Attacker",
          movepool: ["Malignant Chain", "Parting Shot", "Poison Gas", "Protect", "Shadow Ball"],
          abilities: ["Poison Puppeteer"],
          teraTypes: ["Dark"]
        }
      ]
    }
  };
});

// ../pokemon-showdown/dist/data/random-battles/gen9/bss-factory-sets.json
var require_bss_factory_sets = __commonJS((exports, module) => {
  module.exports = {
    chienpao: {
      weight: 10,
      sets: [
        {
          species: "Chien-Pao",
          weight: 35,
          moves: [
            ["Icicle Crash"],
            ["Sucker Punch"],
            ["Sacred Sword"],
            ["Crunch", "Sheer Cold"]
          ],
          item: ["Focus Sash"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Ghost"],
          ability: ["Sword of Ruin"]
        },
        {
          species: "Chien-Pao",
          weight: 15,
          moves: [
            ["Icicle Crash"],
            ["Sucker Punch"],
            ["Sacred Sword"],
            ["Tera Blast"]
          ],
          item: ["Focus Sash"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Electric"],
          wantsTera: true,
          ability: ["Sword of Ruin"]
        },
        {
          species: "Chien-Pao",
          weight: 5,
          moves: [
            ["Tera Blast"],
            ["Sacred Sword", "Sheer Cold"],
            ["Icicle Crash"],
            ["Sucker Punch"]
          ],
          item: ["Assault Vest"],
          nature: "Adamant",
          evs: { hp: 140, atk: 236, def: 4, spd: 12, spe: 116 },
          teraType: ["Electric", "Fairy", "Grass"],
          wantsTera: true,
          ability: ["Sword of Ruin"]
        },
        {
          species: "Chien-Pao",
          weight: 5,
          moves: [
            ["Ice Spinner", "Icicle Crash"],
            ["Tera Blast"],
            ["Crunch"],
            ["Sacred Sword"]
          ],
          item: ["Choice Scarf"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Electric", "Fairy", "Grass"],
          wantsTera: true,
          ability: ["Sword of Ruin"]
        },
        {
          species: "Chien-Pao",
          weight: 10,
          moves: [
            ["Ice Spinner", "Icicle Crash"],
            ["Crunch", "Throat Chop"],
            ["Ice Shard", "Sucker Punch"],
            ["Sacred Sword"]
          ],
          item: ["Choice Band"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Dark"],
          ability: ["Sword of Ruin"]
        },
        {
          species: "Chien-Pao",
          weight: 10,
          moves: [
            ["Ice Spinner", "Icicle Crash"],
            ["Tera Blast"],
            ["Ice Shard", "Sucker Punch"],
            ["Sacred Sword"]
          ],
          item: ["Choice Band"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Electric", "Fairy", "Grass"],
          wantsTera: true,
          ability: ["Sword of Ruin"]
        },
        {
          species: "Chien-Pao",
          weight: 5,
          moves: [
            ["Icicle Crash"],
            ["Recover"],
            ["Ice Shard", "Sucker Punch"],
            ["Sacred Sword"]
          ],
          item: ["Rocky Helmet"],
          nature: "Jolly",
          evs: { hp: 252, atk: 68, def: 180, spd: 4, spe: 4 },
          teraType: ["Fairy", "Poison"],
          wantsTera: true,
          ability: ["Sword of Ruin"]
        },
        {
          species: "Chien-Pao",
          weight: 15,
          moves: [
            ["Swords Dance"],
            ["Icicle Crash"],
            ["Tera Blast"],
            ["Ice Shard", "Sucker Punch"]
          ],
          item: ["Lum Berry"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Electric"],
          wantsTera: true,
          ability: ["Sword of Ruin"]
        }
      ]
    },
    dragonite: {
      weight: 10,
      sets: [
        {
          species: "Dragonite",
          weight: 40,
          moves: [
            ["Extreme Speed"],
            ["Earthquake"],
            ["Dragon Dance", "Encore"],
            ["Roost"]
          ],
          item: ["Heavy-Duty Boots", "Leftovers", "Rocky Helmet"],
          nature: "Adamant",
          evs: { hp: 196, atk: 204, def: 4, spd: 4, spe: 100 },
          teraType: ["Normal"],
          wantsTera: true,
          ability: ["Multiscale"]
        },
        {
          species: "Dragonite",
          weight: 10,
          moves: [
            ["Tera Blast"],
            ["Earthquake"],
            ["Dragon Dance"],
            ["Roost"]
          ],
          item: ["Heavy-Duty Boots", "Leftovers", "Lum Berry", "Rocky Helmet"],
          nature: "Adamant",
          evs: { hp: 196, atk: 204, def: 4, spd: 4, spe: 100 },
          teraType: ["Fairy", "Fire", "Flying"],
          wantsTera: true,
          ability: ["Multiscale"]
        },
        {
          species: "Dragonite",
          weight: 5,
          moves: [
            ["Outrage"],
            ["Extreme Speed"],
            ["Earthquake"],
            ["Iron Head"]
          ],
          item: ["Choice Band"],
          nature: "Adamant",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Normal", "Steel"],
          wantsTera: true,
          ability: ["Multiscale"]
        },
        {
          species: "Dragonite",
          weight: 15,
          moves: [
            ["Outrage"],
            ["Extreme Speed"],
            ["Earthquake"],
            ["Tera Blast"]
          ],
          item: ["Choice Band"],
          nature: "Adamant",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Flying"],
          wantsTera: true,
          ability: ["Multiscale"]
        },
        {
          species: "Dragonite",
          weight: 5,
          moves: [
            ["Air Slash"],
            ["Encore", "Substitute"],
            ["Thunder Wave"],
            ["Roost"]
          ],
          item: ["Rocky Helmet"],
          nature: "Bold",
          evs: { hp: 244, def: 148, spe: 116 },
          ivs: { atk: 0 },
          teraType: ["Fairy", "Poison", "Water"],
          wantsTera: true,
          ability: ["Multiscale"]
        },
        {
          species: "Dragonite",
          weight: 20,
          moves: [
            ["Scale Shot"],
            ["Iron Head"],
            ["Earthquake", "Low Kick"],
            ["Dragon Dance"]
          ],
          item: ["Loaded Dice"],
          nature: "Jolly",
          evs: { hp: 4, atk: 252, spe: 252 },
          teraType: ["Steel"],
          wantsTera: true,
          ability: ["Multiscale"]
        },
        {
          species: "Dragonite",
          weight: 5,
          moves: [
            ["Fire Spin"],
            ["Earthquake", "Thunder Wave"],
            ["Roost"],
            ["Encore"]
          ],
          item: ["Leftovers"],
          nature: "Careful",
          evs: { hp: 244, atk: 12, spd: 252 },
          teraType: ["Fairy", "Poison", "Steel"],
          wantsTera: true,
          ability: ["Multiscale"]
        }
      ]
    },
    fluttermane: {
      weight: 10,
      sets: [
        {
          species: "Flutter Mane",
          weight: 20,
          moves: [
            ["Moonblast"],
            ["Calm Mind", "Shadow Ball"],
            ["Charm"],
            ["Pain Split"]
          ],
          item: ["Booster Energy"],
          nature: "Timid",
          evs: { hp: 252, def: 252, spa: 4 },
          ivs: { atk: 0 },
          teraType: ["Fairy", "Water"],
          ability: ["Protosynthesis"]
        },
        {
          species: "Flutter Mane",
          weight: 5,
          moves: [
            ["Draining Kiss"],
            ["Shadow Ball"],
            ["Charm"],
            ["Calm Mind"]
          ],
          item: ["Booster Energy"],
          nature: "Timid",
          evs: { hp: 252, def: 252, spa: 4 },
          ivs: { atk: 0 },
          teraType: ["Fairy", "Water"],
          ability: ["Protosynthesis"]
        },
        {
          species: "Flutter Mane",
          weight: 15,
          moves: [
            ["Moonblast"],
            ["Shadow Ball"],
            ["Mystical Fire", "Pain Split", "Substitute"],
            ["Calm Mind"]
          ],
          item: ["Booster Energy"],
          nature: "Timid",
          evs: { hp: 4, def: 132, spa: 116, spd: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Fairy", "Water"],
          ability: ["Protosynthesis"]
        },
        {
          species: "Flutter Mane",
          weight: 5,
          moves: [
            ["Moonblast"],
            ["Shadow Ball", "Substitute"],
            ["Tera Blast"],
            ["Calm Mind"]
          ],
          item: ["Booster Energy"],
          nature: "Timid",
          evs: { hp: 4, def: 132, spa: 116, spd: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Ground", "Water"],
          wantsTera: true,
          ability: ["Protosynthesis"]
        },
        {
          species: "Flutter Mane",
          weight: 10,
          moves: [
            ["Moonblast"],
            ["Hex"],
            ["Pain Split", "Taunt"],
            ["Thunder Wave"]
          ],
          item: ["Booster Energy"],
          nature: "Bold",
          evs: { hp: 228, def: 252, spe: 28 },
          ivs: { atk: 0 },
          teraType: ["Water"],
          ability: ["Protosynthesis"]
        },
        {
          species: "Flutter Mane",
          weight: 5,
          moves: [
            ["Moonblast"],
            ["Shadow Ball"],
            ["Hyper Voice", "Power Gem", "Thunderbolt"],
            ["Perish Song"]
          ],
          item: ["Choice Scarf"],
          nature: "Modest",
          evs: { hp: 20, def: 44, spa: 204, spd: 4, spe: 236 },
          ivs: { atk: 0 },
          teraType: ["Fairy"],
          ability: ["Protosynthesis"]
        },
        {
          species: "Flutter Mane",
          weight: 25,
          moves: [
            ["Moonblast"],
            ["Shadow Ball"],
            ["Hyper Voice", "Mystical Fire", "Power Gem", "Psyshock", "Thunderbolt"],
            ["Perish Song"]
          ],
          item: ["Choice Specs"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Fairy"],
          ability: ["Protosynthesis"]
        },
        {
          species: "Flutter Mane",
          weight: 10,
          moves: [
            ["Moonblast"],
            ["Hex", "Shadow Ball"],
            ["Thunder Wave"],
            ["Taunt"]
          ],
          item: ["Focus Sash"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Normal"],
          ability: ["Protosynthesis"]
        },
        {
          species: "Flutter Mane",
          weight: 2,
          moves: [
            ["Moonblast"],
            ["Shadow Ball"],
            ["Psyshock"],
            ["Energy Ball"]
          ],
          item: ["Assault Vest"],
          nature: "Modest",
          evs: { hp: 164, def: 28, spa: 196, spd: 4, spe: 116 },
          ivs: { atk: 0 },
          teraType: ["Grass"],
          ability: ["Protosynthesis"]
        },
        {
          species: "Flutter Mane",
          weight: 3,
          moves: [
            ["Moonblast"],
            ["Shadow Ball"],
            ["Psyshock"],
            ["Mystical Fire"]
          ],
          item: ["Assault Vest"],
          nature: "Modest",
          evs: { hp: 164, def: 28, spa: 196, spd: 4, spe: 116 },
          ivs: { atk: 0 },
          teraType: ["Fire"],
          ability: ["Protosynthesis"]
        }
      ]
    },
    urshifurapidstrike: {
      weight: 10,
      sets: [
        {
          species: "Urshifu-Rapid-Strike",
          weight: 40,
          moves: [
            ["Surging Strikes"],
            ["Close Combat", "Drain Punch"],
            ["Aqua Jet", "Substitute"],
            ["Swords Dance"]
          ],
          item: ["Punching Glove"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Grass", "Poison", "Water"],
          wantsTera: true,
          ability: ["Unseen Fist"]
        },
        {
          species: "Urshifu-Rapid-Strike",
          weight: 25,
          moves: [
            ["Surging Strikes"],
            ["Close Combat"],
            ["U-turn"],
            ["Ice Punch"]
          ],
          item: ["Choice Scarf"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Water"],
          ability: ["Unseen Fist"]
        },
        {
          species: "Urshifu-Rapid-Strike",
          weight: 15,
          moves: [
            ["Surging Strikes"],
            ["Close Combat"],
            ["U-turn"],
            ["Aqua Jet"]
          ],
          item: ["Choice Band"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Grass", "Poison", "Water"],
          ability: ["Unseen Fist"]
        },
        {
          species: "Urshifu-Rapid-Strike",
          weight: 20,
          moves: [
            ["Surging Strikes"],
            ["Close Combat"],
            ["Aqua Jet"],
            ["Counter", "Ice Punch"]
          ],
          item: ["Focus Sash"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Ghost", "Water"],
          ability: ["Unseen Fist"]
        }
      ]
    },
    ogerponhearthflame: {
      weight: 10,
      sets: [
        {
          species: "Ogerpon-Hearthflame",
          weight: 40,
          moves: [
            ["Ivy Cudgel"],
            ["Knock Off", "Play Rough"],
            ["Encore", "Swords Dance"],
            ["Horn Leech", "Trailblaze"]
          ],
          gender: "F",
          item: ["Hearthflame Mask"],
          nature: "Jolly",
          evs: { hp: 4, atk: 252, spe: 252 },
          teraType: ["Fire"],
          ability: ["Mold Breaker"]
        },
        {
          species: "Ogerpon-Hearthflame",
          weight: 40,
          moves: [
            ["Ivy Cudgel"],
            ["Horn Leech"],
            ["Swords Dance"],
            ["Play Rough", "Substitute", "Trailblaze"]
          ],
          gender: "F",
          item: ["Hearthflame Mask"],
          nature: "Jolly",
          evs: { hp: 156, atk: 36, def: 4, spd: 60, spe: 252 },
          teraType: ["Fire"],
          ability: ["Mold Breaker"]
        },
        {
          species: "Ogerpon-Hearthflame",
          weight: 20,
          moves: [
            ["Ivy Cudgel"],
            ["Substitute"],
            ["Leech Seed"],
            ["Encore", "Horn Leech", "Play Rough"]
          ],
          item: ["Hearthflame Mask"],
          nature: "Jolly",
          evs: { hp: 156, atk: 36, def: 4, spd: 60, spe: 252 },
          teraType: ["Fire"],
          ability: ["Mold Breaker"]
        }
      ]
    },
    ursalunabloodmoon: {
      weight: 10,
      sets: [
        {
          species: "Ursaluna-Bloodmoon",
          weight: 15,
          moves: [
            ["Blood Moon"],
            ["Earth Power"],
            ["Vacuum Wave"],
            ["Body Press"]
          ],
          item: ["Rocky Helmet"],
          nature: "Bold",
          evs: { hp: 116, def: 236, spa: 4, spd: 116, spe: 36 },
          ivs: { atk: 0 },
          teraType: ["Fairy", "Poison"],
          ability: ["Mind's Eye"]
        },
        {
          species: "Ursaluna-Bloodmoon",
          weight: 25,
          moves: [
            ["Blood Moon", "Hyper Voice"],
            ["Moonlight"],
            ["Calm Mind"],
            ["Yawn"]
          ],
          item: ["Covert Cloak", "Leftovers"],
          nature: "Modest",
          evs: { hp: 100, def: 4, spa: 236, spd: 12, spe: 156 },
          ivs: { atk: 0 },
          teraType: ["Fairy", "Poison"],
          ability: ["Mind's Eye"]
        },
        {
          species: "Ursaluna-Bloodmoon",
          weight: 60,
          moves: [
            ["Blood Moon"],
            ["Vacuum Wave"],
            ["Earth Power"],
            ["Hyper Voice"]
          ],
          item: ["Assault Vest"],
          nature: "Modest",
          evs: { hp: 4, spa: 252, spd: 252 },
          ivs: { atk: 0 },
          teraType: ["Fairy", "Normal"],
          ability: ["Mind's Eye"]
        }
      ]
    },
    ironbundle: {
      weight: 9,
      sets: [
        {
          species: "Iron Bundle",
          weight: 10,
          moves: [
            ["Flip Turn"],
            ["Freeze-Dry"],
            ["Hydro Pump"],
            ["Encore"]
          ],
          item: ["Focus Sash"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          teraType: ["Ghost"],
          ability: ["Quark Drive"]
        },
        {
          species: "Iron Bundle",
          weight: 70,
          moves: [
            ["Substitute"],
            ["Encore"],
            ["Hydro Pump"],
            ["Freeze-Dry"]
          ],
          item: ["Booster Energy"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Ghost", "Steel", "Water"],
          ability: ["Quark Drive"]
        },
        {
          species: "Iron Bundle",
          weight: 10,
          moves: [
            ["Ice Beam"],
            ["Hydro Pump"],
            ["Freeze-Dry"],
            ["Tera Blast"]
          ],
          item: ["Choice Specs"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Fairy"],
          ability: ["Quark Drive"]
        },
        {
          species: "Iron Bundle",
          weight: 10,
          moves: [
            ["Ice Beam"],
            ["Hydro Pump"],
            ["Freeze-Dry"],
            ["Flip Turn"]
          ],
          item: ["Choice Specs"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          teraType: ["Water"],
          ability: ["Quark Drive"]
        }
      ]
    },
    urshifu: {
      weight: 9,
      sets: [
        {
          species: "Urshifu",
          weight: 55,
          moves: [
            ["Swords Dance"],
            ["Wicked Blow"],
            ["Close Combat", "Drain Punch"],
            ["Sucker Punch"]
          ],
          item: ["Focus Sash"],
          nature: "Jolly",
          evs: { atk: 252, def: 4, spe: 252 },
          teraType: ["Dark", "Ghost"],
          ability: ["Unseen Fist"]
        },
        {
          species: "Urshifu",
          weight: 25,
          moves: [
            ["Swords Dance"],
            ["Wicked Blow"],
            ["Close Combat", "Drain Punch"],
            ["Sucker Punch"]
          ],
          item: ["Black Glasses"],
          nature: "Jolly",
          evs: { atk: 252, def: 4, spe: 252 },
          teraType: ["Dark", "Ghost", "Poison"],
          ability: ["Unseen Fist"]
        },
        {
          species: "Urshifu",
          weight: 5,
          moves: [
            ["Counter"],
            ["Wicked Blow"],
            ["Close Combat", "Drain Punch"],
            ["Sucker Punch"]
          ],
          item: ["Focus Sash"],
          nature: "Jolly",
          evs: { atk: 252, def: 4, spe: 252 },
          teraType: ["Dark", "Ghost"],
          ability: ["Unseen Fist"]
        },
        {
          species: "Urshifu",
          weight: 5,
          moves: [
            ["Wicked Blow"],
            ["Close Combat", "Drain Punch"],
            ["Sucker Punch"],
            ["U-turn"]
          ],
          item: ["Choice Band"],
          nature: "Jolly",
          evs: { atk: 252, def: 4, spe: 252 },
          teraType: ["Dark", "Ghost", "Poison"],
          ability: ["Unseen Fist"]
        },
        {
          species: "Urshifu",
          weight: 5,
          moves: [
            ["Wicked Blow"],
            ["Close Combat", "Drain Punch"],
            ["Sucker Punch"],
            ["Iron Head"]
          ],
          item: ["Choice Band"],
          nature: "Jolly",
          evs: { atk: 252, def: 4, spe: 252 },
          teraType: ["Steel"],
          wantsTera: true,
          ability: ["Unseen Fist"]
        },
        {
          species: "Urshifu",
          weight: 5,
          moves: [
            ["Wicked Blow"],
            ["Close Combat"],
            ["Sucker Punch"],
            ["U-turn"]
          ],
          item: ["Choice Scarf"],
          nature: "Jolly",
          evs: { atk: 252, def: 4, spe: 252 },
          teraType: ["Dark"],
          ability: ["Unseen Fist"]
        }
      ]
    },
    tinglu: {
      weight: 9,
      sets: [
        {
          species: "Ting-Lu",
          weight: 65,
          moves: [
            ["Stealth Rock"],
            ["Ruination"],
            ["Earthquake", "Heavy Slam"],
            ["Whirlwind"]
          ],
          item: ["Sitrus Berry"],
          nature: "Impish",
          evs: { hp: 244, atk: 20, def: 116, spd: 124, spe: 4 },
          teraType: ["Fairy", "Poison", "Water"],
          ability: ["Vessel of Ruin"]
        },
        {
          species: "Ting-Lu",
          weight: 15,
          moves: [
            ["Stealth Rock"],
            ["Spikes"],
            ["Earthquake", "Heavy Slam"],
            ["Whirlwind"]
          ],
          item: ["Sitrus Berry"],
          nature: "Impish",
          evs: { hp: 244, atk: 20, def: 116, spd: 124, spe: 4 },
          teraType: ["Fairy", "Poison", "Water"],
          ability: ["Vessel of Ruin"]
        },
        {
          species: "Ting-Lu",
          weight: 5,
          moves: [
            ["Earthquake"],
            ["Heavy Slam"],
            ["Fissure", "Stone Edge"],
            ["Ruination"]
          ],
          item: ["Assault Vest"],
          nature: "Adamant",
          evs: { hp: 4, atk: 252, def: 4, spd: 108, spe: 140 },
          teraType: ["Steel"],
          ability: ["Vessel of Ruin"]
        },
        {
          species: "Ting-Lu",
          weight: 5,
          moves: [
            ["Earthquake"],
            ["Heavy Slam"],
            ["Tera Blast"],
            ["Ruination"]
          ],
          item: ["Assault Vest"],
          nature: "Adamant",
          evs: { hp: 4, atk: 252, def: 4, spd: 108, spe: 140 },
          teraType: ["Electric", "Fairy"],
          wantsTera: true,
          ability: ["Vessel of Ruin"]
        },
        {
          species: "Ting-Lu",
          weight: 10,
          moves: [
            ["Earthquake"],
            ["Heavy Slam"],
            ["Rock Tomb"],
            ["Ruination"]
          ],
          item: ["Sitrus Berry"],
          nature: "Impish",
          evs: { hp: 244, atk: 76, def: 116, spd: 68, spe: 4 },
          teraType: ["Steel"],
          ability: ["Vessel of Ruin"]
        }
      ]
    },
    gholdengo: {
      weight: 9,
      sets: [
        {
          species: "Gholdengo",
          weight: 25,
          moves: [
            ["Make It Rain"],
            ["Shadow Ball"],
            ["Focus Blast", "Recover", "Thunderbolt"],
            ["Trick"]
          ],
          item: ["Choice Specs"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Flying", "Steel", "Water"],
          ability: ["Good as Gold"]
        },
        {
          species: "Gholdengo",
          weight: 30,
          moves: [
            ["Make It Rain"],
            ["Shadow Ball"],
            ["Focus Blast", "Recover", "Thunderbolt"],
            ["Trick"]
          ],
          item: ["Choice Scarf"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Flying", "Normal", "Steel", "Water"],
          ability: ["Good as Gold"]
        },
        {
          species: "Gholdengo",
          weight: 15,
          moves: [
            ["Focus Blast", "Make It Rain"],
            ["Hex"],
            ["Thunder Wave"],
            ["Recover"]
          ],
          item: ["Rocky Helmet"],
          nature: "Bold",
          evs: { hp: 252, def: 252, spa: 4 },
          ivs: { atk: 0 },
          teraType: ["Flying", "Water"],
          ability: ["Good as Gold"]
        },
        {
          species: "Gholdengo",
          weight: 20,
          moves: [
            ["Make It Rain"],
            ["Shadow Ball"],
            ["Nasty Plot"],
            ["Recover"]
          ],
          item: ["Covert Cloak"],
          nature: "Modest",
          evs: { hp: 164, def: 156, spa: 36, spd: 4, spe: 148 },
          ivs: { atk: 0 },
          teraType: ["Flying"],
          ability: ["Good as Gold"]
        },
        {
          species: "Gholdengo",
          weight: 5,
          moves: [
            ["Tera Blast"],
            ["Shadow Ball"],
            ["Nasty Plot"],
            ["Recover"]
          ],
          item: ["Covert Cloak"],
          nature: "Modest",
          evs: { hp: 164, def: 156, spa: 36, spd: 4, spe: 148 },
          ivs: { atk: 0 },
          teraType: ["Fighting", "Water"],
          wantsTera: true,
          ability: ["Good as Gold"]
        },
        {
          species: "Gholdengo",
          weight: 5,
          moves: [
            ["Make It Rain"],
            ["Shadow Ball"],
            ["Nasty Plot"],
            ["Psyshock", "Recover", "Substitute"]
          ],
          item: ["Air Balloon"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Flying"],
          ability: ["Good as Gold"]
        }
      ]
    },
    chiyu: {
      weight: 9,
      sets: [
        {
          species: "Chi-Yu",
          weight: 20,
          moves: [
            ["Overheat"],
            ["Dark Pulse"],
            ["Tera Blast"],
            ["Flamethrower"]
          ],
          item: ["Choice Scarf"],
          nature: "Modest",
          evs: { hp: 116, def: 84, spa: 156, spd: 4, spe: 148 },
          ivs: { atk: 0 },
          teraType: ["Fairy", "Grass"],
          wantsTera: true,
          ability: ["Beads of Ruin"]
        },
        {
          species: "Chi-Yu",
          weight: 35,
          moves: [
            ["Overheat"],
            ["Lava Plume"],
            ["Dark Pulse"],
            ["Psychic"]
          ],
          item: ["Choice Scarf"],
          nature: "Modest",
          evs: { spa: 252, spd: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Fire", "Ghost"],
          ability: ["Beads of Ruin"]
        },
        {
          species: "Chi-Yu",
          weight: 10,
          moves: [
            ["Flame Charge", "Ruination"],
            ["Overheat"],
            ["Dark Pulse"],
            ["Tera Blast"]
          ],
          item: ["Assault Vest"],
          nature: "Calm",
          evs: { hp: 252, def: 4, spa: 76, spd: 156, spe: 20 },
          ivs: { atk: 0 },
          teraType: ["Fairy", "Ghost", "Grass", "Water"],
          wantsTera: true,
          ability: ["Beads of Ruin"]
        },
        {
          species: "Chi-Yu",
          weight: 5,
          moves: [
            ["Lava Plume"],
            ["Ruination"],
            ["Taunt"],
            ["Dark Pulse"]
          ],
          item: ["Focus Sash"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Ghost"],
          ability: ["Beads of Ruin"]
        },
        {
          species: "Chi-Yu",
          weight: 20,
          moves: [
            ["Overheat"],
            ["Flamethrower"],
            ["Dark Pulse"],
            ["Psychic"]
          ],
          item: ["Choice Specs"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Fire"],
          ability: ["Beads of Ruin"]
        },
        {
          species: "Chi-Yu",
          weight: 10,
          moves: [
            ["Overheat"],
            ["Flamethrower"],
            ["Dark Pulse"],
            ["Tera Blast"]
          ],
          item: ["Choice Specs"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Fairy", "Ghost", "Water"],
          wantsTera: true,
          ability: ["Beads of Ruin"]
        }
      ]
    },
    garganacl: {
      weight: 9,
      sets: [
        {
          species: "Garganacl",
          weight: 45,
          moves: [
            ["Salt Cure"],
            ["Protect"],
            ["Recover"],
            ["Fissure", "Stealth Rock", "Substitute"]
          ],
          item: ["Leftovers"],
          nature: "Impish",
          evs: { hp: 252, atk: 4, def: 252 },
          teraType: ["Fairy", "Poison", "Water"],
          wantsTera: true,
          ability: ["Purifying Salt"]
        },
        {
          species: "Garganacl",
          weight: 20,
          moves: [
            ["Salt Cure"],
            ["Recover"],
            ["Curse"],
            ["Earthquake", "Protect", "Substitute"]
          ],
          item: ["Leftovers"],
          nature: "Careful",
          evs: { hp: 252, atk: 4, spd: 252 },
          teraType: ["Ghost"],
          wantsTera: true,
          ability: ["Purifying Salt"]
        },
        {
          species: "Garganacl",
          weight: 35,
          moves: [
            ["Salt Cure"],
            ["Recover"],
            ["Iron Defense"],
            ["Body Press"]
          ],
          item: ["Leftovers"],
          nature: "Careful",
          evs: { hp: 252, def: 4, spd: 252 },
          teraType: ["Fairy", "Poison", "Water"],
          wantsTera: true,
          ability: ["Purifying Salt"]
        }
      ]
    },
    garchomp: {
      weight: 8,
      sets: [
        {
          species: "Garchomp",
          weight: 45,
          moves: [
            ["Scale Shot"],
            ["Earthquake"],
            ["Iron Head", "Substitute"],
            ["Swords Dance"]
          ],
          item: ["Loaded Dice"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Steel"],
          wantsTera: true,
          ability: ["Rough Skin"]
        },
        {
          species: "Garchomp",
          weight: 25,
          moves: [
            ["Stealth Rock"],
            ["Spikes"],
            ["Earthquake"],
            ["Dragon Tail"]
          ],
          item: ["Sitrus Berry"],
          nature: "Impish",
          evs: { hp: 180, atk: 4, def: 36, spd: 172, spe: 116 },
          teraType: ["Steel"],
          wantsTera: true,
          ability: ["Rough Skin"]
        },
        {
          species: "Garchomp",
          weight: 10,
          moves: [
            ["Outrage", "Scale Shot"],
            ["Earthquake"],
            ["Rock Tomb"],
            ["Iron Head"]
          ],
          item: ["Choice Band", "Choice Scarf"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Steel"],
          wantsTera: true,
          ability: ["Rough Skin"]
        },
        {
          species: "Garchomp",
          weight: 5,
          moves: [
            ["Earthquake"],
            ["Iron Head"],
            ["Scale Shot"],
            ["Dragon Tail"]
          ],
          item: ["Assault Vest"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Steel"],
          ability: ["Rough Skin"]
        },
        {
          species: "Garchomp",
          weight: 10,
          moves: [
            ["Outrage", "Scale Shot"],
            ["Earthquake"],
            ["Rock Tomb"],
            ["Tera Blast"]
          ],
          item: ["Choice Band", "Choice Scarf"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Fairy", "Fire"],
          wantsTera: true,
          ability: ["Rough Skin"]
        },
        {
          species: "Garchomp",
          weight: 5,
          moves: [
            ["Earthquake"],
            ["Tera Blast"],
            ["Scale Shot"],
            ["Dragon Tail"]
          ],
          item: ["Assault Vest"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Fairy"],
          wantsTera: true,
          ability: ["Rough Skin"]
        }
      ]
    },
    landorustherian: {
      weight: 8,
      sets: [
        {
          species: "Landorus-Therian",
          weight: 30,
          moves: [
            ["Stealth Rock"],
            ["Earthquake"],
            ["Rock Tomb", "Taunt"],
            ["U-turn"]
          ],
          item: ["Leftovers", "Rocky Helmet", "Sitrus Berry"],
          nature: "Impish",
          evs: { hp: 252, def: 252, spd: 4 },
          teraType: ["Fairy", "Steel", "Water"],
          ability: ["Intimidate"]
        },
        {
          species: "Landorus-Therian",
          weight: 45,
          moves: [
            ["Earthquake"],
            ["U-turn"],
            ["Tera Blast"],
            ["Rock Tomb", "Stone Edge"]
          ],
          item: ["Choice Scarf"],
          nature: "Jolly",
          evs: { atk: 252, def: 4, spe: 252 },
          teraType: ["Flying"],
          wantsTera: true,
          ability: ["Intimidate"]
        },
        {
          species: "Landorus-Therian",
          weight: 15,
          moves: [
            ["Earthquake"],
            ["U-turn"],
            ["Tera Blast"],
            ["Rock Tomb", "Stone Edge"]
          ],
          item: ["Choice Band", "Choice Scarf"],
          nature: "Jolly",
          evs: { atk: 252, def: 4, spe: 252 },
          teraType: ["Fairy", "Flying"],
          wantsTera: true,
          ability: ["Intimidate"]
        },
        {
          species: "Landorus-Therian",
          weight: 5,
          moves: [
            ["Earthquake"],
            ["U-turn"],
            ["Fissure", "Tera Blast"],
            ["Rock Tomb", "Smack Down"]
          ],
          item: ["Assault Vest"],
          nature: "Adamant",
          evs: { hp: 252, atk: 4, spd: 252 },
          teraType: ["Steel"],
          wantsTera: true,
          ability: ["Intimidate"]
        },
        {
          species: "Landorus-Therian",
          weight: 5,
          moves: [
            ["Earthquake"],
            ["Rock Tomb"],
            ["U-turn"],
            ["Tera Blast"]
          ],
          item: ["Assault Vest"],
          nature: "Adamant",
          evs: { hp: 252, atk: 252, def: 4 },
          teraType: ["Flying", "Water"],
          wantsTera: true,
          ability: ["Intimidate"]
        }
      ]
    },
    scizor: {
      weight: 8,
      sets: [
        {
          species: "Scizor",
          weight: 15,
          moves: [
            ["Swords Dance"],
            ["Bullet Punch"],
            ["Close Combat"],
            ["Knock Off", "Tera Blast", "U-turn"]
          ],
          item: ["Sitrus Berry"],
          nature: "Adamant",
          evs: { hp: 252, atk: 28, def: 204, spd: 20, spe: 4 },
          teraType: ["Water"],
          wantsTera: true,
          ability: ["Technician"]
        },
        {
          species: "Scizor",
          weight: 20,
          moves: [
            ["Swords Dance"],
            ["Bullet Punch"],
            ["Close Combat", "U-turn"],
            ["Knock Off"]
          ],
          item: ["Sitrus Berry"],
          nature: "Adamant",
          evs: { hp: 252, atk: 28, def: 204, spd: 20, spe: 4 },
          teraType: ["Flying", "Steel"],
          wantsTera: true,
          ability: ["Technician"]
        },
        {
          species: "Scizor",
          weight: 50,
          moves: [
            ["Bullet Punch"],
            ["U-turn"],
            ["Knock Off"],
            ["Close Combat"]
          ],
          item: ["Assault Vest", "Choice Band"],
          nature: "Adamant",
          evs: { hp: 236, atk: 244, def: 20, spd: 4, spe: 4 },
          teraType: ["Steel", "Water"],
          wantsTera: true,
          ability: ["Technician"]
        },
        {
          species: "Scizor",
          weight: 15,
          moves: [
            ["Bullet Punch"],
            ["U-turn"],
            ["Knock Off", "Tera Blast"],
            ["Close Combat"]
          ],
          item: ["Assault Vest"],
          nature: "Adamant",
          evs: { hp: 236, atk: 244, def: 20, spd: 4, spe: 4 },
          teraType: ["Water"],
          wantsTera: true,
          ability: ["Technician"]
        }
      ]
    },
    toxapex: {
      weight: 8,
      sets: [
        {
          species: "Toxapex",
          weight: 40,
          moves: [
            ["Toxic"],
            ["Baneful Bunker", "Toxic Spikes"],
            ["Recover"],
            ["Haze"]
          ],
          item: ["Black Sludge", "Mental Herb"],
          nature: "Bold",
          evs: { hp: 252, def: 252, spd: 4 },
          ivs: { atk: 0 },
          teraType: ["Poison"],
          ability: ["Regenerator"]
        },
        {
          species: "Toxapex",
          weight: 60,
          moves: [
            ["Toxic"],
            ["Liquidation"],
            ["Recover"],
            ["Haze"]
          ],
          item: ["Leftovers", "Rocky Helmet"],
          nature: "Impish",
          evs: { hp: 252, def: 252, spd: 4 },
          teraType: ["Fairy", "Poison"],
          ability: ["Regenerator"]
        }
      ]
    },
    roaringmoon: {
      weight: 8,
      sets: [
        {
          species: "Roaring Moon",
          weight: 40,
          moves: [
            ["Dragon Dance"],
            ["Acrobatics"],
            ["Earthquake", "Roost", "Taunt"],
            ["Knock Off"]
          ],
          item: ["Booster Energy"],
          nature: "Jolly",
          evs: { atk: 220, def: 36, spe: 252 },
          teraType: ["Flying"],
          wantsTera: true,
          ability: ["Protosynthesis"]
        },
        {
          species: "Roaring Moon",
          weight: 10,
          moves: [
            ["Dragon Dance"],
            ["Iron Head"],
            ["Earthquake", "Roost", "Taunt"],
            ["Knock Off"]
          ],
          item: ["Booster Energy"],
          nature: "Jolly",
          evs: { atk: 220, def: 36, spe: 252 },
          teraType: ["Steel"],
          wantsTera: true,
          ability: ["Protosynthesis"]
        },
        {
          species: "Roaring Moon",
          weight: 5,
          moves: [
            ["Jaw Lock"],
            ["Roost"],
            ["Taunt"],
            ["Dragon Dance"]
          ],
          item: ["Leftovers", "Shed Shell"],
          nature: "Impish",
          evs: { hp: 244, atk: 4, def: 196, spd: 36, spe: 28 },
          teraType: ["Fairy", "Poison"],
          wantsTera: true,
          ability: ["Protosynthesis"]
        },
        {
          species: "Roaring Moon",
          weight: 10,
          moves: [
            ["Knock Off"],
            ["U-turn"],
            ["Earthquake", "Scale Shot"],
            ["Tera Blast"]
          ],
          item: ["Choice Band", "Choice Scarf"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Fairy", "Fire"],
          wantsTera: true,
          ability: ["Protosynthesis"]
        },
        {
          species: "Roaring Moon",
          weight: 25,
          moves: [
            ["Knock Off"],
            ["Earthquake", "U-turn"],
            ["Iron Head"],
            ["Outrage"]
          ],
          item: ["Choice Band"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Dark", "Steel"],
          wantsTera: true,
          ability: ["Protosynthesis"]
        },
        {
          species: "Roaring Moon",
          weight: 10,
          moves: [
            ["Dragon Dance"],
            ["Knock Off"],
            ["Earthquake"],
            ["Scale Shot"]
          ],
          item: ["Loaded Dice"],
          nature: "Jolly",
          evs: { hp: 4, atk: 252, spe: 252 },
          teraType: ["Steel"],
          wantsTera: true,
          ability: ["Protosynthesis"]
        }
      ]
    },
    dragapult: {
      weight: 8,
      sets: [
        {
          species: "Dragapult",
          weight: 30,
          moves: [
            ["Dragon Darts"],
            ["U-turn"],
            ["Sucker Punch"],
            ["Phantom Force"]
          ],
          item: ["Choice Band"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Dragon", "Steel"],
          ability: ["Infiltrator"]
        },
        {
          species: "Dragapult",
          weight: 5,
          moves: [
            ["Dragon Darts"],
            ["U-turn"],
            ["Sucker Punch"],
            ["Tera Blast"]
          ],
          item: ["Choice Band"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Fairy", "Fire", "Ghost", "Steel"],
          wantsTera: true,
          ability: ["Infiltrator"]
        },
        {
          species: "Dragapult",
          weight: 15,
          moves: [
            ["Reflect"],
            ["Light Screen"],
            ["Curse"],
            ["Shadow Ball", "Will-O-Wisp"]
          ],
          item: ["Light Clay"],
          nature: "Timid",
          evs: { hp: 244, def: 12, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Ghost", "Normal"],
          ability: ["Cursed Body"]
        },
        {
          species: "Dragapult",
          weight: 10,
          moves: [
            ["Dragon Darts"],
            ["Baton Pass", "Tera Blast"],
            ["Substitute"],
            ["Dragon Dance"]
          ],
          item: ["Life Orb"],
          nature: "Jolly",
          evs: { atk: 252, def: 4, spe: 252 },
          teraType: ["Fire"],
          wantsTera: true,
          ability: ["Clear Body"]
        },
        {
          species: "Dragapult",
          weight: 25,
          moves: [
            ["Draco Meteor"],
            ["Hex", "Shadow Ball"],
            ["Will-O-Wisp"],
            ["Thunder Wave"]
          ],
          item: ["Focus Sash"],
          nature: "Timid",
          evs: { def: 4, spa: 252, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Ghost", "Normal"],
          ability: ["Cursed Body"]
        },
        {
          species: "Dragapult",
          weight: 15,
          moves: [
            ["Shadow Ball"],
            ["Draco Meteor"],
            ["Thunderbolt"],
            ["Flamethrower", "U-turn"]
          ],
          item: ["Choice Specs"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          teraType: ["Electric", "Fighting", "Fire", "Ghost"],
          ability: ["Infiltrator"]
        }
      ]
    },
    baxcalibur: {
      weight: 8,
      sets: [
        {
          species: "Baxcalibur",
          weight: 5,
          moves: [
            ["Glaive Rush", "Scale Shot"],
            ["Earthquake"],
            ["Ice Shard"],
            ["Icicle Spear", "Swords Dance"]
          ],
          item: ["Focus Sash", "Life Orb"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Dragon", "Ghost"],
          wantsTera: true,
          ability: ["Thermal Exchange"]
        },
        {
          species: "Baxcalibur",
          weight: 75,
          moves: [
            ["Ice Shard", "Scale Shot"],
            ["Icicle Spear"],
            ["Earthquake"],
            ["Dragon Dance", "Swords Dance"]
          ],
          item: ["Loaded Dice"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Ghost", "Ground", "Ice"],
          wantsTera: true,
          ability: ["Thermal Exchange"]
        },
        {
          species: "Baxcalibur",
          weight: 10,
          moves: [
            ["Icicle Crash", "Icicle Spear"],
            ["Ice Shard"],
            ["Glaive Rush"],
            ["Earthquake"]
          ],
          item: ["Assault Vest"],
          nature: "Adamant",
          evs: { hp: 252, atk: 252, spd: 4 },
          teraType: ["Ground"],
          wantsTera: true,
          ability: ["Thermal Exchange"]
        },
        {
          species: "Baxcalibur",
          weight: 5,
          moves: [
            ["Icicle Spear"],
            ["Ice Shard"],
            ["Tera Blast"],
            ["Earthquake"]
          ],
          item: ["Assault Vest"],
          nature: "Adamant",
          evs: { hp: 252, atk: 252, spd: 4 },
          teraType: ["Electric", "Fairy", "Fire"],
          wantsTera: true,
          ability: ["Thermal Exchange"]
        },
        {
          species: "Baxcalibur",
          weight: 5,
          moves: [
            ["Glaive Rush", "Scale Shot"],
            ["Earthquake"],
            ["Ice Shard"],
            ["Icicle Spear"]
          ],
          item: ["Choice Band"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Dragon", "Ice"],
          wantsTera: true,
          ability: ["Thermal Exchange"]
        }
      ]
    },
    ninetalesalola: {
      weight: 8,
      sets: [
        {
          species: "Ninetales-Alola",
          weight: 80,
          moves: [
            ["Aurora Veil"],
            ["Moonblast"],
            ["Encore"],
            ["Blizzard", "Freeze-Dry"]
          ],
          item: ["Light Clay"],
          nature: "Timid",
          evs: { hp: 4, spa: 252, spe: 252 },
          teraType: ["Fire", "Ice", "Water"],
          ability: ["Snow Warning"]
        },
        {
          species: "Ninetales-Alola",
          weight: 10,
          moves: [
            ["Aurora Veil"],
            ["Moonblast"],
            ["Encore"],
            ["Disable"]
          ],
          item: ["Light Clay", "Rocky Helmet"],
          nature: "Timid",
          evs: { hp: 4, spa: 252, spe: 252 },
          teraType: ["Fire", "Water"],
          ability: ["Snow Warning"]
        },
        {
          species: "Ninetales-Alola",
          weight: 10,
          moves: [
            ["Aurora Veil"],
            ["Moonblast"],
            ["Encore"],
            ["Tera Blast"]
          ],
          item: ["Light Clay"],
          nature: "Timid",
          evs: { hp: 4, spa: 252, spe: 252 },
          teraType: ["Fire", "Water"],
          wantsTera: true,
          ability: ["Snow Warning"]
        }
      ]
    },
    ogerponcornerstone: {
      weight: 8,
      sets: [
        {
          species: "Ogerpon-Cornerstone",
          weight: 100,
          moves: [
            ["Ivy Cudgel"],
            ["Horn Leech"],
            ["Encore", "Knock Off"],
            ["Quick Attack", "Rock Tomb", "Swords Dance"]
          ],
          gender: "F",
          item: ["Cornerstone Mask"],
          nature: "Jolly",
          evs: { hp: 4, atk: 252, spe: 252 },
          teraType: ["Rock"],
          ability: ["Sturdy"]
        }
      ]
    },
    ogerponwellspring: {
      weight: 8,
      sets: [
        {
          species: "Ogerpon-Wellspring",
          weight: 60,
          moves: [
            ["Ivy Cudgel"],
            ["Horn Leech", "Leech Seed"],
            ["Encore", "Substitute"],
            ["Synthesis"]
          ],
          gender: "F",
          item: ["Wellspring Mask"],
          nature: "Careful",
          evs: { hp: 252, atk: 4, def: 4, spd: 188, spe: 60 },
          teraType: ["Water"],
          ability: ["Water Absorb"]
        },
        {
          species: "Ogerpon-Wellspring",
          weight: 40,
          moves: [
            ["Ivy Cudgel"],
            ["Horn Leech"],
            ["Knock Off", "Play Rough"],
            ["Leech Seed", "Swords Dance"]
          ],
          gender: "F",
          item: ["Wellspring Mask"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Water"],
          ability: ["Water Absorb"]
        }
      ]
    },
    glimmora: {
      weight: 8,
      sets: [
        {
          species: "Glimmora",
          weight: 30,
          moves: [
            ["Power Gem"],
            ["Energy Ball"],
            ["Stealth Rock"],
            ["Endure"]
          ],
          item: ["Red Card"],
          nature: "Calm",
          evs: { hp: 252, spd: 124, spe: 132 },
          ivs: { atk: 0 },
          teraType: ["Grass"],
          ability: ["Toxic Debris"]
        },
        {
          species: "Glimmora",
          weight: 30,
          moves: [
            ["Stealth Rock"],
            ["Energy Ball", "Power Gem", "Sludge Wave"],
            ["Earth Power", "Mud Shot"],
            ["Mortal Spin"]
          ],
          item: ["Focus Sash"],
          nature: "Timid",
          evs: { hp: 4, spa: 252, spe: 252 },
          teraType: ["Flying", "Grass"],
          ability: ["Toxic Debris"]
        },
        {
          species: "Glimmora",
          weight: 5,
          moves: [
            ["Mortal Spin"],
            ["Stealth Rock", "Toxic Spikes"],
            ["Mud Shot"],
            ["Power Gem", "Sludge Bomb"]
          ],
          item: ["Air Balloon", "Leftovers"],
          nature: "Bold",
          evs: { hp: 244, def: 76, spd: 188 },
          teraType: ["Flying", "Grass"],
          ability: ["Toxic Debris"]
        },
        {
          species: "Glimmora",
          weight: 20,
          moves: [
            ["Mortal Spin", "Sludge Wave"],
            ["Earth Power"],
            ["Energy Ball"],
            ["Dazzling Gleam", "Power Gem"]
          ],
          item: ["Assault Vest"],
          nature: "Modest",
          evs: { hp: 252, spa: 252, spd: 4 },
          teraType: ["Fairy", "Grass", "Ground"],
          ability: ["Toxic Debris"]
        },
        {
          species: "Glimmora",
          weight: 15,
          moves: [
            ["Sludge Wave"],
            ["Earth Power"],
            ["Energy Ball"],
            ["Dazzling Gleam", "Power Gem"]
          ],
          item: ["Choice Scarf"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          teraType: ["Fairy", "Grass", "Ground"],
          ability: ["Toxic Debris"]
        }
      ]
    },
    annihilape: {
      weight: 7,
      sets: [
        {
          species: "Annihilape",
          weight: 35,
          moves: [
            ["Drain Punch"],
            ["Rage Fist"],
            ["Bulk Up"],
            ["Encore", "Taunt"]
          ],
          item: ["Leftovers", "Sitrus Berry"],
          nature: "Jolly",
          evs: { hp: 252, def: 4, spe: 252 },
          teraType: ["Fire", "Poison", "Steel"],
          ability: ["Vital Spirit"]
        },
        {
          species: "Annihilape",
          weight: 25,
          moves: [
            ["Stealth Rock"],
            ["Rage Fist"],
            ["Drain Punch"],
            ["Final Gambit", "Rock Tomb", "Taunt"]
          ],
          item: ["Sitrus Berry"],
          nature: "Impish",
          evs: { hp: 244, def: 244, spe: 20 },
          teraType: ["Fire", "Normal", "Steel"],
          ability: ["Vital Spirit"]
        },
        {
          species: "Annihilape",
          weight: 25,
          moves: [
            ["Stealth Rock"],
            ["Rage Fist"],
            ["Close Combat", "Drain Punch"],
            ["Final Gambit", "Rock Tomb", "Taunt"]
          ],
          item: ["Focus Sash", "Roseli Berry"],
          nature: "Jolly",
          evs: { hp: 252, atk: 4, spe: 252 },
          teraType: ["Fire", "Normal", "Steel"],
          ability: ["Vital Spirit"]
        },
        {
          species: "Annihilape",
          weight: 15,
          moves: [
            ["U-turn"],
            ["Close Combat"],
            ["Rage Fist", "Shadow Claw"],
            ["Final Gambit"]
          ],
          item: ["Choice Scarf"],
          nature: "Jolly",
          evs: { hp: 252, atk: 4, spe: 252 },
          teraType: ["Ghost", "Normal"],
          ability: ["Defiant"]
        }
      ]
    },
    heatran: {
      weight: 7,
      sets: [
        {
          species: "Heatran",
          weight: 35,
          moves: [
            ["Magma Storm"],
            ["Taunt"],
            ["Protect"],
            ["Earth Power", "Substitute", "Tera Blast"]
          ],
          item: ["Leftovers"],
          nature: "Calm",
          evs: { hp: 252, def: 4, spd: 252 },
          ivs: { atk: 0 },
          teraType: ["Grass"],
          wantsTera: true,
          ability: ["Flash Fire"]
        },
        {
          species: "Heatran",
          weight: 40,
          moves: [
            ["Magma Storm"],
            ["Earth Power"],
            ["Flash Cannon"],
            ["Tera Blast"]
          ],
          item: ["Assault Vest"],
          nature: "Modest",
          evs: { hp: 252, def: 4, spa: 252 },
          ivs: { atk: 0 },
          teraType: ["Fairy", "Grass"],
          wantsTera: true,
          ability: ["Flash Fire"]
        },
        {
          species: "Heatran",
          weight: 25,
          moves: [
            ["Magma Storm"],
            ["Flash Cannon"],
            ["Stealth Rock", "Tera Blast"],
            ["Will-O-Wisp"]
          ],
          item: ["Rocky Helmet", "Sitrus Berry"],
          nature: "Bold",
          evs: { hp: 252, def: 252, spa: 4 },
          teraType: ["Fairy", "Grass"],
          wantsTera: true,
          ability: ["Flame Body"]
        }
      ]
    },
    breloom: {
      weight: 7,
      sets: [
        {
          species: "Breloom",
          weight: 85,
          moves: [
            ["Bullet Seed"],
            ["Mach Punch"],
            ["Bulldoze", "Rock Tomb"],
            ["Spore"]
          ],
          item: ["Focus Sash"],
          nature: "Adamant",
          evs: { hp: 4, atk: 252, spe: 252 },
          teraType: ["Fighting", "Grass", "Ground"],
          ability: ["Technician"]
        },
        {
          species: "Breloom",
          weight: 15,
          moves: [
            ["Bullet Seed"],
            ["Mach Punch"],
            ["Tera Blast"],
            ["Spore", "Swords Dance"]
          ],
          item: ["Loaded Dice"],
          nature: "Adamant",
          evs: { hp: 4, atk: 252, spe: 252 },
          teraType: ["Fire"],
          wantsTera: true,
          ability: ["Technician"]
        }
      ]
    },
    cresselia: {
      weight: 7,
      sets: [
        {
          species: "Cresselia",
          weight: 60,
          moves: [
            ["Stored Power"],
            ["Moonblast"],
            ["Calm Mind"],
            ["Moonlight"]
          ],
          item: ["Covert Cloak", "Leftovers"],
          nature: "Bold",
          evs: { hp: 252, def: 116, spe: 140 },
          ivs: { atk: 0 },
          teraType: ["Electric", "Poison"],
          wantsTera: true,
          ability: ["Levitate"]
        },
        {
          species: "Cresselia",
          weight: 40,
          moves: [
            ["Ice Beam", "Moonblast"],
            ["Thunder Wave", "Trick Room"],
            ["Moonlight"],
            ["Lunar Dance"]
          ],
          item: ["Mental Herb", "Rocky Helmet"],
          nature: "Bold",
          evs: { hp: 252, def: 252, spa: 4 },
          ivs: { atk: 0 },
          teraType: ["Steel"],
          ability: ["Levitate"]
        }
      ]
    },
    dondozo: {
      weight: 7,
      sets: [
        {
          species: "Dondozo",
          weight: 60,
          moves: [
            ["Fissure"],
            ["Heavy Slam", "Wave Crash"],
            ["Protect", "Rest"],
            ["Yawn"]
          ],
          item: ["Leftovers"],
          nature: "Impish",
          evs: { hp: 244, def: 148, spd: 116 },
          teraType: ["Fairy", "Grass", "Steel"],
          ability: ["Unaware"]
        },
        {
          species: "Dondozo",
          weight: 20,
          moves: [
            ["Fissure"],
            ["Body Press", "Wave Crash"],
            ["Protect", "Rest"],
            ["Yawn"]
          ],
          item: ["Leftovers"],
          nature: "Impish",
          evs: { hp: 244, def: 252, spd: 12 },
          teraType: ["Fairy", "Grass", "Steel"],
          ability: ["Unaware"]
        },
        {
          species: "Dondozo",
          weight: 10,
          moves: [
            ["Avalanche", "Body Press", "Earthquake", "Fissure"],
            ["Wave Crash"],
            ["Rest"],
            ["Sleep Talk", "Yawn"]
          ],
          item: ["Rocky Helmet"],
          nature: "Impish",
          evs: { hp: 244, def: 252, spd: 12 },
          teraType: ["Fairy", "Grass", "Steel"],
          ability: ["Unaware"]
        },
        {
          species: "Dondozo",
          weight: 5,
          moves: [
            ["Wave Crash"],
            ["Avalanche"],
            ["Body Press", "Earthquake", "Heavy Slam"],
            ["Fissure"]
          ],
          item: ["Assault Vest"],
          nature: "Careful",
          evs: { hp: 44, atk: 212, spd: 252 },
          teraType: ["Fairy", "Grass", "Ground", "Steel"],
          ability: ["Unaware"]
        },
        {
          species: "Dondozo",
          weight: 5,
          moves: [
            ["Curse"],
            ["Rest"],
            ["Wave Crash"],
            ["Fissure"]
          ],
          item: ["Chesto Berry"],
          nature: "Careful",
          evs: { hp: 252, def: 4, spd: 252 },
          teraType: ["Fairy", "Grass", "Steel"],
          ability: ["Unaware"]
        }
      ]
    },
    hippowdon: {
      weight: 7,
      sets: [
        {
          species: "Hippowdon",
          weight: 100,
          moves: [
            ["Stealth Rock"],
            ["Yawn"],
            ["Earthquake"],
            ["Slack Off", "Whirlwind"]
          ],
          item: ["Leftovers", "Sitrus Berry"],
          nature: "Careful",
          evs: { hp: 252, def: 4, spd: 252 },
          teraType: ["Steel", "Water"],
          ability: ["Sand Stream"]
        }
      ]
    },
    mimikyu: {
      weight: 7,
      sets: [
        {
          species: "Mimikyu",
          weight: 25,
          moves: [
            ["Play Rough"],
            ["Shadow Sneak"],
            ["Curse"],
            ["Pain Split"]
          ],
          item: ["Life Orb"],
          nature: "Jolly",
          evs: { hp: 4, atk: 156, def: 92, spd: 4, spe: 252 },
          teraType: ["Fairy", "Ghost"],
          ability: ["Disguise"]
        },
        {
          species: "Mimikyu",
          weight: 15,
          moves: [
            ["Play Rough"],
            ["Shadow Sneak"],
            ["Curse"],
            ["Trick Room"]
          ],
          item: ["Life Orb"],
          nature: "Adamant",
          evs: { hp: 36, atk: 236, def: 180, spd: 4, spe: 52 },
          teraType: ["Fairy", "Ghost"],
          ability: ["Disguise"]
        },
        {
          species: "Mimikyu",
          weight: 25,
          moves: [
            ["Play Rough"],
            ["Shadow Sneak"],
            ["Drain Punch", "Shadow Claw"],
            ["Swords Dance"]
          ],
          item: ["Life Orb"],
          nature: "Jolly",
          evs: { hp: 4, atk: 156, def: 92, spd: 4, spe: 252 },
          teraType: ["Fairy", "Ghost"],
          ability: ["Disguise"]
        },
        {
          species: "Mimikyu",
          weight: 15,
          moves: [
            ["Play Rough"],
            ["Shadow Claw"],
            ["Will-O-Wisp"],
            ["Trick"]
          ],
          item: ["Choice Scarf"],
          nature: "Jolly",
          evs: { hp: 4, atk: 252, spe: 252 },
          teraType: ["Fairy", "Ghost"],
          ability: ["Disguise"]
        },
        {
          species: "Mimikyu",
          weight: 5,
          moves: [
            ["Play Rough"],
            ["Shadow Sneak"],
            ["Pain Split", "Shadow Claw"],
            ["Curse"]
          ],
          item: ["Covert Cloak"],
          nature: "Jolly",
          evs: { hp: 36, atk: 220, spe: 252 },
          teraType: ["Fairy", "Ghost"],
          ability: ["Disguise"]
        },
        {
          species: "Mimikyu",
          weight: 5,
          moves: [
            ["Play Rough"],
            ["Shadow Sneak"],
            ["Wood Hammer"],
            ["Curse"]
          ],
          item: ["Life Orb"],
          nature: "Jolly",
          evs: { hp: 4, atk: 156, def: 92, spd: 4, spe: 252 },
          teraType: ["Grass"],
          ability: ["Disguise"]
        },
        {
          species: "Mimikyu",
          weight: 5,
          moves: [
            ["Play Rough"],
            ["Curse"],
            ["Trick Room"],
            ["Shadow Sneak"]
          ],
          item: ["Covert Cloak"],
          nature: "Adamant",
          evs: { hp: 36, atk: 236, def: 180, spd: 4, spe: 52 },
          teraType: ["Fairy", "Ghost"],
          ability: ["Disguise"]
        },
        {
          species: "Mimikyu",
          weight: 5,
          moves: [
            ["Shadow Claw", "Shadow Sneak"],
            ["Substitute"],
            ["Curse"],
            ["Pain Split"]
          ],
          item: ["Figy Berry"],
          nature: "Jolly",
          evs: { hp: 4, def: 252, spe: 252 },
          teraType: ["Ghost"],
          ability: ["Disguise"]
        }
      ]
    },
    rotomwash: {
      weight: 7,
      sets: [
        {
          species: "Rotom-Wash",
          weight: 35,
          moves: [
            ["Hydro Pump"],
            ["Volt Switch"],
            ["Trick"],
            ["Will-O-Wisp"]
          ],
          item: ["Choice Scarf"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Ghost", "Steel"],
          ability: ["Levitate"]
        },
        {
          species: "Rotom-Wash",
          weight: 15,
          moves: [
            ["Hydro Pump"],
            ["Thunderbolt"],
            ["Volt Switch"],
            ["Trick"]
          ],
          item: ["Choice Specs"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Electric"],
          ability: ["Levitate"]
        },
        {
          species: "Rotom-Wash",
          weight: 45,
          moves: [
            ["Hydro Pump"],
            ["Volt Switch"],
            ["Foul Play"],
            ["Will-O-Wisp"]
          ],
          item: ["Rocky Helmet", "Sitrus Berry"],
          nature: "Bold",
          evs: { hp: 252, def: 252, spa: 4 },
          ivs: { atk: 0 },
          teraType: ["Fairy", "Ghost", "Steel"],
          ability: ["Levitate"]
        },
        {
          species: "Rotom-Wash",
          weight: 5,
          moves: [
            ["Discharge", "Thunderbolt"],
            ["Tera Blast"],
            ["Nasty Plot"],
            ["Substitute"]
          ],
          item: ["Leftovers"],
          nature: "Timid",
          evs: { hp: 252, spa: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Steel"],
          wantsTera: true,
          ability: ["Levitate"]
        }
      ]
    },
    basculegion: {
      weight: 7,
      sets: [
        {
          species: "Basculegion",
          weight: 20,
          moves: [
            ["Last Respects"],
            ["Wave Crash"],
            ["Aqua Jet", "Sleep Talk"],
            ["Flip Turn"]
          ],
          gender: "M",
          item: ["Choice Scarf"],
          nature: "Adamant",
          evs: { atk: 252, spa: 4, spe: 252 },
          teraType: ["Fairy", "Fighting", "Ghost", "Normal", "Water"],
          ability: ["Adaptability"]
        },
        {
          species: "Basculegion",
          weight: 10,
          moves: [
            ["Last Respects"],
            ["Wave Crash"],
            ["Flip Turn"],
            ["Tera Blast"]
          ],
          gender: "M",
          item: ["Choice Scarf"],
          nature: "Adamant",
          evs: { atk: 252, spa: 4, spe: 252 },
          teraType: ["Fairy", "Fighting"],
          wantsTera: true,
          ability: ["Adaptability"]
        },
        {
          species: "Basculegion",
          weight: 40,
          moves: [
            ["Wave Crash"],
            ["Aqua Jet"],
            ["Agility", "Endeavor"],
            ["Last Respects"]
          ],
          gender: "M",
          item: ["Focus Sash"],
          nature: "Adamant",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Ghost", "Normal", "Water"],
          ability: ["Adaptability"]
        },
        {
          species: "Basculegion",
          weight: 20,
          moves: [
            ["Wave Crash"],
            ["Aqua Jet"],
            ["Agility", "Tera Blast"],
            ["Last Respects"]
          ],
          gender: "M",
          item: ["Focus Sash"],
          nature: "Adamant",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Fairy"],
          wantsTera: true,
          ability: ["Adaptability"]
        },
        {
          species: "Basculegion",
          weight: 10,
          moves: [
            ["Wave Crash"],
            ["Aqua Jet"],
            ["Substitute"],
            ["Last Respects"]
          ],
          gender: "M",
          item: ["Bright Powder"],
          nature: "Adamant",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Ghost", "Normal", "Water"],
          ability: ["Adaptability"]
        }
      ]
    },
    corviknight: {
      weight: 6,
      sets: [
        {
          species: "Corviknight",
          weight: 50,
          moves: [
            ["U-turn"],
            ["Roost"],
            ["Body Press", "Iron Head"],
            ["Brave Bird", "Taunt"]
          ],
          item: ["Leftovers", "Rocky Helmet"],
          nature: "Impish",
          evs: { hp: 252, def: 252, spd: 4 },
          teraType: ["Dragon", "Fighting", "Water"],
          ability: ["Mirror Armor"]
        },
        {
          species: "Corviknight",
          weight: 40,
          moves: [
            ["Iron Defense"],
            ["Body Press"],
            ["Roost"],
            ["Iron Head", "Taunt", "U-turn"]
          ],
          item: ["Covert Cloak", "Rocky Helmet", "Safety Goggles", "Sitrus Berry"],
          nature: "Impish",
          evs: { hp: 252, def: 252, spd: 4 },
          teraType: ["Dragon", "Fighting", "Water"],
          ability: ["Mirror Armor"]
        },
        {
          species: "Corviknight",
          weight: 10,
          moves: [
            ["Bulk Up"],
            ["Taunt"],
            ["Roost"],
            ["Brave Bird", "Iron Head"]
          ],
          item: ["Covert Cloak", "Rocky Helmet", "Safety Goggles", "Sitrus Berry"],
          nature: "Impish",
          evs: { hp: 252, def: 252, spd: 4 },
          teraType: ["Dragon", "Water"],
          ability: ["Mirror Armor"]
        }
      ]
    },
    zapdos: {
      weight: 6,
      sets: [
        {
          species: "Zapdos",
          weight: 75,
          moves: [
            ["Volt Switch"],
            ["Roost"],
            ["Hurricane"],
            ["Discharge"]
          ],
          item: ["Heavy-Duty Boots", "Rocky Helmet", "Sitrus Berry"],
          nature: "Bold",
          evs: { hp: 252, def: 252, spd: 4 },
          ivs: { atk: 0 },
          teraType: ["Steel", "Water"],
          ability: ["Static"]
        },
        {
          species: "Zapdos",
          weight: 10,
          moves: [
            ["Volt Switch"],
            ["Roost"],
            ["Hurricane"],
            ["Tera Blast"]
          ],
          item: ["Heavy-Duty Boots", "Rocky Helmet", "Sitrus Berry"],
          nature: "Bold",
          evs: { hp: 252, def: 252, spd: 4 },
          ivs: { atk: 0 },
          teraType: ["Ice"],
          wantsTera: true,
          ability: ["Static"]
        },
        {
          species: "Zapdos",
          weight: 10,
          moves: [
            ["Thunderbolt"],
            ["Hurricane"],
            ["Volt Switch"],
            ["Tera Blast"]
          ],
          item: ["Choice Scarf"],
          nature: "Timid",
          evs: { def: 4, spa: 252, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Fairy", "Ice"],
          wantsTera: true,
          ability: ["Static"]
        },
        {
          species: "Zapdos",
          weight: 5,
          moves: [
            ["Thunderbolt"],
            ["Hurricane"],
            ["Volt Switch"],
            ["Heat Wave"]
          ],
          item: ["Choice Scarf", "Choice Specs"],
          nature: "Timid",
          evs: { def: 4, spa: 252, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Electric"],
          ability: ["Static"]
        }
      ]
    },
    ursaluna: {
      weight: 6,
      sets: [
        {
          species: "Ursaluna",
          weight: 85,
          moves: [
            ["Facade"],
            ["Earthquake"],
            ["Trailblaze"],
            ["Swords Dance"]
          ],
          item: ["Flame Orb"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Grass", "Normal", "Water"],
          ability: ["Guts"]
        },
        {
          species: "Ursaluna",
          weight: 15,
          moves: [
            ["Earthquake"],
            ["Avalanche"],
            ["Yawn"],
            ["Protect"]
          ],
          item: ["Leftovers"],
          nature: "Impish",
          evs: { hp: 156, def: 252, spd: 100 },
          teraType: ["Fairy", "Water"],
          ability: ["Bulletproof"]
        }
      ]
    },
    goodrahisui: {
      weight: 6,
      sets: [
        {
          species: "Goodra-Hisui",
          weight: 60,
          moves: [
            ["Flash Cannon", "Heavy Slam"],
            ["Draco Meteor", "Ice Beam"],
            ["Acid Spray", "Flamethrower", "Thunderbolt"],
            ["Earthquake"]
          ],
          item: ["Assault Vest"],
          nature: "Quiet",
          evs: { hp: 252, spa: 252, spd: 4 },
          teraType: ["Fairy", "Flying", "Water"],
          ability: ["Sap Sipper"]
        },
        {
          species: "Goodra-Hisui",
          weight: 40,
          moves: [
            ["Acid Armor"],
            ["Body Press"],
            ["Heavy Slam"],
            ["Draco Meteor", "Ice Beam", "Protect"]
          ],
          item: ["Leftovers"],
          nature: "Careful",
          evs: { hp: 252, def: 4, spd: 252 },
          teraType: ["Fairy", "Flying"],
          ability: ["Shell Armor"]
        }
      ]
    },
    magnezone: {
      weight: 6,
      sets: [
        {
          species: "Magnezone",
          weight: 70,
          moves: [
            ["Thunderbolt"],
            ["Flash Cannon"],
            ["Volt Switch"],
            ["Tera Blast"]
          ],
          item: ["Assault Vest"],
          nature: "Modest",
          evs: { hp: 252, spa: 4, spd: 252 },
          ivs: { atk: 0 },
          teraType: ["Fairy", "Water"],
          wantsTera: true,
          ability: ["Analytic"]
        },
        {
          species: "Magnezone",
          weight: 20,
          moves: [
            ["Thunderbolt"],
            ["Flash Cannon"],
            ["Volt Switch"],
            ["Tera Blast"]
          ],
          item: ["Choice Specs"],
          nature: "Modest",
          evs: { hp: 252, spa: 4, spd: 252 },
          ivs: { atk: 0 },
          teraType: ["Fairy", "Water"],
          wantsTera: true,
          ability: ["Sturdy"]
        },
        {
          species: "Magnezone",
          weight: 10,
          moves: [
            ["Thunderbolt"],
            ["Flash Cannon", "Steel Beam"],
            ["Volt Switch"],
            ["Mirror Coat"]
          ],
          item: ["Custap Berry"],
          nature: "Modest",
          evs: { hp: 252, spa: 4, spd: 252 },
          ivs: { atk: 0 },
          teraType: ["Flying", "Water"],
          wantsTera: true,
          ability: ["Sturdy"]
        }
      ]
    },
    ogerpon: {
      weight: 6,
      sets: [
        {
          species: "Ogerpon",
          weight: 100,
          moves: [
            ["Ivy Cudgel"],
            ["U-turn"],
            ["Play Rough"],
            ["Knock Off", "Stomping Tantrum"]
          ],
          item: ["Choice Band", "Focus Sash"],
          nature: "Jolly",
          evs: { atk: 252, def: 4, spe: 252 },
          teraType: ["Grass"],
          ability: ["Defiant"]
        }
      ]
    },
    gliscor: {
      weight: 6,
      sets: [
        {
          species: "Gliscor",
          weight: 100,
          moves: [
            ["Substitute"],
            ["Toxic"],
            ["Protect"],
            ["Earthquake"]
          ],
          item: ["Toxic Orb"],
          nature: "Impish",
          evs: { hp: 244, def: 108, spe: 156 },
          teraType: ["Water"],
          wantsTera: true,
          ability: ["Poison Heal"]
        }
      ]
    },
    ironmoth: {
      weight: 6,
      sets: [
        {
          species: "Iron Moth",
          weight: 20,
          moves: [
            ["Fiery Dance"],
            ["Sludge Wave"],
            ["Energy Ball"],
            ["Dazzling Gleam", "Overheat", "Psychic"]
          ],
          item: ["Assault Vest", "Booster Energy", "Choice Specs"],
          nature: "Timid",
          evs: { hp: 4, spa: 252, spe: 252 },
          teraType: ["Fairy", "Fire", "Grass", "Water"],
          ability: ["Quark Drive"]
        },
        {
          species: "Iron Moth",
          weight: 20,
          moves: [
            ["Fiery Dance"],
            ["Sludge Wave"],
            ["Energy Ball"],
            ["Dazzling Gleam", "Overheat", "Psychic", "Tera Blast"]
          ],
          item: ["Assault Vest", "Booster Energy", "Choice Specs"],
          nature: "Timid",
          evs: { hp: 4, spa: 252, spe: 252 },
          teraType: ["Fairy", "Water"],
          wantsTera: true,
          ability: ["Quark Drive"]
        },
        {
          species: "Iron Moth",
          weight: 20,
          moves: [
            ["Toxic Spikes"],
            ["Fiery Dance"],
            ["Morning Sun"],
            ["Sludge Wave", "Tera Blast", "Whirlwind"]
          ],
          item: ["Booster Energy", "Covert Cloak", "Passho Berry", "Sitrus Berry"],
          nature: "Timid",
          evs: { hp: 244, def: 52, spa: 4, spd: 12, spe: 196 },
          ivs: { atk: 0 },
          teraType: ["Fairy", "Grass", "Water"],
          ability: ["Quark Drive"]
        },
        {
          species: "Iron Moth",
          weight: 10,
          moves: [
            ["Toxic Spikes"],
            ["Fiery Dance"],
            ["Morning Sun"],
            ["Whirlwind"]
          ],
          item: ["Black Sludge", "Heavy-Duty Boots"],
          nature: "Calm",
          evs: { hp: 196, spd: 132, spe: 180 },
          ivs: { atk: 0 },
          teraType: ["Poison"],
          ability: ["Quark Drive"]
        },
        {
          species: "Iron Moth",
          weight: 10,
          moves: [
            ["Toxic Spikes"],
            ["Fiery Dance"],
            ["Morning Sun"],
            ["Whirlwind"]
          ],
          item: ["Heavy-Duty Boots", "Leftovers"],
          nature: "Calm",
          evs: { hp: 196, spd: 132, spe: 180 },
          ivs: { atk: 0 },
          teraType: ["Grass"],
          ability: ["Quark Drive"]
        },
        {
          species: "Iron Moth",
          weight: 10,
          moves: [
            ["Fiery Dance"],
            ["Acid Spray", "Sludge Wave"],
            ["Energy Ball", "Psychic"],
            ["Dazzling Gleam", "Tera Blast"]
          ],
          item: ["Booster Energy"],
          nature: "Timid",
          evs: { def: 124, spa: 132, spe: 252 },
          teraType: ["Water"],
          wantsTera: true,
          ability: ["Quark Drive"]
        },
        {
          species: "Iron Moth",
          weight: 10,
          moves: [
            ["Fiery Dance"],
            ["Acid Spray", "Sludge Wave"],
            ["Energy Ball"],
            ["Dazzling Gleam", "Psychic"]
          ],
          item: ["Booster Energy"],
          nature: "Timid",
          evs: { def: 124, spa: 132, spe: 252 },
          teraType: ["Fire", "Grass", "Poison"],
          ability: ["Quark Drive"]
        }
      ]
    },
    rillaboom: {
      weight: 6,
      sets: [
        {
          species: "Rillaboom",
          weight: 50,
          moves: [
            ["Grassy Glide"],
            ["Knock Off"],
            ["Drum Beating", "Wood Hammer"],
            ["Tera Blast"]
          ],
          item: ["Assault Vest", "Choice Band"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Rock"],
          wantsTera: true,
          ability: ["Grassy Surge"]
        },
        {
          species: "Rillaboom",
          weight: 20,
          moves: [
            ["Grassy Glide"],
            ["Knock Off"],
            ["Drum Beating", "Wood Hammer"],
            ["High Horsepower", "U-turn"]
          ],
          item: ["Assault Vest"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Grass", "Poison"],
          ability: ["Grassy Surge"]
        },
        {
          species: "Rillaboom",
          weight: 10,
          moves: [
            ["Grassy Glide"],
            ["Knock Off"],
            ["Drum Beating", "Wood Hammer"],
            ["High Horsepower", "U-turn"]
          ],
          item: ["Choice Band"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Grass"],
          ability: ["Grassy Surge"]
        },
        {
          species: "Rillaboom",
          weight: 20,
          moves: [
            ["Grassy Glide"],
            ["High Horsepower"],
            ["Tera Blast"],
            ["Swords Dance"]
          ],
          item: ["Grassy Seed"],
          nature: "Adamant",
          evs: { hp: 252, atk: 252, def: 4 },
          teraType: ["Fairy", "Rock"],
          wantsTera: true,
          ability: ["Grassy Surge"]
        }
      ]
    },
    sneasler: {
      weight: 5,
      sets: [
        {
          species: "Sneasler",
          weight: 30,
          moves: [
            ["Dire Claw"],
            ["Close Combat"],
            ["Fake Out"],
            ["Toxic Spikes"]
          ],
          item: ["Air Balloon", "Focus Sash", "Normal Gem", "Red Card", "Sitrus Berry"],
          nature: "Adamant",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Fighting", "Flying"],
          ability: ["Unburden"]
        },
        {
          species: "Sneasler",
          weight: 10,
          moves: [
            ["Dire Claw"],
            ["Close Combat"],
            ["Fake Out"],
            ["Toxic Spikes"]
          ],
          item: ["Air Balloon", "Focus Sash", "Sitrus Berry"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Fighting", "Flying"],
          ability: ["Poison Touch"]
        },
        {
          species: "Sneasler",
          weight: 60,
          moves: [
            ["Dire Claw"],
            ["Close Combat"],
            ["Shadow Claw"],
            ["Toxic Spikes"]
          ],
          item: ["Air Balloon", "Focus Sash", "Red Card", "Sitrus Berry"],
          nature: "Adamant",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Ghost"],
          ability: ["Unburden"]
        }
      ]
    },
    clodsire: {
      weight: 5,
      sets: [
        {
          species: "Clodsire",
          weight: 50,
          moves: [
            ["Earthquake"],
            ["Toxic", "Yawn"],
            ["Counter", "Haze", "Stealth Rock"],
            ["Recover"]
          ],
          item: ["Leftovers", "Sitrus Berry"],
          nature: "Impish",
          evs: { hp: 156, def: 252, spd: 100 },
          teraType: ["Dark", "Electric", "Fire", "Water"],
          ability: ["Water Absorb"]
        },
        {
          species: "Clodsire",
          weight: 50,
          moves: [
            ["Earthquake"],
            ["Toxic", "Yawn"],
            ["Counter", "Haze", "Stealth Rock"],
            ["Recover"]
          ],
          item: ["Leftovers", "Sitrus Berry"],
          nature: "Impish",
          evs: { hp: 156, def: 252, spd: 100 },
          teraType: ["Dark", "Electric", "Fire", "Water"],
          ability: ["Unaware"]
        }
      ]
    },
    meowscarada: {
      weight: 5,
      sets: [
        {
          species: "Meowscarada",
          weight: 25,
          moves: [
            ["Flower Trick"],
            ["Knock Off"],
            ["Trick", "U-turn"],
            ["Low Kick", "Play Rough", "Sucker Punch"]
          ],
          item: ["Choice Scarf"],
          nature: "Jolly",
          evs: { hp: 4, atk: 252, spe: 252 },
          teraType: ["Dark", "Grass"],
          ability: ["Protean"]
        },
        {
          species: "Meowscarada",
          weight: 10,
          moves: [
            ["Flower Trick"],
            ["Knock Off"],
            ["Trick", "U-turn"],
            ["Tera Blast"]
          ],
          item: ["Choice Scarf"],
          nature: "Jolly",
          evs: { hp: 4, atk: 252, spe: 252 },
          teraType: ["Ghost", "Rock"],
          wantsTera: true,
          ability: ["Protean"]
        },
        {
          species: "Meowscarada",
          weight: 30,
          moves: [
            ["Flower Trick"],
            ["Knock Off"],
            ["Sucker Punch", "Taunt"],
            ["Toxic Spikes"]
          ],
          item: ["Focus Sash"],
          nature: "Jolly",
          evs: { atk: 252, def: 4, spe: 252 },
          teraType: ["Grass"],
          ability: ["Overgrow"]
        },
        {
          species: "Meowscarada",
          weight: 20,
          moves: [
            ["Flower Trick"],
            ["Knock Off"],
            ["Tera Blast"],
            ["Sucker Punch", "Toxic Spikes"]
          ],
          item: ["Focus Sash"],
          nature: "Jolly",
          evs: { atk: 252, def: 4, spe: 252 },
          teraType: ["Ghost", "Rock"],
          wantsTera: true,
          ability: ["Overgrow"]
        },
        {
          species: "Meowscarada",
          weight: 10,
          moves: [
            ["Flower Trick"],
            ["Knock Off"],
            ["Trick", "U-turn"],
            ["Sucker Punch"]
          ],
          item: ["Choice Band"],
          nature: "Jolly",
          evs: { hp: 4, atk: 252, spe: 252 },
          teraType: ["Grass"],
          ability: ["Protean"]
        },
        {
          species: "Meowscarada",
          weight: 5,
          moves: [
            ["Flower Trick"],
            ["Knock Off"],
            ["Sucker Punch", "Trick", "U-turn"],
            ["Tera Blast"]
          ],
          item: ["Choice Band"],
          nature: "Jolly",
          evs: { hp: 4, atk: 252, spe: 252 },
          teraType: ["Ghost", "Rock"],
          wantsTera: true,
          ability: ["Protean"]
        }
      ]
    },
    azumarill: {
      weight: 5,
      sets: [
        {
          species: "Azumarill",
          weight: 45,
          moves: [
            ["Aqua Jet"],
            ["Play Rough"],
            ["Liquidation"],
            ["Superpower"]
          ],
          item: ["Assault Vest"],
          nature: "Adamant",
          evs: { hp: 252, atk: 252, spd: 4 },
          teraType: ["Fairy", "Water"],
          ability: ["Huge Power"]
        },
        {
          species: "Azumarill",
          weight: 10,
          moves: [
            ["Aqua Jet"],
            ["Play Rough"],
            ["Liquidation"],
            ["Tera Blast"]
          ],
          item: ["Assault Vest", "Choice Band"],
          nature: "Adamant",
          evs: { hp: 252, atk: 252, spd: 4 },
          teraType: ["Electric", "Fairy", "Fire", "Grass"],
          wantsTera: true,
          ability: ["Huge Power"]
        },
        {
          species: "Azumarill",
          weight: 25,
          moves: [
            ["Belly Drum"],
            ["Aqua Jet"],
            ["Play Rough"],
            ["Encore", "Liquidation"]
          ],
          item: ["Sitrus Berry"],
          nature: "Adamant",
          evs: { hp: 244, atk: 252, def: 12 },
          teraType: ["Water"],
          ability: ["Huge Power"]
        },
        {
          species: "Azumarill",
          weight: 10,
          moves: [
            ["Belly Drum"],
            ["Aqua Jet"],
            ["Play Rough"],
            ["Bulldoze"]
          ],
          item: ["Sitrus Berry"],
          nature: "Adamant",
          evs: { hp: 244, atk: 252, def: 12 },
          teraType: ["Steel"],
          ability: ["Huge Power"]
        },
        {
          species: "Azumarill",
          weight: 5,
          moves: [
            ["Belly Drum"],
            ["Aqua Jet"],
            ["Play Rough"],
            ["Tera Blast"]
          ],
          item: ["Sitrus Berry"],
          nature: "Adamant",
          evs: { hp: 244, atk: 252, def: 12 },
          teraType: ["Fire"],
          wantsTera: true,
          ability: ["Huge Power"]
        },
        {
          species: "Azumarill",
          weight: 5,
          moves: [
            ["Substitute"],
            ["Encore"],
            ["Play Rough"],
            ["Aqua Jet", "Liquidation"]
          ],
          item: ["Leftovers"],
          nature: "Adamant",
          evs: { hp: 252, atk: 252, def: 4 },
          teraType: ["Water"],
          ability: ["Huge Power"]
        }
      ]
    },
    ironvaliant: {
      weight: 5,
      sets: [
        {
          species: "Iron Valiant",
          weight: 35,
          moves: [
            ["Spirit Break"],
            ["Encore", "Reflect"],
            ["Close Combat"],
            ["Destiny Bond", "Knock Off"]
          ],
          item: ["Booster Energy"],
          nature: "Jolly",
          evs: { hp: 92, atk: 204, def: 4, spd: 4, spe: 204 },
          teraType: ["Ghost", "Steel"],
          ability: ["Quark Drive"]
        },
        {
          species: "Iron Valiant",
          weight: 25,
          moves: [
            ["Moonblast"],
            ["Encore", "Shadow Ball", "Shadow Sneak"],
            ["Aura Sphere", "Close Combat"],
            ["Destiny Bond"]
          ],
          item: ["Booster Energy", "Focus Sash"],
          nature: "Naive",
          evs: { atk: 4, spa: 252, spe: 252 },
          teraType: ["Fairy", "Ghost", "Steel"],
          ability: ["Quark Drive"]
        },
        {
          species: "Iron Valiant",
          weight: 20,
          moves: [
            ["Moonblast"],
            ["Close Combat"],
            ["Encore", "Shadow Ball"],
            ["Psychic", "Psyshock", "Thunderbolt"]
          ],
          item: ["Booster Energy", "Life Orb"],
          nature: "Naive",
          evs: { atk: 4, spa: 252, spe: 252 },
          teraType: ["Electric", "Fairy", "Ghost", "Steel"],
          ability: ["Quark Drive"]
        },
        {
          species: "Iron Valiant",
          weight: 20,
          moves: [
            ["Swords Dance"],
            ["Close Combat", "Encore"],
            ["Spirit Break"],
            ["Knock Off", "Shadow Sneak"]
          ],
          item: ["Booster Energy", "Focus Sash"],
          nature: "Jolly",
          evs: { atk: 252, def: 4, spe: 252 },
          teraType: ["Fairy", "Ghost", "Steel"],
          ability: ["Quark Drive"]
        }
      ]
    },
    kingambit: {
      weight: 5,
      sets: [
        {
          species: "Kingambit",
          weight: 25,
          moves: [
            ["Kowtow Cleave"],
            ["Sucker Punch"],
            ["Iron Head"],
            ["Guillotine"]
          ],
          item: ["Assault Vest"],
          nature: "Adamant",
          evs: { hp: 252, atk: 252, spd: 4 },
          teraType: ["Dark", "Flying"],
          ability: ["Defiant"]
        },
        {
          species: "Kingambit",
          weight: 20,
          moves: [
            ["Kowtow Cleave"],
            ["Sucker Punch"],
            ["Iron Head"],
            ["Guillotine"]
          ],
          item: ["Assault Vest"],
          nature: "Adamant",
          evs: { hp: 252, atk: 252, spd: 4 },
          teraType: ["Dark", "Flying"],
          ability: ["Supreme Overlord"]
        },
        {
          species: "Kingambit",
          weight: 10,
          moves: [
            ["Kowtow Cleave"],
            ["Guillotine", "Sucker Punch"],
            ["Iron Head"],
            ["Tera Blast"]
          ],
          item: ["Assault Vest"],
          nature: "Adamant",
          evs: { hp: 252, atk: 252, spd: 4 },
          teraType: ["Fairy"],
          wantsTera: true,
          ability: ["Defiant"]
        },
        {
          species: "Kingambit",
          weight: 10,
          moves: [
            ["Kowtow Cleave"],
            ["Guillotine", "Sucker Punch"],
            ["Iron Head"],
            ["Tera Blast"]
          ],
          item: ["Assault Vest"],
          nature: "Adamant",
          evs: { hp: 252, atk: 252, spd: 4 },
          teraType: ["Fairy"],
          wantsTera: true,
          ability: ["Supreme Overlord"]
        },
        {
          species: "Kingambit",
          weight: 15,
          moves: [
            ["Kowtow Cleave"],
            ["Sucker Punch"],
            ["Iron Head"],
            ["Swords Dance"]
          ],
          item: ["Black Glasses", "Sitrus Berry"],
          nature: "Adamant",
          evs: { hp: 252, atk: 252, spd: 4 },
          teraType: ["Dark", "Flying"],
          ability: ["Supreme Overlord"]
        },
        {
          species: "Kingambit",
          weight: 10,
          moves: [
            ["Kowtow Cleave"],
            ["Sucker Punch"],
            ["Iron Head"],
            ["Swords Dance"]
          ],
          item: ["Black Glasses", "Sitrus Berry"],
          nature: "Adamant",
          evs: { hp: 252, atk: 252, spd: 4 },
          teraType: ["Dark", "Flying"],
          ability: ["Defiant"]
        },
        {
          species: "Kingambit",
          weight: 5,
          moves: [
            ["Stealth Rock"],
            ["Kowtow Cleave"],
            ["Guillotine", "Iron Head"],
            ["Sucker Punch", "Thunder Wave"]
          ],
          item: ["Focus Sash"],
          nature: "Adamant",
          evs: { hp: 252, atk: 252, spd: 4 },
          teraType: ["Dark", "Fairy", "Flying"],
          ability: ["Defiant", "Supreme Overlord"]
        },
        {
          species: "Kingambit",
          weight: 5,
          moves: [
            ["Stealth Rock"],
            ["Kowtow Cleave"],
            ["Guillotine", "Iron Head"],
            ["Sucker Punch", "Thunder Wave"]
          ],
          item: ["Sitrus Berry"],
          nature: "Adamant",
          evs: { hp: 244, atk: 252, spd: 12 },
          teraType: ["Dark", "Fairy", "Flying"],
          ability: ["Defiant", "Supreme Overlord"]
        }
      ]
    },
    volcarona: {
      weight: 5,
      sets: [
        {
          species: "Volcarona",
          weight: 55,
          moves: [
            ["Quiver Dance"],
            ["Fiery Dance"],
            ["Morning Sun"],
            ["Giga Drain", "Substitute", "Will-O-Wisp"]
          ],
          item: ["Heavy-Duty Boots", "Sitrus Berry"],
          nature: "Timid",
          evs: { hp: 244, def: 204, spa: 12, spd: 4, spe: 44 },
          teraType: ["Fairy", "Grass"],
          wantsTera: true,
          ability: ["Flame Body"]
        },
        {
          species: "Volcarona",
          weight: 25,
          moves: [
            ["Quiver Dance"],
            ["Fiery Dance"],
            ["Morning Sun"],
            ["Tera Blast"]
          ],
          item: ["Heavy-Duty Boots", "Sitrus Berry"],
          nature: "Timid",
          evs: { hp: 244, def: 204, spa: 12, spd: 4, spe: 44 },
          teraType: ["Water"],
          wantsTera: true,
          ability: ["Flame Body"]
        },
        {
          species: "Volcarona",
          weight: 20,
          moves: [
            ["Quiver Dance"],
            ["Fiery Dance"],
            ["Bug Buzz", "Giga Drain", "Psychic"],
            ["Tera Blast"]
          ],
          item: ["Heavy-Duty Boots", "Lum Berry", "Sitrus Berry"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          teraType: ["Rock", "Water"],
          wantsTera: true,
          ability: ["Flame Body"]
        }
      ]
    },
    wochien: {
      weight: 5,
      sets: [
        {
          species: "Wo-Chien",
          weight: 90,
          moves: [
            ["Leech Seed"],
            ["Protect"],
            ["Dark Pulse", "Foul Play", "Knock Off"],
            ["Giga Drain", "Ruination", "Substitute", "Taunt"]
          ],
          item: ["Leftovers"],
          nature: "Bold",
          evs: { hp: 252, def: 252, spd: 4 },
          teraType: ["Fairy", "Fire", "Poison", "Water"],
          wantsTera: true,
          ability: ["Tablets of Ruin"]
        },
        {
          species: "Wo-Chien",
          weight: 10,
          moves: [
            ["Leech Seed"],
            ["Protect"],
            ["Tera Blast"],
            ["Giga Drain", "Ruination", "Substitute", "Taunt"]
          ],
          item: ["Leftovers"],
          nature: "Bold",
          evs: { hp: 252, def: 252, spd: 4 },
          teraType: ["Fire"],
          wantsTera: true,
          ability: ["Tablets of Ruin"]
        }
      ]
    },
    empoleon: {
      weight: 5,
      sets: [
        {
          species: "Empoleon",
          weight: 100,
          moves: [
            ["Stealth Rock"],
            ["Roar", "Yawn"],
            ["Flash Cannon", "Ice Beam"],
            ["Flip Turn", "Roost", "Surf"]
          ],
          item: ["Air Balloon", "Leftovers", "Sitrus Berry"],
          nature: "Calm",
          evs: { hp: 252, def: 4, spd: 252 },
          teraType: ["Fairy", "Flying", "Grass"],
          ability: ["Competitive"]
        }
      ]
    },
    kommoo: {
      weight: 5,
      sets: [
        {
          species: "Kommo-o",
          weight: 50,
          moves: [
            ["Clangorous Soul"],
            ["Clanging Scales"],
            ["Aura Sphere", "Vacuum Wave"],
            ["Flash Cannon"]
          ],
          item: ["Throat Spray"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Steel"],
          wantsTera: true,
          ability: ["Bulletproof"]
        },
        {
          species: "Kommo-o",
          weight: 50,
          moves: [
            ["Clangorous Soul"],
            ["Drain Punch"],
            ["Iron Head"],
            ["Earthquake", "Substitute"]
          ],
          item: ["Leftovers", "Sitrus Berry"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Steel"],
          wantsTera: true,
          ability: ["Bulletproof"]
        }
      ]
    },
    sinistcha: {
      weight: 5,
      sets: [
        {
          species: "Sinistcha",
          weight: 100,
          moves: [
            ["Strength Sap"],
            ["Matcha Gotcha"],
            ["Hex", "Shadow Ball"],
            ["Calm Mind", "Scald"]
          ],
          item: ["Covert Cloak", "Leftovers", "Rocky Helmet"],
          nature: "Bold",
          evs: { hp: 252, def: 252, spd: 4 },
          ivs: { atk: 0 },
          teraType: ["Fairy", "Normal", "Water"],
          wantsTera: true,
          ability: ["Heatproof"]
        }
      ]
    },
    vikavolt: {
      weight: 5,
      sets: [
        {
          species: "Vikavolt",
          weight: 100,
          moves: [
            ["Discharge", "Thunderbolt", "Thunder Wave", "Volt Switch"],
            ["Bug Buzz"],
            ["Sticky Web"],
            ["Guillotine"]
          ],
          item: ["Sitrus Berry"],
          nature: "Modest",
          evs: { hp: 244, def: 212, spd: 52 },
          ivs: { atk: 0 },
          teraType: ["Steel"],
          ability: ["Levitate"]
        }
      ]
    },
    skeledirge: {
      weight: 5,
      sets: [
        {
          species: "Skeledirge",
          weight: 30,
          moves: [
            ["Torch Song"],
            ["Slack Off"],
            ["Will-O-Wisp", "Yawn"],
            ["Earth Power", "Hex", "Shadow Ball", "Tera Blast"]
          ],
          item: ["Covert Cloak", "Heavy-Duty Boots", "Leftovers", "Sitrus Berry"],
          nature: "Bold",
          evs: { hp: 252, def: 252, spd: 4 },
          teraType: ["Fairy", "Water"],
          wantsTera: true,
          ability: ["Unaware"]
        },
        {
          species: "Skeledirge",
          weight: 60,
          moves: [
            ["Torch Song"],
            ["Slack Off"],
            ["Will-O-Wisp", "Yawn"],
            ["Earth Power", "Hex", "Shadow Ball"]
          ],
          item: ["Covert Cloak", "Heavy-Duty Boots", "Leftovers", "Sitrus Berry"],
          nature: "Bold",
          evs: { hp: 252, def: 252, spd: 4 },
          teraType: ["Fairy", "Normal"],
          ability: ["Unaware"]
        },
        {
          species: "Skeledirge",
          weight: 5,
          moves: [
            ["Sing"],
            ["Torch Song"],
            ["Slack Off"],
            ["Earth Power", "Shadow Ball", "Tera Blast"]
          ],
          item: ["Blunder Policy"],
          nature: "Modest",
          evs: { hp: 204, def: 4, spa: 132, spd: 4, spe: 164 },
          teraType: ["Fairy", "Water"],
          wantsTera: true,
          ability: ["Unaware"]
        },
        {
          species: "Skeledirge",
          weight: 5,
          moves: [
            ["Sing"],
            ["Torch Song"],
            ["Slack Off"],
            ["Earth Power", "Shadow Ball"]
          ],
          item: ["Blunder Policy"],
          nature: "Modest",
          evs: { hp: 204, def: 4, spa: 132, spd: 4, spe: 164 },
          teraType: ["Fire"],
          ability: ["Unaware"]
        }
      ]
    },
    blissey: {
      weight: 4,
      sets: [
        {
          species: "Blissey",
          weight: 10,
          moves: [
            ["Soft-Boiled"],
            ["Flamethrower"],
            ["Ice Beam"],
            ["Thunderbolt"]
          ],
          item: ["Expert Belt"],
          nature: "Bold",
          evs: { hp: 4, def: 252, spa: 252 },
          teraType: ["Dark", "Fire"],
          ability: ["Natural Cure"]
        },
        {
          species: "Blissey",
          weight: 13,
          moves: [
            ["Calm Mind"],
            ["Soft-Boiled"],
            ["Shadow Ball"],
            ["Flamethrower"]
          ],
          item: ["Leftovers"],
          nature: "Calm",
          evs: { hp: 4, def: 252, spd: 252 },
          teraType: ["Dark", "Fire", "Ghost"],
          ability: ["Natural Cure"]
        },
        {
          species: "Blissey",
          weight: 13,
          moves: [
            ["Calm Mind"],
            ["Soft-Boiled"],
            ["Shadow Ball"],
            ["Stealth Rock"]
          ],
          item: ["Leftovers"],
          nature: "Calm",
          evs: { hp: 4, def: 252, spd: 252 },
          teraType: ["Dark", "Ghost"],
          ability: ["Natural Cure"]
        },
        {
          species: "Blissey",
          weight: 14,
          moves: [
            ["Calm Mind"],
            ["Soft-Boiled"],
            ["Shadow Ball"],
            ["Tera Blast"]
          ],
          item: ["Leftovers"],
          nature: "Calm",
          evs: { hp: 4, def: 252, spd: 252 },
          teraType: ["Fighting", "Fire"],
          wantsTera: true,
          ability: ["Natural Cure"]
        },
        {
          species: "Blissey",
          weight: 50,
          moves: [
            ["Calm Mind"],
            ["Soft-Boiled"],
            ["Flamethrower", "Shadow Ball"],
            ["Fling"]
          ],
          item: ["Flame Orb", "Poison Barb"],
          nature: "Calm",
          evs: { hp: 4, def: 252, spd: 252 },
          teraType: ["Dark", "Fire"],
          ability: ["Natural Cure"]
        }
      ]
    },
    ceruledge: {
      weight: 4,
      sets: [
        {
          species: "Ceruledge",
          weight: 25,
          moves: [
            ["Bitter Blade"],
            ["Bulk Up"],
            ["Taunt"],
            ["Flame Charge", "Shadow Sneak", "Tera Blast", "Will-O-Wisp"]
          ],
          item: ["Leftovers"],
          nature: "Impish",
          evs: { hp: 252, atk: 4, def: 252 },
          teraType: ["Fairy", "Grass"],
          ability: ["Flash Fire"]
        },
        {
          species: "Ceruledge",
          weight: 65,
          moves: [
            ["Bitter Blade"],
            ["Close Combat", "Shadow Claw"],
            ["Shadow Sneak"],
            ["Destiny Bond", "Swords Dance"]
          ],
          item: ["Focus Sash"],
          nature: "Adamant",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Fighting", "Fire", "Normal"],
          ability: ["Weak Armor"]
        },
        {
          species: "Ceruledge",
          weight: 10,
          moves: [
            ["Bitter Blade"],
            ["Flare Blitz"],
            ["Shadow Sneak"],
            ["Tera Blast"]
          ],
          item: ["Choice Band"],
          nature: "Adamant",
          evs: { hp: 100, atk: 252, def: 156 },
          teraType: ["Fairy"],
          wantsTera: true,
          ability: ["Weak Armor"]
        }
      ]
    },
    chansey: {
      weight: 4,
      sets: [
        {
          species: "Chansey",
          weight: 70,
          moves: [
            ["Seismic Toss"],
            ["Shadow Ball"],
            ["Calm Mind"],
            ["Soft-Boiled"]
          ],
          item: ["Eviolite"],
          nature: "Bold",
          evs: { hp: 12, def: 252, spd: 244 },
          ivs: { atk: 0 },
          teraType: ["Dark", "Ghost"],
          ability: ["Natural Cure"]
        },
        {
          species: "Chansey",
          weight: 30,
          moves: [
            ["Seismic Toss"],
            ["Stealth Rock"],
            ["Thunder Wave"],
            ["Soft-Boiled"]
          ],
          item: ["Eviolite"],
          nature: "Bold",
          evs: { hp: 12, def: 252, spd: 244 },
          ivs: { atk: 0 },
          teraType: ["Dark", "Ghost"],
          ability: ["Natural Cure"]
        }
      ]
    },
    espathra: {
      weight: 4,
      sets: [
        {
          species: "Espathra",
          weight: 35,
          moves: [
            ["Calm Mind"],
            ["Stored Power"],
            ["Tera Blast"],
            ["Protect", "Roost", "Substitute"]
          ],
          item: ["Leftovers", "Lum Berry"],
          nature: "Bold",
          evs: { hp: 244, def: 252, spe: 12 },
          teraType: ["Fighting", "Fire"],
          wantsTera: true,
          ability: ["Speed Boost"]
        },
        {
          species: "Espathra",
          weight: 20,
          moves: [
            ["Calm Mind"],
            ["Stored Power"],
            ["Dazzling Gleam"],
            ["Protect", "Roost", "Substitute"]
          ],
          item: ["Leftovers", "Lum Berry"],
          nature: "Bold",
          evs: { hp: 244, def: 252, spe: 12 },
          teraType: ["Fairy", "Water"],
          ability: ["Speed Boost"]
        },
        {
          species: "Espathra",
          weight: 30,
          moves: [
            ["Lumina Crash"],
            ["Baton Pass"],
            ["Dazzling Gleam", "Protect", "Reflect"],
            ["Calm Mind", "Substitute"]
          ],
          item: ["Focus Sash", "Leftovers", "Sitrus Berry"],
          nature: "Timid",
          evs: { hp: 252, def: 4, spe: 252 },
          teraType: ["Ghost", "Normal", "Water"],
          ability: ["Speed Boost"]
        },
        {
          species: "Espathra",
          weight: 10,
          moves: [
            ["Lumina Crash"],
            ["Energy Ball"],
            ["Shadow Ball"],
            ["Baton Pass", "Hypnosis"]
          ],
          item: ["Focus Sash"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Ghost", "Grass", "Normal"],
          ability: ["Speed Boost"]
        },
        {
          species: "Espathra",
          weight: 5,
          moves: [
            ["Light Screen"],
            ["Reflect"],
            ["Lumina Crash", "Protect"],
            ["Baton Pass"]
          ],
          item: ["Light Clay"],
          nature: "Timid",
          evs: { hp: 252, spa: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Fairy"],
          ability: ["Speed Boost"]
        }
      ]
    },
    grimmsnarl: {
      weight: 4,
      sets: [
        {
          species: "Grimmsnarl",
          weight: 90,
          moves: [
            ["Reflect"],
            ["Light Screen"],
            ["Taunt", "Thunder Wave"],
            ["Parting Shot", "Spirit Break"]
          ],
          item: ["Light Clay"],
          nature: "Careful",
          evs: { hp: 248, def: 8, spd: 252 },
          teraType: ["Poison", "Steel"],
          ability: ["Prankster"]
        },
        {
          species: "Grimmsnarl",
          weight: 10,
          moves: [
            ["Play Rough", "Spirit Break"],
            ["Crunch", "Sucker Punch"],
            ["Hammer Arm", "Low Kick", "Taunt"],
            ["Thunder Wave"]
          ],
          item: ["Focus Sash"],
          nature: "Adamant",
          evs: { atk: 252, def: 4, spe: 252 },
          teraType: ["Dark", "Fairy", "Ghost"],
          ability: ["Prankster"]
        }
      ]
    },
    ironhands: {
      weight: 4,
      sets: [
        {
          species: "Iron Hands",
          weight: 70,
          moves: [
            ["Drain Punch"],
            ["Thunder Punch", "Wild Charge"],
            ["Earthquake", "Heavy Slam", "Ice Punch"],
            ["Fake Out", "Volt Switch"]
          ],
          item: ["Assault Vest"],
          nature: "Adamant",
          evs: { atk: 252, spd: 204, spe: 52 },
          teraType: ["Fairy", "Grass", "Ground", "Water"],
          ability: ["Quark Drive"]
        },
        {
          species: "Iron Hands",
          weight: 30,
          moves: [
            ["Drain Punch"],
            ["Thunder Punch"],
            ["Substitute"],
            ["Swords Dance"]
          ],
          item: ["Leftovers", "Punching Glove"],
          nature: "Impish",
          evs: { hp: 92, atk: 12, def: 172, spd: 212, spe: 20 },
          teraType: ["Fairy", "Grass", "Water"],
          ability: ["Quark Drive"]
        }
      ]
    },
    hydreigon: {
      weight: 4,
      sets: [
        {
          species: "Hydreigon",
          weight: 45,
          moves: [
            ["Dark Pulse"],
            ["Draco Meteor"],
            ["Flash Cannon"],
            ["Fire Blast", "Flamethrower", "U-turn"]
          ],
          item: ["Choice Scarf", "Choice Specs"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          teraType: ["Steel"],
          wantsTera: true,
          ability: ["Levitate"]
        },
        {
          species: "Hydreigon",
          weight: 25,
          moves: [
            ["Dark Pulse"],
            ["Draco Meteor"],
            ["Flash Cannon", "U-turn"],
            ["Fire Blast", "Flamethrower"]
          ],
          item: ["Choice Specs"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          teraType: ["Fire", "Poison"],
          wantsTera: true,
          ability: ["Levitate"]
        },
        {
          species: "Hydreigon",
          weight: 10,
          moves: [
            ["Stealth Rock"],
            ["Dark Pulse"],
            ["Taunt"],
            ["Draco Meteor", "Flash Cannon", "Thunder Wave"]
          ],
          item: ["Focus Sash"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          teraType: ["Poison", "Steel"],
          wantsTera: true,
          ability: ["Levitate"]
        },
        {
          species: "Hydreigon",
          weight: 20,
          moves: [
            ["Dark Pulse"],
            ["Flash Cannon"],
            ["Nasty Plot"],
            ["Draco Meteor", "Earth Power", "Flamethrower", "Substitute", "Taunt"]
          ],
          item: ["Leftovers", "Life Orb"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          teraType: ["Steel"],
          wantsTera: true,
          ability: ["Levitate"]
        }
      ]
    },
    kleavor: {
      weight: 4,
      sets: [
        {
          species: "Kleavor",
          weight: 28,
          moves: [
            ["Stone Axe"],
            ["Night Slash"],
            ["Feint", "Trailblaze"],
            ["Close Combat", "U-turn", "X-Scissor"]
          ],
          item: ["Focus Sash"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Grass", "Water"],
          ability: ["Sharpness"]
        },
        {
          species: "Kleavor",
          weight: 27,
          moves: [
            ["Stone Axe"],
            ["Night Slash"],
            ["Feint", "Trailblaze"],
            ["U-turn", "X-Scissor"]
          ],
          item: ["Focus Sash"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Bug", "Grass", "Water"],
          ability: ["Sharpness"]
        },
        {
          species: "Kleavor",
          weight: 5,
          moves: [
            ["Stone Axe"],
            ["Night Slash"],
            ["Feint", "Trailblaze"],
            ["Close Combat", "U-turn", "X-Scissor"]
          ],
          item: ["Assault Vest"],
          nature: "Adamant",
          evs: { hp: 140, atk: 52, def: 4, spd: 244, spe: 68 },
          teraType: ["Grass", "Water"],
          ability: ["Sharpness"]
        },
        {
          species: "Kleavor",
          weight: 5,
          moves: [
            ["Stone Axe"],
            ["Night Slash"],
            ["Feint", "Trailblaze"],
            ["U-turn", "X-Scissor"]
          ],
          item: ["Assault Vest"],
          nature: "Adamant",
          evs: { hp: 140, atk: 52, def: 4, spd: 244, spe: 68 },
          teraType: ["Bug", "Grass", "Water"],
          ability: ["Sharpness"]
        },
        {
          species: "Kleavor",
          weight: 18,
          moves: [
            ["Stone Axe"],
            ["U-turn"],
            ["Night Slash"],
            ["Close Combat", "X-Scissor"]
          ],
          item: ["Choice Scarf"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Grass"],
          ability: ["Sharpness"]
        },
        {
          species: "Kleavor",
          weight: 17,
          moves: [
            ["Stone Axe"],
            ["U-turn"],
            ["Night Slash"],
            ["X-Scissor"]
          ],
          item: ["Choice Scarf"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Bug", "Grass"],
          ability: ["Sharpness"]
        }
      ]
    },
    screamtail: {
      weight: 4,
      sets: [
        {
          species: "Scream Tail",
          weight: 80,
          moves: [
            ["Stealth Rock"],
            ["Thunder Wave", "Trick Room"],
            ["Encore", "Perish Song", "Roar"],
            ["Misty Explosion"]
          ],
          item: ["Booster Energy", "Mental Herb", "Sitrus Berry"],
          nature: "Calm",
          evs: { hp: 180, spd: 156, spe: 172 },
          teraType: ["Normal"],
          ability: ["Protosynthesis"]
        },
        {
          species: "Scream Tail",
          weight: 10,
          moves: [
            ["Reflect"],
            ["Light Screen"],
            ["Encore"],
            ["Dazzling Gleam", "Misty Explosion", "Perish Song", "Stealth Rock"]
          ],
          item: ["Light Clay", "Mental Herb"],
          nature: "Timid",
          evs: { hp: 252, spd: 4, spe: 252 },
          teraType: ["Normal"],
          ability: ["Protosynthesis"]
        },
        {
          species: "Scream Tail",
          weight: 5,
          moves: [
            ["Baton Pass"],
            ["Bulk Up", "Calm Mind"],
            ["Encore"],
            ["Dazzling Gleam", "Play Rough", "Substitute"]
          ],
          item: ["Mental Herb", "Sitrus Berry"],
          nature: "Careful",
          evs: { hp: 220, def: 220, spd: 68 },
          teraType: ["Normal"],
          ability: ["Protosynthesis"]
        },
        {
          species: "Scream Tail",
          weight: 5,
          moves: [
            ["Baton Pass"],
            ["Bulk Up", "Calm Mind"],
            ["Sing"],
            ["Play Rough", "Substitute"]
          ],
          item: ["Blunder Policy"],
          nature: "Careful",
          evs: { hp: 220, def: 220, spd: 68 },
          teraType: ["Normal"],
          ability: ["Protosynthesis"]
        }
      ]
    },
    milotic: {
      weight: 4,
      sets: [
        {
          species: "Milotic",
          weight: 67,
          moves: [
            ["Scald"],
            ["Recover"],
            ["Haze", "Mirror Coat"],
            ["Draining Kiss", "Ice Beam"]
          ],
          item: ["Flame Orb"],
          nature: "Bold",
          evs: { hp: 252, def: 252, spd: 4 },
          ivs: { atk: 0 },
          teraType: ["Fairy", "Fire"],
          ability: ["Marvel Scale"]
        },
        {
          species: "Milotic",
          weight: 33,
          moves: [
            ["Scald"],
            ["Recover"],
            ["Haze", "Mirror Coat"],
            ["Flip Turn"]
          ],
          item: ["Flame Orb"],
          nature: "Bold",
          evs: { hp: 252, def: 252, spd: 4 },
          teraType: ["Fairy", "Fire"],
          ability: ["Marvel Scale"]
        }
      ]
    },
    okidogi: {
      weight: 4,
      sets: [
        {
          species: "Okidogi",
          weight: 15,
          moves: [
            ["Bulk Up"],
            ["Drain Punch"],
            ["Knock Off"],
            ["Poison Jab"]
          ],
          item: ["Black Sludge", "Rocky Helmet"],
          nature: "Adamant",
          evs: { hp: 252, atk: 156, spe: 100 },
          teraType: ["Poison"],
          ability: ["Toxic Chain"]
        },
        {
          species: "Okidogi",
          weight: 25,
          moves: [
            ["Bulk Up"],
            ["Drain Punch"],
            ["Knock Off"],
            ["Ice Punch", "Poison Jab", "Substitute", "Taunt"]
          ],
          item: ["Leftovers", "Rocky Helmet"],
          nature: "Adamant",
          evs: { hp: 252, atk: 156, spe: 100 },
          teraType: ["Flying", "Water"],
          ability: ["Toxic Chain"]
        },
        {
          species: "Okidogi",
          weight: 35,
          moves: [
            ["Bulk Up"],
            ["Drain Punch"],
            ["Knock Off"],
            ["Ice Punch", "Poison Jab", "Substitute", "Taunt"]
          ],
          item: ["Black Sludge", "Leftovers", "Rocky Helmet"],
          nature: "Adamant",
          evs: { hp: 252, atk: 156, spe: 100 },
          teraType: ["Flying", "Poison", "Water"],
          ability: ["Guard Dog"]
        },
        {
          species: "Okidogi",
          weight: 15,
          moves: [
            ["Drain Punch"],
            ["Knock Off"],
            ["Poison Fang", "Poison Jab"],
            ["Ice Punch"]
          ],
          item: ["Assault Vest"],
          nature: "Adamant",
          evs: { hp: 252, atk: 252, spd: 4 },
          teraType: ["Flying", "Poison", "Water"],
          ability: ["Guard Dog"]
        },
        {
          species: "Okidogi",
          weight: 10,
          moves: [
            ["Drain Punch"],
            ["Knock Off"],
            ["Poison Fang", "Poison Jab"],
            ["Ice Punch"]
          ],
          item: ["Assault Vest"],
          nature: "Adamant",
          evs: { hp: 252, atk: 252, spd: 4 },
          teraType: ["Flying", "Poison", "Water"],
          ability: ["Toxic Chain"]
        }
      ]
    },
    arcaninehisui: {
      weight: 4,
      sets: [
        {
          species: "Arcanine-Hisui",
          weight: 45,
          moves: [
            ["Head Smash"],
            ["Flare Blitz"],
            ["Extreme Speed"],
            ["Stealth Rock", "Tera Blast"]
          ],
          item: ["Focus Sash"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Grass"],
          wantsTera: true,
          ability: ["Rock Head"]
        },
        {
          species: "Arcanine-Hisui",
          weight: 50,
          moves: [
            ["Head Smash"],
            ["Flare Blitz"],
            ["Extreme Speed"],
            ["Flame Charge", "Stealth Rock", "Wild Charge"]
          ],
          item: ["Choice Band", "Focus Sash"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Normal", "Rock"],
          wantsTera: true,
          ability: ["Rock Head"]
        },
        {
          species: "Arcanine-Hisui",
          weight: 5,
          moves: [
            ["Rock Blast"],
            ["Flare Blitz"],
            ["Extreme Speed"],
            ["Tera Blast"]
          ],
          item: ["Loaded Dice"],
          nature: "Adamant",
          evs: { hp: 212, atk: 252, def: 4, spd: 4, spe: 36 },
          teraType: ["Fairy"],
          wantsTera: true,
          ability: ["Intimidate"]
        }
      ]
    },
    snorlax: {
      weight: 4,
      sets: [
        {
          species: "Snorlax",
          weight: 60,
          moves: [
            ["Heavy Slam"],
            ["Earthquake", "Fissure"],
            ["Body Slam", "Protect"],
            ["Yawn"]
          ],
          item: ["Leftovers"],
          nature: "Careful",
          evs: { hp: 252, def: 92, spd: 164 },
          teraType: ["Fairy", "Ghost"],
          ability: ["Thick Fat"]
        },
        {
          species: "Snorlax",
          weight: 20,
          moves: [
            ["Heavy Slam"],
            ["Earthquake", "Heat Crash"],
            ["Body Slam", "Double-Edge"],
            ["Fissure"]
          ],
          item: ["Assault Vest"],
          nature: "Adamant",
          evs: { atk: 252, def: 252, spd: 4 },
          teraType: ["Ghost", "Steel"],
          ability: ["Thick Fat"]
        },
        {
          species: "Snorlax",
          weight: 20,
          moves: [
            ["Heavy Slam"],
            ["Earthquake", "Heat Crash"],
            ["Body Slam", "Double-Edge"],
            ["Fissure", "Tera Blast"]
          ],
          item: ["Assault Vest"],
          nature: "Adamant",
          evs: { atk: 252, def: 252, spd: 4 },
          teraType: ["Fairy"],
          ability: ["Thick Fat"]
        }
      ]
    },
    alomomola: {
      weight: 4,
      sets: [
        {
          species: "Alomomola",
          weight: 100,
          moves: [
            ["Scald"],
            ["Flip Turn"],
            ["Mirror Coat"],
            ["Icy Wind"]
          ],
          item: ["Assault Vest"],
          nature: "Sassy",
          evs: { hp: 4, def: 252, spd: 252 },
          teraType: ["Poison"],
          ability: ["Regenerator"]
        }
      ]
    },
    umbreon: {
      weight: 4,
      sets: [
        {
          species: "Umbreon",
          weight: 100,
          moves: [
            ["Foul Play"],
            ["Protect"],
            ["Wish"],
            ["Yawn"]
          ],
          item: ["Leftovers"],
          nature: "Bold",
          evs: { hp: 252, def: 252, spd: 4 },
          teraType: ["Fairy", "Poison"],
          ability: ["Inner Focus"]
        }
      ]
    },
    cloyster: {
      weight: 3,
      sets: [
        {
          species: "Cloyster",
          weight: 60,
          moves: [
            ["Shell Smash"],
            ["Icicle Spear"],
            ["Drill Run", "Ice Shard", "Tera Blast"],
            ["Rock Blast"]
          ],
          item: ["Focus Sash", "King's Rock"],
          nature: "Adamant",
          evs: { atk: 252, def: 4, spe: 252 },
          teraType: ["Ghost"],
          ability: ["Skill Link"]
        },
        {
          species: "Cloyster",
          weight: 15,
          moves: [
            ["Shell Smash"],
            ["Icicle Spear"],
            ["Tera Blast"],
            ["Rock Blast"]
          ],
          item: ["Focus Sash", "Life Orb", "Lum Berry"],
          nature: "Adamant",
          evs: { atk: 252, def: 4, spe: 252 },
          teraType: ["Electric"],
          wantsTera: true,
          ability: ["Skill Link"]
        },
        {
          species: "Cloyster",
          weight: 25,
          moves: [
            ["Shell Smash"],
            ["Icicle Spear"],
            ["Drill Run", "Ice Shard"],
            ["Rock Blast"]
          ],
          item: ["Focus Sash"],
          nature: "Adamant",
          evs: { atk: 252, def: 4, spe: 252 },
          teraType: ["Ice"],
          ability: ["Skill Link"]
        }
      ]
    },
    tinkaton: {
      weight: 3,
      sets: [
        {
          species: "Tinkaton",
          weight: 100,
          moves: [
            ["Gigaton Hammer", "Knock Off"],
            ["Encore"],
            ["Stealth Rock"],
            ["Thunder Wave"]
          ],
          item: ["Air Balloon"],
          nature: "Careful",
          evs: { hp: 244, atk: 4, def: 164, spd: 20, spe: 76 },
          teraType: ["Flying", "Ground", "Water"],
          ability: ["Mold Breaker"]
        }
      ]
    },
    fezandipiti: {
      weight: 3,
      sets: [
        {
          species: "Fezandipiti",
          weight: 50,
          moves: [
            ["Calm Mind", "Charm", "Heat Wave", "Tailwind", "Taunt"],
            ["Moonblast"],
            ["Roost"],
            ["U-turn"]
          ],
          item: ["Covert Cloak", "Leftovers", "Sitrus Berry"],
          nature: "Bold",
          evs: { hp: 252, def: 220, spe: 36 },
          teraType: ["Flying", "Water"],
          ability: ["Toxic Chain"]
        },
        {
          species: "Fezandipiti",
          weight: 50,
          moves: [
            ["Roost"],
            ["Taunt", "Toxic"],
            ["U-turn"],
            ["Play Rough"]
          ],
          item: ["Leftovers"],
          nature: "Careful",
          evs: { hp: 252, spd: 220, spe: 36 },
          teraType: ["Flying", "Water"],
          ability: ["Toxic Chain"]
        }
      ]
    },
    pelipper: {
      weight: 3,
      sets: [
        {
          species: "Pelipper",
          weight: 100,
          moves: [
            ["U-turn"],
            ["Hydro Pump"],
            ["Ice Beam"],
            ["Hurricane"]
          ],
          item: ["Choice Specs"],
          nature: "Modest",
          evs: { spa: 252, spd: 4, spe: 252 },
          teraType: ["Flying", "Grass", "Ground", "Steel", "Water"],
          ability: ["Drizzle"]
        }
      ]
    },
    rotomheat: {
      weight: 3,
      sets: [
        {
          species: "Rotom-Heat",
          weight: 20,
          moves: [
            ["Volt Switch"],
            ["Overheat"],
            ["Trick"],
            ["Thunderbolt"]
          ],
          item: ["Choice Scarf", "Choice Specs"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          teraType: ["Electric"],
          ability: ["Levitate"]
        },
        {
          species: "Rotom-Heat",
          weight: 20,
          moves: [
            ["Volt Switch"],
            ["Overheat"],
            ["Trick"],
            ["Tera Blast"]
          ],
          item: ["Choice Scarf", "Choice Specs"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          teraType: ["Fairy"],
          wantsTera: true,
          ability: ["Levitate"]
        },
        {
          species: "Rotom-Heat",
          weight: 60,
          moves: [
            ["Volt Switch"],
            ["Foul Play"],
            ["Overheat"],
            ["Thunder Wave", "Will-O-Wisp"]
          ],
          item: ["Rocky Helmet", "Sitrus Berry"],
          nature: "Bold",
          evs: { hp: 252, def: 252, spd: 4 },
          teraType: ["Fairy", "Ghost", "Steel"],
          ability: ["Levitate"]
        }
      ]
    },
    taurospaldeablaze: {
      weight: 3,
      sets: [
        {
          species: "Tauros-Paldea-Blaze",
          weight: 50,
          moves: [
            ["Raging Bull"],
            ["Body Press"],
            ["Will-O-Wisp"],
            ["Bulk Up", "Earthquake", "Rock Tomb"]
          ],
          item: ["Rocky Helmet", "Sitrus Berry"],
          nature: "Impish",
          evs: { hp: 252, def: 252, spd: 4 },
          teraType: ["Fairy"],
          ability: ["Intimidate"]
        },
        {
          species: "Tauros-Paldea-Blaze",
          weight: 50,
          moves: [
            ["Close Combat"],
            ["Flare Blitz", "Raging Bull"],
            ["Flame Charge", "Rock Tomb"],
            ["Bulk Up", "Earthquake", "Tera Blast"]
          ],
          item: ["Eject Pack"],
          nature: "Jolly",
          evs: { hp: 4, atk: 252, spe: 252 },
          teraType: ["Fairy", "Grass"],
          wantsTera: true,
          ability: ["Intimidate"]
        }
      ]
    },
    torkoal: {
      weight: 3,
      sets: [
        {
          species: "Torkoal",
          weight: 100,
          moves: [
            ["Overheat"],
            ["Yawn"],
            ["Stealth Rock"],
            ["Body Press", "Clear Smog", "Fissure", "Solar Beam"]
          ],
          item: ["Eject Pack"],
          nature: "Bold",
          evs: { hp: 252, def: 252, spd: 4 },
          teraType: ["Fire", "Grass"],
          ability: ["Drought"]
        }
      ]
    },
    amoonguss: {
      weight: 3,
      sets: [
        {
          species: "Amoonguss",
          weight: 45,
          moves: [
            ["Spore"],
            ["Leaf Storm"],
            ["Foul Play"],
            ["Clear Smog", "Sludge Bomb"]
          ],
          item: ["Eject Pack"],
          nature: "Bold",
          evs: { hp: 252, def: 156, spd: 100 },
          ivs: { atk: 0 },
          teraType: ["Water"],
          ability: ["Regenerator"]
        },
        {
          species: "Amoonguss",
          weight: 35,
          moves: [
            ["Spore"],
            ["Clear Smog", "Giga Drain", "Sludge Bomb"],
            ["Foul Play", "Stomping Tantrum"],
            ["Synthesis"]
          ],
          item: ["Leftovers", "Rocky Helmet"],
          nature: "Relaxed",
          evs: { hp: 252, def: 156, spd: 100 },
          teraType: ["Fairy", "Water"],
          ability: ["Regenerator"]
        },
        {
          species: "Amoonguss",
          weight: 20,
          moves: [
            ["Spore"],
            ["Clear Smog", "Giga Drain", "Sludge Bomb"],
            ["Foul Play", "Stomping Tantrum"],
            ["Synthesis"]
          ],
          item: ["Black Sludge"],
          nature: "Relaxed",
          evs: { hp: 252, def: 156, spd: 100 },
          teraType: ["Poison"],
          ability: ["Regenerator"]
        }
      ]
    },
    greattusk: {
      weight: 3,
      sets: [
        {
          species: "Great Tusk",
          weight: 45,
          moves: [
            ["Close Combat"],
            ["Earthquake", "Headlong Rush"],
            ["Ice Spinner"],
            ["Knock Off", "Rapid Spin", "Stealth Rock"]
          ],
          item: ["Booster Energy", "Focus Sash"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Ground", "Steel", "Water"],
          ability: ["Protosynthesis"]
        },
        {
          species: "Great Tusk",
          weight: 15,
          moves: [
            ["Close Combat"],
            ["Earthquake", "Headlong Rush"],
            ["Ice Spinner"],
            ["Knock Off", "Rapid Spin"]
          ],
          item: ["Assault Vest"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Ground", "Steel", "Water"],
          ability: ["Protosynthesis"]
        },
        {
          species: "Great Tusk",
          weight: 25,
          moves: [
            ["Bulk Up"],
            ["Earthquake"],
            ["Ice Spinner"],
            ["Substitute", "Taunt"]
          ],
          item: ["Booster Energy", "Leftovers"],
          nature: "Jolly",
          evs: { hp: 4, spd: 252, spe: 252 },
          teraType: ["Steel", "Water"],
          ability: ["Protosynthesis"]
        },
        {
          species: "Great Tusk",
          weight: 15,
          moves: [
            ["Close Combat"],
            ["Earthquake", "Headlong Rush"],
            ["Ice Spinner"],
            ["Knock Off"]
          ],
          item: ["Choice Band", "Choice Scarf"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Fighting", "Ground", "Steel"],
          ability: ["Protosynthesis"]
        }
      ]
    },
    thundurustherian: {
      weight: 3,
      sets: [
        {
          species: "Thundurus-Therian",
          weight: 45,
          moves: [
            ["Volt Switch"],
            ["Thunderbolt"],
            ["Tera Blast"],
            ["Focus Blast", "Grass Knot", "Sludge Bomb"]
          ],
          item: ["Choice Scarf"],
          nature: "Timid",
          evs: { hp: 4, spa: 252, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Flying", "Ice"],
          wantsTera: true,
          ability: ["Volt Absorb"]
        },
        {
          species: "Thundurus-Therian",
          weight: 45,
          moves: [
            ["Volt Switch"],
            ["Thunderbolt"],
            ["Tera Blast"],
            ["Focus Blast", "Grass Knot", "Sludge Bomb"]
          ],
          item: ["Assault Vest", "Choice Specs"],
          nature: "Timid",
          evs: { hp: 4, spa: 252, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Flying", "Ice", "Water"],
          wantsTera: true,
          ability: ["Volt Absorb"]
        },
        {
          species: "Thundurus-Therian",
          weight: 10,
          moves: [
            ["Nasty Plot"],
            ["Thunderbolt"],
            ["Grass Knot", "Substitute"],
            ["Tera Blast"]
          ],
          item: ["Life Orb", "Sitrus Berry"],
          nature: "Timid",
          evs: { def: 4, spa: 252, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Flying", "Ice", "Water"],
          wantsTera: true,
          ability: ["Volt Absorb"]
        }
      ]
    },
    arcanine: {
      weight: 3,
      sets: [
        {
          species: "Arcanine",
          weight: 50,
          moves: [
            ["Flare Blitz"],
            ["Morning Sun"],
            ["Will-O-Wisp"],
            ["Extreme Speed"]
          ],
          item: ["Heavy-Duty Boots", "Leftovers", "Rocky Helmet"],
          nature: "Impish",
          evs: { hp: 236, def: 212, spe: 60 },
          teraType: ["Normal"],
          ability: ["Intimidate"]
        },
        {
          species: "Arcanine",
          weight: 50,
          moves: [
            ["Flare Blitz", "Roar"],
            ["Morning Sun"],
            ["Will-O-Wisp"],
            ["Bulldoze", "Extreme Speed", "Snarl"]
          ],
          item: ["Heavy-Duty Boots", "Leftovers", "Rocky Helmet"],
          nature: "Impish",
          evs: { hp: 236, def: 212, spe: 60 },
          teraType: ["Fairy", "Grass"],
          ability: ["Intimidate"]
        }
      ]
    },
    gyarados: {
      weight: 3,
      sets: [
        {
          species: "Gyarados",
          weight: 50,
          moves: [
            ["Taunt"],
            ["Iron Head", "Waterfall"],
            ["Earthquake"],
            ["Thunder Wave"]
          ],
          item: ["Rocky Helmet"],
          nature: "Impish",
          evs: { hp: 228, atk: 4, def: 220, spd: 4, spe: 52 },
          teraType: ["Ground"],
          ability: ["Intimidate"]
        },
        {
          species: "Gyarados",
          weight: 50,
          moves: [
            ["Taunt"],
            ["Iron Head", "Waterfall"],
            ["Earthquake", "Ice Fang"],
            ["Thunder Wave"]
          ],
          item: ["Rocky Helmet"],
          nature: "Impish",
          evs: { hp: 228, atk: 4, def: 220, spd: 4, spe: 52 },
          teraType: ["Steel"],
          ability: ["Intimidate"]
        }
      ]
    },
    pawmot: {
      weight: 3,
      sets: [
        {
          species: "Pawmot",
          weight: 33,
          moves: [
            ["Double Shock"],
            ["Close Combat"],
            ["Ice Punch", "Mach Punch", "Nuzzle"],
            ["Encore", "Revival Blessing"]
          ],
          item: ["Focus Sash"],
          nature: "Jolly",
          evs: { hp: 4, atk: 252, spe: 252 },
          teraType: ["Electric"],
          ability: ["Iron Fist"]
        },
        {
          species: "Pawmot",
          weight: 33,
          moves: [
            ["Double Shock"],
            ["Close Combat"],
            ["Ice Punch", "Mach Punch", "Nuzzle"],
            ["Encore", "Revival Blessing"]
          ],
          item: ["Focus Sash"],
          nature: "Jolly",
          evs: { hp: 4, atk: 252, spe: 252 },
          teraType: ["Electric"],
          ability: ["Volt Absorb"]
        },
        {
          species: "Pawmot",
          weight: 33,
          moves: [
            ["Double Shock"],
            ["Close Combat"],
            ["Ice Punch", "Mach Punch", "Nuzzle"],
            ["Encore", "Revival Blessing"]
          ],
          item: ["Focus Sash"],
          nature: "Jolly",
          evs: { hp: 4, atk: 252, spe: 252 },
          teraType: ["Electric"],
          ability: ["Natural Cure"]
        }
      ]
    },
    zoroarkhisui: {
      weight: 3,
      sets: [
        {
          species: "Zoroark-Hisui",
          weight: 60,
          moves: [
            ["Bitter Malice"],
            ["Will-O-Wisp"],
            ["Shadow Sneak"],
            ["Curse", "Tera Blast"]
          ],
          item: ["Focus Sash"],
          nature: "Timid",
          evs: { def: 4, spa: 252, spe: 252 },
          teraType: ["Fairy", "Fighting"],
          wantsTera: true,
          ability: ["Illusion"]
        },
        {
          species: "Zoroark-Hisui",
          weight: 40,
          moves: [
            ["Bitter Malice"],
            ["Curse"],
            ["Will-O-Wisp"],
            ["Trick"]
          ],
          item: ["Choice Scarf"],
          nature: "Timid",
          evs: { hp: 252, spa: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Fairy", "Ghost"],
          ability: ["Illusion"]
        }
      ]
    },
    drifblim: {
      weight: 2,
      sets: [
        {
          species: "Drifblim",
          weight: 100,
          moves: [
            ["Minimize"],
            ["Substitute"],
            ["Baton Pass"],
            ["Air Slash", "Shadow Ball", "Stockpile", "Strength Sap", "Will-O-Wisp"]
          ],
          item: ["Kee Berry", "Sitrus Berry"],
          nature: "Timid",
          evs: { def: 164, spd: 92, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Dark", "Normal", "Water"],
          ability: ["Unburden"]
        }
      ]
    },
    hatterene: {
      weight: 2,
      sets: [
        {
          species: "Hatterene",
          weight: 30,
          moves: [
            ["Draining Kiss"],
            ["Psyshock"],
            ["Calm Mind"],
            ["Baton Pass", "Mystical Fire", "Trick Room"]
          ],
          item: ["Sitrus Berry", "Wiki Berry"],
          nature: "Bold",
          evs: { hp: 244, def: 252, spa: 12 },
          ivs: { atk: 0 },
          teraType: ["Fire", "Normal", "Water"],
          ability: ["Magic Bounce"]
        },
        {
          species: "Hatterene",
          weight: 35,
          moves: [
            ["Dazzling Gleam", "Draining Kiss"],
            ["Psyshock"],
            ["Calm Mind", "Healing Wish"],
            ["Trick Room"]
          ],
          item: ["Sitrus Berry", "Wiki Berry"],
          nature: "Bold",
          evs: { hp: 244, def: 252, spa: 12 },
          ivs: { atk: 0 },
          teraType: ["Normal", "Water"],
          ability: ["Magic Bounce"]
        },
        {
          species: "Hatterene",
          weight: 35,
          moves: [
            ["Dazzling Gleam"],
            ["Psyshock"],
            ["Calm Mind", "Healing Wish"],
            ["Trick Room"]
          ],
          item: ["Focus Sash"],
          nature: "Quiet",
          evs: { hp: 252, def: 4, spa: 252 },
          ivs: { atk: 0 },
          teraType: ["Fairy", "Normal", "Water"],
          ability: ["Magic Bounce"]
        }
      ]
    },
    orthworm: {
      weight: 2,
      sets: [
        {
          species: "Orthworm",
          weight: 60,
          moves: [
            ["Iron Defense"],
            ["Body Press"],
            ["Iron Head", "Stealth Rock"],
            ["Shed Tail"]
          ],
          item: ["Rocky Helmet", "Sitrus Berry"],
          nature: "Impish",
          evs: { hp: 252, def: 252, spd: 4 },
          teraType: ["Fairy", "Ghost", "Poison"],
          ability: ["Earth Eater"]
        },
        {
          species: "Orthworm",
          weight: 40,
          moves: [
            ["Iron Defense"],
            ["Body Press"],
            ["Iron Head", "Stealth Rock"],
            ["Rest"]
          ],
          item: ["Chesto Berry", "Rocky Helmet"],
          nature: "Impish",
          evs: { hp: 252, def: 252, spd: 4 },
          teraType: ["Fairy", "Ghost", "Poison"],
          ability: ["Earth Eater"]
        }
      ]
    },
    sandyshocks: {
      weight: 2,
      sets: [
        {
          species: "Sandy Shocks",
          weight: 10,
          moves: [
            ["Stealth Rock"],
            ["Thunderbolt"],
            ["Earth Power"],
            ["Mirror Coat", "Thunder Wave"]
          ],
          item: ["Focus Sash"],
          nature: "Timid",
          evs: { hp: 4, spa: 252, spe: 252 },
          teraType: ["Electric", "Ground"],
          ability: ["Protosynthesis"]
        },
        {
          species: "Sandy Shocks",
          weight: 10,
          moves: [
            ["Mirror Coat", "Stealth Rock"],
            ["Thunderbolt"],
            ["Earth Power"],
            ["Tera Blast"]
          ],
          item: ["Focus Sash"],
          nature: "Timid",
          evs: { hp: 4, spa: 252, spe: 252 },
          teraType: ["Ice"],
          wantsTera: true,
          ability: ["Protosynthesis"]
        },
        {
          species: "Sandy Shocks",
          weight: 60,
          moves: [
            ["Thunderbolt"],
            ["Earth Power"],
            ["Tera Blast"],
            ["Flash Cannon", "Stealth Rock"]
          ],
          item: ["Booster Energy"],
          nature: "Timid",
          evs: { hp: 52, spa: 204, spe: 252 },
          teraType: ["Fairy", "Ice"],
          wantsTera: true,
          ability: ["Protosynthesis"]
        },
        {
          species: "Sandy Shocks",
          weight: 10,
          moves: [
            ["Thunderbolt"],
            ["Volt Switch"],
            ["Earth Power"],
            ["Tera Blast"]
          ],
          item: ["Choice Scarf"],
          nature: "Timid",
          evs: { hp: 4, spa: 252, spe: 252 },
          teraType: ["Fairy", "Ice"],
          wantsTera: true,
          ability: ["Protosynthesis"]
        },
        {
          species: "Sandy Shocks",
          weight: 10,
          moves: [
            ["Mirror Coat", "Thunderbolt"],
            ["Volt Switch"],
            ["Earth Power"],
            ["Tera Blast"]
          ],
          item: ["Assault Vest"],
          nature: "Timid",
          evs: { hp: 4, spa: 252, spe: 252 },
          teraType: ["Fairy", "Ice"],
          wantsTera: true,
          ability: ["Protosynthesis"]
        }
      ]
    },
    greninja: {
      weight: 2,
      sets: [
        {
          species: "Greninja",
          weight: 50,
          moves: [
            ["Ice Beam"],
            ["Dark Pulse", "Grass Knot"],
            ["Water Shuriken"],
            ["Counter", "Toxic Spikes"]
          ],
          item: ["Focus Sash"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Ghost", "Water"],
          ability: ["Protean"]
        },
        {
          species: "Greninja",
          weight: 50,
          moves: [
            ["Ice Beam"],
            ["Dark Pulse", "Grass Knot"],
            ["Water Shuriken"],
            ["Counter", "Toxic Spikes"]
          ],
          item: ["Focus Sash"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Ghost", "Water"],
          ability: ["Torrent"]
        }
      ]
    },
    palafin: {
      weight: 2,
      sets: [
        {
          species: "Palafin",
          weight: 40,
          moves: [
            ["Jet Punch"],
            ["Wave Crash"],
            ["Flip Turn"],
            ["Close Combat", "Drain Punch", "Ice Punch"]
          ],
          item: ["Choice Band"],
          nature: "Jolly",
          evs: { hp: 4, atk: 252, spe: 252 },
          teraType: ["Water"],
          ability: ["Zero to Hero"]
        },
        {
          species: "Palafin",
          weight: 30,
          moves: [
            ["Jet Punch"],
            ["Wave Crash"],
            ["Flip Turn"],
            ["Close Combat", "Drain Punch"]
          ],
          item: ["Assault Vest", "Choice Scarf", "Mystic Water"],
          nature: "Jolly",
          evs: { hp: 4, atk: 252, spe: 252 },
          teraType: ["Fighting", "Water"],
          ability: ["Zero to Hero"]
        },
        {
          species: "Palafin",
          weight: 20,
          moves: [
            ["Bulk Up"],
            ["Jet Punch"],
            ["Drain Punch"],
            ["Substitute", "Taunt"]
          ],
          item: ["Leftovers", "Punching Glove"],
          nature: "Jolly",
          evs: { hp: 252, def: 4, spe: 252 },
          teraType: ["Fighting", "Water"],
          ability: ["Zero to Hero"]
        },
        {
          species: "Palafin",
          weight: 10,
          moves: [
            ["Bulk Up"],
            ["Jet Punch"],
            ["Tera Blast"],
            ["Substitute", "Taunt"]
          ],
          item: ["Leftovers"],
          nature: "Jolly",
          evs: { hp: 252, def: 4, spe: 252 },
          teraType: ["Fairy"],
          wantsTera: true,
          ability: ["Zero to Hero"]
        }
      ]
    },
    regieleki: {
      weight: 2,
      sets: [
        {
          species: "Regieleki",
          weight: 25,
          moves: [
            ["Thunderbolt"],
            ["Tera Blast"],
            ["Extreme Speed"],
            ["Thunder Wave", "Volt Switch", "Wild Charge"]
          ],
          item: ["Focus Sash", "Life Orb"],
          nature: "Hasty",
          evs: { atk: 4, spa: 252, spe: 252 },
          teraType: ["Ice"],
          wantsTera: true,
          ability: ["Transistor"]
        },
        {
          species: "Regieleki",
          weight: 20,
          moves: [
            ["Thunderbolt"],
            ["Volt Switch"],
            ["Extreme Speed"],
            ["Wild Charge"]
          ],
          item: ["Life Orb"],
          nature: "Hasty",
          evs: { atk: 4, spa: 252, spe: 252 },
          teraType: ["Electric"],
          ability: ["Transistor"]
        },
        {
          species: "Regieleki",
          weight: 25,
          moves: [
            ["Thunderbolt"],
            ["Tera Blast"],
            ["Volt Switch"],
            ["Extreme Speed", "Thunder Cage"]
          ],
          item: ["Choice Specs"],
          nature: "Timid",
          evs: { hp: 4, spa: 252, spe: 252 },
          teraType: ["Ice"],
          wantsTera: true,
          ability: ["Transistor"]
        },
        {
          species: "Regieleki",
          weight: 15,
          moves: [
            ["Thunderbolt", "Thunder Cage"],
            ["Reflect"],
            ["Light Screen"],
            ["Tera Blast"]
          ],
          item: ["Light Clay"],
          nature: "Timid",
          evs: { hp: 252, spa: 4, spe: 252 },
          teraType: ["Ice"],
          wantsTera: true,
          ability: ["Transistor"]
        },
        {
          species: "Regieleki",
          weight: 15,
          moves: [
            ["Thunderbolt", "Thunder Cage"],
            ["Reflect"],
            ["Light Screen"],
            ["Explosion", "Thunder Wave"]
          ],
          item: ["Light Clay"],
          nature: "Timid",
          evs: { hp: 252, spa: 4, spe: 252 },
          teraType: ["Ghost", "Normal"],
          ability: ["Transistor"]
        }
      ]
    },
    avalugg: {
      weight: 2,
      sets: [
        {
          species: "Avalugg",
          weight: 100,
          moves: [
            ["Iron Defense"],
            ["Body Press"],
            ["Recover"],
            ["Avalanche", "Icicle Crash"]
          ],
          item: ["Heavy-Duty Boots", "Rocky Helmet"],
          nature: "Impish",
          evs: { hp: 252, def: 252, spd: 4 },
          teraType: ["Fighting"],
          wantsTera: true,
          ability: ["Sturdy"]
        }
      ]
    },
    landorus: {
      weight: 2,
      sets: [
        {
          species: "Landorus",
          weight: 45,
          moves: [
            ["Earth Power"],
            ["Sludge Bomb"],
            ["Focus Blast", "Psychic"],
            ["Nasty Plot", "Substitute"]
          ],
          item: ["Life Orb"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Poison", "Steel", "Water"],
          wantsTera: true,
          ability: ["Sheer Force"]
        },
        {
          species: "Landorus",
          weight: 55,
          moves: [
            ["Earth Power"],
            ["Sludge Bomb"],
            ["Focus Blast", "Nasty Plot", "Substitute"],
            ["Tera Blast"]
          ],
          item: ["Life Orb"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Flying", "Ice"],
          wantsTera: true,
          ability: ["Sheer Force"]
        }
      ]
    },
    quaquaval: {
      weight: 2,
      sets: [
        {
          species: "Quaquaval",
          weight: 65,
          moves: [
            ["Aqua Step"],
            ["Close Combat"],
            ["Aqua Jet"],
            ["Encore", "Ice Spinner", "Swords Dance"]
          ],
          item: ["Focus Sash", "Mystic Water"],
          nature: "Jolly",
          evs: { hp: 4, atk: 252, spe: 252 },
          teraType: ["Steel", "Water"],
          ability: ["Moxie"]
        },
        {
          species: "Quaquaval",
          weight: 10,
          moves: [
            ["Aqua Step"],
            ["Close Combat"],
            ["Aqua Jet"],
            ["Tera Blast"]
          ],
          item: ["Focus Sash", "Mystic Water"],
          nature: "Jolly",
          evs: { hp: 4, atk: 252, spe: 252 },
          teraType: ["Electric", "Steel"],
          wantsTera: true,
          ability: ["Moxie"]
        },
        {
          species: "Quaquaval",
          weight: 25,
          moves: [
            ["Aqua Step"],
            ["Roost"],
            ["Bulk Up"],
            ["Encore", "Substitute", "Taunt"]
          ],
          item: ["Covert Cloak", "Leftovers", "Rocky Helmet"],
          nature: "Jolly",
          evs: { hp: 252, spd: 156, spe: 100 },
          teraType: ["Steel"],
          ability: ["Moxie"]
        }
      ]
    },
    articuno: {
      weight: 1,
      sets: [
        {
          species: "Articuno",
          weight: 100,
          moves: [
            ["Substitute"],
            ["Freeze-Dry", "Protect"],
            ["Roost"],
            ["Sheer Cold"]
          ],
          item: ["Leftovers"],
          nature: "Bold",
          evs: { hp: 220, def: 228, spe: 60 },
          ivs: { atk: 0 },
          teraType: ["Ghost", "Steel"],
          ability: ["Pressure"]
        }
      ]
    },
    haxorus: {
      weight: 1,
      sets: [
        {
          species: "Haxorus",
          weight: 65,
          moves: [
            ["Dragon Dance"],
            ["Iron Head"],
            ["Outrage"],
            ["Earthquake"]
          ],
          item: ["Focus Sash", "Life Orb", "Lum Berry"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Steel"],
          wantsTera: true,
          ability: ["Mold Breaker"]
        },
        {
          species: "Haxorus",
          weight: 10,
          moves: [
            ["Dragon Dance"],
            ["Tera Blast"],
            ["Outrage"],
            ["Earthquake"]
          ],
          item: ["Focus Sash", "Life Orb", "Lum Berry"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Electric"],
          wantsTera: true,
          ability: ["Mold Breaker"]
        },
        {
          species: "Haxorus",
          weight: 25,
          moves: [
            ["Scale Shot"],
            ["Iron Head"],
            ["Earthquake"],
            ["Dragon Dance", "Swords Dance"]
          ],
          item: ["Loaded Dice"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Steel"],
          wantsTera: true,
          ability: ["Mold Breaker"]
        }
      ]
    },
    lucario: {
      weight: 1,
      sets: [
        {
          species: "Lucario",
          weight: 80,
          moves: [
            ["Extreme Speed"],
            ["Close Combat"],
            ["Bullet Punch"],
            ["Counter", "Earthquake", "Swords Dance"]
          ],
          item: ["Focus Sash", "Life Orb"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Normal", "Steel"],
          ability: ["Inner Focus"]
        },
        {
          species: "Lucario",
          weight: 20,
          moves: [
            ["Vacuum Wave"],
            ["Aura Sphere"],
            ["Steel Beam"],
            ["Dark Pulse"]
          ],
          item: ["Focus Sash", "Life Orb"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          teraType: ["Dark", "Fighting", "Steel"],
          ability: ["Inner Focus"]
        }
      ]
    },
    mesprit: {
      weight: 1,
      sets: [
        {
          species: "Mesprit",
          weight: 100,
          moves: [
            ["Dazzling Gleam"],
            ["Trick Room"],
            ["Healing Wish"],
            ["Encore"]
          ],
          item: ["Sitrus Berry"],
          nature: "Bold",
          evs: { hp: 252, def: 252, spa: 4 },
          ivs: { atk: 0 },
          teraType: ["Fairy"],
          ability: ["Levitate"]
        }
      ]
    },
    moltresgalar: {
      weight: 1,
      sets: [
        {
          species: "Moltres-Galar",
          weight: 100,
          moves: [
            ["Fiery Wrath"],
            ["Air Slash", "Hurricane"],
            ["Nasty Plot"],
            ["Agility"]
          ],
          item: ["Sitrus Berry", "Weakness Policy"],
          nature: "Timid",
          evs: { spa: 252, spd: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Dark", "Flying", "Steel"],
          ability: ["Berserk"]
        }
      ]
    },
    sableye: {
      weight: 1,
      sets: [
        {
          species: "Sableye",
          weight: 30,
          moves: [
            ["Foul Play", "Knock Off"],
            ["Encore"],
            ["Disable", "Metal Burst"],
            ["Thunder Wave", "Will-O-Wisp"]
          ],
          item: ["Focus Sash"],
          nature: "Adamant",
          evs: { hp: 252, atk: 252, spd: 4 },
          teraType: ["Poison", "Steel"],
          ability: ["Prankster"]
        },
        {
          species: "Sableye",
          weight: 30,
          moves: [
            ["Substitute"],
            ["Encore"],
            ["Disable"],
            ["Night Shade"]
          ],
          item: ["Leftovers"],
          nature: "Bold",
          evs: { hp: 252, def: 252, spd: 4 },
          ivs: { atk: 0 },
          teraType: ["Poison", "Steel"],
          ability: ["Prankster"]
        },
        {
          species: "Sableye",
          weight: 20,
          moves: [
            ["Reflect"],
            ["Light Screen"],
            ["Encore", "Taunt", "Will-O-Wisp"],
            ["Foul Play"]
          ],
          item: ["Light Clay"],
          nature: "Bold",
          evs: { hp: 252, def: 252, spd: 4 },
          ivs: { atk: 0 },
          teraType: ["Poison", "Steel"],
          ability: ["Prankster"]
        },
        {
          species: "Sableye",
          weight: 20,
          moves: [
            ["Reflect"],
            ["Light Screen"],
            ["Encore", "Taunt", "Will-O-Wisp"],
            ["Knock Off"]
          ],
          item: ["Light Clay"],
          nature: "Impish",
          evs: { hp: 252, def: 252, spd: 4 },
          teraType: ["Poison", "Steel"],
          ability: ["Prankster"]
        }
      ]
    },
    uxie: {
      weight: 1,
      sets: [
        {
          species: "Uxie",
          weight: 100,
          moves: [
            ["U-turn"],
            ["Yawn"],
            ["Encore"],
            ["Stealth Rock"]
          ],
          item: ["Sitrus Berry"],
          nature: "Impish",
          evs: { hp: 244, def: 252, spd: 12 },
          teraType: ["Fairy"],
          ability: ["Levitate"]
        }
      ]
    },
    brutebonnet: {
      weight: 1,
      sets: [
        {
          species: "Brute Bonnet",
          weight: 85,
          moves: [
            ["Spore"],
            ["Trailblaze"],
            ["Crunch", "Tera Blast"],
            ["Substitute"]
          ],
          item: ["Leftovers"],
          nature: "Jolly",
          evs: { hp: 52, atk: 204, spe: 252 },
          teraType: ["Fire", "Water"],
          wantsTera: true,
          ability: ["Protosynthesis"]
        },
        {
          species: "Brute Bonnet",
          weight: 15,
          moves: [
            ["Spore"],
            ["Sucker Punch"],
            ["Bullet Seed"],
            ["Substitute", "Tera Blast"]
          ],
          item: ["Loaded Dice"],
          nature: "Adamant",
          evs: { hp: 252, atk: 252, spd: 4 },
          teraType: ["Fire", "Water"],
          wantsTera: true,
          ability: ["Protosynthesis"]
        }
      ]
    },
    samurotthisui: {
      weight: 1,
      sets: [
        {
          species: "Samurott-Hisui",
          weight: 70,
          moves: [
            ["Ceaseless Edge"],
            ["Aqua Cutter", "Razor Shell"],
            ["Aqua Jet", "Sucker Punch"],
            ["Encore", "Sacred Sword"]
          ],
          item: ["Focus Sash"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Dark", "Ghost", "Water"],
          ability: ["Sharpness"]
        },
        {
          species: "Samurott-Hisui",
          weight: 15,
          moves: [
            ["Ceaseless Edge"],
            ["Aqua Cutter", "Razor Shell"],
            ["Aqua Jet", "Sucker Punch"],
            ["Sacred Sword"]
          ],
          item: ["Assault Vest"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Water"],
          ability: ["Sharpness"]
        },
        {
          species: "Samurott-Hisui",
          weight: 15,
          moves: [
            ["Ceaseless Edge"],
            ["Aqua Cutter", "Razor Shell"],
            ["Aqua Jet", "Sucker Punch"],
            ["Tera Blast"]
          ],
          item: ["Assault Vest"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Fairy"],
          ability: ["Sharpness"]
        }
      ]
    },
    slowkinggalar: {
      weight: 1,
      sets: [
        {
          species: "Slowking-Galar",
          weight: 60,
          moves: [
            ["Flamethrower"],
            ["Grass Knot"],
            ["Eerie Spell", "Psychic"],
            ["Sludge Bomb"]
          ],
          item: ["Assault Vest"],
          nature: "Modest",
          evs: { hp: 252, spa: 252, spd: 4 },
          ivs: { atk: 0 },
          teraType: ["Normal", "Poison"],
          ability: ["Regenerator"]
        },
        {
          species: "Slowking-Galar",
          weight: 40,
          moves: [
            ["Eerie Spell", "Sludge Bomb"],
            ["Toxic", "Yawn"],
            ["Slack Off", "Trick Room"],
            ["Chilly Reception"]
          ],
          item: ["Black Sludge"],
          nature: "Relaxed",
          evs: { hp: 244, def: 252, spd: 12 },
          ivs: { atk: 0 },
          teraType: ["Poison"],
          ability: ["Regenerator"]
        }
      ]
    },
    basculegionf: {
      weight: 1,
      sets: [
        {
          species: "Basculegion-F",
          weight: 70,
          moves: [
            ["Shadow Ball"],
            ["Aqua Jet"],
            ["Hydro Pump", "Surf"],
            ["Endeavor"]
          ],
          gender: "F",
          item: ["Focus Sash"],
          nature: "Rash",
          evs: { atk: 4, spa: 252, spe: 252 },
          teraType: ["Water"],
          ability: ["Adaptability"]
        },
        {
          species: "Basculegion-F",
          weight: 30,
          moves: [
            ["Shadow Ball"],
            ["Aqua Jet"],
            ["Hydro Pump", "Surf"],
            ["Endeavor", "Tera Blast"]
          ],
          gender: "F",
          item: ["Focus Sash"],
          nature: "Rash",
          evs: { atk: 4, spa: 252, spe: 252 },
          teraType: ["Fairy"],
          wantsTera: true,
          ability: ["Adaptability"]
        }
      ]
    },
    irontreads: {
      weight: 1,
      sets: [
        {
          species: "Iron Treads",
          weight: 15,
          moves: [
            ["Earthquake"],
            ["Heavy Slam", "Iron Head"],
            ["Ice Spinner", "Rapid Spin", "Volt Switch"],
            ["Knock Off"]
          ],
          item: ["Assault Vest"],
          nature: "Jolly",
          evs: { hp: 252, atk: 4, spd: 252 },
          teraType: ["Fairy", "Flying", "Grass", "Water"],
          ability: ["Quark Drive"]
        },
        {
          species: "Iron Treads",
          weight: 60,
          moves: [
            ["Earthquake", "Endeavor"],
            ["Iron Head"],
            ["Rapid Spin", "Stealth Rock", "Substitute"],
            ["Ice Spinner", "Knock Off"]
          ],
          item: ["Booster Energy"],
          nature: "Jolly",
          evs: { hp: 4, atk: 252, spe: 252 },
          teraType: ["Fairy", "Grass", "Ground", "Water"],
          ability: ["Quark Drive"]
        },
        {
          species: "Iron Treads",
          weight: 25,
          moves: [
            ["Earthquake", "Endeavor"],
            ["Iron Head"],
            ["Rapid Spin", "Stealth Rock", "Substitute"],
            ["Tera Blast"]
          ],
          item: ["Booster Energy"],
          nature: "Jolly",
          evs: { hp: 4, atk: 252, spe: 252 },
          teraType: ["Fairy", "Grass", "Water"],
          wantsTera: true,
          ability: ["Quark Drive"]
        }
      ]
    },
    overqwil: {
      weight: 1,
      sets: [
        {
          species: "Overqwil",
          weight: 60,
          moves: [
            ["Crunch"],
            ["Barb Barrage", "Toxic"],
            ["Minimize"],
            ["Substitute"]
          ],
          item: ["Leftovers"],
          nature: "Jolly",
          evs: { hp: 252, spd: 4, spe: 252 },
          teraType: ["Dark", "Water"],
          ability: ["Poison Point"]
        },
        {
          species: "Overqwil",
          weight: 40,
          moves: [
            ["Crunch"],
            ["Barb Barrage", "Toxic"],
            ["Minimize"],
            ["Substitute"]
          ],
          item: ["Black Sludge"],
          nature: "Jolly",
          evs: { hp: 252, spd: 4, spe: 252 },
          teraType: ["Poison"],
          ability: ["Poison Point"]
        }
      ]
    },
    spectrier: {
      weight: 1,
      sets: [
        {
          species: "Spectrier",
          weight: 100,
          moves: [
            ["Shadow Ball"],
            ["Draining Kiss"],
            ["Will-O-Wisp"],
            ["Calm Mind"]
          ],
          item: ["Leftovers", "Sitrus Berry"],
          nature: "Timid",
          evs: { hp: 252, spa: 4, spe: 252 },
          ivs: { atk: 0 },
          teraType: ["Fairy"],
          wantsTera: true,
          ability: ["Grim Neigh"]
        }
      ]
    },
    maushold: {
      weight: 1,
      sets: [
        {
          species: "Maushold",
          weight: 100,
          moves: [
            ["Population Bomb"],
            ["Bite", "Mud Shot"],
            ["Encore"],
            ["Thunder Wave", "Tidy Up"]
          ],
          item: ["King's Rock", "Wide Lens"],
          nature: "Jolly",
          evs: { atk: 252, spd: 4, spe: 252 },
          teraType: ["Ghost", "Normal", "Poison"],
          ability: ["Technician"]
        }
      ]
    },
    polteageist: {
      weight: 1,
      sets: [
        {
          species: "Polteageist",
          weight: 50,
          moves: [
            ["Shell Smash"],
            ["Strength Sap"],
            ["Stored Power"],
            ["Tera Blast"]
          ],
          item: ["Focus Sash"],
          nature: "Bold",
          evs: { hp: 108, def: 196, spe: 204 },
          ivs: { atk: 0 },
          teraType: ["Fighting", "Water"],
          wantsTera: true,
          ability: ["Weak Armor"]
        },
        {
          species: "Polteageist",
          weight: 50,
          moves: [
            ["Shell Smash"],
            ["Strength Sap"],
            ["Stored Power"],
            ["Tera Blast"]
          ],
          item: ["Focus Sash", "White Herb"],
          nature: "Bold",
          evs: { hp: 108, def: 196, spe: 204 },
          ivs: { atk: 0 },
          teraType: ["Fighting", "Water"],
          wantsTera: true,
          ability: ["Cursed Body"]
        }
      ]
    },
    taurospaldeaaqua: {
      weight: 1,
      sets: [
        {
          species: "Tauros-Paldea-Aqua",
          weight: 100,
          moves: [
            ["Wave Crash"],
            ["Close Combat"],
            ["Aqua Jet", "Trailblaze"],
            ["Endeavor"]
          ],
          item: ["Rocky Helmet"],
          nature: "Adamant",
          evs: { hp: 252, atk: 4, def: 108, spd: 4, spe: 140 },
          teraType: ["Steel", "Water"],
          ability: ["Intimidate"]
        }
      ]
    },
    forretress: {
      weight: 1,
      sets: [
        {
          species: "Forretress",
          weight: 50,
          moves: [
            ["Body Press"],
            ["Volt Switch"],
            ["Stealth Rock"],
            ["Toxic Spikes"]
          ],
          item: ["Rocky Helmet"],
          nature: "Relaxed",
          evs: { hp: 252, def: 252, spd: 4 },
          ivs: { atk: 0, spe: 0 },
          teraType: ["Fighting", "Water"],
          ability: ["Sturdy"]
        },
        {
          species: "Forretress",
          weight: 50,
          moves: [
            ["Body Press"],
            ["Volt Switch"],
            ["Stealth Rock"],
            ["Gyro Ball"]
          ],
          item: ["Rocky Helmet"],
          nature: "Relaxed",
          evs: { hp: 252, def: 252, spd: 4 },
          ivs: { spe: 0 },
          teraType: ["Fighting", "Water"],
          ability: ["Sturdy"]
        }
      ]
    },
    glastrier: {
      weight: 1,
      sets: [
        {
          species: "Glastrier",
          weight: 80,
          moves: [
            ["Icicle Crash"],
            ["Heavy Slam"],
            ["Tera Blast"],
            ["Close Combat", "High Horsepower"]
          ],
          item: ["Assault Vest"],
          nature: "Adamant",
          evs: { hp: 252, atk: 252, spd: 4 },
          teraType: ["Electric", "Water"],
          wantsTera: true,
          ability: ["Chilling Neigh"]
        },
        {
          species: "Glastrier",
          weight: 20,
          moves: [
            ["Icicle Crash"],
            ["Heavy Slam"],
            ["Close Combat"],
            ["High Horsepower"]
          ],
          item: ["Assault Vest"],
          nature: "Adamant",
          evs: { hp: 252, atk: 252, spd: 4 },
          teraType: ["Ghost"],
          wantsTera: true,
          ability: ["Chilling Neigh"]
        }
      ]
    },
    gothitelle: {
      weight: 1,
      sets: [
        {
          species: "Gothitelle",
          weight: 65,
          moves: [
            ["Trick"],
            ["Calm Mind"],
            ["Rest"],
            ["Stored Power", "Tera Blast"]
          ],
          item: ["Choice Scarf"],
          nature: "Bold",
          evs: { hp: 236, def: 196, spa: 4, spd: 4, spe: 68 },
          ivs: { atk: 0 },
          teraType: ["Fairy", "Flying"],
          ability: ["Shadow Tag"]
        },
        {
          species: "Gothitelle",
          weight: 35,
          moves: [
            ["Charm"],
            ["Calm Mind"],
            ["Rest"],
            ["Stored Power", "Tera Blast"]
          ],
          item: ["Covert Cloak", "Leftovers"],
          nature: "Bold",
          evs: { hp: 236, def: 196, spa: 4, spd: 4, spe: 68 },
          ivs: { atk: 0 },
          teraType: ["Fairy"],
          wantsTera: true,
          ability: ["Shadow Tag"]
        }
      ]
    }
  };
});

// ../pokemon-showdown/dist/data/random-battles/gen9/teams.js
var require_teams = __commonJS((exports, module) => {
  function sereneGraceBenefits(move) {
    return move.secondary?.chance && move.secondary.chance > 20 && move.secondary.chance < 100;
  }
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var teams_exports = {};
  __export2(teams_exports, {
    MoveCounter: () => MoveCounter,
    RandomTeams: () => RandomTeams,
    default: () => teams_default
  });
  module.exports = __toCommonJS2(teams_exports);
  var import_dex = require_dex();
  var import_lib = require_lib4();
  var import_prng = require_prng();
  var import_tags = require_tags();

  class MoveCounter extends import_lib.Utils.Multiset {
    constructor() {
      super();
      this.damagingMoves = /* @__PURE__ */ new Set;
    }
  }
  var RECOVERY_MOVES = [
    "healorder",
    "milkdrink",
    "moonlight",
    "morningsun",
    "recover",
    "roost",
    "shoreup",
    "slackoff",
    "softboiled",
    "strengthsap",
    "synthesis"
  ];
  var CONTRARY_MOVES = [
    "armorcannon",
    "closecombat",
    "leafstorm",
    "makeitrain",
    "overheat",
    "spinout",
    "superpower",
    "vcreate"
  ];
  var PHYSICAL_SETUP = [
    "bellydrum",
    "bulkup",
    "coil",
    "curse",
    "dragondance",
    "honeclaws",
    "howl",
    "meditate",
    "poweruppunch",
    "swordsdance",
    "tidyup",
    "victorydance"
  ];
  var SPECIAL_SETUP = [
    "calmmind",
    "chargebeam",
    "geomancy",
    "nastyplot",
    "quiverdance",
    "tailglow",
    "takeheart",
    "torchsong"
  ];
  var MIXED_SETUP = [
    "clangoroussoul",
    "growth",
    "happyhour",
    "holdhands",
    "noretreat",
    "shellsmash",
    "workup"
  ];
  var SPEED_SETUP = [
    "agility",
    "autotomize",
    "flamecharge",
    "rockpolish",
    "trailblaze"
  ];
  var SETUP = [
    "acidarmor",
    "agility",
    "autotomize",
    "bellydrum",
    "bulkup",
    "calmmind",
    "clangoroussoul",
    "coil",
    "cosmicpower",
    "curse",
    "dragondance",
    "flamecharge",
    "growth",
    "honeclaws",
    "howl",
    "irondefense",
    "meditate",
    "nastyplot",
    "noretreat",
    "poweruppunch",
    "quiverdance",
    "rockpolish",
    "shellsmash",
    "shiftgear",
    "swordsdance",
    "tailglow",
    "takeheart",
    "tidyup",
    "trailblaze",
    "workup",
    "victorydance"
  ];
  var SPEED_CONTROL = [
    "electroweb",
    "glare",
    "icywind",
    "lowsweep",
    "quash",
    "stringshot",
    "tailwind",
    "thunderwave",
    "trickroom"
  ];
  var NO_STAB = [
    "accelerock",
    "aquajet",
    "bounce",
    "breakingswipe",
    "bulletpunch",
    "chatter",
    "chloroblast",
    "circlethrow",
    "clearsmog",
    "covet",
    "dragontail",
    "doomdesire",
    "electroweb",
    "eruption",
    "explosion",
    "fakeout",
    "feint",
    "flamecharge",
    "flipturn",
    "futuresight",
    "grassyglide",
    "iceshard",
    "icywind",
    "incinerate",
    "infestation",
    "machpunch",
    "meteorbeam",
    "mortalspin",
    "nuzzle",
    "pluck",
    "pursuit",
    "quickattack",
    "rapidspin",
    "reversal",
    "selfdestruct",
    "shadowsneak",
    "skydrop",
    "snarl",
    "strugglebug",
    "suckerpunch",
    "uturn",
    "vacuumwave",
    "voltswitch",
    "watershuriken",
    "waterspout"
  ];
  var HAZARDS = [
    "spikes",
    "stealthrock",
    "stickyweb",
    "toxicspikes"
  ];
  var PROTECT_MOVES = [
    "banefulbunker",
    "burningbulwark",
    "protect",
    "silktrap",
    "spikyshield"
  ];
  var PIVOT_MOVES = [
    "chillyreception",
    "flipturn",
    "partingshot",
    "shedtail",
    "teleport",
    "uturn",
    "voltswitch"
  ];
  var MOVE_PAIRS = [
    ["lightscreen", "reflect"],
    ["sleeptalk", "rest"],
    ["protect", "wish"],
    ["leechseed", "protect"],
    ["leechseed", "substitute"]
  ];
  var PRIORITY_POKEMON = [
    "breloom",
    "brutebonnet",
    "cacturne",
    "honchkrow",
    "mimikyu",
    "ragingbolt",
    "scizor"
  ];
  var NO_LEAD_POKEMON = [
    "Zacian",
    "Zamazenta"
  ];
  var DOUBLES_NO_LEAD_POKEMON = [
    "Basculegion",
    "Houndstone",
    "Iron Bundle",
    "Roaring Moon",
    "Zacian",
    "Zamazenta"
  ];
  var DEFENSIVE_TERA_BLAST_USERS = [
    "alcremie",
    "bellossom",
    "comfey",
    "fezandipiti",
    "florges"
  ];

  class RandomTeams {
    constructor(format, prng) {
      this.randomSets = require_sets();
      this.randomDoublesSets = require_doubles_sets();
      this.randomBSSFactorySets = require_bss_factory_sets();
      format = import_dex.Dex.formats.get(format);
      this.dex = import_dex.Dex.forFormat(format);
      this.gen = this.dex.gen;
      this.noStab = NO_STAB;
      const ruleTable = import_dex.Dex.formats.getRuleTable(format);
      this.maxTeamSize = ruleTable.maxTeamSize;
      this.adjustLevel = ruleTable.adjustLevel;
      this.maxMoveCount = ruleTable.maxMoveCount;
      const forceMonotype = ruleTable.valueRules.get("forcemonotype");
      this.forceMonotype = forceMonotype && this.dex.types.get(forceMonotype).exists ? this.dex.types.get(forceMonotype).name : undefined;
      const forceTeraType = ruleTable.valueRules.get("forceteratype");
      this.forceTeraType = forceTeraType && this.dex.types.get(forceTeraType).exists ? this.dex.types.get(forceTeraType).name : undefined;
      this.factoryTier = "";
      this.format = format;
      this.prng = prng && !Array.isArray(prng) ? prng : new import_prng.PRNG(prng);
      this.moveEnforcementCheckers = {
        Bug: (movePool, moves, abilities, types, counter) => movePool.includes("megahorn") || movePool.includes("xscissor") || !counter.get("Bug") && (types.includes("Electric") || types.includes("Psychic")),
        Dark: (movePool, moves, abilities, types, counter, species, teamDetails, isLead, isDoubles, teraType, role) => {
          if (counter.get("Dark") < 2 && PRIORITY_POKEMON.includes(species.id) && role === "Wallbreaker")
            return true;
          return !counter.get("Dark");
        },
        Dragon: (movePool, moves, abilities, types, counter) => !counter.get("Dragon"),
        Electric: (movePool, moves, abilities, types, counter) => !counter.get("Electric"),
        Fairy: (movePool, moves, abilities, types, counter) => !counter.get("Fairy"),
        Fighting: (movePool, moves, abilities, types, counter) => !counter.get("Fighting"),
        Fire: (movePool, moves, abilities, types, counter, species) => !counter.get("Fire"),
        Flying: (movePool, moves, abilities, types, counter) => !counter.get("Flying"),
        Ghost: (movePool, moves, abilities, types, counter) => !counter.get("Ghost"),
        Grass: (movePool, moves, abilities, types, counter, species) => !counter.get("Grass") && (movePool.includes("leafstorm") || species.baseStats.atk >= 100 || types.includes("Electric") || abilities.includes("Seed Sower")),
        Ground: (movePool, moves, abilities, types, counter) => !counter.get("Ground"),
        Ice: (movePool, moves, abilities, types, counter) => movePool.includes("freezedry") || movePool.includes("blizzard") || !counter.get("Ice"),
        Normal: (movePool, moves, types, counter) => movePool.includes("boomburst") || movePool.includes("hypervoice"),
        Poison: (movePool, moves, abilities, types, counter) => {
          if (types.includes("Ground"))
            return false;
          return !counter.get("Poison");
        },
        Psychic: (movePool, moves, abilities, types, counter, species, teamDetails, isLead, isDoubles) => {
          if ((isDoubles || species.id === "bruxish") && movePool.includes("psychicfangs"))
            return true;
          if (["Dark", "Steel", "Water"].some((m) => types.includes(m)))
            return false;
          return !counter.get("Psychic");
        },
        Rock: (movePool, moves, abilities, types, counter, species) => !counter.get("Rock") && species.baseStats.atk >= 80,
        Steel: (movePool, moves, abilities, types, counter, species, teamDetails, isLead, isDoubles) => !counter.get("Steel") && (isDoubles || species.baseStats.atk >= 90 || movePool.includes("gigatonhammer") || movePool.includes("makeitrain")),
        Water: (movePool, moves, abilities, types, counter) => !counter.get("Water") && !types.includes("Ground")
      };
    }
    setSeed(prng) {
      this.prng = prng && !Array.isArray(prng) ? prng : new import_prng.PRNG(prng);
    }
    getTeam(options) {
      const generatorName = typeof this.format.team === "string" && this.format.team.startsWith("random") ? this.format.team + "Team" : "";
      return this[generatorName || "randomTeam"](options);
    }
    randomChance(numerator, denominator) {
      return this.prng.randomChance(numerator, denominator);
    }
    sample(items) {
      return this.prng.sample(items);
    }
    sampleIfArray(item) {
      if (Array.isArray(item)) {
        return this.sample(item);
      }
      return item;
    }
    random(m, n) {
      return this.prng.next(m, n);
    }
    fastPop(list, index) {
      const length = list.length;
      if (index < 0 || index >= list.length) {
        throw new Error(`Index ${index} out of bounds for given array`);
      }
      const element = list[index];
      list[index] = list[length - 1];
      list.pop();
      return element;
    }
    sampleNoReplace(list) {
      const length = list.length;
      if (length === 0)
        return null;
      const index = this.random(length);
      return this.fastPop(list, index);
    }
    multipleSamplesNoReplace(list, n) {
      const samples = [];
      while (samples.length < n && list.length) {
        samples.push(this.sampleNoReplace(list));
      }
      return samples;
    }
    hasDirectCustomBanlistChanges() {
      if (this.format.ruleTable?.has("+pokemontag:cap"))
        return false;
      if (this.format.banlist.length || this.format.restricted.length || this.format.unbanlist.length)
        return true;
      if (!this.format.customRules)
        return false;
      for (const rule of this.format.customRules) {
        for (const banlistOperator of ["-", "+", "*"]) {
          if (rule.startsWith(banlistOperator))
            return true;
        }
      }
      return false;
    }
    enforceNoDirectCustomBanlistChanges() {
      if (this.hasDirectCustomBanlistChanges()) {
        throw new Error(`Custom bans are not currently supported in ${this.format.name}.`);
      }
    }
    enforceNoDirectComplexBans() {
      if (!this.format.customRules)
        return false;
      for (const rule of this.format.customRules) {
        if (rule.includes("+") && !rule.startsWith("+")) {
          throw new Error(`Complex bans are not currently supported in ${this.format.name}.`);
        }
      }
    }
    enforceCustomPoolSizeNoComplexBans(effectTypeName, basicEffectPool, requiredCount, requiredCountExplanation) {
      if (basicEffectPool.length >= requiredCount)
        return;
      throw new Error(`Legal ${effectTypeName} count is insufficient to support ${requiredCountExplanation} (${basicEffectPool.length} / ${requiredCount}).`);
    }
    queryMoves(moves, species, teraType, abilities) {
      const counter = new MoveCounter;
      const types = species.types;
      if (!moves?.size)
        return counter;
      const categories = { Physical: 0, Special: 0, Status: 0 };
      for (const moveid of moves) {
        const move = this.dex.moves.get(moveid);
        const moveType = this.getMoveType(move, species, abilities, teraType);
        if (move.damage || move.damageCallback) {
          counter.add("damage");
          counter.damagingMoves.add(move);
        } else {
          categories[move.category]++;
        }
        if (moveid === "lowkick" || move.basePower && move.basePower <= 60 && moveid !== "rapidspin") {
          counter.add("technician");
        }
        if (move.multihit && Array.isArray(move.multihit) && move.multihit[1] === 5)
          counter.add("skilllink");
        if (move.recoil || move.hasCrashDamage)
          counter.add("recoil");
        if (move.drain)
          counter.add("drain");
        if (move.basePower || move.basePowerCallback) {
          if (!this.noStab.includes(moveid) || PRIORITY_POKEMON.includes(species.id) && move.priority > 0) {
            counter.add(moveType);
            if (types.includes(moveType))
              counter.add("stab");
            if (teraType === moveType)
              counter.add("stabtera");
            counter.damagingMoves.add(move);
          }
          if (move.flags["bite"])
            counter.add("strongjaw");
          if (move.flags["punch"])
            counter.add("ironfist");
          if (move.flags["sound"])
            counter.add("sound");
          if (move.priority > 0 || moveid === "grassyglide" && abilities.includes("Grassy Surge")) {
            counter.add("priority");
          }
        }
        if (move.secondary || move.hasSheerForce) {
          counter.add("sheerforce");
          if (sereneGraceBenefits(move)) {
            counter.add("serenegrace");
          }
        }
        if (move.accuracy && move.accuracy !== true && move.accuracy < 90)
          counter.add("inaccurate");
        if (RECOVERY_MOVES.includes(moveid))
          counter.add("recovery");
        if (CONTRARY_MOVES.includes(moveid))
          counter.add("contrary");
        if (PHYSICAL_SETUP.includes(moveid))
          counter.add("physicalsetup");
        if (SPECIAL_SETUP.includes(moveid))
          counter.add("specialsetup");
        if (MIXED_SETUP.includes(moveid))
          counter.add("mixedsetup");
        if (SPEED_SETUP.includes(moveid))
          counter.add("speedsetup");
        if (SETUP.includes(moveid))
          counter.add("setup");
        if (HAZARDS.includes(moveid))
          counter.add("hazards");
      }
      counter.set("Physical", Math.floor(categories["Physical"]));
      counter.set("Special", Math.floor(categories["Special"]));
      counter.set("Status", categories["Status"]);
      return counter;
    }
    cullMovePool(types, moves, abilities, counter, movePool, teamDetails, species, isLead, isDoubles, teraType, role) {
      if (moves.size + movePool.length <= this.maxMoveCount)
        return;
      if (moves.size === this.maxMoveCount - 2) {
        const unpairedMoves = [...movePool];
        for (const pair of MOVE_PAIRS) {
          if (movePool.includes(pair[0]) && movePool.includes(pair[1])) {
            this.fastPop(unpairedMoves, unpairedMoves.indexOf(pair[0]));
            this.fastPop(unpairedMoves, unpairedMoves.indexOf(pair[1]));
          }
        }
        if (unpairedMoves.length === 1) {
          this.fastPop(movePool, movePool.indexOf(unpairedMoves[0]));
        }
      }
      if (moves.size === this.maxMoveCount - 1) {
        for (const pair of MOVE_PAIRS) {
          if (movePool.includes(pair[0]) && movePool.includes(pair[1])) {
            this.fastPop(movePool, movePool.indexOf(pair[0]));
            this.fastPop(movePool, movePool.indexOf(pair[1]));
          }
        }
      }
      const statusMoves = this.dex.moves.all().filter((move) => move.category === "Status").map((move) => move.id);
      if (teamDetails.screens) {
        if (movePool.includes("auroraveil"))
          this.fastPop(movePool, movePool.indexOf("auroraveil"));
        if (movePool.length >= this.maxMoveCount + 2) {
          if (movePool.includes("reflect"))
            this.fastPop(movePool, movePool.indexOf("reflect"));
          if (movePool.includes("lightscreen"))
            this.fastPop(movePool, movePool.indexOf("lightscreen"));
        }
      }
      if (teamDetails.stickyWeb) {
        if (movePool.includes("stickyweb"))
          this.fastPop(movePool, movePool.indexOf("stickyweb"));
        if (moves.size + movePool.length <= this.maxMoveCount)
          return;
      }
      if (teamDetails.stealthRock) {
        if (movePool.includes("stealthrock"))
          this.fastPop(movePool, movePool.indexOf("stealthrock"));
        if (moves.size + movePool.length <= this.maxMoveCount)
          return;
      }
      if (teamDetails.defog || teamDetails.rapidSpin) {
        if (movePool.includes("defog"))
          this.fastPop(movePool, movePool.indexOf("defog"));
        if (movePool.includes("rapidspin"))
          this.fastPop(movePool, movePool.indexOf("rapidspin"));
        if (moves.size + movePool.length <= this.maxMoveCount)
          return;
      }
      if (teamDetails.toxicSpikes) {
        if (movePool.includes("toxicspikes"))
          this.fastPop(movePool, movePool.indexOf("toxicspikes"));
        if (moves.size + movePool.length <= this.maxMoveCount)
          return;
      }
      if (teamDetails.spikes && teamDetails.spikes >= 2) {
        if (movePool.includes("spikes"))
          this.fastPop(movePool, movePool.indexOf("spikes"));
        if (moves.size + movePool.length <= this.maxMoveCount)
          return;
      }
      if (teamDetails.statusCure) {
        if (movePool.includes("healbell"))
          this.fastPop(movePool, movePool.indexOf("healbell"));
        if (moves.size + movePool.length <= this.maxMoveCount)
          return;
      }
      if (isDoubles) {
        const doublesIncompatiblePairs = [
          [SPEED_CONTROL, SPEED_CONTROL],
          [HAZARDS, HAZARDS],
          ["rockslide", "stoneedge"],
          [SETUP, ["fakeout", "helpinghand"]],
          [PROTECT_MOVES, "wideguard"],
          [["fierydance", "fireblast"], "heatwave"],
          ["dazzlinggleam", ["fleurcannon", "moonblast"]],
          ["poisongas", ["toxicspikes", "willowisp"]],
          [RECOVERY_MOVES, "healpulse"],
          ["lifedew", "healpulse"],
          ["haze", "icywind"],
          [["hydropump", "muddywater"], ["muddywater", "scald"]],
          ["disable", "encore"],
          ["freezedry", "icebeam"],
          ["energyball", "leafstorm"],
          ["wildcharge", "thunderbolt"],
          ["earthpower", "sandsearstorm"],
          ["coaching", ["helpinghand", "howl"]]
        ];
        for (const pair of doublesIncompatiblePairs)
          this.incompatibleMoves(moves, movePool, pair[0], pair[1]);
        if (role !== "Offensive Protect")
          this.incompatibleMoves(moves, movePool, PROTECT_MOVES, ["flipturn", "uturn"]);
      }
      const incompatiblePairs = [
        [statusMoves, ["healingwish", "switcheroo", "trick"]],
        [SETUP, PIVOT_MOVES],
        [SETUP, HAZARDS],
        [SETUP, ["defog", "nuzzle", "toxic", "yawn", "haze"]],
        [PHYSICAL_SETUP, PHYSICAL_SETUP],
        [SPECIAL_SETUP, "thunderwave"],
        ["substitute", PIVOT_MOVES],
        [SPEED_SETUP, ["aquajet", "rest", "trickroom"]],
        ["curse", ["irondefense", "rapidspin"]],
        ["dragondance", "dracometeor"],
        ["yawn", "roar"],
        [["psychic", "psychicnoise"], ["psyshock", "psychicnoise"]],
        ["surf", "hydropump"],
        ["liquidation", "wavecrash"],
        ["aquajet", "flipturn"],
        ["gigadrain", "leafstorm"],
        ["powerwhip", "hornleech"],
        [["airslash", "bravebird", "hurricane"], ["airslash", "bravebird", "hurricane"]],
        ["knockoff", "foulplay"],
        ["throatchop", ["crunch", "lashout"]],
        ["doubleedge", ["bodyslam", "headbutt"]],
        ["fireblast", ["fierydance", "flamethrower"]],
        ["lavaplume", "magmastorm"],
        ["thunderpunch", "wildcharge"],
        ["thunderbolt", "discharge"],
        ["gunkshot", ["direclaw", "poisonjab", "sludgebomb"]],
        ["aurasphere", "focusblast"],
        ["closecombat", "drainpunch"],
        ["bugbite", "pounce"],
        [["dragonpulse", "spacialrend"], "dracometeor"],
        ["heavyslam", "flashcannon"],
        ["alluringvoice", "dazzlinggleam"],
        ["taunt", "disable"],
        [["thunderwave", "toxic"], ["thunderwave", "willowisp"]],
        [["thunderwave", "toxic", "willowisp"], "toxicspikes"],
        ["nastyplot", ["rockslide", "knockoff"]],
        ["switcheroo", "fakeout"],
        ["toxic", "clearsmog"],
        ["healbell", "stealthrock"],
        ["trick", "uturn"],
        ["mirrorcoat", "hydropump"]
      ];
      for (const pair of incompatiblePairs)
        this.incompatibleMoves(moves, movePool, pair[0], pair[1]);
      if (!types.includes("Ice"))
        this.incompatibleMoves(moves, movePool, "icebeam", "icywind");
      if (!isDoubles)
        this.incompatibleMoves(moves, movePool, "taunt", "encore");
      if (!types.includes("Dark") && teraType !== "Dark")
        this.incompatibleMoves(moves, movePool, "knockoff", "suckerpunch");
      if (!abilities.includes("Prankster"))
        this.incompatibleMoves(moves, movePool, "thunderwave", "yawn");
      if (species.id === "barraskewda") {
        this.incompatibleMoves(moves, movePool, ["psychicfangs", "throatchop"], ["poisonjab", "throatchop"]);
      }
      if (species.id === "cyclizar")
        this.incompatibleMoves(moves, movePool, "taunt", "knockoff");
      if (species.id === "mesprit")
        this.incompatibleMoves(moves, movePool, "healingwish", "uturn");
      if (species.id === "camerupt")
        this.incompatibleMoves(moves, movePool, "roar", "willowisp");
      if (species.id === "coalossal")
        this.incompatibleMoves(moves, movePool, "flamethrower", "overheat");
      if (!isDoubles && species.id === "jumpluff")
        this.incompatibleMoves(moves, movePool, "encore", "strengthsap");
    }
    incompatibleMoves(moves, movePool, movesA, movesB) {
      const moveArrayA = Array.isArray(movesA) ? movesA : [movesA];
      const moveArrayB = Array.isArray(movesB) ? movesB : [movesB];
      if (moves.size + movePool.length <= this.maxMoveCount)
        return;
      for (const moveid1 of moves) {
        if (moveArrayB.includes(moveid1)) {
          for (const moveid2 of moveArrayA) {
            if (moveid1 !== moveid2 && movePool.includes(moveid2)) {
              this.fastPop(movePool, movePool.indexOf(moveid2));
              if (moves.size + movePool.length <= this.maxMoveCount)
                return;
            }
          }
        }
        if (moveArrayA.includes(moveid1)) {
          for (const moveid2 of moveArrayB) {
            if (moveid1 !== moveid2 && movePool.includes(moveid2)) {
              this.fastPop(movePool, movePool.indexOf(moveid2));
              if (moves.size + movePool.length <= this.maxMoveCount)
                return;
            }
          }
        }
      }
    }
    addMove(move, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role) {
      moves.add(move);
      this.fastPop(movePool, movePool.indexOf(move));
      const counter = this.queryMoves(moves, species, teraType, abilities);
      this.cullMovePool(types, moves, abilities, counter, movePool, teamDetails, species, isLead, isDoubles, teraType, role);
      return counter;
    }
    getMoveType(move, species, abilities, teraType) {
      if (move.id === "terablast")
        return teraType;
      if (["judgment", "revelationdance"].includes(move.id))
        return species.types[0];
      if (move.name === "Raging Bull" && species.name.startsWith("Tauros-Paldea")) {
        if (species.name.endsWith("Combat"))
          return "Fighting";
        if (species.name.endsWith("Blaze"))
          return "Fire";
        if (species.name.endsWith("Aqua"))
          return "Water";
      }
      if (move.name === "Ivy Cudgel" && species.name.startsWith("Ogerpon")) {
        if (species.name.endsWith("Wellspring"))
          return "Water";
        if (species.name.endsWith("Hearthflame"))
          return "Fire";
        if (species.name.endsWith("Cornerstone"))
          return "Rock";
      }
      const moveType = move.type;
      if (moveType === "Normal") {
        if (abilities.includes("Aerilate"))
          return "Flying";
        if (abilities.includes("Galvanize"))
          return "Electric";
        if (abilities.includes("Pixilate"))
          return "Fairy";
        if (abilities.includes("Refrigerate"))
          return "Ice";
      }
      return moveType;
    }
    randomMoveset(types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role) {
      const moves = /* @__PURE__ */ new Set;
      let counter = this.queryMoves(moves, species, teraType, abilities);
      this.cullMovePool(types, moves, abilities, counter, movePool, teamDetails, species, isLead, isDoubles, teraType, role);
      if (movePool.length <= this.maxMoveCount) {
        for (const moveid of movePool) {
          moves.add(moveid);
        }
        return moves;
      }
      const runEnforcementChecker = (checkerName) => {
        if (!this.moveEnforcementCheckers[checkerName])
          return false;
        return this.moveEnforcementCheckers[checkerName](movePool, moves, abilities, types, counter, species, teamDetails, isLead, isDoubles, teraType, role);
      };
      if (role === "Tera Blast user") {
        counter = this.addMove("terablast", moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
      }
      if (species.requiredMove) {
        const move = this.dex.moves.get(species.requiredMove).id;
        counter = this.addMove(move, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
      }
      if (movePool.includes("facade") && abilities.includes("Guts")) {
        counter = this.addMove("facade", moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
      }
      for (const moveid of ["nightshade", "revelationdance", "revivalblessing", "stickyweb"]) {
        if (movePool.includes(moveid)) {
          counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
      }
      if (movePool.includes("trickroom") && role === "Doubles Wallbreaker") {
        counter = this.addMove("trickroom", moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
      }
      if (role === "Bulky Support" && !teamDetails.defog && !teamDetails.rapidSpin) {
        if (movePool.includes("rapidspin")) {
          counter = this.addMove("rapidspin", moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
        if (movePool.includes("defog")) {
          counter = this.addMove("defog", moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
      }
      if (!teamDetails.screens && movePool.includes("auroraveil")) {
        counter = this.addMove("auroraveil", moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
      }
      if (!isDoubles && types.length === 1 && (types.includes("Normal") || types.includes("Fighting"))) {
        if (movePool.includes("knockoff")) {
          counter = this.addMove("knockoff", moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
      }
      if (species.id === "smeargle") {
        if (movePool.includes("spore")) {
          counter = this.addMove("spore", moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
      }
      if (isDoubles) {
        const doublesEnforcedMoves = ["mortalspin", "spore"];
        for (const moveid of doublesEnforcedMoves) {
          if (movePool.includes(moveid)) {
            counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
          }
        }
        if (movePool.includes("fakeout") && species.baseStats.spe <= 50) {
          counter = this.addMove("fakeout", moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
        if (movePool.includes("tailwind") && (abilities.includes("Prankster") || abilities.includes("Gale Wings"))) {
          counter = this.addMove("tailwind", moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
        if (movePool.includes("thunderwave") && abilities.includes("Prankster")) {
          counter = this.addMove("thunderwave", moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
      }
      if (["Bulky Attacker", "Bulky Setup", "Wallbreaker", "Doubles Wallbreaker"].includes(role) || PRIORITY_POKEMON.includes(species.id)) {
        const priorityMoves = [];
        for (const moveid of movePool) {
          const move = this.dex.moves.get(moveid);
          const moveType = this.getMoveType(move, species, abilities, teraType);
          if (types.includes(moveType) && (move.priority > 0 || moveid === "grassyglide" && abilities.includes("Grassy Surge")) && (move.basePower || move.basePowerCallback)) {
            priorityMoves.push(moveid);
          }
        }
        if (priorityMoves.length) {
          const moveid = this.sample(priorityMoves);
          counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
      }
      for (const type of types) {
        const stabMoves = [];
        for (const moveid of movePool) {
          const move = this.dex.moves.get(moveid);
          const moveType = this.getMoveType(move, species, abilities, teraType);
          if (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && type === moveType) {
            stabMoves.push(moveid);
          }
        }
        while (runEnforcementChecker(type)) {
          if (!stabMoves.length)
            break;
          const moveid = this.sampleNoReplace(stabMoves);
          counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
      }
      if (!counter.get("stabtera") && !["Bulky Support", "Doubles Support"].includes(role)) {
        const stabMoves = [];
        for (const moveid of movePool) {
          const move = this.dex.moves.get(moveid);
          const moveType = this.getMoveType(move, species, abilities, teraType);
          if (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && teraType === moveType) {
            stabMoves.push(moveid);
          }
        }
        if (stabMoves.length) {
          const moveid = this.sample(stabMoves);
          counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
      }
      if (!counter.get("stab")) {
        const stabMoves = [];
        for (const moveid of movePool) {
          const move = this.dex.moves.get(moveid);
          const moveType = this.getMoveType(move, species, abilities, teraType);
          if (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && types.includes(moveType)) {
            stabMoves.push(moveid);
          }
        }
        if (stabMoves.length) {
          const moveid = this.sample(stabMoves);
          counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
      }
      if (["Bulky Support", "Bulky Attacker", "Bulky Setup"].includes(role)) {
        const recoveryMoves = movePool.filter((moveid) => RECOVERY_MOVES.includes(moveid));
        if (recoveryMoves.length) {
          const moveid = this.sample(recoveryMoves);
          counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
      }
      if (role.includes("Setup") || role === "Tera Blast user") {
        const nonSpeedSetupMoves = movePool.filter((moveid) => SETUP.includes(moveid) && !SPEED_SETUP.includes(moveid));
        if (nonSpeedSetupMoves.length) {
          const moveid = this.sample(nonSpeedSetupMoves);
          counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        } else {
          const setupMoves = movePool.filter((moveid) => SETUP.includes(moveid));
          if (setupMoves.length) {
            const moveid = this.sample(setupMoves);
            counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
          }
        }
      }
      if (role === "Doubles Support") {
        for (const moveid of ["fakeout", "followme", "ragepowder"]) {
          if (movePool.includes(moveid)) {
            counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
          }
        }
      }
      if (role.includes("Protect")) {
        const protectMoves = movePool.filter((moveid) => PROTECT_MOVES.includes(moveid));
        if (protectMoves.length) {
          const moveid = this.sample(protectMoves);
          counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
      }
      if (!counter.damagingMoves.size) {
        const attackingMoves = [];
        for (const moveid of movePool) {
          const move = this.dex.moves.get(moveid);
          if (!this.noStab.includes(moveid) && move.category !== "Status")
            attackingMoves.push(moveid);
        }
        if (attackingMoves.length) {
          const moveid = this.sample(attackingMoves);
          counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
      }
      if (!["AV Pivot", "Fast Support", "Bulky Support", "Bulky Protect", "Doubles Support"].includes(role)) {
        if (counter.damagingMoves.size === 1) {
          const currentAttackType = counter.damagingMoves.values().next().value.type;
          const coverageMoves = [];
          for (const moveid of movePool) {
            const move = this.dex.moves.get(moveid);
            const moveType = this.getMoveType(move, species, abilities, teraType);
            if (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback)) {
              if (currentAttackType !== moveType)
                coverageMoves.push(moveid);
            }
          }
          if (coverageMoves.length) {
            const moveid = this.sample(coverageMoves);
            counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
          }
        }
      }
      while (moves.size < this.maxMoveCount && movePool.length) {
        if (moves.size + movePool.length <= this.maxMoveCount) {
          for (const moveid2 of movePool) {
            moves.add(moveid2);
          }
          break;
        }
        const moveid = this.sample(movePool);
        counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        for (const pair of MOVE_PAIRS) {
          if (moveid === pair[0] && movePool.includes(pair[1])) {
            counter = this.addMove(pair[1], moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
          }
          if (moveid === pair[1] && movePool.includes(pair[0])) {
            counter = this.addMove(pair[0], moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
          }
        }
      }
      return moves;
    }
    shouldCullAbility(ability, types, moves, abilities, counter, teamDetails, species, isLead, isDoubles, teraType, role) {
      switch (ability) {
        case "Chlorophyll":
        case "Solar Power":
          return !teamDetails.sun;
        case "Defiant":
          return species.id === "thundurus" && !!counter.get("Status");
        case "Hydration":
        case "Swift Swim":
          return !teamDetails.rain;
        case "Iron Fist":
        case "Skill Link":
          return !counter.get((0, import_dex.toID)(ability));
        case "Overgrow":
          return !counter.get("Grass");
        case "Prankster":
          return !counter.get("Status");
        case "Sand Force":
        case "Sand Rush":
          return !teamDetails.sand;
        case "Slush Rush":
          return !teamDetails.snow;
        case "Swarm":
          return !counter.get("Bug");
        case "Torrent":
          return !counter.get("Water") && !moves.has("flipturn");
      }
      return false;
    }
    getAbility(types, moves, abilities, counter, teamDetails, species, isLead, isDoubles, teraType, role) {
      if (this.format.gameType === "freeforall") {
        if (species.id === "bellossom")
          return "Chlorophyll";
        if (species.id === "sinistcha")
          return "Heatproof";
        if (species.id === "oranguru")
          return "Inner Focus";
        if (species.id === "duraludon")
          return "Light Metal";
        if (species.id === "clefairy")
          return "Magic Guard";
        if (species.id === "blissey")
          return "Natural Cure";
        if (species.id === "barraskewda")
          return "Swift Swim";
      }
      if (abilities.length <= 1)
        return abilities[0];
      if (species.id === "drifblim")
        return moves.has("defog") ? "Aftermath" : "Unburden";
      if (species.id === "hitmonchan" && counter.get("ironfist"))
        return "Iron Fist";
      if ((species.id === "thundurus" || species.id === "tornadus") && !counter.get("Physical"))
        return "Prankster";
      if (species.id === "swampert" && (counter.get("Water") || moves.has("flipturn")))
        return "Torrent";
      if (species.id === "toucannon" && counter.get("skilllink"))
        return "Skill Link";
      if (abilities.includes("Slush Rush") && moves.has("snowscape"))
        return "Slush Rush";
      if (species.id === "golduck" && teamDetails.rain)
        return "Swift Swim";
      const abilityAllowed = [];
      for (const ability of abilities) {
        if (!this.shouldCullAbility(ability, types, moves, abilities, counter, teamDetails, species, isLead, isDoubles, teraType, role)) {
          abilityAllowed.push(ability);
        }
      }
      if (abilityAllowed.length >= 1)
        return this.sample(abilityAllowed);
      if (!abilityAllowed.length) {
        const weatherAbilities = abilities.filter((a) => ["Chlorophyll", "Hydration", "Sand Force", "Sand Rush", "Slush Rush", "Solar Power", "Swift Swim"].includes(a));
        if (weatherAbilities.length)
          return this.sample(weatherAbilities);
      }
      return this.sample(abilities);
    }
    getPriorityItem(ability, types, moves, counter, teamDetails, species, isLead, isDoubles, teraType, role) {
      if (!isDoubles) {
        if (role === "Fast Bulky Setup" && (ability === "Quark Drive" || ability === "Protosynthesis")) {
          return "Booster Energy";
        }
        if (species.id === "lokix") {
          return role === "Fast Attacker" ? "Silver Powder" : "Life Orb";
        }
      }
      if (species.requiredItems) {
        if (species.baseSpecies === "Arceus") {
          return species.requiredItems[0];
        }
        return this.sample(species.requiredItems);
      }
      if (role === "AV Pivot")
        return "Assault Vest";
      if (species.id === "pikachu")
        return "Light Ball";
      if (species.id === "regieleki")
        return "Magnet";
      if (species.id === "froslass" || moves.has("populationbomb") || ability === "Hustle" && counter.get("setup") && !isDoubles && this.randomChance(1, 2))
        return "Wide Lens";
      if (species.id === "smeargle" && !isDoubles)
        return "Focus Sash";
      if (moves.has("clangoroussoul") || species.id === "toxtricity" && moves.has("shiftgear"))
        return "Throat Spray";
      if (species.baseSpecies === "Magearna" && role === "Tera Blast user" || species.id === "necrozmaduskmane" || species.id === "calyrexice" && isDoubles)
        return "Weakness Policy";
      if (["dragonenergy", "lastrespects", "waterspout"].some((m) => moves.has(m)))
        return "Choice Scarf";
      if (!isDoubles && (ability === "Imposter" || species.id === "magnezone" && role === "Fast Attacker"))
        return "Choice Scarf";
      if (species.id === "rampardos" && (role === "Fast Attacker" || isDoubles))
        return "Choice Scarf";
      if (species.id === "palkia" && counter.get("Special") < 4)
        return "Lustrous Orb";
      if (moves.has("courtchange") || !isDoubles && (species.id === "luvdisc" || species.id === "terapagos" && !moves.has("rest")))
        return "Heavy-Duty Boots";
      if (moves.has("bellydrum") && moves.has("substitute"))
        return "Salac Berry";
      if (["Cheek Pouch", "Cud Chew", "Harvest", "Ripen"].some((m) => ability === m) || moves.has("bellydrum") || moves.has("filletaway")) {
        return "Sitrus Berry";
      }
      if (["healingwish", "switcheroo", "trick"].some((m) => moves.has(m))) {
        if (species.baseStats.spe >= 60 && species.baseStats.spe <= 108 && role !== "Wallbreaker" && role !== "Doubles Wallbreaker" && !counter.get("priority")) {
          return "Choice Scarf";
        } else {
          return counter.get("Physical") > counter.get("Special") ? "Choice Band" : "Choice Specs";
        }
      }
      if (counter.get("Status") && (species.name === "Latias" || species.name === "Latios"))
        return "Soul Dew";
      if (species.id === "scyther" && !isDoubles)
        return isLead && !moves.has("uturn") ? "Eviolite" : "Heavy-Duty Boots";
      if (species.nfe)
        return "Eviolite";
      if (ability === "Poison Heal")
        return "Toxic Orb";
      if ((ability === "Guts" || moves.has("facade")) && !moves.has("sleeptalk")) {
        return types.includes("Fire") || ability === "Toxic Boost" ? "Toxic Orb" : "Flame Orb";
      }
      if (ability === "Magic Guard" || ability === "Sheer Force" && counter.get("sheerforce"))
        return "Life Orb";
      if (ability === "Anger Shell")
        return this.sample(["Rindo Berry", "Passho Berry", "Scope Lens", "Sitrus Berry"]);
      if (moves.has("dragondance") && isDoubles)
        return "Clear Amulet";
      if (counter.get("skilllink") && ability !== "Skill Link" && species.id !== "breloom")
        return "Loaded Dice";
      if (ability === "Unburden") {
        return moves.has("closecombat") || moves.has("leafstorm") ? "White Herb" : "Sitrus Berry";
      }
      if (moves.has("shellsmash") && ability !== "Weak Armor")
        return "White Herb";
      if (moves.has("meteorbeam") || moves.has("electroshot") && !teamDetails.rain)
        return "Power Herb";
      if (moves.has("acrobatics") && ability !== "Protosynthesis")
        return "";
      if (moves.has("auroraveil") || moves.has("lightscreen") && moves.has("reflect"))
        return "Light Clay";
      if (ability === "Gluttony")
        return `${this.sample(["Aguav", "Figy", "Iapapa", "Mago", "Wiki"])} Berry`;
      if (moves.has("rest") && !moves.has("sleeptalk") && ability !== "Natural Cure" && ability !== "Shed Skin") {
        return "Chesto Berry";
      }
      if (species.id !== "yanmega" && this.dex.getEffectiveness("Rock", species) >= 2 && (!types.includes("Flying") || !isDoubles))
        return "Heavy-Duty Boots";
    }
    getDoublesItem(ability, types, moves, counter, teamDetails, species, isLead, teraType, role) {
      const scarfReqs = !counter.get("priority") && ability !== "Speed Boost" && role !== "Doubles Wallbreaker" && species.baseStats.spe >= 60 && species.baseStats.spe <= 108 && this.randomChance(1, 2);
      const offensiveRole = ["Doubles Fast Attacker", "Doubles Wallbreaker", "Doubles Setup Sweeper", "Offensive Protect"].some((m) => role === m);
      if (species.id === "ursalunabloodmoon" || moves.has("doubleedge") && moves.has("fakeout"))
        return "Silk Scarf";
      if (moves.has("flipturn") && moves.has("protect") && (moves.has("aquajet") || moves.has("jetpunch")))
        return "Mystic Water";
      if (counter.get("speedsetup") && role === "Doubles Bulky Setup")
        return "Weakness Policy";
      if (species.id === "toxapex")
        return "Binding Band";
      if (moves.has("blizzard") && ability !== "Snow Warning" && !teamDetails.snow)
        return "Blunder Policy";
      if (role === "Choice Item user") {
        if (scarfReqs || counter.get("Physical") < 4 && counter.get("Special") < 3 && !moves.has("memento")) {
          return "Choice Scarf";
        }
        return counter.get("Physical") >= 3 ? "Choice Band" : "Choice Specs";
      }
      if (counter.get("Physical") >= 4 && ["fakeout", "feint", "firstimpression", "rapidspin", "suckerpunch"].every((m) => !moves.has(m)) && (moves.has("flipturn") || moves.has("uturn") || role === "Doubles Wallbreaker")) {
        return scarfReqs ? "Choice Scarf" : "Choice Band";
      }
      if ((counter.get("Special") >= 4 && (moves.has("voltswitch") || role === "Doubles Wallbreaker") || counter.get("Special") >= 3 && (moves.has("uturn") || moves.has("flipturn"))) && !moves.has("electroweb")) {
        return scarfReqs ? "Choice Scarf" : "Choice Specs";
      }
      if (role === "Bulky Protect" && counter.get("setup") || moves.has("substitute") || moves.has("irondefense") || species.id === "eternatus" || species.id === "regigigas")
        return "Leftovers";
      if (species.id === "sylveon")
        return "Pixie Plate";
      if (ability === "Intimidate" && this.dex.getEffectiveness("Rock", species) >= 1)
        return "Heavy-Duty Boots";
      if ((offensiveRole || role === "Tera Blast user" && (species.baseStats.spe >= 80 || moves.has("trickroom"))) && (!moves.has("fakeout") || species.id === "ambipom") && !moves.has("incinerate") && (!moves.has("uturn") || types.includes("Bug") || ability === "Libero") && (!moves.has("icywind") && !moves.has("electroweb") || species.id === "ironbundle")) {
        return (ability === "Quark Drive" || ability === "Protosynthesis") && !isLead && species.id !== "ironvaliant" && ["dracometeor", "firstimpression", "uturn", "voltswitch"].every((m) => !moves.has(m)) ? "Booster Energy" : "Life Orb";
      }
      if (isLead && (species.id === "glimmora" || ["Doubles Fast Attacker", "Doubles Wallbreaker", "Offensive Protect"].includes(role) && species.baseStats.hp + species.baseStats.def + species.baseStats.spd <= 230))
        return "Focus Sash";
      if (["Doubles Fast Attacker", "Doubles Wallbreaker", "Offensive Protect"].includes(role) && moves.has("fakeout") || moves.has("incinerate")) {
        return this.dex.getEffectiveness("Rock", species) >= 1 ? "Heavy-Duty Boots" : "Clear Amulet";
      }
      if (!counter.get("Status"))
        return "Assault Vest";
      return "Sitrus Berry";
    }
    getItem(ability, types, moves, counter, teamDetails, species, isLead, teraType, role) {
      if (types.includes("Normal") && moves.has("fakeout"))
        return "Silk Scarf";
      if (species.id !== "jirachi" && counter.get("Physical") >= 4 && ["dragontail", "fakeout", "firstimpression", "flamecharge", "rapidspin"].every((m) => !moves.has(m))) {
        const scarfReqs = role !== "Wallbreaker" && (species.baseStats.atk >= 100 || ability === "Huge Power" || ability === "Pure Power") && species.baseStats.spe >= 60 && species.baseStats.spe <= 108 && ability !== "Speed Boost" && !counter.get("priority") && !moves.has("aquastep");
        return scarfReqs && this.randomChance(1, 2) ? "Choice Scarf" : "Choice Band";
      }
      if (counter.get("Special") >= 4 || counter.get("Special") >= 3 && ["flipturn", "uturn"].some((m) => moves.has(m))) {
        const scarfReqs = role !== "Wallbreaker" && species.baseStats.spa >= 100 && species.baseStats.spe >= 60 && species.baseStats.spe <= 108 && ability !== "Speed Boost" && ability !== "Tinted Lens" && !moves.has("uturn") && !counter.get("priority");
        return scarfReqs && this.randomChance(1, 2) ? "Choice Scarf" : "Choice Specs";
      }
      if (counter.get("speedsetup") && role === "Bulky Setup")
        return "Weakness Policy";
      if (!counter.get("Status") && !["Fast Attacker", "Wallbreaker", "Tera Blast user"].includes(role)) {
        return "Assault Vest";
      }
      if (species.id === "golem")
        return counter.get("speedsetup") ? "Weakness Policy" : "Custap Berry";
      if (moves.has("substitute"))
        return "Leftovers";
      if (moves.has("stickyweb") && isLead && species.baseStats.hp + species.baseStats.def + species.baseStats.spd < 235)
        return "Focus Sash";
      if (this.dex.getEffectiveness("Rock", species) >= 1)
        return "Heavy-Duty Boots";
      if (moves.has("chillyreception") || role === "Fast Support" && [...PIVOT_MOVES, "defog", "mortalspin", "rapidspin"].some((m) => moves.has(m)) && !types.includes("Flying") && ability !== "Levitate")
        return "Heavy-Duty Boots";
      if (ability === "Rough Skin" || ability === "Regenerator" && (role === "Bulky Support" || role === "Bulky Attacker") && species.baseStats.hp + species.baseStats.def >= 180 && this.randomChance(1, 2) || ability !== "Regenerator" && !counter.get("setup") && counter.get("recovery") && this.dex.getEffectiveness("Fighting", species) < 1 && species.baseStats.hp + species.baseStats.def > 200 && this.randomChance(1, 2))
        return "Rocky Helmet";
      if (moves.has("outrage") && counter.get("setup"))
        return "Lum Berry";
      if (moves.has("protect") && ability !== "Speed Boost")
        return "Leftovers";
      if (role === "Fast Support" && isLead && !counter.get("recovery") && !counter.get("recoil") && (counter.get("hazards") || counter.get("setup")) && species.baseStats.hp + species.baseStats.def + species.baseStats.spd < 258)
        return "Focus Sash";
      if (!counter.get("setup") && ability !== "Levitate" && this.dex.getEffectiveness("Ground", species) >= 2)
        return "Air Balloon";
      if (["Bulky Attacker", "Bulky Support", "Bulky Setup"].some((m) => role === m))
        return "Leftovers";
      if (species.id === "pawmot" && moves.has("nuzzle"))
        return "Leppa Berry";
      if (role === "Fast Support" || role === "Fast Bulky Setup") {
        return counter.get("Physical") + counter.get("Special") >= 3 && !moves.has("nuzzle") ? "Life Orb" : "Leftovers";
      }
      if (role === "Tera Blast user" && DEFENSIVE_TERA_BLAST_USERS.includes(species.id))
        return "Leftovers";
      if (["flamecharge", "rapidspin", "trailblaze"].every((m) => !moves.has(m)) && ["Fast Attacker", "Setup Sweeper", "Tera Blast user", "Wallbreaker"].some((m) => role === m))
        return "Life Orb";
      return "Leftovers";
    }
    getLevel(species, isDoubles) {
      if (this.adjustLevel)
        return this.adjustLevel;
      if (isDoubles && this.randomDoublesSets[species.id]["level"])
        return this.randomDoublesSets[species.id]["level"];
      if (!isDoubles && this.randomSets[species.id]["level"])
        return this.randomSets[species.id]["level"];
      const tier = species.tier;
      const tierScale = {
        Uber: 76,
        OU: 80,
        UUBL: 81,
        UU: 82,
        RUBL: 83,
        RU: 84,
        NUBL: 85,
        NU: 86,
        PUBL: 87,
        PU: 88,
        "(PU)": 88,
        NFE: 88
      };
      return tierScale[tier] || 80;
    }
    getForme(species) {
      if (typeof species.battleOnly === "string") {
        return species.battleOnly;
      }
      if (species.cosmeticFormes)
        return this.sample([species.name].concat(species.cosmeticFormes));
      if (["Dudunsparce", "Magearna", "Maushold", "Polteageist", "Sinistcha", "Zarude"].includes(species.baseSpecies)) {
        return this.sample([species.name].concat(species.otherFormes));
      }
      if (species.baseSpecies === "Basculin")
        return "Basculin" + this.sample(["", "-Blue-Striped"]);
      if (species.baseSpecies === "Pikachu") {
        return "Pikachu" + this.sample(["", "-Original", "-Hoenn", "-Sinnoh", "-Unova", "-Kalos", "-Alola", "-Partner", "-World"]);
      }
      return species.name;
    }
    randomSet(s, teamDetails = {}, isLead = false, isDoubles = false) {
      const species = this.dex.species.get(s);
      const forme = this.getForme(species);
      const sets = this[`random${isDoubles ? "Doubles" : ""}Sets`][species.id]["sets"];
      const possibleSets = [];
      const ruleTable = this.dex.formats.getRuleTable(this.format);
      for (const set2 of sets) {
        const abilities2 = set2.abilities;
        if (isLead && (abilities2.includes("Protosynthesis") || abilities2.includes("Quark Drive")) && set2.role === "Fast Bulky Setup")
          continue;
        if ((teamDetails.teraBlast || ruleTable.has("terastalclause")) && set2.role === "Tera Blast user") {
          continue;
        }
        possibleSets.push(set2);
      }
      const set = this.sampleIfArray(possibleSets);
      const role = set.role;
      const movePool = [];
      for (const movename of set.movepool) {
        movePool.push(this.dex.moves.get(movename).id);
      }
      const teraTypes = set.teraTypes;
      let teraType = this.sampleIfArray(teraTypes);
      let ability = "";
      let item = undefined;
      const evs = { hp: 85, atk: 85, def: 85, spa: 85, spd: 85, spe: 85 };
      const ivs = { hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31 };
      const types = species.types;
      const abilities = set.abilities;
      const moves = this.randomMoveset(types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
      const counter = this.queryMoves(moves, species, teraType, abilities);
      ability = this.getAbility(types, moves, abilities, counter, teamDetails, species, isLead, isDoubles, teraType, role);
      item = this.getPriorityItem(ability, types, moves, counter, teamDetails, species, isLead, isDoubles, teraType, role);
      if (item === undefined) {
        if (isDoubles) {
          item = this.getDoublesItem(ability, types, moves, counter, teamDetails, species, isLead, teraType, role);
        } else {
          item = this.getItem(ability, types, moves, counter, teamDetails, species, isLead, teraType, role);
        }
      }
      const level = this.getLevel(species, isDoubles);
      const srImmunity = ability === "Magic Guard" || item === "Heavy-Duty Boots";
      let srWeakness = srImmunity ? 0 : this.dex.getEffectiveness("Rock", species);
      if (["axekick", "highjumpkick", "jumpkick"].some((m) => moves.has(m)))
        srWeakness = 2;
      while (evs.hp > 1) {
        const hp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);
        if (moves.has("substitute") && ["Sitrus Berry", "Salac Berry"].includes(item)) {
          if (hp % 4 === 0)
            break;
        } else if ((moves.has("bellydrum") || moves.has("filletaway") || moves.has("shedtail")) && (item === "Sitrus Berry" || ability === "Gluttony")) {
          if (hp % 2 === 0)
            break;
        } else if (moves.has("substitute") && moves.has("endeavor")) {
          if (hp % 4 > 0)
            break;
        } else {
          if (srWeakness <= 0 || ability === "Regenerator" || ["Leftovers", "Life Orb"].includes(item))
            break;
          if (item !== "Sitrus Berry" && hp % (4 / srWeakness) > 0)
            break;
          if (!isDoubles && item === "Sitrus Berry" && hp % (4 / srWeakness) === 0)
            break;
        }
        evs.hp -= 4;
      }
      const noAttackStatMoves = [...moves].every((m) => {
        const move = this.dex.moves.get(m);
        if (move.damageCallback || move.damage)
          return true;
        if (move.id === "shellsidearm")
          return false;
        if (move.id === "terablast" && (species.id === "porygon2" || species.id === "thundurus" || moves.has("shiftgear") || species.baseStats.atk > species.baseStats.spa))
          return false;
        return move.category !== "Physical" || move.id === "bodypress" || move.id === "foulplay";
      });
      if (noAttackStatMoves && !moves.has("transform") && this.format.mod !== "partnersincrime") {
        evs.atk = 0;
        ivs.atk = 0;
      }
      if (moves.has("gyroball") || moves.has("trickroom")) {
        evs.spe = 0;
        ivs.spe = 0;
      }
      if (this.forceTeraType)
        teraType = this.forceTeraType;
      const shuffledMoves = Array.from(moves);
      this.prng.shuffle(shuffledMoves);
      return {
        name: species.baseSpecies,
        species: forme,
        gender: species.baseSpecies === "Greninja" ? "M" : species.gender,
        shiny: this.randomChance(1, 1024),
        level,
        moves: shuffledMoves,
        ability,
        evs,
        ivs,
        item,
        teraType,
        role
      };
    }
    getPokemonPool(type, pokemonToExclude = [], isMonotype = false, pokemonList) {
      const exclude = pokemonToExclude.map((p) => (0, import_dex.toID)(p.species));
      const pokemonPool = {};
      const baseSpeciesPool = [];
      for (const pokemon of pokemonList) {
        let species = this.dex.species.get(pokemon);
        if (exclude.includes(species.id))
          continue;
        if (isMonotype) {
          if (!species.types.includes(type))
            continue;
          if (typeof species.battleOnly === "string") {
            species = this.dex.species.get(species.battleOnly);
            if (!species.types.includes(type))
              continue;
          }
        }
        if (species.baseSpecies in pokemonPool) {
          pokemonPool[species.baseSpecies].push(pokemon);
        } else {
          pokemonPool[species.baseSpecies] = [pokemon];
        }
      }
      for (const baseSpecies of Object.keys(pokemonPool)) {
        const weight = baseSpecies === "Squawkabilly" ? 1 : Math.min(Math.ceil(pokemonPool[baseSpecies].length / 3), 3);
        for (let i = 0;i < weight; i++)
          baseSpeciesPool.push(baseSpecies);
      }
      return [pokemonPool, baseSpeciesPool];
    }
    randomTeam() {
      this.enforceNoDirectCustomBanlistChanges();
      const seed = this.prng.seed;
      const ruleTable = this.dex.formats.getRuleTable(this.format);
      const pokemon = [];
      const isMonotype = !!this.forceMonotype || ruleTable.has("sametypeclause");
      const isDoubles = this.format.gameType !== "singles";
      const typePool = this.dex.types.names().filter((name) => name !== "Stellar");
      const type = this.forceMonotype || this.sample(typePool);
      const usePotD = global.Config && Config.potd && ruleTable.has("potd");
      const potd = usePotD ? this.dex.species.get(Config.potd) : null;
      const baseFormes = {};
      const typeCount = {};
      const typeComboCount = {};
      const typeWeaknesses = {};
      const typeDoubleWeaknesses = {};
      const teamDetails = {};
      let numMaxLevelPokemon = 0;
      const pokemonList = isDoubles ? Object.keys(this.randomDoublesSets) : Object.keys(this.randomSets);
      const [pokemonPool, baseSpeciesPool] = this.getPokemonPool(type, pokemon, isMonotype, pokemonList);
      let leadsRemaining = this.format.gameType === "doubles" ? 2 : 1;
      while (baseSpeciesPool.length && pokemon.length < this.maxTeamSize) {
        const baseSpecies = this.sampleNoReplace(baseSpeciesPool);
        let species = this.dex.species.get(this.sample(pokemonPool[baseSpecies]));
        if (!species.exists)
          continue;
        if (baseFormes[species.baseSpecies])
          continue;
        if ((species.baseSpecies === "Ogerpon" || species.baseSpecies === "Terapagos") && teamDetails.teraBlast)
          continue;
        if (species.baseSpecies === "Zoroark" && pokemon.length >= this.maxTeamSize - 1)
          continue;
        const types = species.types;
        const typeCombo = types.slice().sort().join();
        const weakToFreezeDry = this.dex.getEffectiveness("Ice", species) > 0 || this.dex.getEffectiveness("Ice", species) > -2 && types.includes("Water");
        const limitFactor = Math.round(this.maxTeamSize / 6) || 1;
        if (!isMonotype && !this.forceMonotype) {
          let skip = false;
          for (const typeName of types) {
            if (typeCount[typeName] >= 2 * limitFactor) {
              skip = true;
              break;
            }
          }
          if (skip)
            continue;
          for (const typeName of this.dex.types.names()) {
            if (this.dex.getEffectiveness(typeName, species) > 0) {
              if (!typeWeaknesses[typeName])
                typeWeaknesses[typeName] = 0;
              if (typeWeaknesses[typeName] >= 3 * limitFactor) {
                skip = true;
                break;
              }
            }
            if (this.dex.getEffectiveness(typeName, species) > 1) {
              if (!typeDoubleWeaknesses[typeName])
                typeDoubleWeaknesses[typeName] = 0;
              if (typeDoubleWeaknesses[typeName] >= 1 * limitFactor) {
                skip = true;
                break;
              }
            }
          }
          if (skip)
            continue;
          if (this.dex.getEffectiveness("Fire", species) === 0 && Object.values(species.abilities).filter((a) => ["Dry Skin", "Fluffy"].includes(a)).length) {
            if (!typeWeaknesses["Fire"])
              typeWeaknesses["Fire"] = 0;
            if (typeWeaknesses["Fire"] >= 3 * limitFactor)
              continue;
          }
          if (weakToFreezeDry) {
            if (!typeWeaknesses["Freeze-Dry"])
              typeWeaknesses["Freeze-Dry"] = 0;
            if (typeWeaknesses["Freeze-Dry"] >= 4 * limitFactor)
              continue;
          }
          if (!this.adjustLevel && this.getLevel(species, isDoubles) === 100 && numMaxLevelPokemon >= limitFactor) {
            continue;
          }
        }
        if (!this.forceMonotype && isMonotype && typeComboCount[typeCombo] >= 3 * limitFactor)
          continue;
        if (potd?.exists && (pokemon.length === 1 || this.maxTeamSize === 1))
          species = potd;
        let set;
        if (leadsRemaining) {
          if (isDoubles && DOUBLES_NO_LEAD_POKEMON.includes(species.baseSpecies) || !isDoubles && NO_LEAD_POKEMON.includes(species.baseSpecies)) {
            if (pokemon.length + leadsRemaining === this.maxTeamSize)
              continue;
            set = this.randomSet(species, teamDetails, false, isDoubles);
            pokemon.push(set);
          } else {
            set = this.randomSet(species, teamDetails, true, isDoubles);
            pokemon.unshift(set);
            leadsRemaining--;
          }
        } else {
          set = this.randomSet(species, teamDetails, false, isDoubles);
          pokemon.push(set);
        }
        if (pokemon.length === this.maxTeamSize)
          break;
        baseFormes[species.baseSpecies] = 1;
        for (const typeName of types) {
          if (typeName in typeCount) {
            typeCount[typeName]++;
          } else {
            typeCount[typeName] = 1;
          }
        }
        if (typeCombo in typeComboCount) {
          typeComboCount[typeCombo]++;
        } else {
          typeComboCount[typeCombo] = 1;
        }
        for (const typeName of this.dex.types.names()) {
          if (this.dex.getEffectiveness(typeName, species) > 0) {
            typeWeaknesses[typeName]++;
          }
          if (this.dex.getEffectiveness(typeName, species) > 1) {
            typeDoubleWeaknesses[typeName]++;
          }
        }
        if (["Dry Skin", "Fluffy"].includes(set.ability) && this.dex.getEffectiveness("Fire", species) === 0) {
          typeWeaknesses["Fire"]++;
        }
        if (weakToFreezeDry)
          typeWeaknesses["Freeze-Dry"]++;
        if (set.level === 100)
          numMaxLevelPokemon++;
        if (set.ability === "Drizzle" || set.moves.includes("raindance"))
          teamDetails.rain = 1;
        if (set.ability === "Drought" || set.ability === "Orichalcum Pulse" || set.moves.includes("sunnyday")) {
          teamDetails.sun = 1;
        }
        if (set.ability === "Sand Stream")
          teamDetails.sand = 1;
        if (set.ability === "Snow Warning" || set.moves.includes("snowscape") || set.moves.includes("chillyreception")) {
          teamDetails.snow = 1;
        }
        if (set.moves.includes("healbell"))
          teamDetails.statusCure = 1;
        if (set.moves.includes("spikes") || set.moves.includes("ceaselessedge")) {
          teamDetails.spikes = (teamDetails.spikes || 0) + 1;
        }
        if (set.moves.includes("toxicspikes") || set.ability === "Toxic Debris")
          teamDetails.toxicSpikes = 1;
        if (set.moves.includes("stealthrock") || set.moves.includes("stoneaxe"))
          teamDetails.stealthRock = 1;
        if (set.moves.includes("stickyweb"))
          teamDetails.stickyWeb = 1;
        if (set.moves.includes("defog"))
          teamDetails.defog = 1;
        if (set.moves.includes("rapidspin") || set.moves.includes("mortalspin"))
          teamDetails.rapidSpin = 1;
        if (set.moves.includes("auroraveil") || set.moves.includes("reflect") && set.moves.includes("lightscreen")) {
          teamDetails.screens = 1;
        }
        if (set.role === "Tera Blast user" || species.baseSpecies === "Ogerpon" || species.baseSpecies === "Terapagos") {
          teamDetails.teraBlast = 1;
        }
      }
      if (pokemon.length < this.maxTeamSize && pokemon.length < 12) {
        throw new Error(`Could not build a random team for ${this.format} (seed=${seed})`);
      }
      return pokemon;
    }
    randomCCTeam() {
      this.enforceNoDirectCustomBanlistChanges();
      const dex = this.dex;
      const team = [];
      const natures = this.dex.natures.all();
      const items = this.dex.items.all();
      const randomN = this.randomNPokemon(this.maxTeamSize, this.forceMonotype, undefined, undefined, true);
      for (let forme of randomN) {
        let species = dex.species.get(forme);
        if (species.isNonstandard)
          species = dex.species.get(species.baseSpecies);
        let item = "";
        let isIllegalItem;
        let isBadItem;
        if (this.gen >= 2) {
          do {
            item = this.sample(items).name;
            isIllegalItem = this.dex.items.get(item).gen > this.gen || this.dex.items.get(item).isNonstandard;
            isBadItem = item.startsWith("TR") || this.dex.items.get(item).isPokeball;
          } while (isIllegalItem || isBadItem && this.randomChance(19, 20));
        }
        if (species.battleOnly) {
          if (typeof species.battleOnly === "string") {
            species = dex.species.get(species.battleOnly);
          } else {
            species = dex.species.get(this.sample(species.battleOnly));
          }
          forme = species.name;
        } else if (species.requiredItems && !species.requiredItems.some((req) => (0, import_dex.toID)(req) === item)) {
          if (!species.changesFrom)
            throw new Error(`${species.name} needs a changesFrom value`);
          species = dex.species.get(species.changesFrom);
          forme = species.name;
        }
        let itemData = this.dex.items.get(item);
        if (itemData.forcedForme && forme === this.dex.species.get(itemData.forcedForme).baseSpecies) {
          do {
            itemData = this.sample(items);
            item = itemData.name;
          } while (itemData.gen > this.gen || itemData.isNonstandard || itemData.forcedForme && forme === this.dex.species.get(itemData.forcedForme).baseSpecies);
        }
        const abilities = Object.values(species.abilities).filter((a) => this.dex.abilities.get(a).gen <= this.gen);
        const ability = this.gen <= 2 ? "No Ability" : this.sample(abilities);
        let pool = ["struggle"];
        if (forme === "Smeargle") {
          pool = this.dex.moves.all().filter((move) => !(move.isNonstandard || move.isZ || move.isMax || move.realMove)).map((m) => m.id);
        } else {
          pool = [...this.dex.species.getMovePool(species.id)];
        }
        const moves = this.multipleSamplesNoReplace(pool, this.maxMoveCount);
        const evs = { hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0 };
        const s = ["hp", "atk", "def", "spa", "spd", "spe"];
        let evpool = 510;
        do {
          const x = this.sample(s);
          const y = this.random(Math.min(256 - evs[x], evpool + 1));
          evs[x] += y;
          evpool -= y;
        } while (evpool > 0);
        const ivs = {
          hp: this.random(32),
          atk: this.random(32),
          def: this.random(32),
          spa: this.random(32),
          spd: this.random(32),
          spe: this.random(32)
        };
        const nature = this.sample(natures).name;
        const mbstmin = 1307;
        let stats = species.baseStats;
        if (species.baseSpecies === "Wishiwashi")
          stats = import_dex.Dex.species.get("wishiwashischool").baseStats;
        if (species.baseSpecies === "Terapagos")
          stats = import_dex.Dex.species.get("terapagosterastal").baseStats;
        let mbst = stats["hp"] * 2 + 31 + 21 + 100 + 10;
        mbst += stats["atk"] * 2 + 31 + 21 + 100 + 5;
        mbst += stats["def"] * 2 + 31 + 21 + 100 + 5;
        mbst += stats["spa"] * 2 + 31 + 21 + 100 + 5;
        mbst += stats["spd"] * 2 + 31 + 21 + 100 + 5;
        mbst += stats["spe"] * 2 + 31 + 21 + 100 + 5;
        let level;
        if (this.adjustLevel) {
          level = this.adjustLevel;
        } else {
          level = Math.floor(100 * mbstmin / mbst);
          while (level < 100) {
            mbst = Math.floor((stats["hp"] * 2 + 31 + 21 + 100) * level / 100 + 10);
            mbst += Math.floor(((stats["atk"] * 2 + 31 + 21 + 100) * level / 100 + 5) * level / 100);
            mbst += Math.floor((stats["def"] * 2 + 31 + 21 + 100) * level / 100 + 5);
            mbst += Math.floor(((stats["spa"] * 2 + 31 + 21 + 100) * level / 100 + 5) * level / 100);
            mbst += Math.floor((stats["spd"] * 2 + 31 + 21 + 100) * level / 100 + 5);
            mbst += Math.floor((stats["spe"] * 2 + 31 + 21 + 100) * level / 100 + 5);
            if (mbst >= mbstmin)
              break;
            level++;
          }
        }
        const happiness = this.random(256);
        const shiny = this.randomChance(1, 1024);
        const set = {
          name: species.baseSpecies,
          species: species.name,
          gender: species.gender,
          item,
          ability,
          moves,
          evs,
          ivs,
          nature,
          level,
          happiness,
          shiny
        };
        if (this.gen === 9) {
          if (this.forceTeraType) {
            set.teraType = this.forceTeraType;
          } else {
            set.teraType = this.sample(this.dex.types.all()).name;
          }
        }
        team.push(set);
      }
      return team;
    }
    randomNPokemon(n, requiredType, minSourceGen, ruleTable, requireMoves = false) {
      if (requiredType && !this.dex.types.get(requiredType).exists) {
        throw new Error(`"${requiredType}" is not a valid type.`);
      }
      const isNotCustom = !ruleTable;
      const pool = [];
      let speciesPool = [];
      if (isNotCustom) {
        speciesPool = [...this.dex.species.all()];
        for (const species of speciesPool) {
          if (species.isNonstandard && species.isNonstandard !== "Unobtainable")
            continue;
          if (requireMoves) {
            const hasMovesInCurrentGen = this.dex.species.getMovePool(species.id).size;
            if (!hasMovesInCurrentGen)
              continue;
          }
          if (requiredType && !species.types.includes(requiredType))
            continue;
          if (minSourceGen && species.gen < minSourceGen)
            continue;
          const num = species.num;
          if (num <= 0 || pool.includes(num))
            continue;
          pool.push(num);
        }
      } else {
        const EXISTENCE_TAG = ["past", "future", "lgpe", "unobtainable", "cap", "custom", "nonexistent"];
        const nonexistentBanReason = ruleTable.check("nonexistent");
        for (const species of this.dex.species.all()) {
          if (requiredType && !species.types.includes(requiredType))
            continue;
          let banReason = ruleTable.check("pokemon:" + species.id);
          if (banReason)
            continue;
          if (banReason !== "") {
            if (species.isMega && ruleTable.check("pokemontag:mega"))
              continue;
            banReason = ruleTable.check("basepokemon:" + (0, import_dex.toID)(species.baseSpecies));
            if (banReason)
              continue;
            if (banReason !== "" || this.dex.species.get(species.baseSpecies).isNonstandard !== species.isNonstandard) {
              const nonexistentCheck = import_tags.Tags.nonexistent.genericFilter(species) && nonexistentBanReason;
              let tagWhitelisted = false;
              let tagBlacklisted = false;
              for (const ruleid of ruleTable.tagRules) {
                if (ruleid.startsWith("*"))
                  continue;
                const tagid = ruleid.slice(12);
                const tag = import_tags.Tags[tagid];
                if ((tag.speciesFilter || tag.genericFilter)(species)) {
                  const existenceTag = EXISTENCE_TAG.includes(tagid);
                  if (ruleid.startsWith("+")) {
                    if (!existenceTag && nonexistentCheck)
                      continue;
                    tagWhitelisted = true;
                    break;
                  }
                  tagBlacklisted = true;
                  break;
                }
              }
              if (tagBlacklisted)
                continue;
              if (!tagWhitelisted) {
                if (ruleTable.check("pokemontag:allpokemon"))
                  continue;
              }
            }
          }
          speciesPool.push(species);
          const num = species.num;
          if (pool.includes(num))
            continue;
          pool.push(num);
        }
      }
      const hasDexNumber = {};
      for (let i = 0;i < n; i++) {
        const num = this.sampleNoReplace(pool);
        hasDexNumber[num] = i;
      }
      const formes = [];
      for (const species of speciesPool) {
        if (!(species.num in hasDexNumber))
          continue;
        if (isNotCustom && (species.gen > this.gen || species.isNonstandard && species.isNonstandard !== "Unobtainable"))
          continue;
        if (requiredType && !species.types.includes(requiredType))
          continue;
        if (!formes[hasDexNumber[species.num]])
          formes[hasDexNumber[species.num]] = [];
        formes[hasDexNumber[species.num]].push(species.name);
      }
      if (formes.length < n) {
        throw new Error(`Legal Pokemon forme count insufficient to support Max Team Size: (${formes.length} / ${n}).`);
      }
      const nPokemon = [];
      for (let i = 0;i < n; i++) {
        if (!formes[i].length) {
          throw new Error(`Invalid pokemon gen ${this.gen}: ${JSON.stringify(formes)} numbers ${JSON.stringify(hasDexNumber)}`);
        }
        nPokemon.push(this.sample(formes[i]));
      }
      return nPokemon;
    }
    randomHCTeam() {
      const hasCustomBans = this.hasDirectCustomBanlistChanges();
      const ruleTable = this.dex.formats.getRuleTable(this.format);
      const hasNonexistentBan = hasCustomBans && ruleTable.check("nonexistent");
      const hasNonexistentWhitelist = hasCustomBans && hasNonexistentBan === "";
      if (hasCustomBans) {
        this.enforceNoDirectComplexBans();
      }
      const doItemsExist = this.gen > 1;
      let itemPool = [];
      if (doItemsExist) {
        if (!hasCustomBans) {
          itemPool = [...this.dex.items.all()].filter((item) => item.gen <= this.gen && !item.isNonstandard);
        } else {
          const hasAllItemsBan = ruleTable.check("pokemontag:allitems");
          for (const item of this.dex.items.all()) {
            let banReason = ruleTable.check("item:" + item.id);
            if (banReason)
              continue;
            if (banReason !== "" && item.id) {
              if (hasAllItemsBan)
                continue;
              if (item.isNonstandard) {
                banReason = ruleTable.check("pokemontag:" + (0, import_dex.toID)(item.isNonstandard));
                if (banReason)
                  continue;
                if (banReason !== "" && item.isNonstandard !== "Unobtainable") {
                  if (hasNonexistentBan)
                    continue;
                  if (!hasNonexistentWhitelist)
                    continue;
                }
              }
            }
            itemPool.push(item);
          }
          if (ruleTable.check("item:noitem")) {
            this.enforceCustomPoolSizeNoComplexBans("item", itemPool, this.maxTeamSize, "Max Team Size");
          }
        }
      }
      const doAbilitiesExist = this.gen > 2 && this.dex.currentMod !== "gen7letsgo";
      let abilityPool = [];
      if (doAbilitiesExist) {
        if (!hasCustomBans) {
          abilityPool = [...this.dex.abilities.all()].filter((ability) => ability.gen <= this.gen && !ability.isNonstandard);
        } else {
          const hasAllAbilitiesBan = ruleTable.check("pokemontag:allabilities");
          for (const ability of this.dex.abilities.all()) {
            let banReason = ruleTable.check("ability:" + ability.id);
            if (banReason)
              continue;
            if (banReason !== "") {
              if (hasAllAbilitiesBan)
                continue;
              if (ability.isNonstandard) {
                banReason = ruleTable.check("pokemontag:" + (0, import_dex.toID)(ability.isNonstandard));
                if (banReason)
                  continue;
                if (banReason !== "") {
                  if (hasNonexistentBan)
                    continue;
                  if (!hasNonexistentWhitelist)
                    continue;
                }
              }
            }
            abilityPool.push(ability);
          }
          if (ruleTable.check("ability:noability")) {
            this.enforceCustomPoolSizeNoComplexBans("ability", abilityPool, this.maxTeamSize, "Max Team Size");
          }
        }
      }
      const setMoveCount = ruleTable.maxMoveCount;
      let movePool = [];
      if (!hasCustomBans) {
        movePool = [...this.dex.moves.all()].filter((move) => move.gen <= this.gen && !move.isNonstandard);
      } else {
        const hasAllMovesBan = ruleTable.check("pokemontag:allmoves");
        for (const move of this.dex.moves.all()) {
          let banReason = ruleTable.check("move:" + move.id);
          if (banReason)
            continue;
          if (banReason !== "") {
            if (hasAllMovesBan)
              continue;
            if (move.isNonstandard) {
              banReason = ruleTable.check("pokemontag:" + (0, import_dex.toID)(move.isNonstandard));
              if (banReason)
                continue;
              if (banReason !== "" && move.isNonstandard !== "Unobtainable") {
                if (hasNonexistentBan)
                  continue;
                if (!hasNonexistentWhitelist)
                  continue;
              }
            }
          }
          movePool.push(move);
        }
        this.enforceCustomPoolSizeNoComplexBans("move", movePool, this.maxTeamSize * setMoveCount, "Max Team Size * Max Move Count");
      }
      const doNaturesExist = this.gen > 2;
      let naturePool = [];
      if (doNaturesExist) {
        if (!hasCustomBans) {
          naturePool = [...this.dex.natures.all()];
        } else {
          const hasAllNaturesBan = ruleTable.check("pokemontag:allnatures");
          for (const nature of this.dex.natures.all()) {
            let banReason = ruleTable.check("nature:" + nature.id);
            if (banReason)
              continue;
            if (banReason !== "" && nature.id) {
              if (hasAllNaturesBan)
                continue;
              if (nature.isNonstandard) {
                banReason = ruleTable.check("pokemontag:" + (0, import_dex.toID)(nature.isNonstandard));
                if (banReason)
                  continue;
                if (banReason !== "" && nature.isNonstandard !== "Unobtainable") {
                  if (hasNonexistentBan)
                    continue;
                  if (!hasNonexistentWhitelist)
                    continue;
                }
              }
            }
            naturePool.push(nature);
          }
        }
      }
      const randomN = this.randomNPokemon(this.maxTeamSize, this.forceMonotype, undefined, hasCustomBans ? ruleTable : undefined);
      const team = [];
      for (const forme of randomN) {
        const species = this.dex.species.get(forme);
        let item = "";
        let itemData;
        let isBadItem;
        if (doItemsExist) {
          do {
            itemData = this.sampleNoReplace(itemPool);
            item = itemData?.name;
            isBadItem = item.startsWith("TR") || itemData.isPokeball;
          } while (isBadItem && this.randomChance(19, 20) && itemPool.length > this.maxTeamSize);
        }
        let ability = "No Ability";
        let abilityData;
        if (doAbilitiesExist) {
          abilityData = this.sampleNoReplace(abilityPool);
          ability = abilityData?.name;
        }
        const m = [];
        do {
          const move = this.sampleNoReplace(movePool);
          m.push(move.id);
        } while (m.length < setMoveCount);
        const evs = { hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0 };
        if (this.gen === 6) {
          let evpool = 510;
          do {
            const x = this.sample(import_dex.Dex.stats.ids());
            const y = this.random(Math.min(256 - evs[x], evpool + 1));
            evs[x] += y;
            evpool -= y;
          } while (evpool > 0);
        } else {
          for (const x of import_dex.Dex.stats.ids()) {
            evs[x] = this.random(256);
          }
        }
        const ivs = {
          hp: this.random(32),
          atk: this.random(32),
          def: this.random(32),
          spa: this.random(32),
          spd: this.random(32),
          spe: this.random(32)
        };
        let nature = "";
        if (doNaturesExist && naturePool.length > 0) {
          nature = this.sample(naturePool).name;
        }
        const mbstmin = 1307;
        const stats = species.baseStats;
        let mbst = stats["hp"] * 2 + 31 + 21 + 100 + 10;
        mbst += stats["atk"] * 2 + 31 + 21 + 100 + 5;
        mbst += stats["def"] * 2 + 31 + 21 + 100 + 5;
        mbst += stats["spa"] * 2 + 31 + 21 + 100 + 5;
        mbst += stats["spd"] * 2 + 31 + 21 + 100 + 5;
        mbst += stats["spe"] * 2 + 31 + 21 + 100 + 5;
        let level;
        if (this.adjustLevel) {
          level = this.adjustLevel;
        } else {
          level = Math.floor(100 * mbstmin / mbst);
          while (level < 100) {
            mbst = Math.floor((stats["hp"] * 2 + 31 + 21 + 100) * level / 100 + 10);
            mbst += Math.floor(((stats["atk"] * 2 + 31 + 21 + 100) * level / 100 + 5) * level / 100);
            mbst += Math.floor((stats["def"] * 2 + 31 + 21 + 100) * level / 100 + 5);
            mbst += Math.floor(((stats["spa"] * 2 + 31 + 21 + 100) * level / 100 + 5) * level / 100);
            mbst += Math.floor((stats["spd"] * 2 + 31 + 21 + 100) * level / 100 + 5);
            mbst += Math.floor((stats["spe"] * 2 + 31 + 21 + 100) * level / 100 + 5);
            if (mbst >= mbstmin)
              break;
            level++;
          }
        }
        const happiness = this.random(256);
        const shiny = this.randomChance(1, 1024);
        const set = {
          name: species.baseSpecies,
          species: species.name,
          gender: species.gender,
          item,
          ability,
          moves: m,
          evs,
          ivs,
          nature,
          level,
          happiness,
          shiny
        };
        if (this.gen === 9) {
          if (this.forceTeraType) {
            set.teraType = this.forceTeraType;
          } else {
            set.teraType = this.sample(this.dex.types.all()).name;
          }
        }
        team.push(set);
      }
      return team;
    }
    randomBSSFactorySet(species, teamData) {
      const id = (0, import_dex.toID)(species.name);
      const setList = this.randomBSSFactorySets[id].sets;
      const movesMax = {
        batonpass: 1,
        stealthrock: 1,
        toxicspikes: 1,
        trickroom: 1,
        auroraveil: 1
      };
      const weatherAbilities = ["drizzle", "drought", "snowwarning", "sandstream"];
      const terrainAbilities = {
        electricsurge: "electric",
        psychicsurge: "psychic",
        grassysurge: "grassy",
        seedsower: "grassy",
        mistysurge: "misty"
      };
      const terrainItemsRequire = {
        electricseed: "electric",
        psychicseed: "psychic",
        grassyseed: "grassy",
        mistyseed: "misty"
      };
      const maxWantsTera = 2;
      const effectivePool = [];
      for (const curSet of setList) {
        let reject = false;
        if (curSet.wantsTera && teamData.wantsTeraCount && teamData.wantsTeraCount >= maxWantsTera) {
          continue;
        }
        if (teamData.weather && weatherAbilities.includes(curSet.ability)) {
          continue;
        }
        if (terrainAbilities[curSet.ability]) {
          if (!teamData.terrain)
            teamData.terrain = [];
          teamData.terrain.push(terrainAbilities[curSet.ability]);
        }
        for (const item of curSet.item) {
          if (terrainItemsRequire[item] && !teamData.terrain?.includes(terrainItemsRequire[item])) {
            reject = true;
            break;
          }
        }
        const curSetMoveVariants = [];
        for (const move of curSet.moves) {
          const variantIndex = this.random(move.length);
          const moveId = (0, import_dex.toID)(move[variantIndex]);
          if (movesMax[moveId] && teamData.has[moveId] >= movesMax[moveId]) {
            reject = true;
            break;
          }
          curSetMoveVariants.push(variantIndex);
        }
        if (reject)
          continue;
        const set = { set: curSet, moveVariants: curSetMoveVariants };
        effectivePool.push(set);
      }
      if (!effectivePool.length) {
        if (!teamData.forceResult)
          return null;
        for (const curSet of setList) {
          effectivePool.push({ set: curSet });
        }
      }
      let setData = this.sample(effectivePool);
      const total = effectivePool.reduce((a, b) => a + b.set.weight, 0);
      const setRand = this.random(total);
      let cur = 0;
      for (const set of effectivePool) {
        cur += set.set.weight;
        if (cur > setRand) {
          setData = set;
          break;
        }
      }
      const moves = [];
      for (const [i, moveSlot] of setData.set.moves.entries()) {
        moves.push(setData.moveVariants ? moveSlot[setData.moveVariants[i]] : this.sample(moveSlot));
      }
      return {
        name: setData.set.species || species.baseSpecies,
        species: setData.set.species,
        teraType: this.sampleIfArray(setData.set.teraType),
        gender: setData.set.gender || species.gender || (this.randomChance(1, 2) ? "M" : "F"),
        item: this.sampleIfArray(setData.set.item) || "",
        ability: this.sampleIfArray(setData.set.ability),
        shiny: this.randomChance(1, 1024),
        level: 50,
        happiness: 255,
        evs: { hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0, ...setData.set.evs },
        ivs: { hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31, ...setData.set.ivs },
        nature: setData.set.nature || "Serious",
        moves,
        wantsTera: setData.set.wantsTera
      };
    }
    randomBSSFactoryTeam(side, depth = 0) {
      this.enforceNoDirectCustomBanlistChanges();
      const forceResult = depth >= 4;
      const pokemon = [];
      const pokemonPool = Object.keys(this.randomBSSFactorySets);
      const teamData = {
        typeCount: {},
        typeComboCount: {},
        baseFormes: {},
        has: {},
        wantsTeraCount: 0,
        forceResult,
        weaknesses: {},
        resistances: {}
      };
      const weatherAbilitiesSet = {
        drizzle: "raindance",
        drought: "sunnyday",
        snowwarning: "hail",
        sandstream: "sandstorm"
      };
      const resistanceAbilities = {
        waterabsorb: ["Water"],
        flashfire: ["Fire"],
        lightningrod: ["Electric"],
        voltabsorb: ["Electric"],
        thickfat: ["Ice", "Fire"],
        levitate: ["Ground"]
      };
      const limitFactor = Math.ceil(this.maxTeamSize / 6);
      const shuffledSpecies = [];
      for (const speciesName of pokemonPool) {
        const sortObject = {
          speciesName,
          score: Math.pow(this.prng.next(), 1 / this.randomBSSFactorySets[speciesName].weight)
        };
        shuffledSpecies.push(sortObject);
      }
      shuffledSpecies.sort((a, b) => a.score - b.score);
      while (shuffledSpecies.length && pokemon.length < this.maxTeamSize) {
        const species = this.dex.species.get(shuffledSpecies.pop().speciesName);
        if (!species.exists)
          continue;
        if (this.forceMonotype && !species.types.includes(this.forceMonotype))
          continue;
        if (teamData.baseFormes[species.baseSpecies])
          continue;
        const types = species.types;
        let skip = false;
        if (!this.forceMonotype) {
          for (const type of types) {
            if (teamData.typeCount[type] >= 2 * limitFactor && this.randomChance(4, 5)) {
              skip = true;
              break;
            }
          }
        }
        if (skip)
          continue;
        const set = this.randomBSSFactorySet(species, teamData);
        if (!set)
          continue;
        let typeCombo = types.slice().sort().join();
        if (set.ability === "Drought" || set.ability === "Drizzle") {
          typeCombo = set.ability;
        }
        if (!this.forceMonotype && teamData.typeComboCount[typeCombo] >= limitFactor)
          continue;
        const itemData = this.dex.items.get(set.item);
        if (teamData.has[itemData.id])
          continue;
        pokemon.push(set);
        for (const type of types) {
          if (type in teamData.typeCount) {
            teamData.typeCount[type]++;
          } else {
            teamData.typeCount[type] = 1;
          }
        }
        if (typeCombo in teamData.typeComboCount) {
          teamData.typeComboCount[typeCombo]++;
        } else {
          teamData.typeComboCount[typeCombo] = 1;
        }
        teamData.baseFormes[species.baseSpecies] = 1;
        teamData.has[itemData.id] = 1;
        if (set.wantsTera) {
          if (!teamData.wantsTeraCount)
            teamData.wantsTeraCount = 0;
          teamData.wantsTeraCount++;
        }
        const abilityState = this.dex.abilities.get(set.ability);
        if (abilityState.id in weatherAbilitiesSet) {
          teamData.weather = weatherAbilitiesSet[abilityState.id];
        }
        for (const move of set.moves) {
          const moveId = (0, import_dex.toID)(move);
          if (moveId in teamData.has) {
            teamData.has[moveId]++;
          } else {
            teamData.has[moveId] = 1;
          }
        }
        for (const typeName of this.dex.types.names()) {
          if (teamData.resistances[typeName] >= 1)
            continue;
          if (resistanceAbilities[abilityState.id]?.includes(typeName) || !this.dex.getImmunity(typeName, types)) {
            teamData.resistances[typeName] = (teamData.resistances[typeName] || 0) + 1;
            if (teamData.resistances[typeName] >= 1)
              teamData.weaknesses[typeName] = 0;
            continue;
          }
          const typeMod = this.dex.getEffectiveness(typeName, types);
          if (typeMod < 0) {
            teamData.resistances[typeName] = (teamData.resistances[typeName] || 0) + 1;
            if (teamData.resistances[typeName] >= 1)
              teamData.weaknesses[typeName] = 0;
          } else if (typeMod > 0) {
            teamData.weaknesses[typeName] = (teamData.weaknesses[typeName] || 0) + 1;
          }
        }
      }
      if (!teamData.forceResult && pokemon.length < this.maxTeamSize)
        return this.randomBSSFactoryTeam(side, ++depth);
      if (!teamData.forceResult && !this.forceMonotype) {
        for (const type in teamData.weaknesses) {
          if (teamData.weaknesses[type] >= 3 * limitFactor)
            return this.randomBSSFactoryTeam(side, ++depth);
        }
      }
      return pokemon;
    }
  }
  var teams_default = RandomTeams;
});

// ../pokemon-showdown/dist/data/mods/gen9ssb/random-teams.js
var require_random_teams = __commonJS((exports, module) => {
  var __create2 = Object.create;
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __getProtoOf2 = Object.getPrototypeOf;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var random_teams_exports = {};
  __export2(random_teams_exports, {
    RandomStaffBrosTeams: () => RandomStaffBrosTeams,
    default: () => random_teams_default,
    ssbSets: () => ssbSets
  });
  module.exports = __toCommonJS2(random_teams_exports);
  var import_teams = __toESM2(require_teams());
  var ssbSets = {
    aegii: {
      species: "Scizor",
      ability: "Unburden",
      item: "Lansat Berry",
      gender: "M",
      moves: ["Acrobatics", "Attack Order", ["Cross Chop", "Night Slash"]],
      signatureMove: "Equip Aegislash",
      evs: { hp: 4, atk: 252, spe: 252 },
      nature: "Adamant",
      teraType: "Flying"
    },
    Aelita: {
      species: "Melmetal",
      ability: "Fortified Metal",
      item: "Leftovers",
      gender: "",
      moves: ["Heavy Slam", "Bitter Blade", "Liquidation"],
      signatureMove: "Smelt",
      evs: { hp: 252, atk: 4, spd: 252 },
      nature: "Careful",
      teraType: "Steel",
      shiny: true
    },
    Aethernum: {
      species: "Giratina-Origin",
      ability: "The Eminence in the Shadow",
      item: "Griseous Core",
      gender: "",
      moves: ["Fiery Wrath", "Lunar Blessing", "Dragon Energy"],
      signatureMove: "I. AM. ATOMIC.",
      evs: { atk: 4, spa: 252, spe: 252 },
      nature: "Hasty",
      teraType: "Dark",
      shiny: true
    },
    Akir: {
      species: "Slowbro",
      ability: "Take it Slow",
      item: "Heavy-Duty Boots",
      gender: "M",
      moves: ["Future Sight", "Slack Off", "Steam Eruption"],
      signatureMove: "Free Switch Button",
      evs: { hp: 248, def: 8, spa: 252 },
      ivs: { spe: 0 },
      nature: "Relaxed",
      teraType: "Fairy"
    },
    Alex: {
      species: "Sprigatito",
      ability: "Pawprints",
      item: "Eviolite",
      gender: "",
      moves: [["Charm", "Tickle"], "Protect", "Soak"],
      signatureMove: "Spicier Extract",
      evs: { hp: 252, def: 4, spd: 252 },
      nature: "Careful",
      teraType: "Water"
    },
    Alexander489: {
      species: "Charizard",
      ability: "Confirmed Town",
      item: "Heavy-Duty Boots",
      gender: "M",
      moves: ["No Retreat", "Bitter Blade", "Dual Wingbeat"],
      signatureMove: "Scumhunt",
      evs: { atk: 252, spa: 4, spe: 252 },
      nature: "Naughty",
      teraType: "Fire",
      shiny: true
    },
    Apple: {
      species: "Applin",
      ability: "Orchard's Gift",
      item: "Lum Berry",
      gender: ["M", "F"],
      moves: ["Apple Acid", "Leech Seed", "Dragon Pulse"],
      signatureMove: "Wopple or Flopple",
      evs: { hp: 252, spa: 4, spd: 252 },
      nature: "Sassy",
      shiny: 2,
      teraType: "Dragon"
    },
    "Appletun a la Mode": {
      species: "Appletun",
      ability: "Served Cold",
      item: "Sitrus Berry",
      gender: "F",
      moves: ["Freeze-Dry", "Apple Acid", "Fickle Beam"],
      signatureMove: "Extra Course",
      evs: { hp: 252, spa: 4, spd: 252 },
      nature: "Calm",
      teraType: "Ground"
    },
    aQrator: {
      species: "Totodile",
      ability: "Neverending fHunt",
      item: "Eviolite",
      gender: "F",
      moves: ["Whirlpool", "Noble Roar", "Slack Off"],
      signatureMove: "Tori's Stori",
      evs: { hp: 252, def: 4, spd: 252 },
      nature: "Sassy",
      teraType: "Fighting"
    },
    "A Quag To The Past": {
      species: "Quagsire",
      ability: "Quag of Ruin",
      item: "Leftovers",
      gender: "M",
      moves: ["Surging Strikes", "Precipice Blades", "Gunk Shot"],
      signatureMove: "Sire Switch",
      evs: { hp: 252, def: 4, spd: 252 },
      nature: "Careful",
      teraType: "Water"
    },
    "A Quag To The Past-Clodsire": {
      species: "Clodsire",
      ability: "Clod of Ruin",
      item: "Leftovers",
      gender: "M",
      moves: ["Coil", "Strength Sap", "Toxic"],
      signatureMove: "Sire Switch",
      evs: { hp: 252, def: 4, spd: 252 },
      nature: "Careful",
      teraType: "Poison",
      skip: "A Quag To The Past"
    },
    Archas: {
      species: "Lilligant",
      ability: "Saintly Bullet",
      item: "Lilligantium Z",
      gender: "F",
      moves: ["Giga Drain", "Snipe Shot", "Aeroblast"],
      signatureMove: "Quiver Dance",
      evs: { spa: 252, spd: 4, spe: 252 },
      nature: "Timid"
    },
    Arcueid: {
      species: "Deoxys-Defense",
      ability: "Marble Phantasm",
      item: "Heavy-Duty Boots",
      gender: "N",
      moves: [["Lunar Blessing", "Jungle Healing"], "Body Press", ["Toxic", "Will-O-Wisp", "Topsy-Turvy"]],
      signatureMove: "Funny Vamp",
      evs: { hp: 248, def: 252, spd: 8 },
      nature: "Bold",
      teraType: "Fairy",
      shiny: true
    },
    "Arcueid-Attack": {
      species: "Deoxys-Attack",
      ability: "Marble Phantasm",
      item: "Heavy-Duty Boots",
      gender: "N",
      moves: ["Moonblast", "Photon Geyser", "Flamethrower"],
      signatureMove: "Funny Vamp",
      evs: { hp: 4, spa: 252, spe: 252 },
      nature: "Timid",
      teraType: "Fairy",
      shiny: true,
      skip: "Arcueid"
    },
    Arsenal: {
      species: "Rabsca",
      ability: "Absorb Phys",
      item: "Covert Cloak",
      gender: "N",
      moves: ["Recover", "Calm Mind", "Speed Swap"],
      signatureMove: "Megidolaon",
      evs: { hp: 4, spa: 252, spd: 252 },
      nature: "Modest",
      teraType: "Stellar",
      shiny: true
    },
    Artemis: {
      species: "Genesect",
      ability: "Supervised Learning",
      item: "Choice Specs",
      gender: "N",
      moves: [],
      signatureMove: "Automated Response",
      evs: { hp: 4, spa: 252, spe: 252 },
      nature: "Serious",
      shiny: true
    },
    Arya: {
      species: "Flygon",
      ability: "Tinted Lens",
      item: "Flygonite",
      gender: "F",
      moves: ["Clanging Scales", "Roost", "Bug Buzz"],
      signatureMove: "Anyone can be killed",
      evs: { spa: 252, spd: 4, spe: 252 },
      nature: "Timid"
    },
    Audiino: {
      species: "Audino",
      ability: "Mitosis",
      item: "Leftovers",
      gender: "N",
      moves: ["Recover", "Moongeist Beam", "Hyper Voice"],
      signatureMove: "Thinking In Progress",
      evs: { hp: 252, def: 4, spa: 252 },
      nature: "Modest",
      teraType: "Ghost"
    },
    autumn: {
      species: "Flutter Mane",
      ability: "Protosynthesis",
      item: "Booster Energy",
      gender: "N",
      moves: ["Moonblast", "Taunt", "Strength Sap"],
      signatureMove: "Season's Smite",
      evs: { def: 8, spa: 244, spe: 252 },
      nature: "Timid",
      teraType: "Fairy"
    },
    ausma: {
      species: "Hatterene",
      ability: "Cascade",
      item: "Leftovers",
      gender: "F",
      moves: ["Light of Ruin", "Strength Sap", "Substitute"],
      signatureMove: "Sigil's Storm",
      evs: { hp: 252, def: 4, spa: 252 },
      ivs: { atk: 0, spe: 0 },
      nature: "Modest",
      teraType: "Fairy"
    },
    "ausma-Mismagius": {
      species: "Mismagius",
      ability: "Levitate",
      item: "Leftovers",
      gender: "F",
      moves: ["Light of Ruin", "Strength Sap", "Substitute"],
      signatureMove: "Sigil's Storm",
      evs: { spa: 252, spd: 4, spe: 252 },
      ivs: { atk: 0 },
      nature: "Modest",
      teraType: "Fairy",
      skip: "ausma"
    },
    "ausma-Fennekin": {
      species: "Fennekin",
      ability: "Blaze",
      item: "",
      gender: "",
      moves: ["Tackle", "Growl"],
      signatureMove: "Ember",
      evs: {},
      skip: "ausma"
    },
    AuzBat: {
      species: "Swoobat",
      ability: "Magic Guard",
      item: "Focus Sash",
      gender: "M",
      moves: ["Stored Power", "Hurricane", ["Roost", "Focus Blast"]],
      signatureMove: "Prep Time",
      evs: { hp: 4, spa: 252, spe: 252 },
      nature: "Timid",
      teraType: "Psychic",
      shiny: 8192
    },
    avarice: {
      species: "Sinistcha-Masterpiece",
      ability: "Serene Grace",
      item: ["Covert Cloak", "Leftovers"],
      gender: "N",
      moves: ["Strength Sap", "Calm Mind", "Matcha Gotcha"],
      signatureMove: "yu-gi-oh reference",
      evs: { hp: 252, def: 160, spe: 90 },
      nature: "Bold",
      teraType: "Steel"
    },
    Beowulf: {
      species: "Beedrill",
      ability: "Intrepid Sword",
      item: "Beedrillite",
      gender: "M",
      moves: ["Poison Jab", "X-Scissor", ["Earthquake", "Volt Tackle", "Glacial Lance"]],
      signatureMove: "Buzzer Stinger Counter",
      evs: { hp: 4, atk: 252, spe: 252 },
      nature: "Jolly",
      shiny: 2
    },
    berry: {
      species: "Regirock",
      ability: "Sturdy",
      item: "Maranga Berry",
      gender: "F",
      moves: ["Curse", "Salt Cure", "Stone Axe"],
      signatureMove: "what kind",
      evs: { hp: 252, atk: 4, spd: 252 },
      nature: "Careful",
      teraType: "Rock"
    },
    Bert122: {
      species: "Sableye",
      ability: "Prankster",
      item: "Sablenite",
      gender: "",
      moves: ["Metal Burst", "Recover", "Will-O-Wisp"],
      signatureMove: "Shatter and Scatter",
      evs: { hp: 252, def: 28, spd: 224 },
      ivs: { atk: 0, spe: 0 },
      nature: "Relaxed"
    },
    Billo: {
      species: "Cosmog",
      ability: "Wonder Guard",
      item: "Eviolite",
      gender: "N",
      moves: [],
      signatureMove: "Hack Check",
      evs: { spa: 252, spd: 4, spe: 252 },
      nature: "Timid"
    },
    "Billo-Solgaleo": {
      species: "Solgaleo",
      ability: "Magic Guard",
      item: "Choice Scarf",
      gender: "N",
      moves: ["Wave Crash", "Volt Tackle", "Flare Blitz"],
      signatureMove: "Head Smash",
      evs: { atk: 252, spd: 4, spe: 252 },
      nature: "Jolly",
      skip: "Billo",
      shiny: true
    },
    "Billo-Lunala": {
      species: "Lunala",
      ability: "Shadow Shield",
      item: "Lunalium Z",
      gender: "N",
      moves: ["Moongeist Beam", "Moonblast", "Ice Beam"],
      signatureMove: "Thunderbolt",
      evs: { spa: 252, spd: 4, spe: 252 },
      nature: "Timid",
      skip: "Billo"
    },
    blazeofvictory: {
      species: "Sylveon",
      ability: "Prismatic Lens",
      item: "Leftovers",
      gender: "F",
      moves: ["Wish", "Baton Pass", "Hyper Voice"],
      signatureMove: "Veto",
      evs: { hp: 252, spa: 252, spe: 4 },
      nature: "Modest",
      teraType: "Fairy"
    },
    Blitz: {
      species: "Chi-Yu",
      ability: "Blitz of Ruin",
      item: "Life Orb",
      gender: "N",
      moves: ["Fiery Wrath", "Lava Plume", "Nasty Plot"],
      signatureMove: "Geyser Blast",
      evs: { def: 4, spa: 252, spe: 252 },
      nature: "Modest",
      teraType: "Water",
      shiny: true
    },
    Breadstycks: {
      species: "Dachsbun",
      ability: "Painful Exit",
      item: "Leftovers",
      gender: "",
      moves: ["Protect", "Rest", "Play Rough"],
      signatureMove: "Baker's Douze Off",
      evs: { hp: 252, def: 252, spd: 4 },
      nature: "Impish",
      teraType: "Steel"
    },
    Cake: {
      species: "Dunsparce",
      ability: "Scrappy",
      item: "Eviolite",
      gender: "N",
      moves: [
        "Topsy-Turvy",
        "Lunar Blessing",
        "Lovely Kiss",
        "Glare",
        "Knock Off",
        "Gastro Acid",
        "Trick Room",
        "Toxic",
        "Heal Bell",
        "Octolock",
        "G-Max Befuddle",
        "G-Max Centiferno",
        "G-Max Cannonade",
        "Magic Powder",
        "Whirlwind",
        "Lunar Dance",
        "Power Split",
        "Snatch",
        "Heal Order",
        "Parting Shot",
        "Population Bomb",
        "Metronome"
      ],
      signatureMove: "Role System",
      evs: { hp: 85, atk: 85, def: 85, spa: 85, spd: 85, spe: 85 },
      nature: "Hardy",
      teraType: ["Ghost", "Poison", "Fairy"],
      shiny: 1024,
      level: 97
    },
    chaos: {
      species: "Iron Jugulis",
      ability: "Transistor",
      item: "Heavy-Duty Boots",
      gender: "N",
      moves: [["Oblivion Wing", "Hurricane"], ["Thunderclap", "Volt Switch"], ["Defog", "Roost"]],
      signatureMove: "Outage",
      evs: { spa: 252, spd: 4, spe: 252 },
      nature: "Timid",
      teraType: ["Steel", "Flying", "Electric", "Dark"]
    },
    Chloe: {
      species: "Tsareena",
      ability: "Acetosa",
      item: "Assault Vest",
      gender: "F",
      moves: ["Rapid Spin", "Fishious Rend", "Stone Axe"],
      signatureMove: "De Todas las Flores",
      evs: { atk: 252, spd: 4, spe: 252 },
      nature: "Jolly",
      teraType: "Grass",
      shiny: true
    },
    ciran: {
      species: "Rapidash",
      ability: "Defiant",
      item: "Heavy-Duty Boots",
      gender: "N",
      moves: ["Protect", "Sketch", "Bitter Blade"],
      signatureMove: "Summon Monster VIII: Fiendish monstrous Piplupede, Colossal",
      evs: { atk: 252, spd: 4, spe: 252 },
      nature: "Jolly",
      teraType: "Poison",
      shiny: true
    },
    Clefable: {
      species: "Clefable",
      ability: "That's Hacked",
      item: "Leftovers",
      gender: "M",
      moves: ["Cosmic Power", "Soft-Boiled", "Thunder Wave"],
      signatureMove: "Giveaway!",
      evs: { hp: 252, def: 200, spd: 56 },
      nature: "Calm",
      teraType: "Any",
      shiny: true
    },
    Clementine: {
      species: "Avalugg",
      ability: "Melting Point",
      item: "Heavy-Duty Boots",
      gender: "",
      moves: ["Land's Wrath", "Flip Turn", "Milk Drink"],
      signatureMove: "(\u256F\xB0o\xB0\uFF09\u256F\uFE35 \u253B\u2501\u253B",
      nature: "Quirky",
      teraType: ["Poison", "Steel"]
    },
    "Clementine-Flipped": {
      species: "Avalugg-Hisui",
      ability: "Melting Point",
      item: "Heavy-Duty Boots",
      gender: "",
      moves: ["Earth Power", "Volt Switch", "Heal Pulse"],
      signatureMove: "(\u256F\xB0o\xB0\uFF09\u256F\uFE35 \u253B\u2501\u253B",
      nature: "Quirky",
      teraType: ["Poison", "Steel"],
      skip: "Clementine"
    },
    clerica: {
      species: "Mimikyu",
      ability: "Masquerade",
      item: "Ghostium Z",
      gender: "F",
      moves: ["Protect", "Substitute", "Phantom Force"],
      signatureMove: "Stockholm Syndrome",
      evs: { atk: 252, spd: 4, spe: 252 },
      nature: "Jolly"
    },
    Clouds: {
      species: "Corvisquire",
      ability: "Jet Stream",
      item: "Leftovers",
      gender: "M",
      moves: ["Brave Bird", "Roost", "Defog"],
      signatureMove: "Winds of Change",
      evs: { hp: 252, atk: 4, def: 252 },
      nature: "Jolly",
      teraType: "Flying",
      shiny: 822
    },
    Coolcodename: {
      species: "Victini",
      ability: "Firewall",
      item: "Heavy-Duty Boots",
      gender: "M",
      moves: ["Searing Shot", "Psychic", "Dazzling Gleam"],
      signatureMove: "Haxer's Will",
      evs: { spa: 252, spd: 4, spe: 252 },
      nature: "Timid",
      teraType: "Fairy",
      shiny: 1024
    },
    Corthius: {
      species: "Thwackey",
      ability: "Grassy Emperor",
      item: "Eviolite",
      gender: "M",
      moves: ["Swords Dance", "U-turn", "Close Combat"],
      signatureMove: "Monkey Beat Up",
      evs: { atk: 252, def: 4, spe: 252 },
      nature: "Adamant",
      shiny: 69
    },
    Daki: {
      species: "Raging Bolt",
      ability: "Astrothunder",
      item: "Leftovers",
      gender: "N",
      moves: ["Thunder", "Dragon Pulse", "Calm Mind"],
      signatureMove: "Antidote",
      evs: { hp: 148, def: 156, spa: 204 },
      nature: "Quiet",
      teraType: "Steel"
    },
    "Dawn of Artemis": {
      species: "Necrozma",
      ability: "Form Change",
      item: "Expert Belt",
      gender: "F",
      moves: ["Calm Mind", "Photon Geyser", "Earth Power"],
      signatureMove: "Magical Focus",
      evs: { spa: 252, spd: 4, spe: 252 },
      nature: "Timid",
      teraType: "Psychic",
      shiny: 8192
    },
    "Dawn of Artemis-Ultra": {
      species: "Necrozma-Ultra",
      ability: "Form Change",
      item: "Expert Belt",
      gender: "F",
      moves: ["Swords Dance", "Photon Geyser", "Outrage"],
      signatureMove: "Magical Focus",
      evs: { atk: 252, spd: 4, spe: 252 },
      nature: "Jolly",
      teraType: "Dragon",
      skip: "Dawn of Artemis"
    },
    DaWoblefet: {
      species: "Wobbuffet",
      ability: "Shadow Artifice",
      item: "Iapapa Berry",
      gender: "M",
      moves: ["Counter", "Mirror Coat", "Encore"],
      signatureMove: "Super Ego Inflation",
      evs: { hp: 252, def: 252, spd: 4 },
      ivs: { spe: 0 },
      nature: "Relaxed",
      teraType: "Fairy"
    },
    deftinwolf: {
      species: "Yveltal",
      ability: "Sharpness",
      item: "Dread Plate",
      gender: "",
      moves: ["Aerial Ace", "Ceaseless Edge", "Cross Poison"],
      signatureMove: "Trivial Pursuit",
      evs: { atk: 252, spd: 4, spe: 252 },
      nature: "Adamant",
      teraType: "Poison"
    },
    dhelmise: {
      species: "Slowking-Galar",
      ability: "Coalescence",
      item: "Black Sludge",
      gender: "N",
      moves: ["Sludge Bomb", "Psychic Noise", "Parting Shot"],
      signatureMove: "Biotic Orb",
      evs: { hp: 252, def: 252, spa: 4 },
      nature: "Bold",
      teraType: ["Psychic", "Poison"]
    },
    DianaNicole: {
      species: "Abomasnow",
      ability: "Snow Warning",
      item: "Abomasite",
      gender: "F",
      moves: ["Giga Drain", "Earth Power", "Blizzard"],
      signatureMove: "Breath of Tiamat",
      evs: { hp: 252, def: 4, spa: 252 },
      nature: "Modest",
      shiny: true
    },
    EasyOnTheHills: {
      species: "Snorlax",
      ability: "Immunity",
      item: "Life Orb",
      gender: "M",
      moves: ["Darkest Lariat", "Body Slam", "Heavy Slam"],
      signatureMove: "Snack Time",
      evs: { hp: 252, atk: 252, spd: 4 },
      nature: "Adamant",
      teraType: "Ghost",
      shiny: true
    },
    Elliot: {
      species: "Sinistea",
      ability: "Natural Cure",
      item: "Focus Sash",
      gender: "N",
      moves: ["Moonblast", "Shadow Ball", "Teatime"],
      signatureMove: "Tea Party",
      evs: { def: 4, spa: 252, spe: 252 },
      nature: "Modest",
      teraType: "Water",
      shiny: true
    },
    Elly: {
      species: "Thundurus",
      ability: "Storm Surge",
      item: "Heavy-Duty Boots",
      gender: "F",
      moves: ["Wildbolt Storm", "Sandsear Storm", "Volt Switch"],
      signatureMove: "Sustained Winds",
      evs: { spa: 252, spd: 4, spe: 252 },
      nature: "Timid",
      teraType: "Ground"
    },
    Emboar02: {
      species: "Emboar",
      ability: "Hogwash",
      item: "Choice Band",
      gender: "F",
      moves: ["Flare Blitz", "Wave Crash", "Volt Tackle"],
      signatureMove: "Insert boar pun here",
      evs: { hp: 252, atk: 252, def: 4 },
      nature: "Adamant",
      teraType: ["Fire", "Water", "Fighting", "Electric"],
      shiny: 50 / 49
    },
    eva: {
      species: "Ceruledge",
      ability: "Sword of Ruin",
      item: "Life Orb",
      gender: "N",
      moves: ["Poltergeist", "Swords Dance", "Bitter Blade"],
      signatureMove: "A Soul for a Soul",
      evs: { hp: 4, atk: 252, spe: 252 },
      nature: "Adamant",
      teraType: "Fire"
    },
    Fame: {
      species: "Jumpluff",
      ability: "Social Jumpluff Warrior",
      item: "Leftovers",
      gender: "F",
      moves: ["Air Slash", "Thunder Wave", "Toxic"],
      signatureMove: "Solidarity",
      evs: { hp: 4, spa: 252, spe: 252 },
      nature: "Timid",
      teraType: "Fire"
    },
    Felucia: {
      species: "Vespiquen",
      ability: "Mountaineer",
      item: "Red Card",
      gender: "F",
      moves: ["Strength Sap", ["Oblivion Wing", "Night Shade"], ["Thief", "Calm Mind", "Toxic"]],
      signatureMove: "Rigged Dice",
      evs: { hp: 252, def: 4, spd: 252 },
      nature: "Calm"
    },
    Froggeh: {
      species: "Toxicroak",
      ability: "Super Luck",
      item: "Leftovers",
      gender: "M",
      moves: ["Gunk Shot", "Sucker Punch", "Drain Punch"],
      signatureMove: "Cringe Dad Joke",
      evs: { atk: 252, spd: 4, spe: 252 },
      nature: "Adamant",
      teraType: "Dark"
    },
    Frostyicelad: {
      species: "Qwilfish-Hisui",
      ability: "Almost Frosty",
      item: "Eviolite",
      gender: "M",
      moves: ["Darkest Lariat", "Recover", ["Dire Claw", "Meteor Mash", "Bitter Malice"]],
      signatureMove: "Puffy Spiky Destruction",
      evs: { atk: 252, def: 4, spe: 252 },
      nature: "Jolly",
      teraType: ["Dark", "Poison", "Ghost", "Steel"],
      shiny: 1024
    },
    Frozoid: {
      species: "Gible",
      ability: "Snowballer",
      item: "Eviolite",
      gender: "M",
      moves: ["Dragon Dance", "Dragon Rush", "Precipice Blades"],
      signatureMove: "Flat out falling",
      evs: { atk: 252, spd: 4, spe: 252 },
      nature: "Adamant",
      teraType: "Any",
      shiny: true
    },
    Ganjafin: {
      species: "Wiglett",
      ability: "Gambling Addiction",
      item: "Eviolite",
      gender: "M",
      moves: ["Wrap", "Cosmic Power", "Strength Sap"],
      signatureMove: "Wiggling Strike",
      evs: { hp: 252, def: 4, spe: 252 },
      nature: "Timid",
      teraType: "Grass",
      shiny: 2
    },
    "Haste Inky": {
      species: "Falinks",
      ability: "Simple",
      item: "Sitrus Berry",
      gender: "N",
      moves: ["Superpower", "Ice Hammer", "Throat Chop"],
      signatureMove: "Hasty Revolution",
      evs: { atk: 252, def: 4, spe: 252 },
      nature: "Jolly",
      teraType: "Dark"
    },
    havi: {
      species: "Gastly",
      ability: "Mensis Cage",
      item: "Leftovers",
      gender: "F",
      moves: ["Astral Barrage", "Moonblast", "Substitute"],
      signatureMove: "Augur of Ebrietas",
      evs: { spa: 252, spd: 4, spe: 252 },
      nature: "Timid",
      teraType: "Ghost"
    },
    Hecate: {
      species: "Mewtwo",
      ability: "Hacking",
      item: "Mewtwonite X",
      gender: "F",
      moves: ["Photon Geyser", "Drain Punch", "Iron Head"],
      signatureMove: "Testing in Production",
      evs: { atk: 252, spa: 4, spe: 252 },
      nature: "Jolly"
    },
    HiZo: {
      species: "Zoroark-Hisui",
      ability: "Justified",
      item: "Heavy-Duty Boots",
      gender: "M",
      moves: ["Last Respects", "Blood Moon", "Spirit Break"],
      signatureMove: "Scapegoat",
      evs: { atk: 252, spa: 4, spe: 252 },
      nature: "Naive",
      teraType: "Fairy"
    },
    HoeenHero: {
      species: "Ludicolo",
      ability: "Misspelled",
      item: "Life Orb",
      gender: "M",
      moves: [["Hydro Pump", "Surf"], "Giga Drain", "Ice Beam"],
      signatureMove: "Re-Program",
      evs: { spa: 252, spd: 4, spe: 252 },
      nature: "Timid",
      teraType: "Water"
    },
    hsy: {
      species: "Ursaluna",
      ability: "Hustle",
      item: "Blunder Policy",
      gender: "M",
      moves: ["Drill Peck", "Egg Bomb", "Headlong Rush"],
      signatureMove: "Wonder Wing",
      evs: { hp: 252, atk: 252, spe: 4 },
      nature: "Adamant",
      teraType: "Flying"
    },
    Hydrostatics: {
      species: "Pichu-Spiky-eared",
      ability: "Hydrostatic Positivity",
      item: "Eviolite",
      gender: "M",
      moves: ["Hydro Pump", "Thunder", "Ice Beam"],
      signatureMove: "Hydrostatics",
      evs: { def: 4, spa: 252, spe: 252 },
      nature: "Modest",
      teraType: "Water",
      shiny: 2
    },
    "in the hills": {
      species: "Gligar",
      ability: "Illiterit",
      item: "Eviolite",
      gender: "M",
      moves: ["Roost", "Knock Off", "Tidy Up"],
      signatureMove: "10-20-40",
      evs: { hp: 252, def: 4, spd: 252 },
      nature: "Careful",
      teraType: "Water"
    },
    Irly: {
      species: "Spheal",
      ability: "The Rolling Spheal",
      item: "Choice Band",
      gender: "",
      moves: ["Liquidation", "Collision Course", "Flip Turn"],
      signatureMove: "vruuuuuum",
      evs: { hp: 8, atk: 252, spd: 4, spe: 244 },
      nature: "Jolly",
      teraType: "Fighting",
      shiny: 363
    },
    ironwater: {
      species: "Jirachi",
      ability: "Good as Gold",
      item: "Leftovers",
      gender: "N",
      moves: ["Swords Dance", "Zen Headbutt", "Hammer Arm"],
      signatureMove: "Jirachi Ban Hammer",
      evs: { atk: 252, spd: 4, spe: 252 },
      nature: "Jolly",
      teraType: "Steel"
    },
    "Irpachuza!": {
      species: "Mr. Mime",
      ability: "Mime knows best",
      item: "Irpatuzinium Z",
      gender: "M",
      moves: [["Destiny Bond", "Lunar Dance"], "Parting Shot", "Taunt"],
      signatureMove: "Fleur Cannon",
      evs: { hp: 252, spa: 4, spd: 252 },
      nature: "Modest"
    },
    Isaiah: {
      species: "Medicham",
      ability: "Psychic Surge",
      item: "Medichamite",
      gender: "M",
      moves: ["Close Combat", "Knock Off", "Triple Axel"],
      signatureMove: "Simple Gameplan",
      evs: { atk: 252, def: 4, spe: 252 },
      nature: "Jolly",
      shiny: true
    },
    "J0rdy004 \u266B": {
      species: "Vulpix-Alola",
      ability: "Fortifying Frost",
      item: "Never-Melt Ice",
      gender: "N",
      moves: ["Blizzard", "Focus Blast", "Recover"],
      signatureMove: "Snowy Samba",
      evs: { spa: 252, spd: 4, spe: 252 },
      nature: "Timid",
      shiny: 4
    },
    Kalalokki: {
      species: "Flamigo",
      ability: "Scrappy",
      item: "Choice Band",
      gender: "M",
      moves: ["Brave Bird", "Sucker Punch", ["Drain Punch", "Rapid Spin"]],
      signatureMove: "Knot Weak",
      evs: { atk: 252, def: 4, spe: 252 },
      nature: "Jolly",
      teraType: ["Fighting", "Flying"]
    },
    Karthik: {
      species: "Staraptor",
      ability: "Tough Claws",
      item: "Choice Scarf",
      gender: "M",
      moves: ["Brave Bird", "Head Smash", ["Flare Blitz", "Wave Crash"]],
      signatureMove: "Salvaged Sacrifice",
      evs: { hp: 252, atk: 4, spe: 252 },
      nature: "Adamant",
      teraType: "Flying"
    },
    ken: {
      species: "Jigglypuff",
      ability: "Aroma Veil",
      item: "Heavy-Duty Boots",
      gender: "M",
      moves: ["Dazzling Gleam", "Heal Order", "Mortal Spin"],
      signatureMove: ", (ac)",
      evs: { hp: 252, def: 252, spa: 4 },
      nature: "Bold",
      teraType: "Any"
    },
    kenn: {
      species: "Larvitar",
      ability: "Deserted Dunes",
      item: "Eviolite",
      gender: "M",
      moves: ["Salt Cure", "Shore Up", ["Precipice Blades", "Headlong Rush"]],
      signatureMove: "Stone Faced",
      evs: { atk: 252, spd: 4, spe: 252 },
      nature: "Adamant",
      teraType: "Rock",
      shiny: true
    },
    Kennedy: {
      species: "Cinderace",
      ability: "Anfield",
      item: "Berserk Gene",
      gender: "M",
      moves: ["Blaze Kick", ["Triple Kick", "Trop Kick"], "U-turn"],
      signatureMove: "Hat-Trick",
      evs: { atk: 252, def: 4, spe: 252 },
      nature: "Jolly",
      teraType: "Any"
    },
    keys: {
      species: "Rayquaza",
      ability: "Defeatist",
      item: "Heavy-Duty Boots",
      gender: "M",
      moves: ["Oblivion Wing", "Sizzly Slide", "Bouncy Bubble"],
      signatureMove: "Protector of the Skies",
      evs: { spa: 252, spd: 4, spe: 252 },
      nature: "Timid",
      shiny: 10
    },
    kingbaruk: {
      species: "Wigglytuff",
      ability: "Peer Pressure",
      item: "Silk Scarf",
      gender: "M",
      moves: ["Trump Card", "Encore", ["Protect", "Thunder Wave"]],
      signatureMove: "Platinum Record",
      evs: { hp: 252, def: 4, spa: 252 },
      nature: "Modest",
      teraType: "Normal"
    },
    Kiwi: {
      species: "Minccino",
      ability: "Sure Hit Sorcery",
      item: "Heavy-Duty Boots",
      gender: "M",
      moves: ["Dynamic Punch", "Substitute", "Noble Roar"],
      signatureMove: "Mad Manifest",
      evs: { hp: 252, atk: 144, spe: 112 },
      nature: "Adamant",
      teraType: "Fighting",
      shiny: true
    },
    Klmondo: {
      species: "Cloyster",
      ability: "Super Skilled",
      item: "Heavy-Duty Boots",
      gender: "M",
      moves: ["Victory Dance", "Icicle Spear", "Rock Blast"],
      signatureMove: "The Better Water Shuriken",
      evs: { atk: 252, def: 4, spe: 252 },
      nature: "Adamant",
      teraType: "Water"
    },
    "kolohe \u272E\u5F61": {
      species: "Pikachu",
      ability: "Soul Surfer",
      item: "Light Ball",
      gender: "",
      moves: ["Thunder", "Volt Switch", "Bouncy Bubble"],
      signatureMove: "Hang Ten",
      evs: { hp: 4, spa: 252, spe: 252 },
      nature: "Timid",
      teraType: "Water"
    },
    Kry: {
      species: "Mawile",
      ability: "Flash Freeze",
      item: "Mawilite",
      gender: "M",
      moves: ["Sucker Punch", "Fire Lash", "Play Rough"],
      signatureMove: "Attack of Opportunity",
      evs: { hp: 252, atk: 252, spd: 4 },
      nature: "Adamant",
      shiny: 1024
    },
    Lasen: {
      species: "Zekrom",
      ability: "Idealized World",
      item: "Leftovers",
      gender: "M",
      moves: ["Volt Switch", "Fusion Bolt", "Dragon Claw"],
      signatureMove: "Rise Above",
      evs: { hp: 252, def: 4, spe: 252 },
      nature: "Jolly",
      teraType: "Fire"
    },
    "Lets go shuckles": {
      species: "Shuckle",
      ability: "Persistent",
      item: "Berry Juice",
      gender: "M",
      moves: ["Diamond Storm", "Headlong Rush", ["Glacial Lance", "U-turn"]],
      signatureMove: "Shuckle Power",
      evs: { hp: 252, def: 252, spd: 4 },
      ivs: { spe: 0 },
      nature: "Relaxed",
      teraType: "Ground",
      shiny: 213
    },
    Lily: {
      species: "Togedemaru",
      ability: "Unaware",
      item: "Leftovers",
      gender: "F",
      moves: ["Victory Dance", "Plasma Fists", "Meteor Mash"],
      signatureMove: "Power Up",
      evs: { hp: 252, def: 4, spd: 252 },
      nature: "Careful",
      teraType: "Fairy",
      shiny: 1734
    },
    Loethalion: {
      species: "Ralts",
      ability: "Psychic Surge",
      item: "Gardevoirite",
      gender: "",
      moves: [["Esper Wing", "Lumina Crash", "Psychic Noise"], ["Agility", "Calm Mind"], ["Draining Kiss", "Matcha Gotcha"]],
      signatureMove: "Darkmoon Cackle",
      evs: { spa: 252, spd: 4, spe: 252 },
      nature: "Timid",
      shiny: true
    },
    Lumari: {
      species: "Ponyta-Galar",
      ability: "Pyrotechnic",
      item: "Eviolite",
      gender: "F",
      moves: ["Substitute", "Sappy Seed", "Magical Torque"],
      signatureMove: "Mystical Bonfire",
      evs: { atk: 252, def: 4, spe: 252 },
      nature: "Jolly",
      teraType: "Fairy"
    },
    Lunell: {
      species: "Vaporeon",
      ability: "Low Tide, High Tide",
      item: "Leftovers",
      gender: "F",
      moves: ["Hydro Pump", "Thunder", "Moonlight"],
      signatureMove: "Praise the Moon",
      evs: { hp: 252, def: 4, spa: 252 },
      nature: "Calm",
      teraType: "Fairy",
      shiny: 512
    },
    "Lyna \u6C37": {
      species: "Dragonair",
      ability: "Magic Aura",
      item: "Eviolite",
      gender: "F",
      moves: ["Victory Dance", "V-create", "Glacial Lance"],
      signatureMove: "Wrath of Frozen Flames",
      evs: { atk: 252, def: 4, spe: 252 },
      nature: "Jolly",
      teraType: "Dragon"
    },
    "marillvibes \u266B": {
      species: "Marill",
      ability: "Huge Power",
      item: "Life Orb",
      gender: "M",
      moves: ["Surging Strikes", "Jet Punch", "Close Combat"],
      signatureMove: "Good Vibes Only",
      evs: { hp: 4, atk: 252, spe: 252 },
      nature: "Adamant",
      teraType: "Water",
      shiny: true
    },
    maroon: {
      species: "Archaludon",
      ability: "Built Different",
      item: "Leftovers",
      gender: "M",
      moves: ["Body Press", "Stealth Rock", "Rapid Spin"],
      signatureMove: "Metal Blast",
      evs: { hp: 252, def: 252, spa: 4 },
      nature: "Bold",
      teraType: "Flying"
    },
    Mathy: {
      species: "Furret",
      ability: "Dynamic Typing",
      item: "Big Root",
      gender: "M",
      moves: ["Bitter Blade", "Swords Dance", "Taunt"],
      signatureMove: "Breaking Change",
      evs: { atk: 252, def: 4, spe: 252 },
      nature: "Jolly",
      teraType: "Ghost"
    },
    Merritty: {
      species: "Torchic",
      ability: "End Round",
      item: "Eviolite",
      gender: "M",
      moves: ["Quiver Dance", "Fiery Dance", "Strength Sap"],
      signatureMove: "New Bracket",
      evs: { hp: 4, def: 36, spa: 196, spd: 36, spe: 236 },
      nature: "Timid",
      teraType: "Flying",
      shiny: true
    },
    Meteordash: {
      species: "Tatsugiri",
      ability: "TatsuGlare",
      item: "Heavy-Duty Boots",
      gender: "M",
      moves: ["Spacial Rend", "Steam Eruption", "Glare"],
      signatureMove: "Plagiarism",
      evs: { spa: 252, spd: 4, spe: 252 },
      nature: "Timid",
      teraType: "Steel"
    },
    Mex: {
      species: "Dialga",
      ability: "Time Dilation",
      item: "Adamant Orb",
      gender: "N",
      moves: ["Dragon Pulse", "Flash Cannon", ["Aura Sphere", "Volt Switch", "Meteor Beam"]],
      signatureMove: "Time Skip",
      evs: { hp: 4, spa: 252, spe: 252 },
      nature: "Timid",
      teraType: "Steel",
      shiny: true
    },
    Monkey: {
      species: "Infernape",
      ability: "Harambe Hit",
      item: "Blunder Policy",
      gender: "M",
      moves: ["Dynamic Punch", "Plasma Fists", "Fire Punch"],
      signatureMove: "Banana Breakfast",
      evs: { hp: 4, atk: 252, spe: 252 },
      nature: "Jolly",
      teraType: "Electric",
      shiny: 69
    },
    MyPearl: {
      species: "Latios",
      ability: "Eon Call",
      item: "Soul Dew",
      gender: "M",
      moves: ["Draco Meteor", "Aura Sphere", "Flip Turn"],
      signatureMove: "Eon Assault",
      evs: { hp: 252, def: 4, spe: 252 },
      ivs: { atk: 0 },
      nature: "Timid",
      teraType: "Steel",
      shiny: 50
    },
    "MyPearl-Latias": {
      species: "Latias",
      ability: "Eon Call",
      item: "Soul Dew",
      gender: "F",
      moves: ["Calm Mind", "Recover", "Thunder Wave"],
      signatureMove: "Eon Assault",
      evs: { hp: 252, def: 4, spe: 252 },
      ivs: { atk: 0 },
      nature: "Timid",
      teraType: "Steel",
      shiny: 50,
      skip: "MyPearl"
    },
    Neko: {
      species: "Chien-Pao",
      ability: "Weatherproof",
      item: "Heavy-Duty Boots",
      gender: "N",
      moves: ["Swords Dance", "Bitter Blade", ["Crunch", "Sucker Punch"]],
      signatureMove: "Quality Control Zoomies",
      evs: { atk: 252, def: 4, spe: 252 },
      nature: "Jolly",
      teraType: "Fire"
    },
    Ney: {
      species: "Banette",
      ability: "Insomnia",
      item: "Banettite",
      gender: "M",
      moves: ["Destiny Bond", "Will-O-Wisp", "Parting Shot"],
      signatureMove: "Shadow Dance",
      evs: { hp: 252, atk: 252, def: 4 },
      ivs: { spe: 0 },
      nature: "Brave",
      shiny: true
    },
    Notater517: {
      species: "Incineroar",
      ability: "Vent Crosser",
      item: "Heavy-Duty Boots",
      gender: "M",
      moves: ["Ceaseless Edge", "Pyro Ball", ["Rapid Spin", "Encore"]],
      signatureMove: "~nyaa",
      evs: { hp: 252, atk: 252, spd: 4 },
      nature: "Adamant",
      teraType: "Steel"
    },
    "nya~ \u2764": {
      species: "Delcatty",
      ability: "Adorable Grace",
      item: "Focus Band",
      gender: "F",
      moves: ["Freeze-Dry", "Flamethrower", "Volt Switch"],
      signatureMove: ":3",
      evs: { hp: 252, spa: 4, spe: 252 },
      nature: "Naive",
      teraType: "Ice"
    },
    Nyx: {
      species: "Altaria",
      ability: "Last Hymn",
      item: "Altarianite",
      gender: "F",
      moves: ["Earthquake", "Amnesia", "Roost"],
      signatureMove: "Cotton Candy Crush",
      evs: { hp: 248, spd: 164, spe: 96 },
      nature: "Careful",
      shiny: 4
    },
    PartMan: {
      species: "Chandelure",
      ability: "C- Tier Shitposter",
      item: "Leek",
      gender: "M",
      moves: ["Searing Shot", "Hex", "Morning Sun"],
      signatureMove: "Alting",
      evs: { hp: 252, spa: 69, spe: 188 },
      nature: "Timid"
    },
    "Pastor Gigas": {
      species: "Regigigas",
      ability: "God's Mercy",
      item: "Clear Amulet",
      gender: "N",
      moves: ["Sacred Fire", "Knock Off", "Healing Wish"],
      signatureMove: "Call to Repentance",
      evs: { atk: 252, spd: 4, spe: 252 },
      nature: "Adamant",
      teraType: "Fairy"
    },
    Peary: {
      species: "Klinklang",
      ability: "Levitate",
      item: "Pearyum Z",
      gender: "",
      moves: ["Lock On", "Sheer Cold", "Substitute"],
      signatureMove: "Gear Grind",
      evs: { hp: 252, def: 4, spe: 252 },
      nature: "Jolly"
    },
    phoopes: {
      species: "Jynx",
      ability: "I Did It Again",
      item: "Focus Sash",
      gender: "F",
      moves: ["Lovely Kiss", "Psychic", "Amnesia"],
      signatureMove: "Gen 1 Blizzard",
      evs: { hp: 4, spa: 252, spe: 252 },
      nature: "Timid",
      teraType: "Ice"
    },
    Pissog: {
      species: "Volcarona",
      ability: "Drought",
      item: "Heavy-Duty Boots",
      gender: "M",
      moves: ["Torch Song", "Morning Sun", "Solar Beam"],
      signatureMove: "A Song Of Ice And Fire",
      evs: { spa: 252, spd: 4, spe: 252 },
      nature: "Timid",
      teraType: "Fire",
      shiny: 1096
    },
    "Pissog-Frosmoth": {
      species: "Frosmoth",
      ability: "Snow Warning",
      item: "Heavy-Duty Boots",
      gender: "F",
      moves: ["Blizzard", "Chilly Reception", "Aurora Veil"],
      signatureMove: "A Song Of Ice And Fire",
      evs: { spa: 252, spd: 4, spe: 252 },
      nature: "Timid",
      teraType: "Ice",
      skip: "Pissog",
      shiny: 1096
    },
    pokemonvortex: {
      species: "Pokestar Smeargle",
      ability: "Prankster",
      item: "Focus Sash",
      gender: "N",
      moves: ["Spore", "Extreme Evoboost", "Substitute"],
      signatureMove: "Roulette",
      evs: { hp: 252, def: 4, spe: 252 },
      nature: "Timid",
      teraType: "Ghost"
    },
    ptoad: {
      species: "Politoed",
      ability: "Drizzle",
      item: "Leftovers",
      gender: "M",
      moves: ["Jet Punch", "Ice Punch", "Earthquake"],
      signatureMove: "Pleek...",
      evs: { hp: 252, atk: 252, spd: 4 },
      nature: "Adamant",
      teraType: "Water"
    },
    Pulse_kS: {
      species: "Hydreigon",
      ability: "Pulse Luck",
      item: "Quick Claw",
      gender: "N",
      moves: ["Dark Pulse", "Dragon Pulse", "Origin Pulse"],
      signatureMove: "Luck Pulse",
      evs: { hp: 85, atk: 85, def: 85, spa: 85, spd: 85, spe: 85 },
      nature: "Serious",
      teraType: ["Steel", "Poison"]
    },
    PYRO: {
      species: "Kingambit",
      ability: "Hardcore Hustle",
      item: "Leftovers",
      gender: "M",
      moves: ["Kowtow Cleave", "Sucker Punch", "Swords Dance"],
      signatureMove: "Meat Grinder",
      evs: { hp: 252, atk: 252, def: 4 },
      nature: "Adamant",
      teraType: "Flying"
    },
    "Quite Quiet": {
      species: "Ribombee",
      ability: "Fancy Scarf",
      item: ["Life Orb", "Leftovers"],
      gender: "F",
      moves: ["Roost", "Moonblast", ["Aura Sphere", "U-turn"]],
      signatureMove: "*Worried Noises*",
      evs: { hp: 4, spa: 252, spe: 252 },
      nature: "Timid",
      teraType: "Flying"
    },
    quziel: {
      species: "Chromera",
      ability: "High Performance Computing",
      item: "Covert Cloak",
      gender: "M",
      moves: ["Recover", "Revelation Dance", "Boomburst"],
      signatureMove: "Reshape",
      evs: { def: 4, spa: 252, spe: 252 },
      nature: "Timid",
      teraType: "Ghost"
    },
    R8: {
      species: "Chansey",
      ability: "Anti-Pelau",
      item: "Eviolite",
      gender: "N",
      moves: ["Ice Beam", "Thunderbolt", "Flamethrower"],
      signatureMove: "Magic Trick",
      evs: { hp: 252, spa: 252, spe: 4 },
      ivs: { atk: 0 },
      nature: "Modest",
      teraType: "Ice",
      shiny: 256
    },
    Rainshaft: {
      species: "Xerneas",
      ability: "Rainy's Aura",
      item: "Rainium Z",
      gender: "F",
      moves: ["Psychic Noise", "Sing", "Alluring Voice"],
      signatureMove: "Sparkling Aria",
      evs: { hp: 252, spa: 252, spe: 4 },
      nature: "Mild"
    },
    Ransei: {
      species: "Audino-Mega",
      ability: "Ultra Mystik",
      item: "Safety Goggles",
      gender: "M",
      moves: ["Psystrike", "Transform", "Light of Ruin"],
      signatureMove: "Flood of Lore",
      evs: { hp: 252, def: 4, spa: 252 },
      ivs: { spe: 0 },
      nature: "Modest",
      shiny: 2
    },
    ReturnToMonkey: {
      species: "Oranguru",
      ability: "Monke See Monke Do",
      item: "Twisted Spoon",
      gender: "M",
      moves: ["Hyper Voice", "Psyshock", "Focus Blast"],
      signatureMove: "Monke Magic",
      evs: { hp: 252, def: 4, spa: 252 },
      ivs: { spe: 0 },
      nature: "Quiet",
      teraType: "Fighting"
    },
    RSB: {
      species: "Growlithe",
      ability: "Hot Pursuit",
      item: "Eviolite",
      gender: "M",
      moves: ["Fire Fang", "Thunder Fang", "Morning Sun"],
      signatureMove: "Confiscate",
      evs: { atk: 252, def: 4, spe: 252 },
      nature: "Jolly",
      teraType: "Grass"
    },
    Rumia: {
      species: "Duskull",
      ability: "Youkai of the Dusk",
      item: "Eviolite",
      gender: "N",
      moves: ["Infernal Parade", "Strength Sap", "Mortal Spin"],
      signatureMove: "Midnight Bird",
      evs: { hp: 252, def: 252, spa: 4 },
      nature: "Bold",
      teraType: "Poison",
      shiny: true
    },
    Scotteh: {
      species: "Suicune",
      ability: "Water Absorb",
      item: "Leftovers",
      gender: "",
      moves: ["Calm Mind", "Scald", "Ice Beam"],
      signatureMove: "Purification",
      evs: { hp: 252, def: 252, spd: 4 },
      nature: "Bold",
      teraType: "Water"
    },
    SexyMalasada: {
      species: "Typhlosion",
      ability: "Ancestry Ritual",
      item: "Life Orb",
      gender: "M",
      moves: ["Calm Mind", "Aura Sphere", "Flamethrower"],
      signatureMove: "Hexadecimal Fire",
      evs: { spa: 252, spd: 4, spe: 252 },
      nature: "Timid",
      teraType: "Ghost",
      shiny: true
    },
    sharp_claw: {
      species: "Sneasel",
      ability: "Regenerator",
      item: "Heavy-Duty Boots",
      gender: "F",
      moves: ["Knock Off", "Ice Spinner", "Ice Shard"],
      signatureMove: "Treacherous Traversal",
      evs: { atk: 252, spd: 4, spe: 252 },
      nature: "Jolly",
      teraType: "Poison"
    },
    "sharp_claw-Rough": {
      species: "Sneasel-Hisui",
      ability: "Regenerator",
      item: "Heavy-Duty Boots",
      gender: "M",
      moves: ["Combat Torque", "Noxious Torque", "Mach Punch"],
      signatureMove: "Treacherous Traversal",
      evs: { atk: 252, spd: 4, spe: 252 },
      nature: "Jolly",
      teraType: "Poison",
      skip: "sharp_claw"
    },
    Siegfried: {
      species: "Ampharos",
      ability: "Static",
      item: "Ampharosite",
      gender: "M",
      moves: ["Calm Mind", "Thunderclap", "Draco Meteor"],
      signatureMove: "BoltBeam",
      evs: { hp: 252, spa: 252, spd: 4 },
      nature: "Modest",
      shiny: 64
    },
    "Sificon~": {
      species: "Hoppip",
      ability: "Perfectly Imperfect",
      item: "Eviolite",
      gender: "M",
      moves: ["Strength Sap", "Spikes", "Seismic Toss"],
      signatureMove: "Grass Gaming",
      evs: { hp: 252, def: 4, spe: 252 },
      ivs: { atk: 0 },
      nature: "Timid",
      teraType: "Dragon"
    },
    skies: {
      species: "Chespin",
      ability: "Spikes of Wrath",
      item: "Sitrus Berry",
      gender: "F",
      moves: ["Bulk Up", "Strength Sap", "Body Press"],
      signatureMove: "Like..?",
      evs: { hp: 252, atk: 4, def: 252 },
      nature: "Impish",
      teraType: ["Water", "Steel"],
      shiny: 15
    },
    snake: {
      species: "Fidgit",
      ability: "Persistent",
      item: ["Mental Herb", "Covert Cloak", "Leppa Berry"],
      gender: "M",
      moves: ["Tailwind", "Revival Blessing", "Taunt"],
      signatureMove: "Concept Relevant",
      evs: { hp: 252, def: 4, spe: 252 },
      nature: "Jolly",
      teraType: "Water"
    },
    "Soft Flex": {
      species: "Magnezone",
      ability: "Adaptive Engineering",
      item: "Leftovers",
      gender: "N",
      moves: ["Thunderbolt", "Substitute", "Parabolic Charge"],
      signatureMove: "Adaptive Beam",
      evs: { hp: 248, def: 8, spe: 252 },
      nature: "Timid",
      teraType: "Flying"
    },
    "Solaros & Lunaris": {
      species: "Scovillain",
      ability: "Ride the Sun!",
      item: "Heavy-Duty Boots",
      gender: "N",
      moves: ["Solar Beam", "Growth", "Moonlight"],
      signatureMove: "Mind Melt",
      evs: { spa: 252, spd: 4, spe: 252 },
      nature: "Modest",
      teraType: "Fire"
    },
    Spiderz: {
      species: "Iron Thorns",
      ability: "Poison Heal",
      item: "Toxic Orb",
      gender: "M",
      moves: ["Spiky Shield", "Stone Axe", "Thousand Arrows"],
      signatureMove: "Shepherd of the Mafia Room",
      evs: { hp: 252, atk: 252, spe: 4 },
      nature: "Adamant",
      teraType: "Steel",
      shiny: true
    },
    spoo: {
      species: "Hemogoblin",
      ability: "I Can Hear The Heart Beating As One",
      item: "Heavy-Duty Boots",
      gender: "N",
      moves: ["Extreme Speed", "Bitter Blade", "Moonlight"],
      signatureMove: "Cardio Training",
      evs: { atk: 252, spd: 4, spe: 252 },
      nature: "Adamant",
      teraType: "Fairy",
      shiny: 32
    },
    Steorra: {
      species: "Kitsunoh",
      ability: "Ghostly Hallow",
      item: "Choice Band",
      gender: "",
      moves: ["Meteor Mash", "Shadow Strike", "U-turn"],
      signatureMove: "Phantom Weapon",
      evs: { atk: 252, spd: 4, spe: 252 },
      nature: "Jolly",
      teraType: ["Steel", "Ghost"],
      shiny: 2
    },
    Struchni: {
      species: "Aggron",
      ability: "Overasked Clause",
      item: "Leftovers",
      gender: "M",
      moves: ["Detect", "Encore", "U-turn"],
      signatureMove: "~randfact",
      evs: { hp: 252, def: 16, spd: 240 },
      nature: "Careful",
      teraType: "Steel"
    },
    Sulo: {
      species: "Reuniclus",
      ability: "Protection of the Gelatin",
      item: "Life Orb",
      gender: "M",
      moves: ["Calm Mind", "Draining Kiss", "Stored Power"],
      signatureMove: "Vengeful Mood",
      evs: { hp: 252, def: 252, spd: 4 },
      nature: "Bold",
      teraType: "Fairy",
      shiny: true
    },
    Swiffix: {
      species: "Piplup",
      ability: "Stinky",
      item: "Eviolite",
      gender: "M",
      moves: ["Water Shuriken", "Nasty Plot", "Roost"],
      signatureMove: "Stink Bomb",
      evs: { hp: 252, def: 4, spa: 252 },
      nature: "Modest",
      teraType: "Water"
    },
    Teclis: {
      species: "Gallade",
      ability: "Sharpness",
      item: "Life Orb",
      gender: "M",
      moves: ["Sacred Sword", "Psycho Cut", "Leaf Blade"],
      signatureMove: "Rising Sword",
      evs: { hp: 4, atk: 252, spe: 252 },
      nature: "Adamant",
      teraType: "Psychic"
    },
    Tenshi: {
      species: "Sandshrew",
      ability: "Sand Sleuth",
      item: "Eviolite",
      gender: "M",
      moves: ["Precipice Blades", "Dynamic Punch", "Rapid Spin"],
      signatureMove: "SAND EAT",
      evs: { atk: 252, def: 4, spe: 252 },
      nature: "Jolly",
      teraType: "Ground",
      shiny: 10
    },
    Theia: {
      species: "Litwick",
      ability: "Power Abuse",
      item: "Eviolite",
      gender: "F",
      moves: ["Shadow Ball", "Flamethrower", "Giga Drain"],
      signatureMove: "Body Count",
      evs: { hp: 252, spa: 252, spd: 4 },
      nature: "Modest",
      teraType: "Ghost"
    },
    TheJesucristoOsAma: {
      species: "Arceus",
      ability: "The Grace Of Jesus Christ",
      gender: "N",
      item: [
        "Draco Plate",
        "Dread Plate",
        "Earth Plate",
        "Fist Plate",
        "Flame Plate",
        "Icicle Plate",
        "Insect Plate",
        "Iron Plate",
        "Meadow Plate",
        "Mind Plate",
        "Pixie Plate",
        "Sky Plate",
        "Splash Plate",
        "Spooky Plate",
        "Stone Plate",
        "Toxic Plate",
        "Zap Plate"
      ],
      moves: ["Earthquake", "Surf", "Judgment"],
      signatureMove: "The Love Of Christ",
      evs: { hp: 4, spa: 252, spe: 252 },
      nature: "Timid"
    },
    Tico: {
      species: "Floette-Eternal",
      ability: "Eternal Generator",
      item: ["Covert Cloak", "Red Card"],
      gender: "M",
      moves: ["Light of Ruin", "Lava Plume", "Teleport"],
      signatureMove: "Eternal Wish",
      evs: { hp: 252, def: 16, spe: 240 },
      nature: "Timid",
      teraType: ["Fire", "Steel"],
      shiny: false
    },
    trace: {
      species: "Delphox",
      ability: "Eyes of Eternity",
      item: "Life Orb",
      gender: "F",
      moves: ["Calm Mind", "Inferno", "Recover"],
      signatureMove: "Chronostasis",
      evs: { spa: 252, spd: 4, spe: 252 },
      nature: "Modest",
      teraType: "Psychic"
    },
    Tuthur: {
      species: "Scream Tail",
      ability: "Poison Heal",
      item: "Toxic Orb",
      gender: "M",
      moves: ["Spikes", "Burning Bulwark", "Encore"],
      signatureMove: "Symphonie du Ze\u0301ro",
      evs: { hp: 244, def: 12, spe: 252 },
      nature: "Timid",
      teraType: "Water"
    },
    "Two of Roses": {
      species: "Luxray",
      ability: "As We See",
      item: "Mirror Herb",
      gender: "M",
      moves: ["Knock Off", "Supercell Slam", "Trailblaze"],
      signatureMove: "Dilly Dally",
      evs: { atk: 252, spd: 4, spe: 252 },
      nature: "Jolly",
      teraType: "Flying",
      shiny: 1024
    },
    UT: {
      species: "Talonflame",
      ability: "Gale Guard",
      item: "Leftovers",
      gender: "M",
      moves: ["Brave Bird", "Roost", "Defog"],
      signatureMove: "My Boys",
      evs: { hp: 252, def: 4, spe: 252 },
      nature: "Jolly",
      teraType: "Flying"
    },
    Valerian: {
      species: "Lucario",
      ability: "Full Bloom",
      item: "Clear Amulet",
      gender: "F",
      moves: ["Bullet Punch", "Mach Punch", "Parting Shot"],
      signatureMove: "First Strike",
      evs: { hp: 252, atk: 252, def: 4 },
      nature: "Adamant",
      teraType: "Fighting"
    },
    Venous: {
      species: "Mantine",
      ability: "Concrete Over Water",
      item: "Leftovers",
      gender: "",
      moves: ["Scald", "Roost", "Clear Smog"],
      signatureMove: "Your Crippling Interest",
      evs: { hp: 248, def: 244, spd: 16 },
      nature: "Calm",
      teraType: "Normal",
      shiny: 5
    },
    "Vio\u035C\u0361let": {
      species: "Ogerpon",
      ability: "See No Evil, Hear No Evil, Speak No Evil",
      item: "Berry Juice",
      gender: "F",
      moves: ["Crabhammer", "Mighty Cleave", "Fire Lash"],
      signatureMove: "building character",
      evs: { atk: 252, spd: 4, spe: 252 },
      nature: "Jolly",
      teraType: "Stellar"
    },
    Vistar: {
      species: "Zeraora",
      ability: "Prankster",
      item: "Throat Spray",
      gender: "M",
      moves: ["Encore", "Volt Switch", "Copycat"],
      signatureMove: "Virtual Avatar",
      evs: { def: 4, spa: 252, spe: 252 },
      nature: "Timid",
      teraType: "Electric"
    },
    "Vistar-Idol": {
      species: "Zeraora",
      ability: "Virtual Idol",
      item: "Throat Spray",
      gender: "M",
      moves: ["Sparkling Aria", "Torch Song", "Teeter Dance"],
      signatureMove: "Overdrive",
      evs: { def: 4, spa: 252, spe: 252 },
      nature: "Timid",
      teraType: "Electric",
      shiny: true,
      skip: "Vistar"
    },
    vmnunes: {
      species: "Shaymin-Sky",
      ability: "Wild Growth",
      item: "Big Root",
      gender: "M",
      moves: ["Giga Drain", "Oblivion Wing", "Draining Kiss"],
      signatureMove: "Gracidea's Blessing",
      evs: { spa: 252, spd: 4, spe: 252 },
      nature: "Timid",
      teraType: "Fairy"
    },
    WarriorGallade: {
      species: "Tropius",
      ability: "Primeval Harvest",
      item: "Starf Berry",
      gender: ["M", "M", "F"],
      moves: ["Sunny Day", "Natural Gift", ["Bitter Blade", "Sappy Seed", "Stored Power", "Counter"]],
      signatureMove: "Fruitful Longbow",
      evs: { hp: 184, atk: 112, def: 36, spd: 88, spe: 88 },
      ivs: { spa: 29 },
      nature: "Impish",
      teraType: ["Dragon", "Psychic", "Fighting"],
      shiny: 20
    },
    Waves: {
      species: "Wailord",
      ability: "Primordial Sea",
      item: "Assault Vest",
      gender: "M",
      moves: ["Water Spout", "Hurricane", "Thunder"],
      signatureMove: "Torrential Drain",
      evs: { spa: 252, spd: 4, spe: 252 },
      nature: "Modest",
      teraType: "Water"
    },
    WigglyTree: {
      species: "Sudowoodo",
      ability: "Tree Stance",
      item: "Liechi Berry",
      gender: "M",
      moves: ["Shell Smash", "Wood Hammer", "Head Smash"],
      signatureMove: "Perfect Mimic",
      evs: { atk: 252, def: 4, spe: 252 },
      nature: "Adamant",
      teraType: "Grass"
    },
    "XpRienzo \u2611\u25E1\u2611": {
      species: "Reshiram",
      ability: "Turboblaze",
      item: "Choice Scarf",
      gender: "M",
      moves: ["Draco Meteor", "Volt Switch", "Flash Cannon"],
      signatureMove: "Scorching Truth",
      evs: { spa: 252, spd: 4, spe: 252 },
      nature: "Modest",
      teraType: "Fire"
    },
    xy01: {
      species: "Blissey",
      ability: "Panic",
      item: "Heavy-Duty Boots",
      gender: "M",
      moves: ["Soft-Boiled", "Seismic Toss", "Aromatherapy"],
      signatureMove: "Poisonous Wind",
      evs: { hp: 248, def: 252, spd: 8 },
      nature: "Bold",
      teraType: "Fairy",
      shiny: true
    },
    "yeet dab xd": {
      species: "Kecleon",
      ability: "Treasure Bag",
      item: "Silk Scarf",
      gender: "M",
      happiness: 0,
      moves: ["Frustration", "Shadow Sneak", "Fake Out"],
      signatureMove: "top kek",
      evs: { hp: 252, atk: 4, spd: 252 },
      nature: "Careful",
      teraType: "Ghost"
    },
    "Yellow Paint": {
      species: "Rotom-Frost",
      ability: "Yellow Magic",
      item: "Chilan Berry",
      gender: "N",
      moves: ["Thunderbolt", "Blizzard", "Ion Deluge"],
      signatureMove: "Whiteout",
      evs: { hp: 252, spa: 252, spe: 4 },
      nature: "Modest",
      teraType: "Steel",
      shiny: 2
    },
    "yuki \u266A": {
      species: "Ninetales-Alola",
      ability: "Party Up",
      item: "Light Clay",
      gender: "",
      moves: ["Blizzard", "Aurora Veil", ["Encore", "Lovely Kiss"]],
      signatureMove: "Tag, You're It!",
      evs: { hp: 4, spa: 252, spe: 252 },
      nature: "Timid",
      teraType: "Ghost"
    },
    YveltalNL: {
      species: "Farigiraf",
      ability: "Height Advantage",
      item: "Leftovers",
      gender: "M",
      moves: ["Freezing Glare", "Ice Beam", "Slack Off"],
      signatureMove: "High Ground",
      evs: { hp: 248, spa: 252, spe: 8 },
      nature: "Modest",
      teraType: "Ground"
    },
    za: {
      species: "Greedent",
      ability: "Troll",
      item: "Leftovers",
      gender: "M",
      moves: ["Headbutt", "Iron Head", "Foul Play"],
      signatureMove: "Shitpost",
      evs: { hp: 252, def: 252, spe: 6 },
      nature: "Impish",
      teraType: "Steel"
    },
    Zalm: {
      species: "Weedle",
      ability: "Water Bubble",
      item: "Clear Amulet",
      gender: "",
      moves: ["Surging Strikes", "Attack Order", "Dire Claw"],
      signatureMove: "Dud ur a fish",
      evs: { hp: 4, atk: 252, spe: 252 },
      nature: "Adamant",
      teraType: "Water"
    },
    Zarel: {
      species: "Meloetta",
      ability: "Tempo Change",
      item: "Leftovers",
      gender: "M",
      moves: ["Psystrike", "Armor Cannon", "Obstruct"],
      signatureMove: "@ts-ignore",
      evs: { def: 4, spa: 252, spe: 252 },
      nature: "Timid",
      teraType: "Stellar"
    },
    "Zarel-Pirouette": {
      species: "Meloetta-Pirouette",
      ability: "Tempo Change",
      item: "Leftovers",
      gender: "M",
      moves: ["Close Combat", "Knock Off", "Silk Trap"],
      signatureMove: "@ts-ignore",
      evs: { atk: 252, def: 4, spe: 252 },
      nature: "Jolly",
      teraType: "Stellar",
      skip: "Zarel"
    },
    zee: {
      species: "Lilligant-Hisui",
      ability: "Chlorophyll",
      item: "Heat Rock",
      gender: "F",
      moves: [["Close Combat", "Axe Kick"], ["Solar Blade", "Seed Bomb"], "Victory Dance"],
      signatureMove: "Solar Summon",
      evs: { hp: 80, atk: 176, spe: 252 },
      nature: "Adamant",
      teraType: "Fire"
    },
    zoro: {
      species: "Umbreon",
      ability: "Nine Lives",
      item: "Leftovers",
      gender: "M",
      moves: ["Wish", "Protect", "Toxic"],
      signatureMove: "Darkest Night",
      evs: { hp: 252, def: 240, spd: 16 },
      nature: "Calm",
      teraType: "Steel",
      shiny: true
    }
  };
  var afdSSBSets = {
    Fox: {
      species: "Fennekin",
      ability: "No Ability",
      item: "",
      gender: "",
      moves: [],
      signatureMove: "Super Metronome"
    }
  };

  class RandomStaffBrosTeams extends import_teams.default {
    randomStaffBrosTeam(options = {}) {
      this.enforceNoDirectCustomBanlistChanges();
      const team = [];
      const debug = [];
      const ruleTable = this.dex.formats.getRuleTable(this.format);
      const meme = ruleTable.has("dynamaxclause") && !debug.length;
      const monotype = this.forceMonotype || (ruleTable.has("sametypeclause") ? this.sample([...this.dex.types.names().filter((x) => x !== "Stellar")]) : false);
      let pool = meme ? Object.keys(afdSSBSets) : Object.keys(ssbSets);
      if (debug.length) {
        while (debug.length < 6) {
          const staff = this.sampleNoReplace(pool);
          if (debug.includes(staff) || ssbSets[staff].skip)
            continue;
          debug.push(staff);
        }
        pool = debug;
      }
      if (monotype && !debug.length) {
        pool = pool.filter((x) => this.dex.species.get(ssbSets[x].species).types.includes(monotype));
      }
      if (global.Config?.disabledssbsets?.length) {
        pool = pool.filter((x) => !global.Config.disabledssbsets.includes(this.dex.toID(x)));
      }
      const typePool = {};
      let depth = 0;
      while (pool.length && team.length < this.maxTeamSize) {
        if (depth >= 200)
          throw new Error(`Infinite loop in Super Staff Bros team generation.`);
        depth++;
        const name = meme ? this.sample(pool) : this.sampleNoReplace(pool);
        const ssbSet = meme ? this.dex.deepClone(afdSSBSets[name]) : this.dex.deepClone(ssbSets[name]);
        if (ssbSet.skip)
          continue;
        if (!(debug.length || monotype || meme)) {
          const species = this.dex.species.get(ssbSet.species);
          const weaknesses = [];
          for (const type of this.dex.types.names()) {
            const typeMod = this.dex.getEffectiveness(type, species.types);
            if (typeMod > 0)
              weaknesses.push(type);
          }
          let rejected = false;
          for (const type of weaknesses) {
            if (typePool[type] === undefined)
              typePool[type] = 0;
            if (typePool[type] >= 3) {
              rejected = true;
              break;
            }
          }
          if (ssbSet.ability === "Wonder Guard") {
            if (!typePool["wonderguard"]) {
              typePool["wonderguard"] = 1;
            } else {
              rejected = true;
            }
          }
          if (rejected)
            continue;
          for (const type of weaknesses) {
            typePool[type]++;
          }
        }
        let teraType;
        if (ssbSet.teraType) {
          teraType = ssbSet.teraType === "Any" ? this.sample(this.dex.types.names()) : this.sampleIfArray(ssbSet.teraType);
        }
        const moves = [];
        while (moves.length < 3 && ssbSet.moves.length > 0) {
          let move = this.sampleNoReplace(ssbSet.moves);
          if (Array.isArray(move))
            move = this.sampleNoReplace(move);
          moves.push(this.dex.moves.get(move).name);
        }
        moves.push(this.dex.moves.get(ssbSet.signatureMove).name);
        const ivs = { ...{ hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31 }, ...ssbSet.ivs };
        if (!moves.map((x) => this.dex.moves.get(x)).some((x) => x.category === "Physical")) {
          ivs.atk = 0;
        }
        const set = {
          name,
          species: ssbSet.species,
          item: this.sampleIfArray(ssbSet.item),
          ability: this.sampleIfArray(ssbSet.ability),
          moves,
          nature: ssbSet.nature ? Array.isArray(ssbSet.nature) ? this.sampleNoReplace(ssbSet.nature) : ssbSet.nature : "Serious",
          gender: ssbSet.gender ? this.sampleIfArray(ssbSet.gender) : this.sample(["M", "F", "N"]),
          evs: ssbSet.evs ? { ...{ hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0 }, ...ssbSet.evs } : { hp: 84, atk: 84, def: 84, spa: 84, spd: 84, spe: 84 },
          ivs,
          level: this.adjustLevel || ssbSet.level || 100,
          happiness: typeof ssbSet.happiness === "number" ? ssbSet.happiness : 255,
          shiny: typeof ssbSet.shiny === "number" ? this.randomChance(1, ssbSet.shiny) : !!ssbSet.shiny
        };
        if (set.name === "Felucia") {
          const cmIndex = set.moves.indexOf("Calm Mind");
          if (cmIndex >= 0 && set.moves.includes("Night Shade")) {
            set.moves[cmIndex] = this.sample(["Thief", "Toxic"]);
          }
        }
        if (set.name === "Frostyicelad" && set.shiny) {
          const moveIndex = Math.max(set.moves.indexOf("Dire Claw"), set.moves.indexOf("Meteor Mash"), set.moves.indexOf("Bitter Malice"));
          if (moveIndex >= 0) {
            set.moves[moveIndex] = "Fishious Rend";
            teraType = "Water";
          }
        }
        if (teraType)
          set.teraType = teraType;
        team.push(set);
        if (team.length === this.maxTeamSize && set.ability === "Illusion") {
          team[this.maxTeamSize - 1] = team[this.maxTeamSize - 2];
          team[this.maxTeamSize - 2] = set;
        }
      }
      return team;
    }
  }
  var random_teams_default = RandomStaffBrosTeams;
});

// ../pokemon-showdown/dist/data/random-battles/gen9baby/sets.json
var require_sets2 = __commonJS((exports, module) => {
  module.exports = {
    aipom: {
      level: 6,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Brick Break", "Double-Edge", "Fake Out", "Fire Punch", "Gunk Shot", "Knock Off", "U-turn"],
          abilities: ["Pickup"],
          teraTypes: ["Dark", "Normal"]
        }
      ]
    },
    applin: {
      level: 9,
      sets: [
        {
          role: "Tera Blast user",
          movepool: ["Pounce", "Recycle", "Sucker Punch", "Tera Blast"],
          abilities: ["Ripen"],
          teraTypes: ["Dragon", "Grass"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Defense Curl", "Pounce", "Recycle", "Rollout"],
          abilities: ["Ripen"],
          teraTypes: ["Rock"]
        }
      ]
    },
    arrokuda: {
      level: 8,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Close Combat", "Crunch", "Flip Turn", "Psychic Fangs", "Waterfall"],
          abilities: ["Swift Swim"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    axew: {
      level: 6,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Claw", "Dragon Dance", "Iron Head", "Outrage", "Stomping Tantrum"],
          abilities: ["Mold Breaker"],
          teraTypes: ["Ground", "Steel"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Iron Head", "Scale Shot", "Stomping Tantrum", "Swords Dance"],
          abilities: ["Mold Breaker"],
          teraTypes: ["Ground", "Steel"]
        }
      ]
    },
    azurill: {
      level: 7,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Aqua Jet", "Belly Drum", "Body Slam", "Facade"],
          abilities: ["Huge Power"],
          teraTypes: ["Water"]
        }
      ]
    },
    bagon: {
      level: 6,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Claw", "Dragon Dance", "Fire Fang", "Iron Head", "Outrage"],
          abilities: ["Sheer Force"],
          teraTypes: ["Fire", "Steel"]
        }
      ]
    },
    barboach: {
      level: 7,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Dance", "Earthquake", "Stone Edge", "Waterfall"],
          abilities: ["Oblivious"],
          teraTypes: ["Ground", "Steel"]
        }
      ]
    },
    basculinwhitestriped: {
      level: 5,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Flip Turn", "Hydro Pump", "Ice Beam", "Wave Crash"],
          abilities: ["Adaptability"],
          teraTypes: ["Water"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Aqua Jet", "Flip Turn", "Ice Beam", "Wave Crash"],
          abilities: ["Adaptability"],
          teraTypes: ["Water"]
        }
      ]
    },
    bellsprout: {
      level: 7,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Poison Jab", "Power Whip", "Sucker Punch", "Swords Dance"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Dark", "Grass"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Knock Off", "Power Whip", "Sleep Powder", "Sludge Bomb", "Strength Sap", "Sucker Punch"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Dark", "Steel"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Power Whip", "Sludge Bomb", "Sunny Day", "Weather Ball"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Fire"]
        }
      ]
    },
    bergmite: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Curse", "Icicle Spear", "Rapid Spin", "Recover", "Stone Edge"],
          abilities: ["Sturdy"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    blitzle: {
      level: 7,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Body Slam", "Double-Edge", "Flame Charge", "Supercell Slam", "Thunder Wave", "Trailblaze", "Volt Switch"],
          abilities: ["Sap Sipper"],
          teraTypes: ["Electric", "Fire", "Grass", "Normal"]
        }
      ]
    },
    bonsly: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Rock Blast", "Spikes", "Stealth Rock", "Stone Edge", "Sucker Punch"],
          abilities: ["Sturdy"],
          teraTypes: ["Dragon", "Fairy"]
        }
      ]
    },
    bounsweet: {
      level: 9,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Dazzling Gleam", "Giga Drain", "Rapid Spin", "Synthesis", "Zen Headbutt"],
          abilities: ["Oblivious"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    bramblin: {
      level: 6,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Poltergeist", "Power Whip", "Rapid Spin", "Spikes", "Strength Sap"],
          abilities: ["Wind Rider"],
          teraTypes: ["Fairy", "Steel", "Water"]
        }
      ]
    },
    bronzor: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Flash Cannon", "Hypnosis", "Psychic", "Stealth Rock"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Water"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Flash Cannon", "Psychic", "Shadow Ball"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Water"]
        }
      ]
    },
    buizel: {
      level: 6,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Crunch", "Flip Turn", "Ice Spinner", "Wave Crash"],
          abilities: ["Swift Swim", "Water Veil"],
          teraTypes: ["Ice", "Water"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "Crunch", "Ice Spinner", "Wave Crash"],
          abilities: ["Swift Swim", "Water Veil"],
          teraTypes: ["Ice", "Water"]
        }
      ]
    },
    bulbasaur: {
      level: 6,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Giga Drain", "Knock Off", "Power Whip", "Sleep Powder", "Sludge Bomb", "Synthesis"],
          abilities: ["Chlorophyll", "Overgrow"],
          teraTypes: ["Dark", "Water"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Power Whip", "Sludge Bomb", "Sunny Day", "Weather Ball"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Fire"]
        }
      ]
    },
    cacnea: {
      level: 6,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Drain Punch", "Giga Drain", "Leaf Storm", "Poison Jab", "Spikes", "Sucker Punch", "Toxic Spikes"],
          abilities: ["Water Absorb"],
          teraTypes: ["Poison", "Steel"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Bullet Seed", "Drain Punch", "Sucker Punch", "Swords Dance", "Thunder Punch"],
          abilities: ["Water Absorb"],
          teraTypes: ["Dark", "Electric", "Fighting", "Grass"]
        }
      ]
    },
    capsakid: {
      level: 7,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Bullet Seed", "Crunch", "Leaf Storm", "Stomping Tantrum"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Dark", "Ground"]
        },
        {
          role: "Fast Support",
          movepool: ["Giga Drain", "Leaf Storm", "Stomping Tantrum", "Super Fang", "Thief"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Poison", "Water"]
        }
      ]
    },
    cetoddle: {
      level: 7,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Earthquake", "Ice Shard", "Icicle Crash", "Knock Off", "Liquidation", "Play Rough", "Yawn"],
          abilities: ["Sheer Force"],
          teraTypes: ["Fairy", "Water"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Belly Drum", "Earthquake", "Ice Shard", "Icicle Spear"],
          abilities: ["Thick Fat"],
          teraTypes: ["Ground", "Ice"]
        }
      ]
    },
    charcadet: {
      level: 8,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Clear Smog", "Flame Charge", "Lava Plume", "Will-O-Wisp"],
          abilities: ["Flame Body", "Flash Fire"],
          teraTypes: ["Dragon"]
        }
      ]
    },
    charmander: {
      level: 7,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Brick Break", "Dragon Dance", "Flare Blitz", "Outrage", "Thunder Punch"],
          abilities: ["Blaze"],
          teraTypes: ["Dragon", "Electric", "Fighting"]
        }
      ]
    },
    chespin: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Drain Punch", "Rock Slide", "Spikes", "Synthesis", "Wood Hammer"],
          abilities: ["Bulletproof"],
          teraTypes: ["Poison", "Steel"]
        }
      ]
    },
    chewtle: {
      level: 7,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Crunch", "Ice Fang", "Liquidation", "Shell Smash"],
          abilities: ["Strong Jaw"],
          teraTypes: ["Dark", "Ice", "Steel"]
        }
      ]
    },
    chikorita: {
      level: 7,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Body Slam", "Bullet Seed", "Double-Edge", "Swords Dance", "Synthesis"],
          abilities: ["Overgrow"],
          teraTypes: ["Grass", "Normal", "Steel"]
        }
      ]
    },
    chimchar: {
      level: 7,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "Flare Blitz", "Knock Off", "Slack Off"],
          abilities: ["Blaze"],
          teraTypes: ["Dark", "Dragon"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Flare Blitz", "Gunk Shot", "Knock Off", "Swords Dance", "Thunder Punch", "U-turn"],
          abilities: ["Blaze", "Iron Fist"],
          teraTypes: ["Dark", "Electric", "Fire", "Poison"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Encore", "Flamethrower", "Knock Off", "Slack Off", "Stealth Rock", "U-turn", "Will-O-Wisp"],
          abilities: ["Blaze"],
          teraTypes: ["Dragon", "Fairy"]
        }
      ]
    },
    chinchou: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Discharge", "Ice Beam", "Scald", "Thunder Wave", "Volt Switch"],
          abilities: ["Volt Absorb"],
          teraTypes: ["Flying", "Water"]
        },
        {
          role: "Fast Support",
          movepool: ["Discharge", "Flip Turn", "Scald", "Volt Switch"],
          abilities: ["Volt Absorb"],
          teraTypes: ["Flying"]
        }
      ]
    },
    chingling: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Knock Off", "Psychic", "Recover", "Thunder Wave"],
          abilities: ["Levitate"],
          teraTypes: ["Fairy", "Steel"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Dazzling Gleam", "Psychic", "Recover"],
          abilities: ["Levitate"],
          teraTypes: ["Fairy", "Steel"]
        }
      ]
    },
    clauncher: {
      level: 7,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Aura Sphere", "Dark Pulse", "Dragon Pulse", "Flip Turn", "Ice Beam", "Water Pulse"],
          abilities: ["Mega Launcher"],
          teraTypes: ["Dark", "Dragon", "Fighting", "Water"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Aura Sphere", "Dark Pulse", "Dragon Pulse", "Flip Turn", "Ice Beam", "Water Pulse"],
          abilities: ["Mega Launcher"],
          teraTypes: ["Dark", "Dragon", "Fighting", "Water"]
        }
      ]
    },
    cleffa: {
      level: 9,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Draining Kiss", "Fire Blast", "Psyshock"],
          abilities: ["Magic Guard"],
          teraTypes: ["Fire"]
        },
        {
          role: "Bulky Support",
          movepool: ["Alluring Voice", "Draining Kiss", "Encore", "Protect", "Thunder Wave", "Wish"],
          abilities: ["Magic Guard"],
          teraTypes: ["Poison", "Steel"]
        }
      ]
    },
    corphish: {
      level: 6,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Aqua Jet", "Crabhammer", "Dragon Dance", "Knock Off"],
          abilities: ["Adaptability"],
          teraTypes: ["Water"]
        }
      ]
    },
    cottonee: {
      level: 7,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Dazzling Gleam", "Encore", "Giga Drain", "Stun Spore", "Taunt"],
          abilities: ["Prankster"],
          teraTypes: ["Poison", "Steel"]
        }
      ]
    },
    crabrawler: {
      level: 6,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "Drain Punch", "Earthquake", "Gunk Shot", "Ice Punch", "Knock Off", "Thunder Punch"],
          abilities: ["Iron Fist"],
          teraTypes: ["Dark", "Electric", "Ground", "Poison"]
        }
      ]
    },
    cranidos: {
      level: 6,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Earthquake", "Fire Punch", "Head Smash", "Rock Slide", "Zen Headbutt"],
          abilities: ["Sheer Force"],
          teraTypes: ["Psychic", "Rock"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Earthquake", "Fire Punch", "Rock Slide", "Swords Dance", "Zen Headbutt"],
          abilities: ["Sheer Force"],
          teraTypes: ["Ground", "Rock"]
        }
      ]
    },
    croagunk: {
      level: 7,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "Drain Punch", "Earthquake", "Gunk Shot", "Knock Off", "Sucker Punch"],
          abilities: ["Dry Skin"],
          teraTypes: ["Dark", "Fighting", "Ground"]
        }
      ]
    },
    cubchoo: {
      level: 7,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Blizzard", "Liquidation", "Play Rough", "Snowscape", "Surf"],
          abilities: ["Slush Rush"],
          teraTypes: ["Ice", "Water"]
        }
      ]
    },
    cufant: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Earthquake", "Iron Head", "Play Rough", "Rock Slide", "Stealth Rock", "Superpower"],
          abilities: ["Sheer Force"],
          teraTypes: ["Fairy"]
        }
      ]
    },
    cutiefly: {
      level: 5,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Bug Buzz", "Moonblast", "Sticky Web", "Stun Spore", "U-turn"],
          abilities: ["Shield Dust"],
          teraTypes: ["Ghost"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Bug Buzz", "Moonblast", "Quiver Dance", "Tera Blast"],
          abilities: ["Shield Dust"],
          teraTypes: ["Ground"]
        }
      ]
    },
    cyndaquil: {
      level: 7,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Eruption", "Extrasensory", "Fire Blast", "Play Rough"],
          abilities: ["Flash Fire"],
          teraTypes: ["Fire"]
        }
      ]
    },
    deerling: {
      level: 6,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Bullet Seed", "Headbutt", "Synthesis", "Thunder Wave"],
          abilities: ["Serene Grace"],
          teraTypes: ["Ghost", "Normal"]
        }
      ]
    },
    deino: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Crunch", "Outrage", "Thunder Wave", "Work Up"],
          abilities: ["Hustle"],
          teraTypes: ["Poison"]
        },
        {
          role: "Bulky Support",
          movepool: ["Crunch", "Outrage", "Roar", "Thunder Wave"],
          abilities: ["Hustle"],
          teraTypes: ["Poison"]
        }
      ]
    },
    dewpider: {
      level: 6,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Giga Drain", "Ice Beam", "Leech Life", "Liquidation", "Sticky Web", "Surf"],
          abilities: ["Water Bubble"],
          teraTypes: ["Water"]
        }
      ]
    },
    diglett: {
      level: 6,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Earthquake", "Stealth Rock", "Stone Edge", "Sucker Punch", "Swords Dance"],
          abilities: ["Arena Trap"],
          teraTypes: ["Ground", "Rock"]
        }
      ]
    },
    diglettalola: {
      level: 6,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Earthquake", "Iron Head", "Stealth Rock", "Stone Edge", "Swords Dance"],
          abilities: ["Sand Force", "Tangling Hair"],
          teraTypes: ["Ground", "Rock", "Steel"]
        }
      ]
    },
    doduo: {
      level: 6,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Body Slam", "Brave Bird", "Double-Edge", "Knock Off", "Swords Dance"],
          abilities: ["Early Bird"],
          teraTypes: ["Dark", "Flying", "Normal"]
        }
      ]
    },
    dratini: {
      level: 7,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Dragon Dance", "Extreme Speed", "Iron Head", "Outrage", "Rest"],
          abilities: ["Shed Skin"],
          teraTypes: ["Steel"]
        }
      ]
    },
    drifloon: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Defog", "Knock Off", "Pain Split", "Shadow Ball", "Thunder Wave", "Will-O-Wisp"],
          abilities: ["Aftermath"],
          teraTypes: ["Fairy"]
        },
        {
          role: "Fast Support",
          movepool: ["Acrobatics", "Defog", "Knock Off", "Pain Split", "Shadow Ball", "Thunder Wave", "Will-O-Wisp"],
          abilities: ["Unburden"],
          teraTypes: ["Fairy", "Flying"]
        }
      ]
    },
    drilbur: {
      level: 6,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Earthquake", "Rapid Spin", "Rock Slide", "Swords Dance"],
          abilities: ["Mold Breaker", "Sand Rush"],
          teraTypes: ["Ground", "Rock"]
        },
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Poison Jab", "Rapid Spin", "Swords Dance"],
          abilities: ["Mold Breaker", "Sand Rush"],
          teraTypes: ["Ground", "Poison"]
        }
      ]
    },
    drowzee: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Drain Punch", "Encore", "Knock Off", "Psychic", "Thunder Wave"],
          abilities: ["Inner Focus", "Insomnia"],
          teraTypes: ["Dark", "Fighting"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Draining Kiss", "Encore", "Knock Off", "Psychic", "Thunder Wave"],
          abilities: ["Inner Focus", "Insomnia"],
          teraTypes: ["Fairy"]
        }
      ]
    },
    ducklett: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Aqua Jet", "Brave Bird", "Defog", "Roost", "Surf"],
          abilities: ["Hydration"],
          teraTypes: ["Ground"]
        }
      ]
    },
    dunsparce: {
      level: 5,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Body Slam", "Coil", "Earthquake", "Roost"],
          abilities: ["Serene Grace"],
          teraTypes: ["Ground", "Poison"]
        },
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Glare", "Headbutt", "Roost"],
          abilities: ["Serene Grace"],
          teraTypes: ["Ghost", "Ground"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Earth Power", "Hyper Voice", "Roost", "Shadow Ball"],
          abilities: ["Rattled"],
          teraTypes: ["Fairy", "Ghost"]
        }
      ]
    },
    duraludon: {
      level: 5,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Body Press", "Draco Meteor", "Dragon Pulse", "Flash Cannon", "Iron Defense"],
          abilities: ["Light Metal"],
          teraTypes: ["Fairy", "Fighting"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Body Press", "Draco Meteor", "Flash Cannon", "Thunderbolt"],
          abilities: ["Light Metal"],
          teraTypes: ["Dragon", "Electric", "Fighting", "Steel"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Body Press", "Draco Meteor", "Dragon Pulse", "Flash Cannon", "Stealth Rock", "Thunder Wave"],
          abilities: ["Light Metal"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    duskull: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Leech Life", "Pain Split", "Poltergeist", "Shadow Sneak", "Will-O-Wisp"],
          abilities: ["Levitate"],
          teraTypes: ["Fairy", "Steel", "Water"]
        }
      ]
    },
    eevee: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Body Slam", "Double-Edge", "Protect", "Shadow Ball", "Wish"],
          abilities: ["Adaptability"],
          teraTypes: ["Ghost", "Normal"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Calm Mind", "Protect", "Tera Blast", "Wish"],
          abilities: ["Adaptability"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    ekans: {
      level: 6,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Earthquake", "Glare", "Gunk Shot", "Knock Off", "Toxic Spikes"],
          abilities: ["Intimidate"],
          teraTypes: ["Dark", "Ground"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Coil", "Earthquake", "Gunk Shot", "Trailblaze"],
          abilities: ["Intimidate"],
          teraTypes: ["Dark", "Grass", "Ground"]
        }
      ]
    },
    elekid: {
      level: 6,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Cross Chop", "Ice Punch", "Knock Off", "Psychic", "Supercell Slam", "Taunt", "Volt Switch"],
          abilities: ["Static", "Vital Spirit"],
          teraTypes: ["Dark", "Electric", "Fighting", "Ice"]
        }
      ]
    },
    espurr: {
      level: 6,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dark Pulse", "Nasty Plot", "Psychic", "Thunderbolt"],
          abilities: ["Infiltrator"],
          teraTypes: ["Dark", "Electric", "Psychic"]
        },
        {
          role: "Fast Support",
          movepool: ["Dark Pulse", "Nasty Plot", "Psychic", "Thunder Wave", "Thunderbolt", "Trick"],
          abilities: ["Infiltrator"],
          teraTypes: ["Dark", "Electric", "Psychic"]
        }
      ]
    },
    exeggcute: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Giga Drain", "Moonlight", "Psychic", "Sleep Powder", "Stun Spore"],
          abilities: ["Harvest"],
          teraTypes: ["Poison", "Steel"]
        }
      ]
    },
    feebas: {
      level: 8,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Haze", "Hypnosis", "Ice Beam", "Scale Shot", "Waterfall"],
          abilities: ["Adaptability"],
          teraTypes: ["Dragon", "Ice"]
        }
      ]
    },
    fennekin: {
      level: 6,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Encore", "Flamethrower", "Mud Shot", "Psychic", "Will-O-Wisp"],
          abilities: ["Blaze"],
          teraTypes: ["Dragon", "Fairy", "Ground"]
        }
      ]
    },
    fidough: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Play Rough", "Protect", "Stomping Tantrum", "Wish"],
          abilities: ["Own Tempo"],
          teraTypes: ["Ground", "Steel"]
        }
      ]
    },
    finizen: {
      level: 7,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Agility", "Boomburst", "Encore", "Ice Beam", "Surf"],
          abilities: ["Water Veil"],
          teraTypes: ["Normal"]
        }
      ]
    },
    finneon: {
      level: 7,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Alluring Voice", "Ice Beam", "Surf", "Thief", "U-turn"],
          abilities: ["Storm Drain", "Swift Swim"],
          teraTypes: ["Fairy"]
        }
      ]
    },
    flabebe: {
      level: 7,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Moonblast", "Psychic", "Synthesis"],
          abilities: ["Flower Veil"],
          teraTypes: ["Poison", "Steel"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Calm Mind", "Moonblast", "Synthesis", "Tera Blast"],
          abilities: ["Flower Veil"],
          teraTypes: ["Ground"]
        }
      ]
    },
    fletchling: {
      level: 6,
      sets: [
        {
          role: "Tera Blast user",
          movepool: ["Acrobatics", "Flare Blitz", "Swords Dance", "Tera Blast"],
          abilities: ["Gale Wings"],
          teraTypes: ["Ground"]
        },
        {
          role: "Bulky Support",
          movepool: ["Brave Bird", "Defog", "Double-Edge", "Heat Wave", "Roost", "Taunt", "U-turn"],
          abilities: ["Gale Wings"],
          teraTypes: ["Steel"]
        }
      ]
    },
    flittle: {
      level: 5,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Protect", "Stored Power", "Substitute"],
          abilities: ["Speed Boost"],
          teraTypes: ["Fairy"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Calm Mind", "Protect", "Stored Power", "Substitute", "Tera Blast"],
          abilities: ["Speed Boost"],
          teraTypes: ["Fairy", "Fighting"]
        }
      ]
    },
    fomantis: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Defog", "Leaf Storm", "Superpower", "Synthesis"],
          abilities: ["Contrary"],
          teraTypes: ["Fighting", "Steel"]
        }
      ]
    },
    foongus: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Clear Smog", "Foul Play", "Giga Drain", "Leaf Storm", "Sludge Bomb", "Spore", "Stun Spore"],
          abilities: ["Regenerator"],
          teraTypes: ["Steel", "Water"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Giga Drain", "Sludge Bomb", "Spore", "Synthesis"],
          abilities: ["Regenerator"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    frigibax: {
      level: 6,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Crunch", "Icicle Spear", "Outrage", "Swords Dance"],
          abilities: ["Thermal Exchange"],
          teraTypes: ["Dragon", "Fairy", "Ice"]
        }
      ]
    },
    froakie: {
      level: 6,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Ice Beam", "Spikes", "Surf", "Toxic Spikes", "U-turn"],
          abilities: ["Protean"],
          teraTypes: ["Ice", "Water"]
        }
      ]
    },
    fuecoco: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Encore", "Flamethrower", "Roar", "Slack Off", "Stomping Tantrum", "Will-O-Wisp"],
          abilities: ["Unaware"],
          teraTypes: ["Dragon", "Fairy"]
        }
      ]
    },
    gastly: {
      level: 6,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Dazzling Gleam", "Nasty Plot", "Shadow Ball", "Sludge Bomb", "Trick"],
          abilities: ["Levitate"],
          teraTypes: ["Fairy", "Ghost", "Poison"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Dazzling Gleam", "Nasty Plot", "Shadow Ball", "Sludge Bomb", "Thunderbolt", "Will-O-Wisp"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Fairy", "Ghost", "Poison"]
        }
      ]
    },
    geodude: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Earthquake", "Explosion", "Rock Blast", "Rock Polish", "Stealth Rock", "Stone Edge"],
          abilities: ["Sturdy"],
          teraTypes: ["Grass"]
        }
      ]
    },
    geodudealola: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Double-Edge", "Earthquake", "Explosion", "Rock Blast", "Rock Polish", "Stealth Rock", "Stone Edge", "Thunder Wave", "Volt Switch"],
          abilities: ["Galvanize"],
          teraTypes: ["Grass", "Ground"]
        }
      ]
    },
    gible: {
      level: 7,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Earthquake", "Iron Head", "Scale Shot", "Swords Dance"],
          abilities: ["Rough Skin"],
          teraTypes: ["Ground", "Steel"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Dragon Claw", "Earthquake", "Iron Head", "Outrage", "Stealth Rock", "Stone Edge"],
          abilities: ["Rough Skin"],
          teraTypes: ["Dragon", "Ground", "Steel"]
        }
      ]
    },
    gimmighoul: {
      level: 7,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Nasty Plot", "Power Gem", "Shadow Ball", "Substitute"],
          abilities: ["Rattled"],
          teraTypes: ["Fairy"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Nasty Plot", "Power Gem", "Shadow Ball", "Substitute", "Tera Blast"],
          abilities: ["Rattled"],
          teraTypes: ["Fairy", "Fighting"]
        }
      ]
    },
    gimmighoulroaming: {
      level: 6,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Nasty Plot", "Power Gem", "Shadow Ball", "Substitute"],
          abilities: ["Run Away"],
          teraTypes: ["Ghost", "Rock"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Nasty Plot", "Shadow Ball", "Substitute", "Tera Blast"],
          abilities: ["Run Away"],
          teraTypes: ["Fairy", "Fighting"]
        }
      ]
    },
    girafarig: {
      level: 5,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dazzling Gleam", "Nasty Plot", "Psychic", "Shadow Ball", "Thunderbolt"],
          abilities: ["Sap Sipper"],
          teraTypes: ["Electric", "Fairy", "Ghost"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Hyper Voice", "Nasty Plot", "Psychic", "Psyshock", "Thunderbolt"],
          abilities: ["Sap Sipper"],
          teraTypes: ["Normal"]
        }
      ]
    },
    gligar: {
      level: 5,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dual Wingbeat", "Earthquake", "Knock Off", "Swords Dance"],
          abilities: ["Immunity"],
          teraTypes: ["Steel", "Water"]
        },
        {
          role: "Fast Support",
          movepool: ["Earthquake", "Knock Off", "Spikes", "Stealth Rock", "Toxic Spikes", "U-turn"],
          abilities: ["Immunity"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    glimmet: {
      level: 6,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Mud Shot", "Power Gem", "Sludge Wave", "Spikes", "Stealth Rock"],
          abilities: ["Toxic Debris"],
          teraTypes: ["Ghost", "Grass"]
        }
      ]
    },
    golett: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Dynamic Punch", "Earthquake", "Poltergeist", "Rock Tomb", "Stealth Rock"],
          abilities: ["No Guard"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    goomy: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Dragon Pulse", "Rest", "Sleep Talk", "Sludge Bomb", "Thunderbolt"],
          abilities: ["Sap Sipper"],
          teraTypes: ["Electric", "Poison", "Water"]
        }
      ]
    },
    gothita: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Dark Pulse", "Nasty Plot", "Psychic", "Thunderbolt", "Trick"],
          abilities: ["Shadow Tag"],
          teraTypes: ["Dark", "Electric", "Fairy"]
        }
      ]
    },
    greavard: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Pain Split", "Play Rough", "Poltergeist", "Roar", "Shadow Sneak", "Yawn"],
          abilities: ["Fluffy"],
          teraTypes: ["Fairy"]
        }
      ]
    },
    grimer: {
      level: 6,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Curse", "Drain Punch", "Gunk Shot", "Poison Jab", "Shadow Sneak"],
          abilities: ["Poison Touch"],
          teraTypes: ["Dark", "Fighting"]
        }
      ]
    },
    grimeralola: {
      level: 6,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Curse", "Drain Punch", "Gunk Shot", "Knock Off", "Poison Jab"],
          abilities: ["Poison Touch"],
          teraTypes: ["Dark", "Fighting"]
        }
      ]
    },
    grookey: {
      level: 6,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Drain Punch", "Grassy Glide", "Knock Off", "Swords Dance", "U-turn", "Wood Hammer"],
          abilities: ["Grassy Surge"],
          teraTypes: ["Grass"]
        }
      ]
    },
    growlithe: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Close Combat", "Flare Blitz", "Morning Sun", "Roar", "Wild Charge", "Will-O-Wisp"],
          abilities: ["Intimidate"],
          teraTypes: ["Dragon", "Fairy", "Fighting"]
        }
      ]
    },
    growlithehisui: {
      level: 6,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Close Combat", "Flare Blitz", "Head Smash", "Morning Sun", "Stealth Rock", "Wild Charge", "Will-O-Wisp"],
          abilities: ["Rock Head"],
          teraTypes: ["Dragon", "Fairy"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Close Combat", "Flare Blitz", "Head Smash", "Wild Charge"],
          abilities: ["Rock Head"],
          teraTypes: ["Fighting", "Fire", "Rock"]
        }
      ]
    },
    grubbin: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Lunge", "Sticky Web", "Thunder Wave", "Volt Switch", "Wild Charge"],
          abilities: ["Swarm"],
          teraTypes: ["Electric"]
        }
      ]
    },
    gulpin: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Encore", "Fire Punch", "Giga Drain", "Pain Split", "Sludge Bomb", "Thunder Wave", "Toxic Spikes"],
          abilities: ["Sticky Hold"],
          teraTypes: ["Dark", "Grass"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Bullet Seed", "Fire Punch", "Gunk Shot", "Swords Dance"],
          abilities: ["Sticky Hold"],
          teraTypes: ["Fire", "Grass", "Poison"]
        }
      ]
    },
    happiny: {
      level: 8,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Hyper Voice", "Rest", "Shadow Ball", "Thunder Wave"],
          abilities: ["Natural Cure"],
          teraTypes: ["Ghost"]
        },
        {
          role: "Bulky Support",
          movepool: ["Heal Bell", "Hyper Voice", "Rest", "Thunder Wave"],
          abilities: ["Natural Cure"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    hatenna: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Draining Kiss", "Mystical Fire", "Nuzzle", "Psychic"],
          abilities: ["Magic Bounce"],
          teraTypes: ["Electric", "Fairy"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Draining Kiss", "Mystical Fire", "Psychic"],
          abilities: ["Magic Bounce"],
          teraTypes: ["Fairy", "Steel"]
        }
      ]
    },
    hippopotas: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Curse", "Earthquake", "Slack Off", "Stealth Rock", "Stone Edge", "Whirlwind", "Yawn"],
          abilities: ["Sand Stream"],
          teraTypes: ["Dragon", "Rock", "Steel"]
        }
      ]
    },
    hoothoot: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Calm Mind", "Defog", "Hurricane", "Hyper Voice", "Nasty Plot", "Roost"],
          abilities: ["Tinted Lens"],
          teraTypes: ["Fairy", "Steel"]
        }
      ]
    },
    hoppip: {
      level: 8,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Acrobatics", "Encore", "Sleep Powder", "Strength Sap", "Stun Spore", "U-turn"],
          abilities: ["Chlorophyll", "Infiltrator"],
          teraTypes: ["Steel"]
        }
      ]
    },
    horsea: {
      level: 7,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Dragon Pulse", "Flip Turn", "Ice Beam", "Surf"],
          abilities: ["Sniper", "Swift Swim"],
          teraTypes: ["Dragon", "Water"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Pulse", "Ice Beam", "Rain Dance", "Surf"],
          abilities: ["Swift Swim"],
          teraTypes: ["Dragon", "Water"]
        }
      ]
    },
    houndour: {
      level: 6,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dark Pulse", "Flamethrower", "Nasty Plot", "Sludge Bomb", "Sucker Punch"],
          abilities: ["Flash Fire"],
          teraTypes: ["Dark", "Fire", "Poison"]
        }
      ]
    },
    igglybuff: {
      level: 8,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Alluring Voice", "Encore", "Flamethrower", "Protect", "Thunder Wave", "Wish"],
          abilities: ["Competitive"],
          teraTypes: ["Poison", "Steel"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Body Slam", "Draining Kiss", "Protect", "Wish"],
          abilities: ["Competitive"],
          teraTypes: ["Poison", "Steel"]
        }
      ]
    },
    impidimp: {
      level: 7,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Burning Jealousy", "Dark Pulse", "Dazzling Gleam", "Nasty Plot", "Thunder Wave"],
          abilities: ["Prankster"],
          teraTypes: ["Dark", "Fairy", "Fire"]
        },
        {
          role: "Fast Support",
          movepool: ["Dazzling Gleam", "Draining Kiss", "Light Screen", "Parting Shot", "Reflect", "Taunt", "Thunder Wave"],
          abilities: ["Prankster"],
          teraTypes: ["Poison", "Steel"]
        },
        {
          role: "Bulky Support",
          movepool: ["Dark Pulse", "Dazzling Gleam", "Draining Kiss", "Parting Shot", "Sucker Punch", "Taunt", "Thunder Wave"],
          abilities: ["Prankster"],
          teraTypes: ["Poison", "Steel"]
        }
      ]
    },
    inkay: {
      level: 6,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Hypnosis", "Knock Off", "Psycho Cut", "Rest", "Sleep Talk", "Superpower"],
          abilities: ["Contrary"],
          teraTypes: ["Fighting", "Steel"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Knock Off", "Psycho Cut", "Superpower", "Trick", "Trick Room"],
          abilities: ["Contrary"],
          teraTypes: ["Fighting", "Steel"]
        }
      ]
    },
    jangmoo: {
      level: 6,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Dance", "Earthquake", "Iron Head", "Outrage"],
          abilities: ["Bulletproof"],
          teraTypes: ["Ground", "Steel"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Earthquake", "Iron Head", "Scale Shot", "Swords Dance"],
          abilities: ["Bulletproof"],
          teraTypes: ["Ground", "Steel"]
        }
      ]
    },
    joltik: {
      level: 7,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Giga Drain", "Leech Life", "Thunder", "Thunder Wave", "Volt Switch"],
          abilities: ["Compound Eyes"],
          teraTypes: ["Electric"]
        }
      ]
    },
    koffing: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Flamethrower", "Pain Split", "Sludge Bomb", "Toxic Spikes", "Will-O-Wisp"],
          abilities: ["Levitate"],
          teraTypes: ["Steel"]
        }
      ]
    },
    kubfu: {
      level: 6,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Close Combat", "Ice Punch", "Iron Head", "Swords Dance"],
          abilities: ["Inner Focus"],
          teraTypes: ["Fighting", "Steel"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Close Combat", "Ice Punch", "Iron Head", "Swords Dance", "U-turn"],
          abilities: ["Inner Focus"],
          teraTypes: ["Fighting", "Steel"]
        }
      ]
    },
    larvesta: {
      level: 6,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Flare Blitz", "Leech Life", "Morning Sun", "U-turn", "Wild Charge", "Will-O-Wisp"],
          abilities: ["Flame Body"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    larvitar: {
      level: 6,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Dance", "Earthquake", "Facade", "Rock Blast", "Stone Edge"],
          abilities: ["Guts"],
          teraTypes: ["Normal"]
        }
      ]
    },
    lechonk: {
      level: 7,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Body Slam", "Bulldoze", "Curse", "Play Rough"],
          abilities: ["Thick Fat"],
          teraTypes: ["Fairy", "Ground"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Body Slam", "Bullet Seed", "Double-Edge", "Play Rough", "Thief", "Yawn"],
          abilities: ["Thick Fat"],
          teraTypes: ["Fairy", "Grass"]
        }
      ]
    },
    litleo: {
      level: 7,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Flamethrower", "Hyper Voice", "Will-O-Wisp", "Work Up"],
          abilities: ["Unnerve"],
          teraTypes: ["Fire", "Normal"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Flamethrower", "Hyper Voice", "Solar Beam", "Sunny Day"],
          abilities: ["Unnerve"],
          teraTypes: ["Fire", "Grass", "Normal"]
        }
      ]
    },
    litten: {
      level: 6,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Flare Blitz", "Leech Life", "Swords Dance", "Trailblaze"],
          abilities: ["Intimidate"],
          teraTypes: ["Bug", "Fire", "Grass"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Leech Life", "Overheat", "Parting Shot", "Will-O-Wisp"],
          abilities: ["Intimidate"],
          teraTypes: ["Dragon", "Fairy"]
        }
      ]
    },
    litwick: {
      level: 7,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Energy Ball", "Flamethrower", "Pain Split", "Shadow Ball", "Will-O-Wisp"],
          abilities: ["Flame Body", "Flash Fire"],
          teraTypes: ["Fairy", "Ghost", "Grass"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Flamethrower", "Hex", "Pain Split", "Will-O-Wisp"],
          abilities: ["Flame Body", "Flash Fire"],
          teraTypes: ["Fairy", "Grass"]
        }
      ]
    },
    lotad: {
      level: 8,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Giga Drain", "Ice Beam", "Surf", "Synthesis"],
          abilities: ["Swift Swim"],
          teraTypes: ["Steel", "Water"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Giga Drain", "Ice Beam", "Rain Dance", "Surf"],
          abilities: ["Swift Swim"],
          teraTypes: ["Grass", "Water"]
        }
      ]
    },
    magby: {
      level: 6,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Belly Drum", "Cross Chop", "Fire Punch", "Mach Punch", "Thunder Punch"],
          abilities: ["Flame Body", "Vital Spirit"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Cross Chop", "Fire Blast", "Flare Blitz", "Thunder Punch", "Will-O-Wisp"],
          abilities: ["Flame Body", "Vital Spirit"],
          teraTypes: ["Electric", "Fire", "Grass"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Cross Chop", "Flare Blitz", "Overheat", "Thunder Punch"],
          abilities: ["Flame Body", "Vital Spirit"],
          teraTypes: ["Electric", "Fighting", "Fire"]
        }
      ]
    },
    magnemite: {
      level: 6,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Flash Cannon", "Thunder Wave", "Thunderbolt", "Volt Switch"],
          abilities: ["Analytic", "Magnet Pull"],
          teraTypes: ["Flying"]
        }
      ]
    },
    makuhita: {
      level: 7,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "Bullet Punch", "Drain Punch", "Earthquake", "Heavy Slam", "Knock Off", "Stone Edge"],
          abilities: ["Guts", "Thick Fat"],
          teraTypes: ["Dark", "Ground", "Steel"]
        }
      ]
    },
    mankey: {
      level: 6,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Close Combat", "Earthquake", "Gunk Shot", "Stone Edge", "Throat Chop", "U-turn"],
          abilities: ["Defiant"],
          teraTypes: ["Dark", "Fighting", "Ground", "Poison", "Rock"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "Drain Punch", "Earthquake", "Stone Edge", "Throat Chop"],
          abilities: ["Defiant"],
          teraTypes: ["Fighting", "Ground", "Rock"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Bulk Up", "Close Combat", "Earthquake", "Gunk Shot", "Stone Edge", "Throat Chop", "U-turn"],
          abilities: ["Defiant"],
          teraTypes: ["Dark", "Fighting", "Ground", "Poison", "Rock"]
        }
      ]
    },
    mareanie: {
      level: 6,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Gunk Shot", "Liquidation", "Poison Jab", "Recover", "Toxic Spikes"],
          abilities: ["Regenerator"],
          teraTypes: ["Fairy", "Flying", "Grass", "Steel"]
        }
      ]
    },
    mareep: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Dazzling Gleam", "Thunder Wave", "Thunderbolt", "Volt Switch"],
          abilities: ["Static"],
          teraTypes: ["Fairy"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Agility", "Dazzling Gleam", "Tera Blast", "Thunderbolt"],
          abilities: ["Static"],
          teraTypes: ["Ice"]
        }
      ]
    },
    maschiff: {
      level: 7,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Crunch", "Hone Claws", "Play Rough", "Trailblaze"],
          abilities: ["Stakeout"],
          teraTypes: ["Fairy"]
        }
      ]
    },
    meditite: {
      level: 5,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "Drain Punch", "Trailblaze", "Zen Headbutt"],
          abilities: ["Pure Power"],
          teraTypes: ["Fighting", "Psychic", "Steel"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Close Combat", "Ice Punch", "Poison Jab", "Zen Headbutt"],
          abilities: ["Pure Power"],
          teraTypes: ["Fighting", "Poison", "Psychic"]
        }
      ]
    },
    meowth: {
      level: 6,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Double-Edge", "Fake Out", "Knock Off", "Play Rough", "Thunder Wave", "U-turn"],
          abilities: ["Technician"],
          teraTypes: ["Normal"]
        }
      ]
    },
    meowthalola: {
      level: 6,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Gunk Shot", "Knock Off", "Parting Shot", "Play Rough", "Thunder Wave"],
          abilities: ["Rattled"],
          teraTypes: ["Fairy", "Poison"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Dark Pulse", "Hypnosis", "Nasty Plot", "Power Gem", "Thunderbolt"],
          abilities: ["Rattled"],
          teraTypes: ["Dark", "Electric"]
        }
      ]
    },
    meowthgalar: {
      level: 7,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Iron Head", "Knock Off", "Swords Dance", "Trailblaze"],
          abilities: ["Tough Claws"],
          teraTypes: ["Fairy", "Steel"]
        },
        {
          role: "Bulky Support",
          movepool: ["Iron Head", "Knock Off", "Play Rough", "Stealth Rock", "U-turn"],
          abilities: ["Tough Claws"],
          teraTypes: ["Fairy", "Water"]
        }
      ]
    },
    mienfoo: {
      level: 6,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["High Jump Kick", "Knock Off", "Poison Jab", "Stone Edge", "Swords Dance"],
          abilities: ["Regenerator"],
          teraTypes: ["Dark", "Fighting", "Poison"]
        },
        {
          role: "Fast Support",
          movepool: ["Fake Out", "High Jump Kick", "Knock Off", "U-turn"],
          abilities: ["Regenerator"],
          teraTypes: ["Dark", "Steel"]
        },
        {
          role: "Fast Attacker",
          movepool: ["High Jump Kick", "Knock Off", "Poison Jab", "Stone Edge", "Swords Dance", "U-turn"],
          abilities: ["Regenerator"],
          teraTypes: ["Dark", "Fighting", "Poison"]
        }
      ]
    },
    milcery: {
      level: 8,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Acid Armor", "Dazzling Gleam", "Draining Kiss", "Recover", "Stored Power"],
          abilities: ["Aroma Veil"],
          teraTypes: ["Poison", "Steel"]
        }
      ]
    },
    minccino: {
      level: 6,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Bullet Seed", "Knock Off", "Tail Slap", "Tidy Up"],
          abilities: ["Skill Link"],
          teraTypes: ["Grass", "Normal"]
        }
      ]
    },
    misdreavus: {
      level: 5,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Draining Kiss", "Shadow Ball", "Will-O-Wisp"],
          abilities: ["Levitate"],
          teraTypes: ["Fairy"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Dazzling Gleam", "Nasty Plot", "Shadow Ball", "Thunderbolt", "Trick", "Will-O-Wisp"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Fairy", "Ghost"]
        }
      ]
    },
    mudbray: {
      level: 6,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Close Combat", "Earthquake", "Heavy Slam", "Stealth Rock", "Stone Edge"],
          abilities: ["Stamina"],
          teraTypes: ["Fighting", "Steel"]
        }
      ]
    },
    mudkip: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Body Slam", "Ice Beam", "Liquidation", "Rest", "Roar", "Sleep Talk", "Sludge Wave", "Yawn"],
          abilities: ["Torrent"],
          teraTypes: ["Poison", "Steel"]
        }
      ]
    },
    munchlax: {
      level: 6,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Body Slam", "Crunch", "Curse", "Earthquake", "Rest", "Sleep Talk"],
          abilities: ["Thick Fat"],
          teraTypes: ["Fairy", "Ground"]
        }
      ]
    },
    murkrow: {
      level: 5,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dark Pulse", "Heat Wave", "Hurricane", "Nasty Plot", "Sucker Punch"],
          abilities: ["Super Luck"],
          teraTypes: ["Dark", "Fairy", "Flying", "Steel"]
        },
        {
          role: "Fast Support",
          movepool: ["Brave Bird", "Sucker Punch", "Thunder Wave", "U-turn"],
          abilities: ["Prankster"],
          teraTypes: ["Fairy", "Steel"]
        }
      ]
    },
    nacli: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Curse", "Earthquake", "Recover", "Stealth Rock", "Stone Edge"],
          abilities: ["Purifying Salt"],
          teraTypes: ["Dragon", "Fairy"]
        }
      ]
    },
    noibat: {
      level: 8,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Defog", "Draco Meteor", "Heat Wave", "Hurricane", "Roost", "U-turn"],
          abilities: ["Infiltrator"],
          teraTypes: ["Fairy", "Steel"]
        }
      ]
    },
    nosepass: {
      level: 6,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Body Press", "Iron Defense", "Pain Split", "Power Gem", "Thunder Wave"],
          abilities: ["Magnet Pull"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Body Press", "Pain Split", "Power Gem", "Stealth Rock", "Thunder Wave", "Volt Switch"],
          abilities: ["Magnet Pull"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    numel: {
      level: 7,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Earthquake", "Fire Blast", "Growth", "Trailblaze"],
          abilities: ["Simple"],
          teraTypes: ["Grass", "Ground"]
        }
      ]
    },
    nymble: {
      level: 6,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["First Impression", "Leech Life", "Sucker Punch", "U-turn"],
          abilities: ["Tinted Lens"],
          teraTypes: ["Bug"]
        }
      ]
    },
    oddish: {
      level: 6,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Giga Drain", "Sleep Powder", "Sludge Bomb", "Strength Sap", "Stun Spore"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    oshawott: {
      level: 7,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Aqua Jet", "Encore", "Flip Turn", "Ice Beam", "Knock Off", "Sacred Sword", "Surf", "X-Scissor"],
          abilities: ["Torrent"],
          teraTypes: ["Dark", "Fighting", "Water"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Aqua Jet", "Knock Off", "Liquidation", "Sacred Sword", "Swords Dance"],
          abilities: ["Torrent"],
          teraTypes: ["Dark", "Fighting", "Water"]
        }
      ]
    },
    pawmi: {
      level: 8,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Discharge", "Encore", "Nuzzle", "Play Rough", "Super Fang", "Volt Switch"],
          abilities: ["Natural Cure", "Static"],
          teraTypes: ["Electric", "Fairy", "Grass"]
        }
      ]
    },
    pawniard: {
      level: 6,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Iron Head", "Night Slash", "Sucker Punch", "Swords Dance"],
          abilities: ["Defiant"],
          teraTypes: ["Dark", "Fairy", "Steel"]
        }
      ]
    },
    petilil: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Encore", "Giga Drain", "Leaf Storm", "Pollen Puff", "Sleep Powder", "Stun Spore", "Synthesis"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Poison", "Steel", "Water"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Giga Drain", "Leaf Storm", "Stun Spore", "Synthesis", "Tera Blast"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Fire", "Rock"]
        }
      ]
    },
    phanpy: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Earthquake", "Gunk Shot", "Ice Shard", "Knock Off", "Stealth Rock", "Stone Edge"],
          abilities: ["Pickup"],
          teraTypes: ["Dark", "Poison"]
        }
      ]
    },
    phantump: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Horn Leech", "Poltergeist", "Rest", "Will-O-Wisp"],
          abilities: ["Natural Cure"],
          teraTypes: ["Fairy", "Water"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Horn Leech", "Poltergeist", "Protect", "Will-O-Wisp"],
          abilities: ["Harvest"],
          teraTypes: ["Fairy", "Water"]
        }
      ]
    },
    pichu: {
      level: 8,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Encore", "Nuzzle", "Play Rough", "Surf", "Volt Switch", "Volt Tackle"],
          abilities: ["Lightning Rod"],
          teraTypes: ["Water"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Encore", "Nasty Plot", "Surf", "Tera Blast", "Thunderbolt"],
          abilities: ["Lightning Rod"],
          teraTypes: ["Ice"]
        }
      ]
    },
    pikipek: {
      level: 6,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Brave Bird", "Bullet Seed", "Knock Off", "Roost", "Swords Dance", "U-turn"],
          abilities: ["Pickup", "Skill Link"],
          teraTypes: ["Flying", "Grass", "Steel"]
        }
      ]
    },
    pineco: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Lunge", "Rapid Spin", "Rock Blast", "Spikes", "Stealth Rock", "Toxic Spikes"],
          abilities: ["Sturdy"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    piplup: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Flip Turn", "Haze", "Ice Beam", "Roost", "Surf", "Yawn"],
          abilities: ["Competitive"],
          teraTypes: ["Fairy", "Steel"]
        }
      ]
    },
    poliwag: {
      level: 6,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Belly Drum", "Body Slam", "Encore", "Hypnosis", "Waterfall"],
          abilities: ["Swift Swim", "Water Absorb"],
          teraTypes: ["Dragon", "Normal", "Water"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Belly Drum", "Body Slam", "Tera Blast", "Waterfall"],
          abilities: ["Swift Swim", "Water Absorb"],
          teraTypes: ["Dragon", "Fire", "Ground"]
        }
      ]
    },
    poltchageist: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Calm Mind", "Giga Drain", "Scald", "Shadow Ball", "Stun Spore"],
          abilities: ["Heatproof"],
          teraTypes: ["Fairy", "Steel", "Water"]
        }
      ]
    },
    poochyena: {
      level: 8,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Crunch", "Play Rough", "Poison Fang", "Sucker Punch", "Super Fang", "Taunt", "Yawn"],
          abilities: ["Rattled"],
          teraTypes: ["Fairy", "Poison"]
        }
      ]
    },
    popplio: {
      level: 7,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Encore", "Flip Turn", "Moonblast", "Surf", "Triple Axel"],
          abilities: ["Torrent"],
          teraTypes: ["Fairy", "Ice", "Steel", "Water"]
        }
      ]
    },
    porygon: {
      level: 6,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Discharge", "Ice Beam", "Recover", "Tri Attack"],
          abilities: ["Download"],
          teraTypes: ["Electric", "Ghost", "Poison"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Agility", "Recover", "Shadow Ball", "Tera Blast"],
          abilities: ["Download"],
          teraTypes: ["Fairy", "Fighting"]
        }
      ]
    },
    psyduck: {
      level: 7,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Encore", "Flip Turn", "Ice Beam", "Knock Off", "Surf", "Yawn"],
          abilities: ["Cloud Nine", "Swift Swim"],
          teraTypes: ["Dark", "Fairy", "Steel"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Ice Beam", "Nasty Plot", "Surf", "Trailblaze"],
          abilities: ["Cloud Nine", "Swift Swim"],
          teraTypes: ["Grass", "Steel", "Water"]
        }
      ]
    },
    quaxly: {
      level: 6,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Brave Bird", "Encore", "Liquidation", "Rapid Spin", "Roost"],
          abilities: ["Moxie"],
          teraTypes: ["Dragon", "Steel"]
        }
      ]
    },
    qwilfishhisui: {
      level: 5,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Crunch", "Gunk Shot", "Liquidation", "Swords Dance"],
          abilities: ["Intimidate"],
          teraTypes: ["Dark", "Poison", "Water"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Crunch", "Gunk Shot", "Spikes", "Taunt", "Toxic Spikes"],
          abilities: ["Intimidate"],
          teraTypes: ["Dark", "Poison"]
        }
      ]
    },
    ralts: {
      level: 8,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Draining Kiss", "Knock Off", "Psychic", "Thunder Wave", "Will-O-Wisp"],
          abilities: ["Trace"],
          teraTypes: ["Steel"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Calm Mind", "Draining Kiss", "Mystical Fire", "Psychic"],
          abilities: ["Trace"],
          teraTypes: ["Fairy", "Steel"]
        }
      ]
    },
    rellor: {
      level: 7,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Cosmic Power", "Gunk Shot", "Leech Life", "Recover"],
          abilities: ["Shed Skin"],
          teraTypes: ["Poison", "Steel"]
        }
      ]
    },
    rhyhorn: {
      level: 6,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Earthquake", "Megahorn", "Rock Blast", "Rock Polish", "Stealth Rock", "Stone Edge", "Swords Dance"],
          abilities: ["Lightning Rod"],
          teraTypes: ["Dragon", "Fairy", "Flying", "Grass", "Water"]
        }
      ]
    },
    riolu: {
      level: 6,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Close Combat", "Copycat", "Crunch", "Earthquake", "Ice Punch", "Swords Dance"],
          abilities: ["Inner Focus", "Prankster"],
          teraTypes: ["Dark", "Fighting", "Ground"]
        }
      ]
    },
    rockruff: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Play Rough", "Stealth Rock", "Stomping Tantrum", "Stone Edge", "Sucker Punch", "Swords Dance"],
          abilities: ["Vital Spirit"],
          teraTypes: ["Fairy", "Ground", "Rock"]
        }
      ]
    },
    rolycoly: {
      level: 8,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Power Gem", "Rapid Spin", "Spikes", "Stealth Rock", "Temper Flare", "Will-O-Wisp"],
          abilities: ["Flash Fire"],
          teraTypes: ["Ghost", "Steel"]
        }
      ]
    },
    rookidee: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Brave Bird", "Defog", "Roost", "Taunt", "U-turn"],
          abilities: ["Unnerve"],
          teraTypes: ["Steel"]
        }
      ]
    },
    rowlet: {
      level: 7,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Brave Bird", "Leaf Blade", "Roost", "Swords Dance"],
          abilities: ["Overgrow"],
          teraTypes: ["Steel", "Water"]
        },
        {
          role: "Bulky Support",
          movepool: ["Brave Bird", "Defog", "Giga Drain", "Knock Off", "Roost"],
          abilities: ["Long Reach", "Overgrow"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    rufflet: {
      level: 5,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Aerial Ace", "Bulk Up", "Close Combat", "Roost"],
          abilities: ["Hustle"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    salandit: {
      level: 6,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Pulse", "Flamethrower", "Nasty Plot", "Sludge Bomb"],
          abilities: ["Corrosion"],
          teraTypes: ["Dragon", "Fire", "Poison"]
        },
        {
          role: "Fast Support",
          movepool: ["Flamethrower", "Knock Off", "Sludge Bomb", "Thunder Wave", "Toxic Spikes", "Will-O-Wisp"],
          abilities: ["Corrosion"],
          teraTypes: ["Flying", "Water"]
        }
      ]
    },
    sandile: {
      level: 7,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Crunch", "Earthquake", "Fire Fang", "Stealth Rock", "Stone Edge"],
          abilities: ["Intimidate"],
          teraTypes: ["Dark", "Flying", "Ground"]
        }
      ]
    },
    sandshrew: {
      level: 6,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Knock Off", "Rapid Spin", "Spikes", "Stone Edge", "Swords Dance"],
          abilities: ["Sand Rush"],
          teraTypes: ["Dragon", "Steel", "Water"]
        }
      ]
    },
    sandshrewalola: {
      level: 6,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Earthquake", "Ice Shard", "Rapid Spin", "Swords Dance", "Triple Axel"],
          abilities: ["Slush Rush"],
          teraTypes: ["Ground"]
        },
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Iron Head", "Knock Off", "Rapid Spin", "Stealth Rock", "Triple Axel"],
          abilities: ["Slush Rush"],
          teraTypes: ["Flying", "Water"]
        }
      ]
    },
    sandygast: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Earth Power", "Giga Drain", "Shadow Ball", "Shore Up", "Sludge Bomb", "Stealth Rock"],
          abilities: ["Water Compaction"],
          teraTypes: ["Fairy", "Poison", "Water"]
        }
      ]
    },
    scorbunny: {
      level: 6,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Flare Blitz", "Gunk Shot", "High Jump Kick", "Sucker Punch", "U-turn"],
          abilities: ["Libero"],
          teraTypes: ["Fighting", "Fire"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Flare Blitz", "Gunk Shot", "High Jump Kick", "U-turn"],
          abilities: ["Libero"],
          teraTypes: ["Fire"]
        }
      ]
    },
    scraggy: {
      level: 6,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "Drain Punch", "Knock Off", "Rest"],
          abilities: ["Shed Skin"],
          teraTypes: ["Poison"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Close Combat", "Dragon Dance", "Knock Off", "Poison Jab"],
          abilities: ["Intimidate", "Moxie"],
          teraTypes: ["Poison"]
        }
      ]
    },
    scyther: {
      level: 5,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Bug Bite", "Close Combat", "Dual Wingbeat", "Swords Dance"],
          abilities: ["Technician"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Fast Support",
          movepool: ["Close Combat", "Defog", "Dual Wingbeat", "U-turn"],
          abilities: ["Technician"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    seedot: {
      level: 8,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Body Slam", "Bullet Seed", "Defog", "Sucker Punch", "Synthesis"],
          abilities: ["Chlorophyll", "Pickpocket"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    seel: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Encore", "Flip Turn", "Haze", "Icicle Spear", "Surf", "Thief"],
          abilities: ["Thick Fat"],
          teraTypes: ["Poison", "Steel"]
        },
        {
          role: "Fast Support",
          movepool: ["Aqua Jet", "Fake Out", "Icicle Spear", "Surf"],
          abilities: ["Thick Fat"],
          teraTypes: ["Poison", "Steel", "Water"]
        }
      ]
    },
    sentret: {
      level: 8,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Body Slam", "Brick Break", "Double-Edge", "Knock Off", "Tidy Up"],
          abilities: ["Frisk"],
          teraTypes: ["Ghost", "Normal"]
        }
      ]
    },
    sewaddle: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Giga Drain", "Iron Defense", "Lunge", "Sticky Web", "Synthesis"],
          abilities: ["Chlorophyll", "Swarm"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    shellder: {
      level: 6,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Icicle Spear", "Liquidation", "Rock Blast", "Shell Smash"],
          abilities: ["Skill Link"],
          teraTypes: ["Ice", "Rock", "Steel", "Water"]
        }
      ]
    },
    shellos: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Clear Smog", "Ice Beam", "Recover", "Stealth Rock", "Surf", "Yawn"],
          abilities: ["Storm Drain"],
          teraTypes: ["Poison", "Steel"]
        }
      ]
    },
    shieldon: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Earth Power", "Flash Cannon", "Ice Beam", "Rock Blast", "Stealth Rock"],
          abilities: ["Sturdy"],
          teraTypes: ["Fairy", "Flying", "Ground"]
        }
      ]
    },
    shinx: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Crunch", "Ice Fang", "Play Rough", "Roar", "Thunder Wave", "Volt Switch", "Wild Charge"],
          abilities: ["Intimidate"],
          teraTypes: ["Fairy"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Crunch", "Facade", "Play Rough", "Trailblaze", "Wild Charge"],
          abilities: ["Guts"],
          teraTypes: ["Normal"]
        }
      ]
    },
    shroodle: {
      level: 7,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Encore", "Gunk Shot", "Knock Off", "Parting Shot"],
          abilities: ["Prankster"],
          teraTypes: ["Dark"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Double-Edge", "Gunk Shot", "Knock Off", "Swords Dance"],
          abilities: ["Pickpocket"],
          teraTypes: ["Dark", "Normal", "Poison"]
        }
      ]
    },
    shroomish: {
      level: 8,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Drain Punch", "Giga Drain", "Sludge Bomb", "Spore", "Stun Spore"],
          abilities: ["Effect Spore"],
          teraTypes: ["Poison", "Steel", "Water"]
        }
      ]
    },
    shuppet: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Dazzling Gleam", "Gunk Shot", "Pain Split", "Poltergeist", "Shadow Sneak", "Thunder Wave", "Trick", "Will-O-Wisp"],
          abilities: ["Cursed Body", "Insomnia"],
          teraTypes: ["Fairy"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Dazzling Gleam", "Nasty Plot", "Shadow Ball", "Thunderbolt", "Will-O-Wisp"],
          abilities: ["Cursed Body", "Insomnia"],
          teraTypes: ["Electric", "Fairy"]
        }
      ]
    },
    silicobra: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Coil", "Earthquake", "Glare", "Rest", "Rock Blast", "Stealth Rock", "Stone Edge"],
          abilities: ["Shed Skin"],
          teraTypes: ["Dragon", "Steel"]
        }
      ]
    },
    sinistea: {
      level: 6,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Giga Drain", "Shadow Ball", "Shell Smash", "Stored Power", "Will-O-Wisp"],
          abilities: ["Cursed Body"],
          teraTypes: ["Fairy", "Psychic"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Giga Drain", "Shadow Ball", "Shell Smash", "Tera Blast", "Will-O-Wisp"],
          abilities: ["Cursed Body"],
          teraTypes: ["Fairy", "Fighting"]
        }
      ]
    },
    skiddo: {
      level: 7,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "Horn Leech", "Milk Drink", "Rock Slide", "Stomping Tantrum"],
          abilities: ["Sap Sipper"],
          teraTypes: ["Ground", "Water"]
        }
      ]
    },
    skrelp: {
      level: 6,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Flip Turn", "Gunk Shot", "Hydro Pump", "Sludge Bomb", "Toxic Spikes"],
          abilities: ["Adaptability"],
          teraTypes: ["Poison", "Water"]
        }
      ]
    },
    skwovet: {
      level: 7,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Belly Drum", "Body Slam", "Crunch", "Trailblaze"],
          abilities: ["Cheek Pouch"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    slakoth: {
      level: 9,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Body Slam", "Gunk Shot", "Hammer Arm", "Ice Punch", "Play Rough", "Slack Off", "Throat Chop"],
          abilities: ["Truant"],
          teraTypes: ["Fairy", "Fighting", "Normal"]
        }
      ]
    },
    slowpoke: {
      level: 6,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Curse", "Liquidation", "Slack Off", "Thunder Wave", "Zen Headbutt"],
          abilities: ["Regenerator"],
          teraTypes: ["Fairy", "Poison"]
        }
      ]
    },
    slowpokegalar: {
      level: 6,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Curse", "Earthquake", "Slack Off", "Thunder Wave", "Zen Headbutt"],
          abilities: ["Regenerator"],
          teraTypes: ["Fairy", "Ground"]
        }
      ]
    },
    smoliv: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Earth Power", "Giga Drain", "Protect", "Strength Sap"],
          abilities: ["Harvest"],
          teraTypes: ["Steel", "Water"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Earth Power", "Giga Drain", "Leaf Storm", "Strength Sap", "Tera Blast"],
          abilities: ["Harvest"],
          teraTypes: ["Fairy", "Poison"]
        }
      ]
    },
    slugma: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earth Power", "Lava Plume", "Recover", "Stealth Rock", "Will-O-Wisp", "Yawn"],
          abilities: ["Flame Body"],
          teraTypes: ["Dragon", "Grass"]
        }
      ]
    },
    sneasel: {
      level: 5,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Brick Break", "Ice Shard", "Knock Off", "Swords Dance", "Triple Axel"],
          abilities: ["Inner Focus", "Pickpocket"],
          teraTypes: ["Dark", "Fighting", "Ice"]
        }
      ]
    },
    sneaselhisui: {
      level: 5,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Close Combat", "Gunk Shot", "Swords Dance", "Throat Chop", "Toxic Spikes"],
          abilities: ["Inner Focus", "Pickpocket"],
          teraTypes: ["Dark", "Fighting", "Poison"]
        }
      ]
    },
    snivy: {
      level: 6,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Glare", "Knock Off", "Leaf Storm", "Substitute", "Synthesis"],
          abilities: ["Contrary"],
          teraTypes: ["Grass", "Poison", "Water"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Glare", "Knock Off", "Leaf Storm", "Substitute", "Synthesis", "Tera Blast"],
          abilities: ["Contrary"],
          teraTypes: ["Fire", "Rock"]
        }
      ]
    },
    snom: {
      level: 8,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Bug Buzz", "Icy Wind", "Rest", "Sleep Talk"],
          abilities: ["Ice Scales"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    snorunt: {
      level: 7,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Crunch", "Ice Shard", "Icicle Spear", "Spikes"],
          abilities: ["Inner Focus"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    snover: {
      level: 7,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Bullet Seed", "Ice Shard", "Icicle Spear", "Swords Dance"],
          abilities: ["Snow Warning"],
          teraTypes: ["Grass", "Ice", "Water"]
        },
        {
          role: "Bulky Support",
          movepool: ["Blizzard", "Bullet Seed", "Giga Drain", "Ice Shard", "Trailblaze"],
          abilities: ["Snow Warning"],
          teraTypes: ["Ice", "Water"]
        }
      ]
    },
    snubbull: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Earthquake", "Encore", "Play Rough", "Thunder Wave"],
          abilities: ["Intimidate"],
          teraTypes: ["Ground"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "Earthquake", "Play Rough", "Trailblaze"],
          abilities: ["Intimidate"],
          teraTypes: ["Ground"]
        }
      ]
    },
    sobble: {
      level: 7,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Haze", "Hydro Pump", "Light Screen", "Reflect", "Surf", "U-turn"],
          abilities: ["Torrent"],
          teraTypes: ["Water"]
        }
      ]
    },
    solosis: {
      level: 6,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Calm Mind", "Psychic", "Recover", "Shadow Ball", "Thunder Wave"],
          abilities: ["Magic Guard"],
          teraTypes: ["Fairy", "Steel"]
        }
      ]
    },
    spinarak: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Knock Off", "Megahorn", "Poison Jab", "Sticky Web", "Sucker Punch", "Toxic Spikes"],
          abilities: ["Insomnia", "Swarm"],
          teraTypes: ["Dark", "Ghost", "Steel"]
        }
      ]
    },
    spoink: {
      level: 7,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Calm Mind", "Dazzling Gleam", "Psychic", "Shadow Ball", "Thunder Wave", "Trick"],
          abilities: ["Thick Fat"],
          teraTypes: ["Fairy", "Ghost", "Psychic"]
        }
      ]
    },
    sprigatito: {
      level: 7,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Bullet Seed", "Play Rough", "Shadow Claw", "Sucker Punch", "U-turn"],
          abilities: ["Protean"],
          teraTypes: ["Grass"]
        }
      ]
    },
    squirtle: {
      level: 6,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Flip Turn", "Ice Beam", "Rapid Spin", "Surf", "Yawn"],
          abilities: ["Torrent"],
          teraTypes: ["Poison", "Steel"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Ice Beam", "Shell Smash", "Surf", "Tera Blast"],
          abilities: ["Torrent"],
          teraTypes: ["Electric", "Grass"]
        }
      ]
    },
    stantler: {
      level: 5,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Double-Edge", "Earthquake", "Hypnosis", "Megahorn", "Shadow Ball", "Thunder Wave", "Trick"],
          abilities: ["Intimidate"],
          teraTypes: ["Bug", "Ghost", "Ground"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Calm Mind", "Earth Power", "Shadow Ball", "Tera Blast", "Thunderbolt"],
          abilities: ["Intimidate"],
          teraTypes: ["Fairy"]
        }
      ]
    },
    starly: {
      level: 7,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Brave Bird", "Double-Edge", "Heat Wave", "U-turn"],
          abilities: ["Reckless"],
          teraTypes: ["Flying", "Normal"]
        }
      ]
    },
    stunky: {
      level: 6,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Fire Blast", "Gunk Shot", "Knock Off", "Sucker Punch", "Taunt", "Toxic Spikes"],
          abilities: ["Aftermath"],
          teraTypes: ["Dark", "Poison"]
        }
      ]
    },
    sunkern: {
      level: 8,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Earth Power", "Solar Beam", "Sunny Day", "Weather Ball"],
          abilities: ["Chlorophyll"],
          teraTypes: ["Fire"]
        }
      ]
    },
    surskit: {
      level: 6,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Bug Buzz", "Giga Drain", "Hydro Pump", "Ice Beam", "Sticky Web"],
          abilities: ["Swift Swim"],
          teraTypes: ["Ghost", "Ground", "Steel", "Water"]
        }
      ]
    },
    swablu: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Body Slam", "Brave Bird", "Defog", "Haze", "Heat Wave", "Roost"],
          abilities: ["Natural Cure"],
          teraTypes: ["Steel"]
        }
      ]
    },
    swinub: {
      level: 8,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Freeze-Dry", "Ice Shard", "Icicle Spear", "Stealth Rock"],
          abilities: ["Thick Fat"],
          teraTypes: ["Ground", "Water"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Earthquake", "Freeze-Dry", "Ice Shard", "Icicle Spear", "Stealth Rock"],
          abilities: ["Thick Fat"],
          teraTypes: ["Ground", "Ice"]
        }
      ]
    },
    tadbulb: {
      level: 8,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Acid Spray", "Discharge", "Muddy Water", "Thunder Wave", "Volt Switch"],
          abilities: ["Static"],
          teraTypes: ["Water"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Rain Dance", "Thunder", "Volt Switch", "Weather Ball"],
          abilities: ["Static"],
          teraTypes: ["Water"]
        }
      ]
    },
    tandemaus: {
      level: 7,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Crunch", "Double-Edge", "Encore", "Low Sweep", "Switcheroo", "Thunder Wave", "U-turn"],
          abilities: ["Own Tempo", "Pickup"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    tarountula: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Circle Throw", "Knock Off", "Leech Life", "Spikes", "Sticky Web", "Toxic Spikes"],
          abilities: ["Stakeout"],
          teraTypes: ["Ghost"]
        }
      ]
    },
    teddiursa: {
      level: 6,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Crunch", "Earthquake", "Facade", "Swords Dance"],
          abilities: ["Quick Feet"],
          teraTypes: ["Normal"]
        }
      ]
    },
    tentacool: {
      level: 6,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Flip Turn", "Ice Beam", "Knock Off", "Rapid Spin", "Sludge Bomb", "Surf", "Toxic Spikes"],
          abilities: ["Clear Body", "Liquid Ooze"],
          teraTypes: ["Grass"]
        }
      ]
    },
    tepig: {
      level: 7,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Flare Blitz", "Head Smash", "Superpower", "Wild Charge"],
          abilities: ["Blaze"],
          teraTypes: ["Electric", "Fighting", "Fire", "Rock"]
        }
      ]
    },
    timburr: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Bulk Up", "Defog", "Drain Punch", "Knock Off", "Stone Edge"],
          abilities: ["Guts"],
          teraTypes: ["Dark", "Steel"]
        },
        {
          role: "Fast Support",
          movepool: ["Bulk Up", "Defog", "Drain Punch", "Knock Off", "Mach Punch"],
          abilities: ["Guts"],
          teraTypes: ["Dark", "Steel"]
        }
      ]
    },
    tinkatink: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Encore", "Knock Off", "Play Rough", "Stealth Rock", "Thunder Wave"],
          abilities: ["Pickpocket"],
          teraTypes: ["Water"]
        }
      ]
    },
    toedscool: {
      level: 6,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earth Power", "Giga Drain", "Knock Off", "Leaf Storm", "Rapid Spin", "Spikes", "Spore", "Toxic Spikes"],
          abilities: ["Mycelium Might"],
          teraTypes: ["Water"]
        }
      ]
    },
    torchic: {
      level: 6,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Flare Blitz", "Protect", "Rock Slide", "Swords Dance"],
          abilities: ["Speed Boost"],
          teraTypes: ["Dragon", "Fire", "Rock"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Flare Blitz", "Overheat", "Protect", "Rock Slide"],
          abilities: ["Speed Boost"],
          teraTypes: ["Dragon", "Fire", "Rock"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Flare Blitz", "Protect", "Swords Dance", "Tera Blast"],
          abilities: ["Speed Boost"],
          teraTypes: ["Fighting", "Grass", "Ground"]
        }
      ]
    },
    totodile: {
      level: 6,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Dance", "Ice Punch", "Liquidation", "Trailblaze"],
          abilities: ["Sheer Force"],
          teraTypes: ["Grass", "Water"]
        }
      ]
    },
    trapinch: {
      level: 6,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Earthquake", "First Impression", "Stone Edge", "Superpower"],
          abilities: ["Arena Trap"],
          teraTypes: ["Bug", "Fighting"]
        }
      ]
    },
    treecko: {
      level: 6,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Drain Punch", "Giga Drain", "Leaf Storm", "Rock Slide", "Synthesis", "Thunder Punch"],
          abilities: ["Overgrow"],
          teraTypes: ["Electric", "Fighting", "Grass", "Rock"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Acrobatics", "Bullet Seed", "Drain Punch", "Swords Dance"],
          abilities: ["Unburden"],
          teraTypes: ["Flying"]
        }
      ]
    },
    turtwig: {
      level: 6,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Body Slam", "Bullet Seed", "Crunch", "Earth Power", "Shell Smash"],
          abilities: ["Overgrow"],
          teraTypes: ["Grass", "Ground"]
        }
      ]
    },
    tynamo: {
      level: 7,
      sets: [
        {
          role: "Tera Blast user",
          movepool: ["Knock Off", "Spark", "Tera Blast", "Thunder Wave"],
          abilities: ["Levitate"],
          teraTypes: ["Ground", "Ice"]
        },
        {
          role: "Fast Support",
          movepool: ["Charge Beam", "Knock Off", "Spark", "Thunder Wave"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Steel"]
        }
      ]
    },
    tyrogue: {
      level: 9,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "High Jump Kick", "Rapid Spin", "Rock Slide"],
          abilities: ["Guts"],
          teraTypes: ["Fighting", "Rock"]
        }
      ]
    },
    varoom: {
      level: 6,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Gunk Shot", "Iron Head", "Parting Shot", "Taunt", "Toxic Spikes"],
          abilities: ["Overcoat"],
          teraTypes: ["Water"]
        }
      ]
    },
    venonat: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Leech Life", "Morning Sun", "Sleep Powder", "Stun Spore", "Toxic Spikes"],
          abilities: ["Tinted Lens"],
          teraTypes: ["Steel", "Water"]
        }
      ]
    },
    voltorb: {
      level: 7,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Explosion", "Foul Play", "Thief", "Thunder Wave", "Thunderbolt", "Volt Switch"],
          abilities: ["Aftermath", "Static"],
          teraTypes: ["Dark", "Electric"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Tera Blast", "Thunder Wave", "Thunderbolt", "Volt Switch"],
          abilities: ["Aftermath", "Static"],
          teraTypes: ["Ice"]
        }
      ]
    },
    voltorbhisui: {
      level: 7,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Giga Drain", "Leaf Storm", "Taunt", "Thief", "Thunder Wave", "Thunderbolt", "Volt Switch"],
          abilities: ["Aftermath", "Static"],
          teraTypes: ["Electric", "Grass"]
        }
      ]
    },
    vullaby: {
      level: 6,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Brave Bird", "Defog", "Knock Off", "Roost", "U-turn"],
          abilities: ["Overcoat"],
          teraTypes: ["Steel"]
        }
      ]
    },
    vulpix: {
      level: 6,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Encore", "Energy Ball", "Extrasensory", "Fire Blast", "Healing Wish", "Hypnosis", "Nasty Plot", "Will-O-Wisp"],
          abilities: ["Drought"],
          teraTypes: ["Grass"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Energy Ball", "Fire Blast", "Nasty Plot", "Tera Blast"],
          abilities: ["Drought"],
          teraTypes: ["Rock"]
        }
      ]
    },
    vulpixalola: {
      level: 6,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Aurora Veil", "Blizzard", "Freeze-Dry", "Nasty Plot"],
          abilities: ["Snow Warning"],
          teraTypes: ["Steel", "Water"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Aurora Veil", "Blizzard", "Nasty Plot", "Tera Blast"],
          abilities: ["Snow Warning"],
          teraTypes: ["Ground"]
        }
      ]
    },
    wattrel: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Hurricane", "Roost", "Thunder Wave", "Thunderbolt", "U-turn"],
          abilities: ["Volt Absorb"],
          teraTypes: ["Steel"]
        }
      ]
    },
    wiglett: {
      level: 7,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Aqua Jet", "Ice Beam", "Liquidation", "Stomping Tantrum", "Throat Chop"],
          abilities: ["Gooey"],
          teraTypes: ["Dark", "Ground", "Water"]
        }
      ]
    },
    wingull: {
      level: 6,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Hurricane", "Knock Off", "Roost", "Surf"],
          abilities: ["Hydration"],
          teraTypes: ["Ground"]
        }
      ]
    },
    wooper: {
      level: 7,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Liquidation", "Recover", "Spikes", "Stealth Rock"],
          abilities: ["Unaware", "Water Absorb"],
          teraTypes: ["Poison", "Steel"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Curse", "Earthquake", "Liquidation", "Recover"],
          abilities: ["Unaware"],
          teraTypes: ["Poison", "Steel"]
        }
      ]
    },
    wooperpaldea: {
      level: 7,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Curse", "Earthquake", "Gunk Shot", "Poison Jab", "Recover"],
          abilities: ["Unaware", "Water Absorb"],
          teraTypes: ["Flying", "Steel"]
        },
        {
          role: "Bulky Support",
          movepool: ["Earthquake", "Gunk Shot", "Poison Jab", "Recover", "Spikes", "Stealth Rock", "Toxic Spikes"],
          abilities: ["Unaware", "Water Absorb"],
          teraTypes: ["Flying", "Steel"]
        }
      ]
    },
    yanma: {
      level: 5,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Air Slash", "Bug Buzz", "Giga Drain", "Hypnosis", "Protect", "U-turn"],
          abilities: ["Speed Boost"],
          teraTypes: ["Bug", "Flying", "Grass"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Double-Edge", "Leech Life", "Protect", "Swords Dance", "Tera Blast"],
          abilities: ["Speed Boost"],
          teraTypes: ["Ground"]
        }
      ]
    },
    yungoos: {
      level: 7,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Crunch", "Double-Edge", "Stomping Tantrum", "U-turn", "Yawn"],
          abilities: ["Adaptability", "Stakeout"],
          teraTypes: ["Normal"]
        }
      ]
    },
    zorua: {
      level: 7,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Burning Jealousy", "Knock Off", "Sludge Bomb", "Trick", "U-turn"],
          abilities: ["Illusion"],
          teraTypes: ["Poison"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Burning Jealousy", "Dark Pulse", "Nasty Plot", "Sludge Bomb"],
          abilities: ["Illusion"],
          teraTypes: ["Dark", "Poison"]
        }
      ]
    },
    zoruahisui: {
      level: 6,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Bitter Malice", "Burning Jealousy", "Knock Off", "Trick", "U-turn", "Will-O-Wisp"],
          abilities: ["Illusion"],
          teraTypes: ["Fairy", "Ghost"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Bitter Malice", "Burning Jealousy", "Nasty Plot", "Tera Blast", "Will-O-Wisp"],
          abilities: ["Illusion"],
          teraTypes: ["Fairy", "Fighting"]
        }
      ]
    }
  };
});

// ../pokemon-showdown/dist/data/random-battles/gen9baby/teams.js
var require_teams2 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var teams_exports = {};
  __export2(teams_exports, {
    RandomBabyTeams: () => RandomBabyTeams,
    default: () => teams_default
  });
  module.exports = __toCommonJS2(teams_exports);
  var import_teams = require_teams();
  var import_lib = require_lib4();
  var CONTRARY_MOVES = [
    "armorcannon",
    "closecombat",
    "leafstorm",
    "makeitrain",
    "overheat",
    "spinout",
    "superpower",
    "vcreate"
  ];
  var HAZARDS = [
    "spikes",
    "stealthrock",
    "stickyweb",
    "toxicspikes"
  ];
  var PIVOT_MOVES = [
    "chillyreception",
    "flipturn",
    "partingshot",
    "shedtail",
    "teleport",
    "uturn",
    "voltswitch"
  ];
  var PHYSICAL_SETUP = [
    "bellydrum",
    "bulkup",
    "coil",
    "curse",
    "dragondance",
    "honeclaws",
    "howl",
    "meditate",
    "poweruppunch",
    "swordsdance",
    "tidyup",
    "victorydance"
  ];
  var RECOVERY_MOVES = [
    "healorder",
    "milkdrink",
    "moonlight",
    "morningsun",
    "recover",
    "roost",
    "shoreup",
    "slackoff",
    "softboiled",
    "strengthsap",
    "synthesis"
  ];
  var SETUP = [
    "acidarmor",
    "agility",
    "autotomize",
    "bellydrum",
    "bulkup",
    "calmmind",
    "clangoroussoul",
    "coil",
    "cosmicpower",
    "curse",
    "dragondance",
    "flamecharge",
    "growth",
    "honeclaws",
    "howl",
    "irondefense",
    "meditate",
    "nastyplot",
    "noretreat",
    "poweruppunch",
    "quiverdance",
    "raindance",
    "rockpolish",
    "shellsmash",
    "shiftgear",
    "snowscape",
    "sunnyday",
    "swordsdance",
    "tailglow",
    "tidyup",
    "trailblaze",
    "workup",
    "victorydance"
  ];
  var SPEED_SETUP = [
    "agility",
    "autotomize",
    "flamecharge",
    "rockpolish",
    "trailblaze"
  ];
  var MOVE_PAIRS = [
    ["lightscreen", "reflect"],
    ["sleeptalk", "rest"],
    ["protect", "wish"]
  ];

  class RandomBabyTeams extends import_teams.RandomTeams {
    constructor(format, prng) {
      super(format, prng);
      this.randomSets = require_sets2();
      this.moveEnforcementCheckers["Bug"] = (movePool, moves, abilities, types, counter) => !counter.get("Bug");
      this.moveEnforcementCheckers["Grass"] = (movePool, moves, abilities, types, counter, species) => !counter.get("Grass") && species.id !== "rowlet";
    }
    cullMovePool(types, moves, abilities, counter, movePool, teamDetails, species, isLead, isDoubles, teraType, role) {
      if (moves.size + movePool.length <= this.maxMoveCount)
        return;
      if (moves.size === this.maxMoveCount - 2) {
        const unpairedMoves = [...movePool];
        for (const pair of MOVE_PAIRS) {
          if (movePool.includes(pair[0]) && movePool.includes(pair[1])) {
            this.fastPop(unpairedMoves, unpairedMoves.indexOf(pair[0]));
            this.fastPop(unpairedMoves, unpairedMoves.indexOf(pair[1]));
          }
        }
        if (unpairedMoves.length === 1) {
          this.fastPop(movePool, movePool.indexOf(unpairedMoves[0]));
        }
      }
      if (moves.size === this.maxMoveCount - 1) {
        for (const pair of MOVE_PAIRS) {
          if (movePool.includes(pair[0]) && movePool.includes(pair[1])) {
            this.fastPop(movePool, movePool.indexOf(pair[0]));
            this.fastPop(movePool, movePool.indexOf(pair[1]));
          }
        }
      }
      const statusMoves = this.dex.moves.all().filter((move) => move.category === "Status").map((move) => move.id);
      if (teamDetails.screens && movePool.length >= this.maxMoveCount + 2) {
        if (movePool.includes("reflect"))
          this.fastPop(movePool, movePool.indexOf("reflect"));
        if (movePool.includes("lightscreen"))
          this.fastPop(movePool, movePool.indexOf("lightscreen"));
        if (moves.size + movePool.length <= this.maxMoveCount)
          return;
      }
      if (teamDetails.stickyWeb) {
        if (movePool.includes("stickyweb"))
          this.fastPop(movePool, movePool.indexOf("stickyweb"));
        if (moves.size + movePool.length <= this.maxMoveCount)
          return;
      }
      if (teamDetails.stealthRock) {
        if (movePool.includes("stealthrock"))
          this.fastPop(movePool, movePool.indexOf("stealthrock"));
        if (moves.size + movePool.length <= this.maxMoveCount)
          return;
      }
      if (teamDetails.defog || teamDetails.rapidSpin) {
        if (movePool.includes("defog"))
          this.fastPop(movePool, movePool.indexOf("defog"));
        if (movePool.includes("rapidspin"))
          this.fastPop(movePool, movePool.indexOf("rapidspin"));
        if (moves.size + movePool.length <= this.maxMoveCount)
          return;
      }
      if (teamDetails.toxicSpikes) {
        if (movePool.includes("toxicspikes"))
          this.fastPop(movePool, movePool.indexOf("toxicspikes"));
        if (moves.size + movePool.length <= this.maxMoveCount)
          return;
      }
      if (teamDetails.spikes && teamDetails.spikes >= 2) {
        if (movePool.includes("spikes"))
          this.fastPop(movePool, movePool.indexOf("spikes"));
        if (moves.size + movePool.length <= this.maxMoveCount)
          return;
      }
      const incompatiblePairs = [
        [SETUP, "defog"],
        [SETUP, PIVOT_MOVES],
        [SETUP, HAZARDS],
        [PHYSICAL_SETUP, PHYSICAL_SETUP],
        [statusMoves, ["destinybond", "healingwish", "switcheroo", "trick"]],
        ["curse", "rapidspin"],
        [
          ["alluringvoice", "dazzlinggleam", "drainingkiss", "moonblast"],
          ["alluringvoice", "dazzlinggleam", "drainingkiss", "moonblast"]
        ],
        [["bulletseed", "gigadrain", "leafstorm", "seedbomb"], ["bulletseed", "gigadrain", "leafstorm", "seedbomb"]],
        [["hypnosis", "thunderwave", "toxic", "willowisp", "yawn"], ["hypnosis", "thunderwave", "toxic", "willowisp", "yawn"]],
        ["roar", "yawn"],
        ["dragonclaw", "outrage"],
        ["dracometeor", "dragonpulse"],
        ["toxic", "toxicspikes"],
        ["rockblast", "stoneedge"],
        ["bodyslam", "doubleedge"],
        ["gunkshot", "poisonjab"],
        [["hydropump", "liquidation"], "surf"]
      ];
      for (const pair of incompatiblePairs)
        this.incompatibleMoves(moves, movePool, pair[0], pair[1]);
    }
    randomMoveset(types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role) {
      const moves = /* @__PURE__ */ new Set;
      let counter = this.queryMoves(moves, species, teraType, abilities);
      this.cullMovePool(types, moves, abilities, counter, movePool, teamDetails, species, isLead, isDoubles, teraType, role);
      if (movePool.length <= this.maxMoveCount) {
        for (const moveid of movePool) {
          moves.add(moveid);
        }
        return moves;
      }
      const runEnforcementChecker = (checkerName) => {
        if (!this.moveEnforcementCheckers[checkerName])
          return false;
        return this.moveEnforcementCheckers[checkerName](movePool, moves, abilities, types, counter, species, teamDetails, isLead, isDoubles, teraType, role);
      };
      if (role === "Tera Blast user") {
        counter = this.addMove("terablast", moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
      }
      if (species.requiredMove) {
        const move = this.dex.moves.get(species.requiredMove).id;
        counter = this.addMove(move, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
      }
      if (movePool.includes("facade") && abilities.includes("Guts")) {
        counter = this.addMove("facade", moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
      }
      if (movePool.includes("stickyweb")) {
        counter = this.addMove("stickyweb", moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
      }
      if (role === "Bulky Support" && !teamDetails.defog && !teamDetails.rapidSpin) {
        if (movePool.includes("rapidspin")) {
          counter = this.addMove("rapidspin", moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
        if (movePool.includes("defog")) {
          counter = this.addMove("defog", moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
      }
      if (types.length === 1 && (types.includes("Normal") || types.includes("Fighting"))) {
        if (movePool.includes("knockoff")) {
          counter = this.addMove("knockoff", moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
      }
      if (role === "Wallbreaker") {
        const priorityMoves = [];
        for (const moveid of movePool) {
          const move = this.dex.moves.get(moveid);
          const moveType = this.getMoveType(move, species, abilities, teraType);
          if (types.includes(moveType) && (move.priority > 0 || moveid === "grassyglide" && abilities.includes("Grassy Surge")) && (move.basePower || move.basePowerCallback)) {
            priorityMoves.push(moveid);
          }
        }
        if (priorityMoves.length) {
          const moveid = this.sample(priorityMoves);
          counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
      }
      for (const type of types) {
        const stabMoves = [];
        for (const moveid of movePool) {
          const move = this.dex.moves.get(moveid);
          const moveType = this.getMoveType(move, species, abilities, teraType);
          if (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && type === moveType) {
            stabMoves.push(moveid);
          }
        }
        while (runEnforcementChecker(type)) {
          if (!stabMoves.length)
            break;
          const moveid = this.sampleNoReplace(stabMoves);
          counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
      }
      if (!counter.get("stabtera") && role !== "Bulky Support") {
        const stabMoves = [];
        for (const moveid of movePool) {
          const move = this.dex.moves.get(moveid);
          const moveType = this.getMoveType(move, species, abilities, teraType);
          if (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && teraType === moveType) {
            stabMoves.push(moveid);
          }
        }
        if (stabMoves.length) {
          const moveid = this.sample(stabMoves);
          counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
      }
      if (!counter.get("stab")) {
        const stabMoves = [];
        for (const moveid of movePool) {
          const move = this.dex.moves.get(moveid);
          const moveType = this.getMoveType(move, species, abilities, teraType);
          if (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && types.includes(moveType)) {
            stabMoves.push(moveid);
          }
        }
        if (stabMoves.length) {
          const moveid = this.sample(stabMoves);
          counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
      }
      if (abilities.includes("Contrary")) {
        const contraryMoves = movePool.filter((moveid) => CONTRARY_MOVES.includes(moveid));
        for (const moveid of contraryMoves) {
          counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
      }
      if (["Bulky Support", "Bulky Attacker", "Bulky Setup"].includes(role)) {
        const recoveryMoves = movePool.filter((moveid) => RECOVERY_MOVES.includes(moveid));
        if (recoveryMoves.length) {
          const moveid = this.sample(recoveryMoves);
          counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
      }
      if (role.includes("Setup") || role === "Tera Blast user") {
        const nonSpeedSetupMoves = movePool.filter((moveid) => SETUP.includes(moveid) && !SPEED_SETUP.includes(moveid));
        if (nonSpeedSetupMoves.length) {
          const moveid = this.sample(nonSpeedSetupMoves);
          counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        } else {
          const setupMoves = movePool.filter((moveid) => SETUP.includes(moveid));
          if (setupMoves.length) {
            const moveid = this.sample(setupMoves);
            counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
          }
        }
      }
      if (!counter.damagingMoves.size) {
        const attackingMoves = [];
        for (const moveid of movePool) {
          const move = this.dex.moves.get(moveid);
          if (!this.noStab.includes(moveid) && move.category !== "Status")
            attackingMoves.push(moveid);
        }
        if (attackingMoves.length) {
          const moveid = this.sample(attackingMoves);
          counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        }
      }
      if (!["Fast Support", "Bulky Support"].includes(role) || species.id === "magnemite") {
        if (counter.damagingMoves.size === 1) {
          const currentAttackType = counter.damagingMoves.values().next().value.type;
          const coverageMoves = [];
          for (const moveid of movePool) {
            const move = this.dex.moves.get(moveid);
            const moveType = this.getMoveType(move, species, abilities, teraType);
            if (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback)) {
              if (currentAttackType !== moveType)
                coverageMoves.push(moveid);
            }
          }
          if (coverageMoves.length) {
            const moveid = this.sample(coverageMoves);
            counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
          }
        }
      }
      while (moves.size < this.maxMoveCount && movePool.length) {
        if (moves.size + movePool.length <= this.maxMoveCount) {
          for (const moveid2 of movePool) {
            moves.add(moveid2);
          }
          break;
        }
        const moveid = this.sample(movePool);
        counter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
        for (const pair of MOVE_PAIRS) {
          if (moveid === pair[0] && movePool.includes(pair[1])) {
            counter = this.addMove(pair[1], moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
          }
          if (moveid === pair[1] && movePool.includes(pair[0])) {
            counter = this.addMove(pair[0], moves, types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
          }
        }
      }
      return moves;
    }
    getAbility(types, moves, abilities, counter, teamDetails, species, isLead, isDoubles, teraType, role) {
      if (abilities.length <= 1)
        return abilities[0];
      if (species.id === "rowlet" && counter.get("Grass"))
        return "Overgrow";
      if (species.id === "riolu")
        return moves.has("copycat") ? "Prankster" : "Inner Focus";
      if (species.id === "pikipek" && counter.get("skilllink"))
        return "Skill Link";
      if (species.id === "psyduck" && teamDetails.rain)
        return "Swift Swim";
      const abilityAllowed = [];
      for (const ability of abilities) {
        if (!this.shouldCullAbility(ability, types, moves, abilities, counter, teamDetails, species, isLead, isDoubles, teraType, role)) {
          abilityAllowed.push(ability);
        }
      }
      if (abilityAllowed.length >= 1)
        return this.sample(abilityAllowed);
      if (!abilityAllowed.length) {
        const weatherAbilities = abilities.filter((a) => ["Chlorophyll", "Hydration", "Sand Force", "Sand Rush", "Slush Rush", "Solar Power", "Swift Swim"].includes(a));
        if (weatherAbilities.length)
          return this.sample(weatherAbilities);
      }
      return this.sample(abilities);
    }
    getPriorityItem(ability, types, moves, counter, teamDetails, species, isLead, isDoubles, teraType, role) {
      if (species.requiredItems) {
        return this.sample(species.requiredItems);
      }
      if (species.id === "nymble")
        return "Silver Powder";
      if (moves.has("focusenergy"))
        return "Scope Lens";
      if (moves.has("thief"))
        return "";
      if (moves.has("trick") || moves.has("switcheroo"))
        return "Choice Scarf";
      if (moves.has("acrobatics"))
        return ability === "Unburden" ? "Oran Berry" : "";
      if (moves.has("auroraveil") || moves.has("lightscreen") && moves.has("reflect"))
        return "Light Clay";
      if (ability === "Guts" && moves.has("facade"))
        return "Flame Orb";
      if (ability === "Quick Feet")
        return "Toxic Orb";
      if (["Harvest", "Ripen", "Unburden"].includes(ability) || moves.has("bellydrum"))
        return "Oran Berry";
    }
    getItem(ability, types, moves, counter, teamDetails, species, isLead, teraType, role) {
      if (role === "Fast Attacker" && (!counter.get("Status") || counter.get("Status") === 1 && moves.has("destinybond"))) {
        return "Choice Scarf";
      }
      if (["Setup Sweeper", "Wallbreaker"].includes(role)) {
        return "Life Orb";
      }
      return "Eviolite";
    }
    getLevel(species) {
      if (this.adjustLevel)
        return this.adjustLevel;
      return this.randomSets[species.id]?.level || 10;
    }
    getForme(species) {
      if (typeof species.battleOnly === "string") {
        return species.battleOnly;
      }
      if (species.cosmeticFormes)
        return this.sample([species.name].concat(species.cosmeticFormes));
      if (["Poltchageist", "Sinistea"].includes(species.baseSpecies)) {
        return this.sample([species.name].concat(species.otherFormes));
      }
      return species.name;
    }
    randomSet(s, teamDetails = {}, isLead = false, isDoubles = false) {
      const species = this.dex.species.get(s);
      const forme = this.getForme(species);
      const sets = this.randomSets[species.id]["sets"];
      const possibleSets = [];
      const ruleTable = this.dex.formats.getRuleTable(this.format);
      for (const set2 of sets) {
        if ((teamDetails.teraBlast || ruleTable.has("terastalclause")) && set2.role === "Tera Blast user") {
          continue;
        }
        possibleSets.push(set2);
      }
      const set = this.sampleIfArray(possibleSets);
      const role = set.role;
      const movePool = [];
      for (const movename of set.movepool) {
        movePool.push(this.dex.moves.get(movename).id);
      }
      const teraTypes = set.teraTypes;
      let teraType = this.sampleIfArray(teraTypes);
      let ability = "";
      let item = undefined;
      const evs = { hp: 85, atk: 85, def: 85, spa: 85, spd: 85, spe: 85 };
      const ivs = { hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31 };
      const types = species.types;
      const abilities = set.abilities;
      const moves = this.randomMoveset(types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
      const counter = this.queryMoves(moves, species, teraType, abilities);
      ability = this.getAbility(types, moves, abilities, counter, teamDetails, species, isLead, isDoubles, teraType, role);
      item = this.getPriorityItem(ability, types, moves, counter, teamDetails, species, isLead, isDoubles, teraType, role);
      if (item === undefined) {
        item = this.getItem(ability, types, moves, counter, teamDetails, species, isLead, teraType, role);
      }
      const level = this.getLevel(species);
      let hp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);
      let targetHP = hp;
      const minimumHP = Math.floor(Math.floor(2 * species.baseStats.hp + 100) * level / 100 + 10);
      if (item === "Life Orb") {
        targetHP = Math.floor(hp / 10) * 10 - 1;
      } else if (moves.has("bellydrum")) {
        targetHP = Math.floor(hp / 2) * 2;
      }
      if (hp > targetHP && hp - targetHP <= 3 && targetHP >= minimumHP) {
        if (Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + 100) * level / 100 + 10) >= targetHP) {
          evs.hp = 0;
          hp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);
          while (hp > targetHP) {
            ivs.hp -= 1;
            hp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);
          }
        } else {
          while (hp > targetHP) {
            evs.hp -= 4;
            hp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);
          }
        }
      }
      const noAttackStatMoves = [...moves].every((m) => {
        const move = this.dex.moves.get(m);
        if (move.damageCallback || move.damage)
          return true;
        if (move.id === "shellsidearm")
          return false;
        if (move.id === "terablast" && (species.id === "porygon" || species.baseStats.atk > species.baseStats.spa))
          return false;
        return move.category !== "Physical" || move.id === "bodypress" || move.id === "foulplay";
      });
      if (noAttackStatMoves) {
        evs.atk = 0;
        ivs.atk = 0;
      }
      if (moves.has("gyroball") || moves.has("trickroom")) {
        evs.spe = 0;
        ivs.spe = 0;
      }
      if (this.forceTeraType)
        teraType = this.forceTeraType;
      const shuffledMoves = Array.from(moves);
      this.prng.shuffle(shuffledMoves);
      return {
        name: species.baseSpecies,
        species: forme,
        gender: species.gender,
        shiny: this.randomChance(1, 1024),
        level,
        moves: shuffledMoves,
        ability,
        evs,
        ivs,
        item,
        teraType,
        role
      };
    }
    randomBabyTeam() {
      this.enforceNoDirectCustomBanlistChanges();
      const seed = this.prng.seed;
      const ruleTable = this.dex.formats.getRuleTable(this.format);
      const pokemon = [];
      const isMonotype = !!this.forceMonotype || ruleTable.has("sametypeclause");
      const typePool = this.dex.types.names().filter((name) => name !== "Stellar");
      const type = this.forceMonotype || this.sample(typePool);
      const baseFormes = /* @__PURE__ */ new Set;
      const typeCount = new import_lib.Utils.Multiset;
      const typeComboCount = new import_lib.Utils.Multiset;
      const typeWeaknesses = new import_lib.Utils.Multiset;
      const typeDoubleWeaknesses = new import_lib.Utils.Multiset;
      const teamDetails = {};
      const pokemonList = Object.keys(this.randomSets);
      const [pokemonPool, baseSpeciesPool] = this.getPokemonPool(type, pokemon, isMonotype, pokemonList);
      while (baseSpeciesPool.length && pokemon.length < this.maxTeamSize) {
        const baseSpecies = this.sampleNoReplace(baseSpeciesPool);
        const species = this.dex.species.get(this.sample(pokemonPool[baseSpecies]));
        if (!species.exists)
          continue;
        if (baseFormes.has(species.baseSpecies))
          continue;
        if (species.baseSpecies === "Zorua" && pokemon.length >= this.maxTeamSize - 1)
          continue;
        const types = species.types;
        const typeCombo = types.slice().sort().join();
        const weakToFreezeDry = this.dex.getEffectiveness("Ice", species) > 0 || this.dex.getEffectiveness("Ice", species) > -2 && types.includes("Water");
        const limitFactor = Math.round(this.maxTeamSize / 6) || 1;
        if (!isMonotype && !this.forceMonotype) {
          let skip = false;
          for (const typeName of types) {
            if (typeCount.get(typeName) >= 2 * limitFactor) {
              skip = true;
              break;
            }
          }
          if (skip)
            continue;
          for (const typeName of this.dex.types.names()) {
            if (this.dex.getEffectiveness(typeName, species) > 0) {
              if (typeWeaknesses.get(typeName) >= 3 * limitFactor) {
                skip = true;
                break;
              }
            }
            if (this.dex.getEffectiveness(typeName, species) > 1) {
              if (typeDoubleWeaknesses.get(typeName) >= 1 * limitFactor) {
                skip = true;
                break;
              }
            }
          }
          if (skip)
            continue;
          if (this.dex.getEffectiveness("Fire", species) === 0 && Object.values(species.abilities).filter((a) => ["Dry Skin", "Fluffy"].includes(a)).length && typeWeaknesses.get("Fire") >= 3 * limitFactor)
            continue;
          if (weakToFreezeDry) {
            if (typeWeaknesses.get("Freeze-Dry") >= 4 * limitFactor)
              continue;
          }
        }
        if (!this.forceMonotype && isMonotype && typeComboCount.get(typeCombo) >= 3 * limitFactor)
          continue;
        const set = this.randomSet(species, teamDetails, false, false);
        pokemon.push(set);
        if (pokemon.length === this.maxTeamSize)
          break;
        baseFormes.add(species.baseSpecies);
        for (const typeName of types) {
          typeCount.add(typeName);
        }
        typeComboCount.add(typeCombo);
        for (const typeName of this.dex.types.names()) {
          if (this.dex.getEffectiveness(typeName, species) > 0) {
            typeWeaknesses.add(typeName);
          }
          if (this.dex.getEffectiveness(typeName, species) > 1) {
            typeDoubleWeaknesses.add(typeName);
          }
        }
        if (["Dry Skin", "Fluffy"].includes(set.ability) && this.dex.getEffectiveness("Fire", species) === 0) {
          typeWeaknesses.add("Fire");
        }
        if (weakToFreezeDry)
          typeWeaknesses.add("Freeze-Dry");
        if (set.ability === "Drizzle" || set.moves.includes("raindance"))
          teamDetails.rain = 1;
        if (set.ability === "Drought" || set.moves.includes("sunnyday"))
          teamDetails.sun = 1;
        if (set.ability === "Sand Stream")
          teamDetails.sand = 1;
        if (set.ability === "Snow Warning" || set.moves.includes("snowscape") || set.moves.includes("chillyreception")) {
          teamDetails.snow = 1;
        }
        if (set.moves.includes("spikes")) {
          teamDetails.spikes = (teamDetails.spikes || 0) + 1;
        }
        if (set.moves.includes("stealthrock"))
          teamDetails.stealthRock = 1;
        if (set.moves.includes("stickyweb"))
          teamDetails.stickyWeb = 1;
        if (set.moves.includes("toxicspikes") || set.ability === "Toxic Debris")
          teamDetails.toxicSpikes = 1;
        if (set.moves.includes("defog"))
          teamDetails.defog = 1;
        if (set.moves.includes("rapidspin") || set.moves.includes("mortalspin"))
          teamDetails.rapidSpin = 1;
        if (set.moves.includes("auroraveil") || set.moves.includes("reflect") && set.moves.includes("lightscreen")) {
          teamDetails.screens = 1;
        }
        if (set.role === "Tera Blast user") {
          teamDetails.teraBlast = 1;
        }
      }
      if (pokemon.length < this.maxTeamSize && pokemon.length < 12 && !isMonotype) {
        throw new Error(`Could not build a random team for ${this.format} (seed=${seed})`);
      }
      return pokemon;
    }
  }
  var teams_default = RandomBabyTeams;
});

// ../pokemon-showdown/dist/data/random-battles/gen9cap/sets.json
var require_sets3 = __commonJS((exports, module) => {
  module.exports = {
    syclant: {
      level: 78,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Earth Power", "Focus Blast", "Spikes", "Triple Axel", "U-turn"],
          abilities: ["Compound Eyes"],
          teraTypes: ["Fighting", "Ground"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Close Combat", "Earthquake", "Leech Life", "Swords Dance", "Triple Axel"],
          abilities: ["Compound Eyes"],
          teraTypes: ["Fighting", "Ground"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Bug Buzz", "Earth Power", "Ice Beam", "Tail Glow"],
          abilities: ["Mountaineer"],
          teraTypes: ["Ground"]
        }
      ]
    },
    revenankh: {
      level: 77,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "Drain Punch", "Moonlight", "Poltergeist"],
          abilities: ["Triage"],
          teraTypes: ["Fairy", "Fighting", "Steel", "Water"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Bulk Up", "Drain Punch", "Poltergeist", "Shadow Sneak"],
          abilities: ["Triage"],
          teraTypes: ["Fairy", "Fighting", "Steel", "Water"]
        }
      ]
    },
    pyroak: {
      level: 85,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Earth Power", "Energy Ball", "Overheat", "Synthesis"],
          abilities: ["Contrary"],
          teraTypes: ["Fire", "Ground"]
        },
        {
          role: "AV Pivot",
          movepool: ["Dragon Tail", "Earth Power", "Giga Drain", "Overheat"],
          abilities: ["Contrary"],
          teraTypes: ["Fire", "Ground"]
        }
      ]
    },
    fidgit: {
      level: 86,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Earth Power", "Encore", "Rapid Spin", "Sludge Bomb", "Spikes", "Stealth Rock", "Tailwind", "Toxic Spikes", "U-turn"],
          abilities: ["Frisk", "Persistent"],
          teraTypes: ["Flying", "Steel"]
        }
      ]
    },
    stratagem: {
      level: 79,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Energy Ball", "Fire Blast", "Paleo Wave", "Trick"],
          abilities: ["Levitate"],
          teraTypes: ["Fire", "Grass", "Rock"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Energy Ball", "Fire Blast", "Meteor Beam", "Paleo Wave"],
          abilities: ["Levitate"],
          teraTypes: ["Fire", "Grass", "Rock"]
        }
      ]
    },
    arghonaut: {
      level: 80,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "Drain Punch", "Recover", "Waterfall"],
          abilities: ["Unaware"],
          teraTypes: ["Steel"]
        },
        {
          role: "Bulky Support",
          movepool: ["Circle Throw", "Knock Off", "Recover", "Spikes"],
          abilities: ["Unaware"],
          teraTypes: ["Dark", "Steel"]
        }
      ]
    },
    kitsunoh: {
      level: 78,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Close Combat", "Defog", "Encore", "Meteor Mash", "Poltergeist", "Strength Sap", "Trick", "U-turn", "Will-O-Wisp"],
          abilities: ["Trace"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Defog", "Encore", "Meteor Mash", "Poltergeist", "Strength Sap", "U-turn", "Will-O-Wisp"],
          abilities: ["Trace"],
          teraTypes: ["Dark", "Water"]
        }
      ]
    },
    cyclohm: {
      level: 79,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Defog", "Discharge", "Draco Meteor", "Fire Blast", "Ice Beam", "Slack Off", "Thunderbolt", "Volt Switch"],
          abilities: ["Shield Dust", "Static"],
          teraTypes: ["Electric", "Fairy", "Steel"]
        },
        {
          role: "AV Pivot",
          movepool: ["Discharge", "Draco Meteor", "Fire Blast", "Ice Beam", "Thunderbolt", "Volt Switch"],
          abilities: ["Shield Dust", "Static"],
          teraTypes: ["Electric", "Fairy", "Steel"]
        }
      ]
    },
    colossoil: {
      level: 78,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Facade", "Headlong Rush", "Knock Off", "Rapid Spin", "Sucker Punch", "U-turn"],
          abilities: ["Guts"],
          teraTypes: ["Normal"]
        }
      ]
    },
    krilowatt: {
      level: 84,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Ice Beam", "Surf", "Volt Switch", "Wild Charge"],
          abilities: ["Magic Guard"],
          teraTypes: ["Electric", "Flying"]
        }
      ]
    },
    voodoom: {
      level: 81,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Aura Sphere", "Dark Pulse", "Flash Cannon", "Focus Blast", "Nasty Plot", "Vacuum Wave", "Volt Switch"],
          abilities: ["Lightning Rod", "Volt Absorb"],
          teraTypes: ["Steel"]
        }
      ]
    },
    tomohawk: {
      level: 82,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Aura Sphere", "Haze", "Hurricane", "Rapid Spin", "Roost"],
          abilities: ["Intimidate", "Prankster"],
          teraTypes: ["Steel"]
        }
      ]
    },
    necturna: {
      level: 80,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Horn Leech", "Shadow Claw", "Stone Edge", "Victory Dance"],
          abilities: ["Forewarn"],
          teraTypes: ["Fairy", "Rock", "Water"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Horn Leech", "Pain Split", "Rage Fist", "Toxic Spikes", "Will-O-Wisp"],
          abilities: ["Forewarn"],
          teraTypes: ["Fairy", "Water"]
        },
        {
          role: "Bulky Support",
          movepool: ["Horn Leech", "Pain Split", "Power Whip", "Shadow Claw", "Shadow Sneak", "Sticky Web", "Toxic Spikes", "Will-O-Wisp"],
          abilities: ["Forewarn"],
          teraTypes: ["Fairy", "Water"]
        }
      ]
    },
    mollux: {
      level: 84,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Hydro Pump", "Lava Plume", "Rapid Spin", "Recover", "Sludge Bomb", "Thunder Wave"],
          abilities: ["Dry Skin"],
          teraTypes: ["Grass", "Water"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Eruption", "Hydro Pump", "Sludge Wave", "Trick"],
          abilities: ["Dry Skin"],
          teraTypes: ["Fire"]
        }
      ]
    },
    aurumoth: {
      level: 78,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Bug Buzz", "Focus Blast", "Psyshock", "Tail Glow"],
          abilities: ["No Guard", "Weak Armor"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Blizzard", "Bug Buzz", "Focus Blast", "Hydro Pump", "Overheat", "Psychic", "Psyshock", "Thunder"],
          abilities: ["No Guard"],
          teraTypes: ["Fighting", "Fire"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Close Combat", "Dragon Dance", "Megahorn", "Zen Headbutt"],
          abilities: ["No Guard"],
          teraTypes: ["Fighting"]
        }
      ]
    },
    malaconda: {
      level: 85,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Glare", "Knock Off", "Parting Shot", "Rapid Spin", "Solar Blade", "Synthesis", "Temper Flare"],
          abilities: ["Drought"],
          teraTypes: ["Poison", "Water"]
        },
        {
          role: "Bulky Support",
          movepool: ["Knock Off", "Solar Blade", "Sucker Punch", "Synthesis"],
          abilities: ["Drought"],
          teraTypes: ["Poison", "Water"]
        },
        {
          role: "AV Pivot",
          movepool: ["Knock Off", "Rapid Spin", "Solar Blade", "Sucker Punch", "Temper Flare", "U-turn"],
          abilities: ["Drought"],
          teraTypes: ["Fire", "Poison"]
        }
      ]
    },
    cawmodore: {
      level: 75,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Acrobatics", "Belly Drum", "Bullet Punch", "Drain Punch"],
          abilities: ["Volt Absorb"],
          teraTypes: ["Flying", "Water"]
        }
      ]
    },
    volkraken: {
      level: 82,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Flamethrower", "Hydro Pump", "Overheat", "U-turn"],
          abilities: ["Analytic"],
          teraTypes: ["Fire", "Water"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Fire Blast", "Hydro Pump", "Scald", "U-turn"],
          abilities: ["Analytic"],
          teraTypes: ["Fire", "Water"]
        }
      ]
    },
    plasmanta: {
      level: 86,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Discharge", "Encore", "Sludge Bomb", "Surf", "Taunt", "Thunderbolt"],
          abilities: ["Storm Drain"],
          teraTypes: ["Water"]
        }
      ]
    },
    naviathan: {
      level: 79,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Dragon Dance", "Facade", "Heavy Slam", "Wave Crash"],
          abilities: ["Guts"],
          teraTypes: ["Grass", "Normal"]
        }
      ]
    },
    crucibelle: {
      level: 86,
      sets: [
        {
          role: "AV Pivot",
          movepool: ["Gunk Shot", "Knock Off", "Poison Jab", "Stone Edge", "U-turn", "Wood Hammer"],
          abilities: ["Regenerator"],
          teraTypes: ["Grass"]
        },
        {
          role: "Fast Support",
          movepool: ["Gunk Shot", "Knock Off", "Stealth Rock", "Stone Edge", "Toxic Spikes"],
          abilities: ["Regenerator"],
          teraTypes: ["Dark", "Grass"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Coil", "Gunk Shot", "Stone Edge", "Wood Hammer"],
          abilities: ["Regenerator"],
          teraTypes: ["Grass"]
        }
      ]
    },
    kerfluffle: {
      level: 82,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Aura Sphere", "Encore", "Focus Blast", "Moonblast", "Parting Shot", "Psychic", "Vacuum Wave"],
          abilities: ["Natural Cure"],
          teraTypes: ["Steel"]
        }
      ]
    },
    pajantom: {
      level: 80,
      sets: [
        {
          role: "Fast Attacker",
          movepool: ["Earthquake", "Leech Life", "Outrage", "Spirit Shackle", "Taunt", "Toxic Spikes"],
          abilities: ["Comatose"],
          teraTypes: ["Fairy", "Ghost"]
        }
      ]
    },
    jumbao: {
      level: 83,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Focus Blast", "Healing Wish", "Moonblast", "Solar Beam", "Synthesis"],
          abilities: ["Drought"],
          teraTypes: ["Poison", "Water"]
        },
        {
          role: "Tera Blast user",
          movepool: ["Healing Wish", "Moonblast", "Solar Beam", "Synthesis", "Tera Blast"],
          abilities: ["Drought"],
          teraTypes: ["Fire", "Ground"]
        }
      ]
    },
    caribolt: {
      level: 81,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Horn Leech", "Hyper Drill", "Knock Off", "Quick Attack", "Swords Dance"],
          abilities: ["Galvanize"],
          teraTypes: ["Electric"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Double-Edge", "Horn Leech", "Rapid Spin", "Swords Dance"],
          abilities: ["Galvanize"],
          teraTypes: ["Electric"]
        }
      ]
    },
    smokomodo: {
      level: 83,
      sets: [
        {
          role: "Fast Bulky Setup",
          movepool: ["Bone Rush", "Bulk Up", "Flame Charge", "Morning Sun"],
          abilities: ["Technician"],
          teraTypes: ["Grass", "Ground"]
        },
        {
          role: "Setup Sweeper",
          movepool: ["Bone Rush", "Bulk Up", "Flame Wheel", "Scale Shot"],
          abilities: ["Technician"],
          teraTypes: ["Dragon"]
        },
        {
          role: "Fast Support",
          movepool: ["Bone Rush", "Clear Smog", "Defog", "Flame Wheel", "Morning Sun", "Stealth Rock", "Taunt", "Toxic", "Will-O-Wisp"],
          abilities: ["Technician"],
          teraTypes: ["Grass", "Ground", "Water"]
        }
      ]
    },
    snaelstrom: {
      level: 80,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Liquidation", "Rapid Spin", "Stealth Rock", "Sticky Web", "Toxic", "U-turn"],
          abilities: ["Poison Heal"],
          teraTypes: ["Electric", "Ground"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Liquidation", "Recover", "Spiky Shield", "Toxic"],
          abilities: ["Poison Heal"],
          teraTypes: ["Electric", "Ground"]
        }
      ]
    },
    equilibra: {
      level: 84,
      sets: [
        {
          role: "Bulky Support",
          movepool: ["Doom Desire", "Earth Power", "Flash Cannon", "Pain Split", "Rapid Spin"],
          abilities: ["Levitate"],
          teraTypes: ["Electric", "Steel", "Water"]
        }
      ]
    },
    astrolotl: {
      level: 79,
      sets: [
        {
          role: "Fast Support",
          movepool: ["Defog", "Draco Meteor", "Encore", "Fire Lash", "Spikes", "Thunder Wave", "Will-O-Wisp"],
          abilities: ["Regenerator"],
          teraTypes: ["Fairy", "Steel"]
        }
      ]
    },
    miasmaw: {
      level: 79,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Earthquake", "Megahorn", "Scale Shot", "Swords Dance"],
          abilities: ["Compound Eyes"],
          teraTypes: ["Dragon", "Steel"]
        },
        {
          role: "Fast Bulky Setup",
          movepool: ["Close Combat", "Earthquake", "Gunk Shot", "Scale Shot", "Swords Dance"],
          abilities: ["Compound Eyes"],
          teraTypes: ["Poison"]
        },
        {
          role: "Fast Attacker",
          movepool: ["Dragon Rush", "Earthquake", "First Impression", "U-turn"],
          abilities: ["Compound Eyes"],
          teraTypes: ["Bug", "Steel"]
        }
      ]
    },
    chromera: {
      level: 82,
      sets: [
        {
          role: "Wallbreaker",
          movepool: ["Boomburst", "Dark Pulse", "Recover", "Switcheroo", "Thunderbolt", "Toxic Spikes"],
          abilities: ["Color Change"],
          teraTypes: ["Normal"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Boomburst", "Calm Mind", "Dark Pulse", "Recover"],
          abilities: ["Color Change"],
          teraTypes: ["Normal"]
        }
      ]
    },
    venomicon: {
      level: 82,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Air Slash", "Body Press", "Hurricane", "Roost", "Sludge Bomb"],
          abilities: ["Stamina"],
          teraTypes: ["Fighting", "Steel"]
        },
        {
          role: "Bulky Support",
          movepool: ["Air Slash", "Body Press", "Hurricane", "Knock Off", "Roost"],
          abilities: ["Stamina"],
          teraTypes: ["Fighting", "Steel"]
        }
      ]
    },
    venomiconepilogue: {
      level: 82,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Brave Bird", "Coil", "Gunk Shot", "Roost", "Toxic Spikes"],
          abilities: ["Tinted Lens"],
          teraTypes: ["Flying", "Poison", "Steel"]
        }
      ]
    },
    saharaja: {
      level: 80,
      sets: [
        {
          role: "AV Pivot",
          movepool: ["Body Press", "Diamond Storm", "Earthquake", "Rapid Spin"],
          abilities: ["Serene Grace", "Water Absorb"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Bulky Attacker",
          movepool: ["Body Press", "Diamond Storm", "Earthquake", "Pain Split"],
          abilities: ["Serene Grace", "Water Absorb"],
          teraTypes: ["Fighting"]
        },
        {
          role: "Bulky Setup",
          movepool: ["Diamond Storm", "Earthquake", "Pain Split", "Rapid Spin", "Swords Dance"],
          abilities: ["Serene Grace", "Water Absorb"],
          teraTypes: ["Rock", "Steel"]
        }
      ]
    },
    hemogoblin: {
      level: 78,
      sets: [
        {
          role: "Bulky Setup",
          movepool: ["Bulk Up", "Extreme Speed", "Flare Blitz", "Moonlight"],
          abilities: ["Pixilate"],
          teraTypes: ["Fairy", "Water"]
        },
        {
          role: "Wallbreaker",
          movepool: ["Explosion", "Extreme Speed", "Overheat", "Spikes", "Will-O-Wisp"],
          abilities: ["Pixilate"],
          teraTypes: ["Fairy", "Water"]
        }
      ]
    },
    cresceidon: {
      level: 81,
      sets: [
        {
          role: "Bulky Attacker",
          movepool: ["Encore", "Moonblast", "Recover", "Scald", "Thunder Wave"],
          abilities: ["Multiscale", "Rough Skin"],
          teraTypes: ["Poison", "Steel"]
        }
      ]
    },
    chuggalong: {
      level: 78,
      sets: [
        {
          role: "Setup Sweeper",
          movepool: ["Clanging Scales", "Clangorous Soul", "Flamethrower", "Sludge Wave", "Surf"],
          abilities: ["Armor Tail"],
          teraTypes: ["Fire", "Water"]
        }
      ]
    }
  };
});

// ../pokemon-showdown/dist/data/random-battles/gen9cap/teams.js
var require_teams3 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var teams_exports = {};
  __export2(teams_exports, {
    RandomCAPTeams: () => RandomCAPTeams,
    default: () => teams_default
  });
  module.exports = __toCommonJS2(teams_exports);
  var import_teams = require_teams();
  var NO_LEAD_POKEMON = [
    "Zacian",
    "Zamazenta"
  ];

  class RandomCAPTeams extends import_teams.RandomTeams {
    constructor() {
      super(...arguments);
      this.randomCAPSets = require_sets3();
    }
    getCAPAbility(types, moves, abilities, counter, teamDetails, species, isLead, teraType, role) {
      if (species.id === "fidgit")
        return moves.has("tailwind") ? "Persistent" : "Frisk";
      if (species.id === "tomohawk")
        return moves.has("haze") ? "Prankster" : "Intimidate";
      return this.getAbility(types, moves, abilities, counter, teamDetails, species, isLead, false, teraType, role);
    }
    getCAPPriorityItem(ability, types, moves, counter, teamDetails, species, isLead, teraType, role) {
      if (ability === "Mountaineer")
        return "Life Orb";
    }
    getLevel(species, isDoubles) {
      if (this.adjustLevel)
        return this.adjustLevel;
      return (species.num > 0 ? this.randomSets[species.id]["level"] : this.randomCAPSets[species.id]["level"]) || 80;
    }
    randomCAPSet(s, teamDetails = {}, isLead = false, isDoubles = false) {
      const species = this.dex.species.get(s);
      if (species.num > 0)
        return this.randomSet(s, teamDetails, isLead, isDoubles);
      const forme = this.getForme(species);
      const sets = this.randomCAPSets[species.id]["sets"];
      const possibleSets = [];
      const ruleTable = this.dex.formats.getRuleTable(this.format);
      for (const set2 of sets) {
        const abilities2 = new Set(Object.values(species.abilities));
        if (isLead && (abilities2.has("Protosynthesis") || abilities2.has("Quark Drive")) && set2.role === "Fast Bulky Setup") {
          continue;
        }
        if ((teamDetails.teraBlast || ruleTable.has("terastalclause")) && set2.role === "Tera Blast user") {
          continue;
        }
        possibleSets.push(set2);
      }
      const set = this.sampleIfArray(possibleSets);
      const role = set.role;
      const movePool = [];
      for (const movename of set.movepool) {
        movePool.push(this.dex.moves.get(movename).id);
      }
      const teraTypes = set.teraTypes;
      let teraType = this.sampleIfArray(teraTypes);
      let ability = "";
      let item = undefined;
      const evs = { hp: 85, atk: 85, def: 85, spa: 85, spd: 85, spe: 85 };
      const ivs = { hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31 };
      const types = species.types;
      const abilities = set.abilities;
      const moves = this.randomMoveset(types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);
      const counter = this.queryMoves(moves, species, teraType, abilities);
      ability = this.getCAPAbility(types, moves, abilities, counter, teamDetails, species, isLead, teraType, role);
      item = this.getCAPPriorityItem(ability, types, moves, counter, teamDetails, species, isLead, teraType, role);
      if (item === undefined) {
        item = this.getPriorityItem(ability, types, moves, counter, teamDetails, species, isLead, isDoubles, teraType, role);
      }
      if (item === undefined) {
        item = this.getItem(ability, types, moves, counter, teamDetails, species, isLead, teraType, role);
      }
      const level = this.getLevel(species, isDoubles);
      const srImmunity = ability === "Magic Guard" || item === "Heavy-Duty Boots";
      let srWeakness = srImmunity ? 0 : this.dex.getEffectiveness("Rock", species);
      if (["axekick", "highjumpkick", "jumpkick"].some((m) => moves.has(m)))
        srWeakness = 2;
      while (evs.hp > 1) {
        const hp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);
        if (moves.has("substitute") && ["Sitrus Berry", "Salac Berry"].includes(item)) {
          if (hp % 4 === 0)
            break;
        } else if ((moves.has("bellydrum") || moves.has("filletaway")) && (item === "Sitrus Berry" || ability === "Gluttony")) {
          if (hp % 2 === 0)
            break;
        } else if (moves.has("substitute") && moves.has("endeavor")) {
          if (hp % 4 > 0)
            break;
        } else {
          if (srWeakness <= 0 || ability === "Regenerator" || ["Leftovers", "Life Orb"].includes(item))
            break;
          if (item !== "Sitrus Berry" && hp % (4 / srWeakness) > 0)
            break;
          if (item === "Sitrus Berry" && hp % (4 / srWeakness) === 0)
            break;
        }
        evs.hp -= 4;
      }
      const noAttackStatMoves = [...moves].every((m) => {
        const move = this.dex.moves.get(m);
        if (move.damageCallback || move.damage)
          return true;
        if (move.id === "shellsidearm")
          return false;
        if (move.id === "terablast" && (species.id === "porygon2" || moves.has("shiftgear") || species.baseStats.atk > species.baseStats.spa))
          return false;
        return move.category !== "Physical" || move.id === "bodypress" || move.id === "foulplay";
      });
      if (noAttackStatMoves && !moves.has("transform") && this.format.mod !== "partnersincrime") {
        evs.atk = 0;
        ivs.atk = 0;
      }
      if (moves.has("gyroball") || moves.has("trickroom")) {
        evs.spe = 0;
        ivs.spe = 0;
      }
      if (this.forceTeraType)
        teraType = this.forceTeraType;
      const shuffledMoves = Array.from(moves);
      this.prng.shuffle(shuffledMoves);
      return {
        name: species.baseSpecies,
        species: forme,
        gender: species.baseSpecies === "Greninja" ? "M" : species.gender,
        shiny: this.randomChance(1, 1024),
        level,
        moves: shuffledMoves,
        ability,
        evs,
        ivs,
        item,
        teraType,
        role
      };
    }
    randomTeam() {
      this.enforceNoDirectCustomBanlistChanges();
      const seed = this.prng.seed;
      const ruleTable = this.dex.formats.getRuleTable(this.format);
      const pokemon = [];
      const isMonotype = !!this.forceMonotype || ruleTable.has("sametypeclause");
      const isDoubles = false;
      const typePool = this.dex.types.names().filter((name) => name !== "Stellar");
      const type = this.forceMonotype || this.sample(typePool);
      const baseFormes = {};
      const typeCount = {};
      const typeComboCount = {};
      const typeWeaknesses = {};
      const typeDoubleWeaknesses = {};
      const teamDetails = {};
      let numMaxLevelPokemon = 0;
      const pokemonList = Object.keys(this.randomSets);
      const capPokemonList = Object.keys(this.randomCAPSets);
      const [pokemonPool, baseSpeciesPool] = this.getPokemonPool(type, pokemon, isMonotype, pokemonList);
      const [capPokemonPool, capBaseSpeciesPool] = this.getPokemonPool(type, pokemon, isMonotype, capPokemonList);
      let leadsRemaining = 1;
      while (baseSpeciesPool.length && pokemon.length < this.maxTeamSize) {
        let baseSpecies, species;
        if ((pokemon.length === 1 || this.randomChance(1, 5)) && capBaseSpeciesPool.length) {
          baseSpecies = this.sampleNoReplace(capBaseSpeciesPool);
          species = this.dex.species.get(this.sample(capPokemonPool[baseSpecies]));
        } else {
          baseSpecies = this.sampleNoReplace(baseSpeciesPool);
          species = this.dex.species.get(this.sample(pokemonPool[baseSpecies]));
        }
        if (!species.exists)
          continue;
        if (baseFormes[species.baseSpecies])
          continue;
        if ((species.baseSpecies === "Ogerpon" || species.baseSpecies === "Terapagos") && teamDetails.teraBlast)
          continue;
        if (species.baseSpecies === "Zoroark" && pokemon.length >= this.maxTeamSize - 1)
          continue;
        const types = species.types;
        const typeCombo = types.slice().sort().join();
        const weakToFreezeDry = this.dex.getEffectiveness("Ice", species) > 0 || this.dex.getEffectiveness("Ice", species) > -2 && types.includes("Water");
        const limitFactor = Math.round(this.maxTeamSize / 6) || 1;
        if (!isMonotype && !this.forceMonotype) {
          let skip = false;
          for (const typeName of types) {
            if (typeCount[typeName] >= 2 * limitFactor) {
              skip = true;
              break;
            }
          }
          if (skip)
            continue;
          for (const typeName of this.dex.types.names()) {
            if (this.dex.getEffectiveness(typeName, species) > 0) {
              if (!typeWeaknesses[typeName])
                typeWeaknesses[typeName] = 0;
              if (typeWeaknesses[typeName] >= 3 * limitFactor) {
                skip = true;
                break;
              }
            }
            if (this.dex.getEffectiveness(typeName, species) > 1) {
              if (!typeDoubleWeaknesses[typeName])
                typeDoubleWeaknesses[typeName] = 0;
              if (typeDoubleWeaknesses[typeName] >= 1 * limitFactor) {
                skip = true;
                break;
              }
            }
          }
          if (skip)
            continue;
          if (this.dex.getEffectiveness("Fire", species) === 0 && Object.values(species.abilities).filter((a) => ["Dry Skin", "Fluffy"].includes(a)).length) {
            if (!typeWeaknesses["Fire"])
              typeWeaknesses["Fire"] = 0;
            if (typeWeaknesses["Fire"] >= 3 * limitFactor)
              continue;
          }
          if (weakToFreezeDry) {
            if (!typeWeaknesses["Freeze-Dry"])
              typeWeaknesses["Freeze-Dry"] = 0;
            if (typeWeaknesses["Freeze-Dry"] >= 4 * limitFactor)
              continue;
          }
          if (!this.adjustLevel && this.getLevel(species, isDoubles) === 100 && numMaxLevelPokemon >= limitFactor) {
            continue;
          }
        }
        if (!this.forceMonotype && isMonotype && typeComboCount[typeCombo] >= 3 * limitFactor)
          continue;
        let set;
        if (leadsRemaining) {
          if (NO_LEAD_POKEMON.includes(species.baseSpecies)) {
            if (pokemon.length + leadsRemaining === this.maxTeamSize)
              continue;
            set = this.randomCAPSet(species, teamDetails, false, isDoubles);
            pokemon.push(set);
          } else {
            set = this.randomCAPSet(species, teamDetails, true, isDoubles);
            pokemon.unshift(set);
            leadsRemaining--;
          }
        } else {
          set = this.randomCAPSet(species, teamDetails, false, isDoubles);
          pokemon.push(set);
        }
        if (pokemon.length === this.maxTeamSize)
          break;
        baseFormes[species.baseSpecies] = 1;
        for (const typeName of types) {
          if (typeName in typeCount) {
            typeCount[typeName]++;
          } else {
            typeCount[typeName] = 1;
          }
        }
        if (typeCombo in typeComboCount) {
          typeComboCount[typeCombo]++;
        } else {
          typeComboCount[typeCombo] = 1;
        }
        for (const typeName of this.dex.types.names()) {
          if (this.dex.getEffectiveness(typeName, species) > 0) {
            typeWeaknesses[typeName]++;
          }
          if (this.dex.getEffectiveness(typeName, species) > 1) {
            typeDoubleWeaknesses[typeName]++;
          }
        }
        if (["Dry Skin", "Fluffy"].includes(set.ability) && this.dex.getEffectiveness("Fire", species) === 0) {
          typeWeaknesses["Fire"]++;
        }
        if (weakToFreezeDry)
          typeWeaknesses["Freeze-Dry"]++;
        if (set.level === 100)
          numMaxLevelPokemon++;
        if (set.ability === "Drizzle" || set.moves.includes("raindance"))
          teamDetails.rain = 1;
        if (set.ability === "Drought" || set.ability === "Orichalcum Pulse" || set.moves.includes("sunnyday")) {
          teamDetails.sun = 1;
        }
        if (set.ability === "Sand Stream")
          teamDetails.sand = 1;
        if (set.ability === "Snow Warning" || set.moves.includes("snowscape") || set.moves.includes("chillyreception")) {
          teamDetails.snow = 1;
        }
        if (set.moves.includes("healbell"))
          teamDetails.statusCure = 1;
        if (set.moves.includes("spikes") || set.moves.includes("ceaselessedge")) {
          teamDetails.spikes = (teamDetails.spikes || 0) + 1;
        }
        if (set.moves.includes("toxicspikes") || set.ability === "Toxic Debris")
          teamDetails.toxicSpikes = 1;
        if (set.moves.includes("stealthrock") || set.moves.includes("stoneaxe"))
          teamDetails.stealthRock = 1;
        if (set.moves.includes("stickyweb"))
          teamDetails.stickyWeb = 1;
        if (set.moves.includes("defog"))
          teamDetails.defog = 1;
        if (set.moves.includes("rapidspin") || set.moves.includes("mortalspin"))
          teamDetails.rapidSpin = 1;
        if (set.moves.includes("auroraveil") || set.moves.includes("reflect") && set.moves.includes("lightscreen")) {
          teamDetails.screens = 1;
        }
        if (set.role === "Tera Blast user" || species.baseSpecies === "Ogerpon" || species.baseSpecies === "Terapagos") {
          teamDetails.teraBlast = 1;
        }
      }
      if (pokemon.length < this.maxTeamSize && pokemon.length < 12) {
        throw new Error(`Could not build a random team for ${this.format} (seed=${seed})`);
      }
      return pokemon;
    }
  }
  var teams_default = RandomCAPTeams;
});

// ../pokemon-showdown/dist/sim/teams.js
var require_teams4 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var teams_exports = {};
  __export2(teams_exports, {
    Teams: () => Teams,
    default: () => teams_default
  });
  module.exports = __toCommonJS2(teams_exports);
  var import_dex = require_dex();
  var Teams = new class Teams2 {
    pack(team) {
      if (!team)
        return "";
      function getIv(ivs, s) {
        return ivs[s] === 31 || ivs[s] === undefined ? "" : ivs[s].toString();
      }
      let buf = "";
      for (const set of team) {
        if (buf)
          buf += "]";
        buf += set.name || set.species;
        const id = this.packName(set.species || set.name);
        buf += "|" + (this.packName(set.name || set.species) === id ? "" : id);
        buf += "|" + this.packName(set.item);
        buf += "|" + this.packName(set.ability);
        buf += "|" + set.moves.map(this.packName).join(",");
        buf += "|" + (set.nature || "");
        let evs = "|";
        if (set.evs) {
          evs = "|" + (set.evs["hp"] || "") + "," + (set.evs["atk"] || "") + "," + (set.evs["def"] || "") + "," + (set.evs["spa"] || "") + "," + (set.evs["spd"] || "") + "," + (set.evs["spe"] || "");
        }
        if (evs === "|,,,,,") {
          buf += "|";
        } else {
          buf += evs;
        }
        if (set.gender) {
          buf += "|" + set.gender;
        } else {
          buf += "|";
        }
        let ivs = "|";
        if (set.ivs) {
          ivs = "|" + getIv(set.ivs, "hp") + "," + getIv(set.ivs, "atk") + "," + getIv(set.ivs, "def") + "," + getIv(set.ivs, "spa") + "," + getIv(set.ivs, "spd") + "," + getIv(set.ivs, "spe");
        }
        if (ivs === "|,,,,,") {
          buf += "|";
        } else {
          buf += ivs;
        }
        if (set.shiny) {
          buf += "|S";
        } else {
          buf += "|";
        }
        if (set.level && set.level !== 100) {
          buf += "|" + set.level;
        } else {
          buf += "|";
        }
        if (set.happiness !== undefined && set.happiness !== 255) {
          buf += "|" + set.happiness;
        } else {
          buf += "|";
        }
        if (set.pokeball || set.hpType || set.gigantamax || set.dynamaxLevel !== undefined && set.dynamaxLevel !== 10 || set.teraType) {
          buf += "," + (set.hpType || "");
          buf += "," + this.packName(set.pokeball || "");
          buf += "," + (set.gigantamax ? "G" : "");
          buf += "," + (set.dynamaxLevel !== undefined && set.dynamaxLevel !== 10 ? set.dynamaxLevel : "");
          buf += "," + (set.teraType || "");
        }
      }
      return buf;
    }
    unpack(buf) {
      if (!buf)
        return null;
      if (typeof buf !== "string")
        return buf;
      if (buf.startsWith("[") && buf.endsWith("]")) {
        try {
          buf = this.pack(JSON.parse(buf));
        } catch {
          return null;
        }
      }
      const team = [];
      let i = 0;
      let j = 0;
      for (let count = 0;count < 24; count++) {
        const set = {};
        team.push(set);
        j = buf.indexOf("|", i);
        if (j < 0)
          return null;
        set.name = buf.substring(i, j);
        i = j + 1;
        j = buf.indexOf("|", i);
        if (j < 0)
          return null;
        set.species = this.unpackName(buf.substring(i, j), import_dex.Dex.species) || set.name;
        i = j + 1;
        j = buf.indexOf("|", i);
        if (j < 0)
          return null;
        set.item = this.unpackName(buf.substring(i, j), import_dex.Dex.items);
        i = j + 1;
        j = buf.indexOf("|", i);
        if (j < 0)
          return null;
        const ability = buf.substring(i, j);
        const species = import_dex.Dex.species.get(set.species);
        set.ability = ["", "0", "1", "H", "S"].includes(ability) ? species.abilities[ability || "0"] || (ability === "" ? "" : "!!!ERROR!!!") : this.unpackName(ability, import_dex.Dex.abilities);
        i = j + 1;
        j = buf.indexOf("|", i);
        if (j < 0)
          return null;
        set.moves = buf.substring(i, j).split(",", 24).map((name) => this.unpackName(name, import_dex.Dex.moves));
        i = j + 1;
        j = buf.indexOf("|", i);
        if (j < 0)
          return null;
        set.nature = this.unpackName(buf.substring(i, j), import_dex.Dex.natures);
        i = j + 1;
        j = buf.indexOf("|", i);
        if (j < 0)
          return null;
        if (j !== i) {
          const evs = buf.substring(i, j).split(",", 6);
          set.evs = {
            hp: Number(evs[0]) || 0,
            atk: Number(evs[1]) || 0,
            def: Number(evs[2]) || 0,
            spa: Number(evs[3]) || 0,
            spd: Number(evs[4]) || 0,
            spe: Number(evs[5]) || 0
          };
        }
        i = j + 1;
        j = buf.indexOf("|", i);
        if (j < 0)
          return null;
        if (i !== j)
          set.gender = buf.substring(i, j);
        i = j + 1;
        j = buf.indexOf("|", i);
        if (j < 0)
          return null;
        if (j !== i) {
          const ivs = buf.substring(i, j).split(",", 6);
          set.ivs = {
            hp: ivs[0] === "" ? 31 : Number(ivs[0]) || 0,
            atk: ivs[1] === "" ? 31 : Number(ivs[1]) || 0,
            def: ivs[2] === "" ? 31 : Number(ivs[2]) || 0,
            spa: ivs[3] === "" ? 31 : Number(ivs[3]) || 0,
            spd: ivs[4] === "" ? 31 : Number(ivs[4]) || 0,
            spe: ivs[5] === "" ? 31 : Number(ivs[5]) || 0
          };
        }
        i = j + 1;
        j = buf.indexOf("|", i);
        if (j < 0)
          return null;
        if (i !== j)
          set.shiny = true;
        i = j + 1;
        j = buf.indexOf("|", i);
        if (j < 0)
          return null;
        if (i !== j)
          set.level = parseInt(buf.substring(i, j));
        i = j + 1;
        j = buf.indexOf("]", i);
        let misc;
        if (j < 0) {
          if (i < buf.length)
            misc = buf.substring(i).split(",", 6);
        } else {
          if (i !== j)
            misc = buf.substring(i, j).split(",", 6);
        }
        if (misc) {
          set.happiness = misc[0] ? Number(misc[0]) : 255;
          set.hpType = misc[1] || "";
          set.pokeball = this.unpackName(misc[2] || "", import_dex.Dex.items);
          set.gigantamax = !!misc[3];
          set.dynamaxLevel = misc[4] ? Number(misc[4]) : 10;
          set.teraType = misc[5];
        }
        if (j < 0)
          break;
        i = j + 1;
      }
      return team;
    }
    packName(name) {
      if (!name)
        return "";
      return name.replace(/[^A-Za-z0-9]+/g, "");
    }
    unpackName(name, dexTable) {
      if (!name)
        return "";
      if (dexTable) {
        const obj = dexTable.get(name);
        if (obj.exists)
          return obj.name;
      }
      return name.replace(/([0-9]+)/g, " $1 ").replace(/([A-Z])/g, " $1").replace(/[ ][ ]/g, " ").trim();
    }
    export(team, options) {
      let output = "";
      for (const set of team) {
        output += this.exportSet(set, options) + `
`;
      }
      return output;
    }
    exportSet(set, { hideStats } = {}) {
      let out = ``;
      if (set.name && set.name !== set.species) {
        out += `${set.name} (${set.species})`;
      } else {
        out += set.species;
      }
      if (set.gender === "M")
        out += ` (M)`;
      if (set.gender === "F")
        out += ` (F)`;
      if (set.item)
        out += ` @ ${set.item}`;
      out += `  
`;
      if (set.ability) {
        out += `Ability: ${set.ability}  
`;
      }
      if (set.level && set.level !== 100) {
        out += `Level: ${set.level}  
`;
      }
      if (set.shiny) {
        out += `Shiny: Yes  
`;
      }
      if (typeof set.happiness === "number" && set.happiness !== 255 && !isNaN(set.happiness)) {
        out += `Happiness: ${set.happiness}  
`;
      }
      if (set.pokeball) {
        out += `Pokeball: ${set.pokeball}  
`;
      }
      if (set.hpType) {
        out += `Hidden Power: ${set.hpType}  
`;
      }
      if (typeof set.dynamaxLevel === "number" && set.dynamaxLevel !== 10 && !isNaN(set.dynamaxLevel)) {
        out += `Dynamax Level: ${set.dynamaxLevel}  
`;
      }
      if (set.gigantamax) {
        out += `Gigantamax: Yes  
`;
      }
      if (set.teraType) {
        out += `Tera Type: ${set.teraType}  
`;
      }
      if (!hideStats) {
        if (set.evs) {
          const stats = import_dex.Dex.stats.ids().map((stat) => set.evs[stat] ? `${set.evs[stat]} ${import_dex.Dex.stats.shortNames[stat]}` : ``).filter(Boolean);
          if (stats.length) {
            out += `EVs: ${stats.join(" / ")}  
`;
          }
        }
        if (set.nature) {
          out += `${set.nature} Nature  
`;
        }
        if (set.ivs) {
          const stats = import_dex.Dex.stats.ids().map((stat) => set.ivs[stat] !== 31 && set.ivs[stat] !== undefined ? `${set.ivs[stat] || 0} ${import_dex.Dex.stats.shortNames[stat]}` : ``).filter(Boolean);
          if (stats.length) {
            out += `IVs: ${stats.join(" / ")}  
`;
          }
        }
      }
      for (let move of set.moves) {
        if (move.startsWith(`Hidden Power `) && move.charAt(13) !== "[") {
          move = `Hidden Power [${move.slice(13)}]`;
        }
        out += `- ${move}  
`;
      }
      return out;
    }
    parseExportedTeamLine(line, isFirstLine, set, aggressive) {
      if (isFirstLine) {
        let item;
        [line, item] = line.split(" @ ");
        if (item) {
          set.item = item;
          if ((0, import_dex.toID)(set.item) === "noitem")
            set.item = "";
        }
        if (line.endsWith(" (M)")) {
          set.gender = "M";
          line = line.slice(0, -4);
        }
        if (line.endsWith(" (F)")) {
          set.gender = "F";
          line = line.slice(0, -4);
        }
        if (line.endsWith(")") && line.includes("(")) {
          const [name, species] = line.slice(0, -1).split("(");
          set.species = import_dex.Dex.species.get(species).name;
          set.name = name.trim();
        } else {
          set.species = import_dex.Dex.species.get(line).name;
          set.name = "";
        }
      } else if (line.startsWith("Trait: ")) {
        line = line.slice(7);
        set.ability = aggressive ? (0, import_dex.toID)(line) : line;
      } else if (line.startsWith("Ability: ")) {
        line = line.slice(9);
        set.ability = aggressive ? (0, import_dex.toID)(line) : line;
      } else if (line === "Shiny: Yes") {
        set.shiny = true;
      } else if (line.startsWith("Level: ")) {
        line = line.slice(7);
        set.level = +line;
      } else if (line.startsWith("Happiness: ")) {
        line = line.slice(11);
        set.happiness = +line;
      } else if (line.startsWith("Pokeball: ")) {
        line = line.slice(10);
        set.pokeball = aggressive ? (0, import_dex.toID)(line) : line;
      } else if (line.startsWith("Hidden Power: ")) {
        line = line.slice(14);
        set.hpType = aggressive ? (0, import_dex.toID)(line) : line;
      } else if (line.startsWith("Tera Type: ")) {
        line = line.slice(11);
        set.teraType = aggressive ? line.replace(/[^a-zA-Z0-9]/g, "") : line;
      } else if (line === "Gigantamax: Yes") {
        set.gigantamax = true;
      } else if (line.startsWith("EVs: ")) {
        line = line.slice(5);
        const evLines = line.split("/");
        set.evs = { hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0 };
        for (const evLine of evLines) {
          const [statValue, statName] = evLine.trim().split(" ");
          const statid = import_dex.Dex.stats.getID(statName);
          if (!statid)
            continue;
          const value = parseInt(statValue);
          set.evs[statid] = value;
        }
      } else if (line.startsWith("IVs: ")) {
        line = line.slice(5);
        const ivLines = line.split("/");
        set.ivs = { hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31 };
        for (const ivLine of ivLines) {
          const [statValue, statName] = ivLine.trim().split(" ");
          const statid = import_dex.Dex.stats.getID(statName);
          if (!statid)
            continue;
          let value = parseInt(statValue);
          if (isNaN(value))
            value = 31;
          set.ivs[statid] = value;
        }
      } else if (/^[A-Za-z]+ (N|n)ature/.test(line)) {
        let natureIndex = line.indexOf(" Nature");
        if (natureIndex === -1)
          natureIndex = line.indexOf(" nature");
        if (natureIndex === -1)
          return;
        line = line.substr(0, natureIndex);
        if (line !== "undefined")
          set.nature = aggressive ? (0, import_dex.toID)(line) : line;
      } else if (line.startsWith("-") || line.startsWith("~")) {
        line = line.slice(line.charAt(1) === " " ? 2 : 1);
        if (line.startsWith("Hidden Power [")) {
          const hpType = line.slice(14, -1);
          line = "Hidden Power " + hpType;
          if (!set.ivs && import_dex.Dex.types.isName(hpType)) {
            set.ivs = { hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31 };
            const hpIVs = import_dex.Dex.types.get(hpType).HPivs || {};
            for (const statid in hpIVs) {
              set.ivs[statid] = hpIVs[statid];
            }
          }
        }
        if (line === "Frustration" && set.happiness === undefined) {
          set.happiness = 0;
        }
        set.moves.push(line);
      }
    }
    import(buffer, aggressive) {
      const sanitize = aggressive ? import_dex.toID : import_dex.Dex.getName;
      if (buffer.startsWith("[")) {
        try {
          const team = JSON.parse(buffer);
          if (!Array.isArray(team))
            throw new Error(`Team should be an Array but isn't`);
          for (const set of team) {
            set.name = sanitize(set.name);
            set.species = sanitize(set.species);
            set.item = sanitize(set.item);
            set.ability = sanitize(set.ability);
            set.gender = sanitize(set.gender);
            set.nature = sanitize(set.nature);
            const evs = { hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0 };
            if (set.evs) {
              for (const statid in evs) {
                if (typeof set.evs[statid] === "number")
                  evs[statid] = set.evs[statid];
              }
            }
            set.evs = evs;
            const ivs = { hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31 };
            if (set.ivs) {
              for (const statid in ivs) {
                if (typeof set.ivs[statid] === "number")
                  ivs[statid] = set.ivs[statid];
              }
            }
            set.ivs = ivs;
            if (!Array.isArray(set.moves)) {
              set.moves = [];
            } else {
              set.moves = set.moves.map(sanitize);
            }
          }
          return team;
        } catch {
        }
      }
      const lines = buffer.split("\n");
      const sets = [];
      let curSet = null;
      while (lines.length && !lines[0])
        lines.shift();
      while (lines.length && !lines[lines.length - 1])
        lines.pop();
      if (lines.length === 1 && lines[0].includes("|")) {
        return this.unpack(lines[0]);
      }
      for (let line of lines) {
        line = line.trim();
        if (line === "" || line === "---") {
          curSet = null;
        } else if (line.startsWith("===")) {
        } else if (!curSet) {
          curSet = {
            name: "",
            species: "",
            item: "",
            ability: "",
            gender: "",
            nature: "",
            evs: { hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0 },
            ivs: { hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31 },
            level: 100,
            moves: []
          };
          sets.push(curSet);
          this.parseExportedTeamLine(line, true, curSet, aggressive);
        } else {
          this.parseExportedTeamLine(line, false, curSet, aggressive);
        }
      }
      return sets;
    }
    getGenerator(format, seed = null) {
      let TeamGenerator;
      format = import_dex.Dex.formats.get(format);
      if ((0, import_dex.toID)(format).includes("gen9computergeneratedteams")) {
        TeamGenerator = __require(import_dex.Dex.forFormat(format).dataDir + "/cg-teams").default;
      } else if ((0, import_dex.toID)(format).includes("gen9superstaffbrosultimate")) {
        TeamGenerator = require_random_teams().default;
      } else if ((0, import_dex.toID)(format).includes("gen9babyrandombattle")) {
        TeamGenerator = require_teams2().default;
      } else if ((0, import_dex.toID)(format).includes("gen9randombattle") && format.ruleTable?.has("+pokemontag:cap")) {
        TeamGenerator = require_teams3().default;
      } else {
        TeamGenerator = __require(`../data/random-battles/${format.mod}/teams`).default;
      }
      return new TeamGenerator(format, seed);
    }
    generate(format, options = null) {
      return this.getGenerator(format, options?.seed).getTeam(options);
    }
  };
  var teams_default = Teams;
});

// index.ts
var TeamsImport = __toESM(require_teams4(), 1);
function log(message2) {
  console.error(`[Bun ${new Date().toISOString()}] ${message2}`);
}
var Teams2 = TeamsImport.Teams;
log("Bun script started. Waiting for input...");
for await (const line of console) {
  log(`Received input: ${line.slice(0, 100)}...`);
  if (line === "QUIT") {
    log("Bun script exited.");
    break;
  }
  let current_team_name = undefined;
  try {
    const teams = line.split("\\n");
    log(`Processing ${teams.length} team(s)`);
    const results = [];
    for (const team of teams) {
      if (team.length === 0) {
        continue;
      }
      const format_and_name = team.split("|")[0];
      const [format, name] = format_and_name.split("]");
      current_team_name = name;
      const teamWithoutFormatAndName = team.slice(format_and_name.length + 1);
      const result = Teams2.unpack(teamWithoutFormatAndName);
      if (result === null) {
        throw new Error("Invalid team");
      }
      const readable = Teams2.export(result);
      results.push({ format, name, mons: result, text: readable });
    }
    console.log(JSON.stringify(results));
    log("Finished processing. Sent results.");
  } catch (error) {
    log(`Error processing input: ${error.message}`);
    if (current_team_name) {
      log(`Failed to parse team: ${current_team_name}`);
    }
    console.log(JSON.stringify({ error: error.message }));
  }
  console.log("END_OF_OUTPUT");
  log("Waiting for next input...");
}
log("Bun script exited.");
